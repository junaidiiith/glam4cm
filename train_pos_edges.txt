Scope()<edge_begin><edge_end>Variable()
Statechart()<edge_begin><edge_end>Expression Element(expression)
Final State()<edge_begin><edge_end>Vertex()
Pseudostate()<edge_begin><edge_end>Vertex()
Event()<edge_begin><edge_end>Declaration()
Declaration()<edge_begin><edge_end>Named Element(name)
Reaction()<edge_begin><edge_end>Trigger()
Scope()<edge_begin><edge_end>Declaration()
Reactive Element()<edge_begin><edge_end>Reaction()
Statechart()<edge_begin><edge_end>Named Element(name)
Transition(priority)<edge_begin><edge_end>Reaction()
Entry(kind)<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Region(priority)
Synchronization()<edge_begin><edge_end>Pseudostate()
Junction()<edge_begin><edge_end>Pseudostate()
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Statechart()<edge_begin><edge_end>Reactive Element()
Scope()<edge_begin><edge_end>Event()
Variable()<edge_begin><edge_end>Declaration()
Reaction()<edge_begin><edge_end>Effect()
Vertex()<edge_begin><edge_end>Named Element(name)
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Expression Element(expression)
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Region(priority)<edge_begin><edge_end>Vertex()
Transition(priority)<edge_begin><edge_end>Expression Element(expression)
Choice()<edge_begin><edge_end>Pseudostate()
Vertex()<edge_begin><edge_end>Region(priority)
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Vertex()
Boolean Expression(value)<edge_begin><edge_end>Value()
Exists Expression(is Not)<edge_begin><edge_end>Select Statement()
In Query Expression()<edge_begin><edge_end>In Expression(is Not)
Select Statement()<edge_begin><edge_end>Order Clause(is Asc, is Desc)
Set Clause()<edge_begin><edge_end>Update Item()
In Expression(is Not)<edge_begin><edge_end>Expression()
Delete Clause()<edge_begin><edge_end>From Clause()
Like Expression(is Not, pattern)<edge_begin><edge_end>Variable()
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Exists Expression(is Not)<edge_begin><edge_end>Expression()
Between Expression(is Not)<edge_begin><edge_end>Variable()
Min Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Order Clause(is Asc, is Desc)<edge_begin><edge_end>Order Item(feature)
Null Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Update Clause()<edge_begin><edge_end>From Entry()
Select Statement()<edge_begin><edge_end>M Query()
Any Expression()<edge_begin><edge_end>Expression()
Update Item()<edge_begin><edge_end>Value()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Delete Statement()<edge_begin><edge_end>M Query()
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Operator Expression(operator)<edge_begin><edge_end>Expression Term()
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Some Expression()<edge_begin><edge_end>Expression()
Collection Expression(is Not)<edge_begin><edge_end>Variable()
All Expression()<edge_begin><edge_end>Expression()
Between Expression(is Not)<edge_begin><edge_end>Value()
Select Constructor Expression(name)<edge_begin><edge_end>Select Expression()
Select From Clause()<edge_begin><edge_end>Select Clause(is Distinct)
From Clause()<edge_begin><edge_end>From Entry()
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Delete Statement()<edge_begin><edge_end>Delete Clause()
Query Module()<edge_begin><edge_end>Named Query(name)
Select Statement()<edge_begin><edge_end>Expression Term()
Join()<edge_begin><edge_end>From Join(is Fetch)
Null Expression(value)<edge_begin><edge_end>Value()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable Declaration(name)
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
Update Statement()<edge_begin><edge_end>Update Clause()
Parameter Expression(name)<edge_begin><edge_end>Variable()
Select Statement()<edge_begin><edge_end>Select From Clause()
Max Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Some Expression()<edge_begin><edge_end>Select Statement()
Update Statement()<edge_begin><edge_end>M Query()
Named Query(name)<edge_begin><edge_end>M Query()
Null Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Between Expression(is Not)<edge_begin><edge_end>Expression()
In Seq Expression()<edge_begin><edge_end>Variable()
Any Expression()<edge_begin><edge_end>Select Statement()
Expression Term()<edge_begin><edge_end>Expression()
Select From Clause()<edge_begin><edge_end>From Clause()
Collection Expression(is Not)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Order Item(feature)<edge_begin><edge_end>From Entry()
In Seq Expression()<edge_begin><edge_end>In Expression(is Not)
And Expression()<edge_begin><edge_end>Expression()
Having Clause()<edge_begin><edge_end>Expression()
String Expression(value)<edge_begin><edge_end>Value()
Select Statement()<edge_begin><edge_end>Having Clause()
From Collection()<edge_begin><edge_end>From Entry()
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Or Expression()<edge_begin><edge_end>Expression()
From Class(type)<edge_begin><edge_end>From Entry()
From Collection()<edge_begin><edge_end>Alias Attribute Expression(attributes)
Update Item()<edge_begin><edge_end>Alias Attribute Expression(attributes)
In Query Expression()<edge_begin><edge_end>Select Statement()
Query Module()<edge_begin><edge_end>M Query()
Function(name)<edge_begin><edge_end>Variable()
From Entry()<edge_begin><edge_end>Variable Declaration(name)
From Class(type)<edge_begin><edge_end>From Join(is Fetch)
From Join(is Fetch)<edge_begin><edge_end>Variable Declaration(name)
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Reaction Trigger()<edge_begin><edge_end>Expression()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
Reaction Effect()<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>State Specification()
Hex Literal(value)<edge_begin><edge_end>Literal()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>Def Root()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Transition Root()<edge_begin><edge_end>Transition Specification()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Def Root()
Parenthesized Expression()<edge_begin><edge_end>Expression()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Time Event Spec(type, unit)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Root()<edge_begin><edge_end>Def Root()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Conditional Expression()<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Def Root()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
String Literal(value)<edge_begin><edge_end>Literal()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Element Reference Expression(operation Call)<edge_begin><edge_end>Expression()
Int Literal(value)<edge_begin><edge_end>Literal()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Subsubsection()<edge_begin><edge_end>Fragment()
Image(width, original Source)<edge_begin><edge_end>Named Element(id, name)
Subsection()<edge_begin><edge_end>Text Fragment Container()
Subsection()<edge_begin><edge_end>Fragment()
Subsubsection()<edge_begin><edge_end>Text Fragment Container()
XML(context Class Name, resource)<edge_begin><edge_end>Named Element(id, name)
Section()<edge_begin><edge_end>Named Element(id, name)
Image(width, original Source)<edge_begin><edge_end>Fragment()
Documentation(title)<edge_begin><edge_end>Section()
Table()<edge_begin><edge_end>Table Row(row Cells)
Paragraph()<edge_begin><edge_end>Fragment()
Paragraph()<edge_begin><edge_end>Text Fragment Container()
Table()<edge_begin><edge_end>Fragment()
Section()<edge_begin><edge_end>Text Fragment Container()
List Item(text)<edge_begin><edge_end>Text Fragment Container()
Table()<edge_begin><edge_end>Table Header(header Cells)
Term Entry(description)<edge_begin><edge_end>Named Element(id, name)
List()<edge_begin><edge_end>List Item(text)
List()<edge_begin><edge_end>Fragment()
Subsubsection()<edge_begin><edge_end>Named Element(id, name)
Net()<edge_begin><edge_end>Place()
Arc(weight)<edge_begin><edge_end>Integer()
Place()<edge_begin><edge_end>TP Arc()
Place()<edge_begin><edge_end>Token()
Place()<edge_begin><edge_end>PT Arc()
TP Arc()<edge_begin><edge_end>Transition()
TP Arc()<edge_begin><edge_end>Arc(weight)
Transition()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>Net()
Transition()<edge_begin><edge_end>Net()
PT Arc()<edge_begin><edge_end>Place()
TP Arc()<edge_begin><edge_end>Place()
PT Arc()<edge_begin><edge_end>Transition()
Net()<edge_begin><edge_end>Transition()
Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)<edge_begin><edge_end>Boolean()
Footer()<edge_begin><edge_end>Page Setup()
Header Or Footer Elt(margin, data)<edge_begin><edge_end>Double()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Comment(author, show Always)<edge_begin><edge_end>String()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Boolean()
Style Type(id, name)<edge_begin><edge_end>Borders Type()
Styles Collection()<edge_begin><edge_end>Workbook()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Names Type()<edge_begin><edge_end>Named Range(name, refers To, hidden)
Style Type(id, name)<edge_begin><edge_end>Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)
Page Setup()<edge_begin><edge_end>Header()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Data()<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Double()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>String()
Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)<edge_begin><edge_end>String()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>String()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)<edge_begin><edge_end>Double()
Border Type(position, color, line Style, weight)<edge_begin><edge_end>Double()
Comment(author, show Always)<edge_begin><edge_end>Data()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Borders Type()<edge_begin><edge_end>Style Type(id, name)
Style Type(id, name)<edge_begin><edge_end>Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Workbook()<edge_begin><edge_end>Styles Collection()
Names Type()<edge_begin><edge_end>Workbook()
Interior Type(color, pattern, pattern Color)<edge_begin><edge_end>String()
Number Value(value)<edge_begin><edge_end>Value Type()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Style Type(id, name)<edge_begin><edge_end>Styled Element()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Value Type()<edge_begin><edge_end>Data()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>String()
Header()<edge_begin><edge_end>Page Setup()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Workbook()
Style Type(id, name)<edge_begin><edge_end>Styles Collection()
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)
String Value(value)<edge_begin><edge_end>String()
Footer()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Named Range(name, refers To, hidden)<edge_begin><edge_end>Names Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Page Setup()<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Protection Type(protected)<edge_begin><edge_end>Boolean()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Boolean()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Page Setup()
Table Element(index)<edge_begin><edge_end>Styled Element()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>String()
Named Range(name, refers To, hidden)<edge_begin><edge_end>String()
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Data()<edge_begin><edge_end>Comment(author, show Always)
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Named Range(name, refers To, hidden)<edge_begin><edge_end>Boolean()
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>Page Setup()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Styled Element()<edge_begin><edge_end>Style Type(id, name)
Version Type(n, nn)<edge_begin><edge_end>Integer()
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Double()
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Page Setup()
Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)<edge_begin><edge_end>Boolean()
Boolean Value(value)<edge_begin><edge_end>Value Type()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Styles Collection()<edge_begin><edge_end>Style Type(id, name)
Interior Type(color, pattern, pattern Color)<edge_begin><edge_end>Style Type(id, name)
Style Type(id, name)<edge_begin><edge_end>Number Format Type(format)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Header()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Double()
Custom Document Property(name)<edge_begin><edge_end>String()
Table Element(index)<edge_begin><edge_end>Integer()
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Border Type(position, color, line Style, weight)<edge_begin><edge_end>Borders Type()
Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)<edge_begin><edge_end>Double()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Style Type(id, name)<edge_begin><edge_end>Interior Type(color, pattern, pattern Color)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Protection Type(protected)<edge_begin><edge_end>Style Type(id, name)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
String Value(value)<edge_begin><edge_end>Value Type()
Smart Tags Collection()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Page Setup()<edge_begin><edge_end>Page Margins Info(left, right, top, bottom)
Workbook()<edge_begin><edge_end>Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)<edge_begin><edge_end>Style Type(id, name)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Style Type(id, name)<edge_begin><edge_end>Style Type(id, name)
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Integer()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Boolean()
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Empty Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Any Expression()<edge_begin><edge_end>Select Statement()
Update Item()<edge_begin><edge_end>Value()
Named Query(name)<edge_begin><edge_end>JPQL Query()
Join()<edge_begin><edge_end>From Join(is Fetch)
Value()<edge_begin><edge_end>Variable()
Between Expression(is Not)<edge_begin><edge_end>Variable()
Collection Expression(is Not)<edge_begin><edge_end>Variable()
Collection Expression(is Not)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Class(type)<edge_begin><edge_end>From Join(is Fetch)
Where Clause()<edge_begin><edge_end>Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable Declaration(name)
Select Statement()<edge_begin><edge_end>Having Clause()
Integer Expression(value)<edge_begin><edge_end>Value()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable()
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Some Expression()<edge_begin><edge_end>Select Statement()
All Expression()<edge_begin><edge_end>Expression()
Variable()<edge_begin><edge_end>Expression Term()
Query Module()<edge_begin><edge_end>Named Query(name)
Min Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Operator Expression(operator)<edge_begin><edge_end>Variable()
Having Clause()<edge_begin><edge_end>Expression()
Query Module()<edge_begin><edge_end>JPQL Query()
And Expression()<edge_begin><edge_end>Expression()
Parameter Expression(name)<edge_begin><edge_end>Variable()
Operator Expression(operator)<edge_begin><edge_end>Expression()
Or Expression()<edge_begin><edge_end>Expression()
Null Expression(value)<edge_begin><edge_end>Value()
Update Statement()<edge_begin><edge_end>JPQL Query()
From Class(type)<edge_begin><edge_end>From Entry()
Null Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Max Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
In Query Expression()<edge_begin><edge_end>In Expression(is Not)
Between Expression(is Not)<edge_begin><edge_end>Expression()
Like Expression(is Not, pattern)<edge_begin><edge_end>Expression()
Set Clause()<edge_begin><edge_end>Update Item()
Select Statement()<edge_begin><edge_end>Expression Term()
Order Clause(is Asc, is Desc)<edge_begin><edge_end>Order Item(feature)
Like Expression(is Not, pattern)<edge_begin><edge_end>Variable()
In Expression(is Not)<edge_begin><edge_end>Expression()
Select Statement()<edge_begin><edge_end>Order Clause(is Asc, is Desc)
Date Time Expression(value)<edge_begin><edge_end>Value()
JPQL Query()<edge_begin><edge_end>Where Clause()
In Expression(is Not)<edge_begin><edge_end>Variable()
Exists Expression(is Not)<edge_begin><edge_end>Expression()
Select From Clause()<edge_begin><edge_end>Select Clause(is Distinct)
Select Constructor Expression(name)<edge_begin><edge_end>Select Expression()
Count Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
In Query Expression()<edge_begin><edge_end>Select Statement()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(attributes)
String Expression(value)<edge_begin><edge_end>Value()
Select Statement()<edge_begin><edge_end>Select From Clause()
In Seq Expression()<edge_begin><edge_end>In Expression(is Not)
In Seq Expression()<edge_begin><edge_end>Variable()
Update Statement()<edge_begin><edge_end>Update Clause()
Update Clause()<edge_begin><edge_end>From Entry()
Order Item(feature)<edge_begin><edge_end>From Entry()
Query Module()<edge_begin><edge_end>Import(import URI)
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
From Collection()<edge_begin><edge_end>From Entry()
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
From Clause()<edge_begin><edge_end>From Entry()
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Boolean Expression(value)<edge_begin><edge_end>Value()
Expression Term()<edge_begin><edge_end>Expression()
Update Statement()<edge_begin><edge_end>Set Clause()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Between Expression(is Not)<edge_begin><edge_end>Value()
Select From Clause()<edge_begin><edge_end>From Clause()
Preferences(install Folder, accepted Licenses)<edge_begin><edge_end>License Info()
Maven Import Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Targlet()<edge_begin><edge_end>Targlet Data(name, active Repository List, include Sources, include All Platforms)
Component Extension()<edge_begin><edge_end>Installable Unit(i D, version Range)
Key Binding Task(scheme, platform, locale, keys, command)<edge_begin><edge_end>Key Binding Context(i D)
Eclipse Ini Task(option, value, vm)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Target Platform Task(name)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>Automatic Source Locator(root Folder, locate Nested Projects)
Targlet Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
P2Task(license Confirmation Disabled, merge Disabled)<edge_begin><edge_end>P2Repository(u RL)
Preferences(install Folder, accepted Licenses)<edge_begin><edge_end>Scope Root()
Link Location Task(path, name)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Git Clone Task(location, remote Name, remote URI, push URI, user ID, checkout Branch)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Scope Root()<edge_begin><edge_end>Setup Task Container()
Key Binding Task(scheme, platform, locale, keys, command)<edge_begin><edge_end>Command Parameter(i D, value)
Projects Import Task()<edge_begin><edge_end>Automatic Source Locator(root Folder, locate Nested Projects)
File Mapping(file Pattern, default Editor ID)<edge_begin><edge_end>File Editor(i D)
P2Task(license Confirmation Disabled, merge Disabled)<edge_begin><edge_end>Installable Unit(i D, version Range)
Mylyn Queries Task(connector Kind, repository URL, user ID, password)<edge_begin><edge_end>Query(summary, u RL)
Maven Import Task()<edge_begin><edge_end>Automatic Source Locator(root Folder, locate Nested Projects)
Materialization Task()<edge_begin><edge_end>Basic Materialization Task(target Platform, bundle Pool)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>Repository List(name)
JRE Task(version, location)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Project(name, label)<edge_begin><edge_end>Eclipse(version)
Component Definition(i D, version)<edge_begin><edge_end>Version()
Working Set Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Eclipse Preference Task(key, value)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>P2Repository(u RL)
Context Variable Task(type, name, value, string Substitution, label)<edge_begin><edge_end>Variable Choice(value, label)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>Installable Unit(i D, version Range)
Query(summary, u RL)<edge_begin><edge_end>Query Attribute(key, value)
Setup Task(disabled, scope, excluded Triggers, documentation)<edge_begin><edge_end>Trigger Set()
Installable Unit(i D, version Range)<edge_begin><edge_end>Version Range()
Text Modify Task(u RL, encoding)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Mylyn Query Task(connector Kind, summary, repository URL, relative URL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Eclipse(version)<edge_begin><edge_end>Configuration()
Manual Source Locator(location, component Name Pattern, component Types)<edge_begin><edge_end>Source Locator()
Buckminster Import Task(mspec)<edge_begin><edge_end>Basic Materialization Task(target Platform, bundle Pool)
Compound Setup Task(name)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Project Set Import Task(u RL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Redirection Task(source URL, target URL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Configurable Item()<edge_begin><edge_end>Scope Root()
Eclipse(version)<edge_begin><edge_end>Configurable Item()
Setup Task(disabled, scope, excluded Triggers, documentation)<edge_begin><edge_end>Configurable Item()
Component Definition(i D, version)<edge_begin><edge_end>Component Extension()
P2Task(license Confirmation Disabled, merge Disabled)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Repository List(name)<edge_begin><edge_end>P2Repository(u RL)
Compound Setup Task(name)<edge_begin><edge_end>Setup Task Container()
Automatic Source Locator(root Folder, locate Nested Projects)<edge_begin><edge_end>Source Locator()
Mylyn Queries Task(connector Kind, repository URL, user ID, password)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
File Associations Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Text Modify Task(u RL, encoding)<edge_begin><edge_end>Text Modification(pattern, substitutions)
Setup Task Container()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Setup()<edge_begin><edge_end>Eclipse(version)
Resource Copy Task(source URL, target URL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Key Binding Task(scheme, platform, locale, keys, command)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Project(name, label)<edge_begin><edge_end>Configuration()
Materialization Task()<edge_begin><edge_end>Component(name, type, version Range)
File Associations Task()<edge_begin><edge_end>File Mapping(file Pattern, default Editor ID)
Resource Creation Task(content, target URL, encoding)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Branch(name)<edge_begin><edge_end>Eclipse(version)
Targlet Task()<edge_begin><edge_end>Targlet Data(name, active Repository List, include Sources, include All Platforms)
File Association Task(file Pattern, default Editor ID)<edge_begin><edge_end>File Editor(i D)
Meta Index()<edge_begin><edge_end>Index(name, u RI, old UR Is)
Project(name, label)<edge_begin><edge_end>Branch(name)
Materialization Task()<edge_begin><edge_end>P2Repository(u RL)
Mylyn Builds Task(connector Kind, server URL, user ID, password)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Paper(name)
Position(name, description)<edge_begin><edge_end>Position(name, description)
Publication Structure()<edge_begin><edge_end>Position(name, description)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Collaboration(ratio)<edge_begin><edge_end>Paper(name)
Paper(name)<edge_begin><edge_end>Researcher(name, for Name)
Paper(name)<edge_begin><edge_end>Paper(name)
Publication Structure()<edge_begin><edge_end>Paper(name)
Action(description)<edge_begin><edge_end>Agent(name)
Subject()<edge_begin><edge_end>Agent(name)
Basic Flow()<edge_begin><edge_end>Use Case(name, description)
Use Case(name, description)<edge_begin><edge_end>Use Case Model()
Include()<edge_begin><edge_end>Step(name)
Use Case(name, description)<edge_begin><edge_end>Actor()
Basic Flow()<edge_begin><edge_end>Flow Of Events(name)
Include()<edge_begin><edge_end>Use Case(name, description)
Agent(name)<edge_begin><edge_end>Action(description)
Alternative Flow()<edge_begin><edge_end>Flow Of Events(name)
Statement()<edge_begin><edge_end>Step(name)
Loop Statement()<edge_begin><edge_end>Statement()
Statement()<edge_begin><edge_end>Condition(expression)
Step(name)<edge_begin><edge_end>Alternative Flow()
Conditional Statement()<edge_begin><edge_end>Statement()
Use Case(name, description)<edge_begin><edge_end>Include()
Use Case(name, description)<edge_begin><edge_end>Basic Flow()
Actor()<edge_begin><edge_end>Use Case Model()
Use Case(name, description)<edge_begin><edge_end>Alternative Flow()
Subject()<edge_begin><edge_end>Use Case Model()
Actor()<edge_begin><edge_end>Agent(name)
Alternative Flow()<edge_begin><edge_end>Step(name)
Use Case Model()<edge_begin><edge_end>Subject()
Alternative Flow()<edge_begin><edge_end>Condition(expression)
Step(name)<edge_begin><edge_end>Flow Of Events(name)
Actor()<edge_begin><edge_end>Use Case(name, description)
Use Case Model()<edge_begin><edge_end>Use Case(name, description)
Excursion()<edge_begin><edge_end>Social Event()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Activity(is dated on)<edge_begin><edge_end>human(e-mail, last name, first name)
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Trip()<edge_begin><edge_end>Social event()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Research Institute()<edge_begin><edge_end>Academic Institution()
Document()<edge_begin><edge_end>Item()
Conference volume(has a location)<edge_begin><edge_end>Committee()
conference setup()<edge_begin><edge_end>Topic()
Call for participation()<edge_begin><edge_end>Conference document()
Simulating()<edge_begin><edge_end>Research()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Undecided Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
conference setup()<edge_begin><edge_end>Thing()
Track()<edge_begin><edge_end>Scientific Event()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Fee()<edge_begin><edge_end>Money()
article()<edge_begin><edge_end>Document()
summary of reviews()<edge_begin><edge_end>Activity(is dated on)
Regular()<edge_begin><edge_end>Participant(early Registration)
Review()<edge_begin><edge_end>Conference document()
Flyer()<edge_begin><edge_end>Document()
Social program()<edge_begin><edge_end>Conference activity()
Participant(early Registration)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
rejection notification email()<edge_begin><edge_end>notification email()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Rejection()<edge_begin><edge_end>Decision()
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Industry Organization()<edge_begin><edge_end>Organization()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Government Organization()<edge_begin><edge_end>Organization()
Dining Place()<edge_begin><edge_end>Place()
IASTED non member()<edge_begin><edge_end>Delegate()
Review()<edge_begin><edge_end>Possible Reviewer()
Co-chair()<edge_begin><edge_end>Committee()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Bid()
camera-ready submission date()<edge_begin><edge_end>date()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Delegate()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Tutorial speaker()<edge_begin><edge_end>Author()
Publication()<edge_begin><edge_end>Item()
Book proceeding()<edge_begin><edge_end>Publication()
paper assignment()<edge_begin><edge_end>Activity(is dated on)
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Track()<edge_begin><edge_end>Conference part()
Hotel presenter()<edge_begin><edge_end>Delegate()
Building()<edge_begin><edge_end>Place()
PC Chair()<edge_begin><edge_end>PC Member()
Committee()<edge_begin><edge_end>Chair()
Video presentation()<edge_begin><edge_end>Presentation()
Personal Review History()<edge_begin><edge_end>Personal History()
Audiovisual equipment()<edge_begin><edge_end>Item()
Role()<edge_begin><edge_end>Administrator()
External Reviewer()<edge_begin><edge_end>Reviewer()
Conference building()<edge_begin><edge_end>Building()
Abstract()<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Scholar()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Committe Role()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>User()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
summary of reviews()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>Activity(is dated on)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Place()<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Item()
Van()<edge_begin><edge_end>Transport vehicle()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Student()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
review form()<edge_begin><edge_end>article()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Student lecturer()<edge_begin><edge_end>Lecturer()
Reception()<edge_begin><edge_end>Social Event()
Senior Program Committee member()<edge_begin><edge_end>Activity(is dated on)
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Sponsor state()<edge_begin><edge_end>State()
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Written contribution()<edge_begin><edge_end>Conference contribution()
Administrative event()<edge_begin><edge_end>Administrative event()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Multi-author Volume()<edge_begin><edge_end>Document()
Conference Banquet()<edge_begin><edge_end>Social Event()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Presenter state()<edge_begin><edge_end>State()
Review preference(has a degree)<edge_begin><edge_end>Integer()
acceptance notification email()<edge_begin><edge_end>notification email()
managing of conference process()<edge_begin><edge_end>Activity(is dated on)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Departure()<edge_begin><edge_end>Activity after conference()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Meal Event()<edge_begin><edge_end>Meal Menu()
Deadline()<edge_begin><edge_end>date()
Poster Session()<edge_begin><edge_end>Session()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
program()<edge_begin><edge_end>session()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Bid()<edge_begin><edge_end>Reviewer()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Multimedia Topic()<edge_begin><edge_end>Topic()
Activity before conference()<edge_begin><edge_end>Activity(is dated on)
Organisation()<edge_begin><edge_end>Thing()
Sponzorship()<edge_begin><edge_end>Money()
Active Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>String()
Invitation letter()<edge_begin><edge_end>Document()
Event Approval()<edge_begin><edge_end>Activity(is dated on)
CAD Topic()<edge_begin><edge_end>Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Research()<edge_begin><edge_end>Activity before conference()
Workshop()<edge_begin><edge_end>Conference part()
Slide Set()<edge_begin><edge_end>Document()
Viza()<edge_begin><edge_end>Document()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Tutorial()<edge_begin><edge_end>Conference part()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Sponsor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Activity(is dated on)<edge_begin><edge_end>Thing()
Conference part()<edge_begin><edge_end>Topic()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Member()<edge_begin><edge_end>Participant(early Registration)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Conference document()
Abstract()<edge_begin><edge_end>Extended abstract()
Conference city()<edge_begin><edge_end>City()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Conference Chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Presentation()<edge_begin><edge_end>Conference activity()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Renting()<edge_begin><edge_end>Activity before conference()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Inforamtion()
Regular contribution()<edge_begin><edge_end>Written contribution()
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Hotel fee()<edge_begin><edge_end>Fee()
chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
TPC Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Free Time Break()<edge_begin><edge_end>Break Event()
Volunteer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Individual Presentation()<edge_begin><edge_end>Document()
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Submissions deadline()<edge_begin><edge_end>Deadline()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Integer()
Reviewer()<edge_begin><edge_end>External Reviewer()
Banquet()<edge_begin><edge_end>Social event()
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Assistance()<edge_begin><edge_end>Help Request()
Contribution co-author()<edge_begin><edge_end>Regular author()
Cryptography Topic()<edge_begin><edge_end>Topic()
Reviewer()<edge_begin><edge_end>Administrator()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Cheque()<edge_begin><edge_end>Payment document()
Item()<edge_begin><edge_end>Activity(is dated on)
Activity(is dated on)<edge_begin><edge_end>Activity(is dated on)
Presentation()<edge_begin><edge_end>Active conference participant()
Contact Person URL()<edge_begin><edge_end>URL()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Computer()<edge_begin><edge_end>Audiovisual equipment()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Money()
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>Author()
bidding of reviewer()<edge_begin><edge_end>Activity(is dated on)
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
article()<edge_begin><edge_end>human(e-mail, last name, first name)
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Departure tax()<edge_begin><edge_end>Tax()
Author Role()<edge_begin><edge_end>Role()
Conference Session()<edge_begin><edge_end>Session()
Reviewer()<edge_begin><edge_end>Review()
Industrial Session()<edge_begin><edge_end>Conference Session()
Event Tracks()<edge_begin><edge_end>Event Setup()
Paper Presentation()<edge_begin><edge_end>Academic Event()
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Organising Agency()<edge_begin><edge_end>Organisation()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Accepted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Possible Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Author()
Committee()<edge_begin><edge_end>User()
abstract submission date()<edge_begin><edge_end>date()
Active conference participant()<edge_begin><edge_end>Presentation()
Submitted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Review()<edge_begin><edge_end>Activity(is dated on)
Conference document()<edge_begin><edge_end>date()
Final manuscript()<edge_begin><edge_end>Submission()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Brief introduction for Session chair()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Tax()<edge_begin><edge_end>Money()
Feature Request()<edge_begin><edge_end>Help Request()
Workshop()<edge_begin><edge_end>Scientific Event()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
Corresponding Author()<edge_begin><edge_end>Author()
Conference Dinner()<edge_begin><edge_end>Meal Event()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Administrator()
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Sponsor company house()<edge_begin><edge_end>Building()
Conference Hiker()<edge_begin><edge_end>Delegate()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Plenary lecture()<edge_begin><edge_end>Lecture()
PC Chair()<edge_begin><edge_end>Conference Participant()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Event URL()<edge_begin><edge_end>URL()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Author()<edge_begin><edge_end>User()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Pending Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
City()<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference Trip()<edge_begin><edge_end>Social Event()
Working event()<edge_begin><edge_end>Administrative event()
Rated Papers()<edge_begin><edge_end>Active Paper()
Misc()<edge_begin><edge_end>Help Request()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Registration fee()<edge_begin><edge_end>Fee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Payment document()<edge_begin><edge_end>Document()
Notification Email()<edge_begin><edge_end>Email()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Sponsor city()<edge_begin><edge_end>City()
Activity(is dated on)<edge_begin><edge_end>intensity()
Active conference participant()<edge_begin><edge_end>Conference participant()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Reviewer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Author()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Trip city()<edge_begin><edge_end>City()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Administrator()<edge_begin><edge_end>Role()
Reviewing event()<edge_begin><edge_end>Administrative event()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Regular Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Performance Topic()<edge_begin><edge_end>Topic()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Single hotel room()<edge_begin><edge_end>Hotel room()
Reviewed contribution()<edge_begin><edge_end>Review()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Card()<edge_begin><edge_end>Item()
Tutorial()<edge_begin><edge_end>Session()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Chairman()<edge_begin><edge_end>Conference Member()
Research Topic()<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>String()
Academia Organization()<edge_begin><edge_end>Organization()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
OC Member()<edge_begin><edge_end>Conference Participant()
Presenter city()<edge_begin><edge_end>City()
Conference state()<edge_begin><edge_end>State()
Workshop()<edge_begin><edge_end>Academic Event()
Chair()<edge_begin><edge_end>Committee()
end date of conference()<edge_begin><edge_end>date of conference()
chair()<edge_begin><edge_end>program()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Fee for extra trip()<edge_begin><edge_end>Fee()
IASTED member()<edge_begin><edge_end>Delegate()
Rejected Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Session room()<edge_begin><edge_end>Place()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Neutral Review()<edge_begin><edge_end>Review()
Money()<edge_begin><edge_end>Money()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Workshop Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Textual Review Question()<edge_begin><edge_end>Review Question()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Subject Area()
Conference www(has a URL)<edge_begin><edge_end>String()
Plenary lecture speaker()<edge_begin><edge_end>Author()
Committee()<edge_begin><edge_end>Co-chair()
Head Role()<edge_begin><edge_end>Role()
Member PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Document()<edge_begin><edge_end>Thing()
OC Chair()<edge_begin><edge_end>OC Member()
Review()<edge_begin><edge_end>classification()
Presenter house()<edge_begin><edge_end>Building()
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Signal Processing Topic()<edge_begin><edge_end>Topic()
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Credit card()<edge_begin><edge_end>Card()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Workshop()<edge_begin><edge_end>Working event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Administrator()<edge_begin><edge_end>Reviewer()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Review()<edge_begin><edge_end>article()
Personal Publication History()<edge_begin><edge_end>Personal History()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Communications Topic()<edge_begin><edge_end>Topic()
Session chair()<edge_begin><edge_end>Delegate()
Document()<edge_begin><edge_end>Document()
Author()<edge_begin><edge_end>Conference Member()
Meta-Review()<edge_begin><edge_end>Review()
Speaker()<edge_begin><edge_end>Delegate()
Paper Author()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Member PC()<edge_begin><edge_end>Topic()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Administrator()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
article()<edge_begin><edge_end>Abstract()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Conference activity()<edge_begin><edge_end>Activity(is dated on)
Author cd proceedings included()<edge_begin><edge_end>Author()
Registation deadline()<edge_begin><edge_end>Deadline()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
Technic activity()<edge_begin><edge_end>Conference activity()
participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Evaluated Paper()<edge_begin><edge_end>Review()
Social Event()<edge_begin><edge_end>Non Academic Event()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Contributed Talk()<edge_begin><edge_end>Document()
One conference day()<edge_begin><edge_end>Conference days()
date of conference()<edge_begin><edge_end>date()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Possible Reviewer()
date()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Thing()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Item()
Meal Menu()<edge_begin><edge_end>Meal Event()
Session Chair()<edge_begin><edge_end>Conference Participant()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Account()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Presenter university()<edge_begin><edge_end>Building()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
SC Member()<edge_begin><edge_end>PC Member()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Invited Speaker()<edge_begin><edge_end>Presenter()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Tutorial()<edge_begin><edge_end>Individual Presentation()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
program()<edge_begin><edge_end>chair()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Programme()<edge_begin><edge_end>Document()
Help Request()<edge_begin><edge_end>Request()
Modelling()<edge_begin><edge_end>Research()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Reviewing results event()<edge_begin><edge_end>Administrative event()
Review()<edge_begin><edge_end>Reviewed contribution()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Co-author()
Accept Rating()<edge_begin><edge_end>Review Rating()
Assistant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Session Chair()<edge_begin><edge_end>PC Member()
Poster Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Document()
Author information form()<edge_begin><edge_end>Form()
Double hotel room()<edge_begin><edge_end>Hotel room()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Conference hotel()<edge_begin><edge_end>Building()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Participant(early Registration)<edge_begin><edge_end>Boolean()
Conference document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Worker lecturer()<edge_begin><edge_end>Lecturer()
Steering committee()<edge_begin><edge_end>Committee()
Request()<edge_begin><edge_end>Activity(is dated on)
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Conference applicant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Presenter()<edge_begin><edge_end>Author()
Approval Email()<edge_begin><edge_end>Email()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Positive Review()<edge_begin><edge_end>Review()
paper assignment()<edge_begin><edge_end>Program Committee member()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Review()
Possible Reviewer()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Topic()<edge_begin><edge_end>Working event()
Program Committee Chair()<edge_begin><edge_end>Review()
Computer Networks Topic()<edge_begin><edge_end>Topic()
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Presenter()<edge_begin><edge_end>Conference Participant()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Hotel room()<edge_begin><edge_end>Place()
Tutorial()<edge_begin><edge_end>Working event()
Assigned Paper()<edge_begin><edge_end>Submitted Paper()
article()<edge_begin><edge_end>classification()
Document()<edge_begin><edge_end>User()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Meta-Reviewer()
Track-workshop chair()<edge_begin><edge_end>Conference part()
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Hotel registration form()<edge_begin><edge_end>Form()
Coctail reception()<edge_begin><edge_end>Conference activity()
Submission Template()<edge_begin><edge_end>Event Setup()
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Money()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Lecture()<edge_begin><edge_end>Conference activity()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Cd proceening()<edge_begin><edge_end>Publication()
abstract of paper()<edge_begin><edge_end>article()
Submission()<edge_begin><edge_end>Document()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Withdrawn Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Activity(is dated on)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Web Site()<edge_begin><edge_end>Document()
Student non speaker()<edge_begin><edge_end>Non speaker()
Conference hall()<edge_begin><edge_end>Place()
Agency Staff Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Item()<edge_begin><edge_end>Time()
Session()<edge_begin><edge_end>Scientific Event()
Review Form()<edge_begin><edge_end>Event Setup()
Conference announcement()<edge_begin><edge_end>Conference document()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Conference restaurant()<edge_begin><edge_end>Building()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Science Worker()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Talk Event()<edge_begin><edge_end>Academic Event()
Review()<edge_begin><edge_end>Document()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Conference part()<edge_begin><edge_end>Track-workshop chair()
Abstract()<edge_begin><edge_end>article()
Record of attendance()<edge_begin><edge_end>Document()
Dinner banquet()<edge_begin><edge_end>Social program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Form()<edge_begin><edge_end>Document()
Attendee()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Money()<edge_begin><edge_end>Building()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Document()
Activity after conference()<edge_begin><edge_end>Activity(is dated on)
Template()<edge_begin><edge_end>Document()
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Workshop Session()<edge_begin><edge_end>Session()
notification()<edge_begin><edge_end>Activity(is dated on)
Technical commitee()<edge_begin><edge_end>Delegate()
Car()<edge_begin><edge_end>Transport vehicle()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Deadline()<edge_begin><edge_end>Time()
Committee()<edge_begin><edge_end>Committee member()
Money()<edge_begin><edge_end>Thing()
Abstract()<edge_begin><edge_end>Document()
Main office()<edge_begin><edge_end>Place()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Reviewer()<edge_begin><edge_end>Personal Review History()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Review Form Setup()<edge_begin><edge_end>Review Form()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
Preview()<edge_begin><edge_end>Review Form()
Trip day()<edge_begin><edge_end>Time()
Mailing list()<edge_begin><edge_end>Document()
Active Paper()<edge_begin><edge_end>Review Rating()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Conference Venue Place()<edge_begin><edge_end>Place()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Taxi()<edge_begin><edge_end>Transport vehicle()
Associated Chair()<edge_begin><edge_end>Chairman()
Topic()<edge_begin><edge_end>Conference part()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Email()<edge_begin><edge_end>Document()
Camera Ready event()<edge_begin><edge_end>Administrative event()
conference setup()<edge_begin><edge_end>URL()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Working event()<edge_begin><edge_end>Topic()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Registration()<edge_begin><edge_end>Conference activity()
Transparency()<edge_begin><edge_end>Document()
Registration form()<edge_begin><edge_end>Form()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Speaker lecture()<edge_begin><edge_end>Session()
submission process()<edge_begin><edge_end>Activity(is dated on)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Session Chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Administrator()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Scholar()<edge_begin><edge_end>University()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
conference setup()<edge_begin><edge_end>date()
Place()<edge_begin><edge_end>Item()
Review()<edge_begin><edge_end>Reviewer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Programme Brochure()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>String()
User()<edge_begin><edge_end>Document()
Tutorial Chair()<edge_begin><edge_end>PC Member()
date of notification()<edge_begin><edge_end>date()
NGO()<edge_begin><edge_end>Organization()
Full day tour()<edge_begin><edge_end>Activity after conference()
Chair PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Author()<edge_begin><edge_end>article()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Session()<edge_begin><edge_end>Lecture()
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Time()
Negative Review()<edge_begin><edge_end>Review()
Activity(is dated on)<edge_begin><edge_end>Trip day()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Presenter city()
Student registration fee()<edge_begin><edge_end>Registration fee()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Reviewer()<edge_begin><edge_end>Reviewer()
Lecturer()<edge_begin><edge_end>Author()
Co-chair()<edge_begin><edge_end>Committee member()
Personal Review History()<edge_begin><edge_end>Reviewer()
Co-author()<edge_begin><edge_end>Author()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>unsigned Long()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Activity(is dated on)<edge_begin><edge_end>article()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Author Not Reviewer()<edge_begin><edge_end>Author()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
Industrial Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Acceptance()<edge_begin><edge_end>Decision()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>human(e-mail, last name, first name)
University()<edge_begin><edge_end>Academic Institution()
Inproceedings()<edge_begin><edge_end>Entry(key)
Techreport()<edge_begin><edge_end>Entry(key)
Field(value)<edge_begin><edge_end>String()
Url()<edge_begin><edge_end>Field(value)
School()<edge_begin><edge_end>Field(value)
Incollection()<edge_begin><edge_end>Entry(key)
Text()<edge_begin><edge_end>Field(value)
Journal()<edge_begin><edge_end>Field(value)
Proceedings()<edge_begin><edge_end>Entry(key)
Entry(key)<edge_begin><edge_end>Field(value)
Entry(key)<edge_begin><edge_end>String()
Misc()<edge_begin><edge_end>Entry(key)
Institution()<edge_begin><edge_end>Field(value)
Masters Thesis()<edge_begin><edge_end>Entry(key)
Isbn()<edge_begin><edge_end>Field(value)
Bibtex()<edge_begin><edge_end>Entry(key)
Type()<edge_begin><edge_end>Field(value)
Issn()<edge_begin><edge_end>Field(value)
Edition()<edge_begin><edge_end>Field(value)
Booklet()<edge_begin><edge_end>Entry(key)
Phd Thesis()<edge_begin><edge_end>Entry(key)
Chapter()<edge_begin><edge_end>Field(value)
Organization()<edge_begin><edge_end>Field(value)
Publisher()<edge_begin><edge_end>Field(value)
Note()<edge_begin><edge_end>Field(value)
Authors()<edge_begin><edge_end>Field(value)
Month()<edge_begin><edge_end>Field(value)
Series()<edge_begin><edge_end>Field(value)
Abstract Field()<edge_begin><edge_end>Field(value)
Article()<edge_begin><edge_end>Entry(key)
Author Urls()<edge_begin><edge_end>Field(value)
Address()<edge_begin><edge_end>Field(value)
Editor()<edge_begin><edge_end>Field(value)
Volume()<edge_begin><edge_end>Field(value)
Number()<edge_begin><edge_end>Field(value)
Year()<edge_begin><edge_end>Field(value)
Inbook()<edge_begin><edge_end>Entry(key)
Book Title()<edge_begin><edge_end>Field(value)
Researcher(name, for Name)<edge_begin><edge_end>Paper(name)
Publication Structure()<edge_begin><edge_end>Position(name, description)
Position(name, description)<edge_begin><edge_end>Position(name, description)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Keyword(key, description)<edge_begin><edge_end>Paper(name)
Paper(name)<edge_begin><edge_end>Paragraph(name, id, content)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Publication Structure()<edge_begin><edge_end>Paper(name)
Researcher(name, for Name)<edge_begin><edge_end>Position(name, description)
Paper(name)<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Knowledge Manager(name)
Knowledge Manager(name)<edge_begin><edge_end>Keyword(key, description)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Paper(name)<edge_begin><edge_end>Paper(name)
Extend()<edge_begin><edge_end>Relationship()
Attribute Link()<edge_begin><edge_end>Instance()
Generalization(discriminator)<edge_begin><edge_end>Relationship()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Multiplicity()
Generalization(discriminator)<edge_begin><edge_end>Classifier()
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Generalization(discriminator)
Generalization(discriminator)<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Instance()<edge_begin><edge_end>Link End()
Link()<edge_begin><edge_end>Association()
Node Instance()<edge_begin><edge_end>Instance()
Instance()<edge_begin><edge_end>Instance()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>String()
Feature(owner Scope)<edge_begin><edge_end>Classifier()
Classifier()<edge_begin><edge_end>Namespace()
Multiplicity Range(lower, upper)<edge_begin><edge_end>Multiplicity()
Node Instance()<edge_begin><edge_end>Component Instance()
Instance()<edge_begin><edge_end>Classifier()
Extend()<edge_begin><edge_end>Use Case()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Attribute()
Multiplicity()<edge_begin><edge_end>Multiplicity Range(lower, upper)
Extension Point(location)<edge_begin><edge_end>String()
Association()<edge_begin><edge_end>Relationship()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Multiplicity Range(lower, upper)<edge_begin><edge_end>Integer()
Extend()<edge_begin><edge_end>Extension Point(location)
Attribute()<edge_begin><edge_end>Expression(language, body)
Attribute Link()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Instance()<edge_begin><edge_end>Link()
Structural Feature(changeability, target Scope, ordering)<edge_begin><edge_end>Feature(owner Scope)
Link End()<edge_begin><edge_end>Association End(is Navigable, ordering, aggregation, target Scope, changeability)
Attribute()<edge_begin><edge_end>Association End(is Navigable, ordering, aggregation, target Scope, changeability)
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Classifier()
Association()<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Link End()<edge_begin><edge_end>Link()
Classifier()<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Instance()<edge_begin><edge_end>Attribute Link()
Association()<edge_begin><edge_end>Association End(is Navigable, ordering, aggregation, target Scope, changeability)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Boolean()
Use Case()<edge_begin><edge_end>Classifier()
Link End()<edge_begin><edge_end>Instance()
Boolean Expression()<edge_begin><edge_end>Expression(language, body)
Extension Point(location)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Use Case Instance()<edge_begin><edge_end>Instance()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Namespace()
Generalization(discriminator)<edge_begin><edge_end>String()
Attribute Link()<edge_begin><edge_end>Attribute()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Element()
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Relationship()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Actor()<edge_begin><edge_end>Classifier()
Use Case()<edge_begin><edge_end>Include()
Use Case()<edge_begin><edge_end>Extend()
Include()<edge_begin><edge_end>Relationship()
Attribute()<edge_begin><edge_end>Structural Feature(changeability, target Scope, ordering)
Expression(language, body)<edge_begin><edge_end>String()
Instance()<edge_begin><edge_end>Component Instance()
Attribute Link()<edge_begin><edge_end>Link End()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Boolean()
Namespace()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Classifier()<edge_begin><edge_end>Generalization(discriminator)
Instance()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Association()
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Promotion(upload Directory, download Directory, incubating, base URL, build Alias)
Feature(in Product)<edge_begin><edge_end>Installation Unit(id, version)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Platform(file, location, deltapack)
Contribution(label)<edge_begin><edge_end>Bundle()
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Compiler(args, source Version, target Version, verbose, fail On Error, debug Info)
Feature(in Product)<edge_begin><edge_end>Category(name, label, description)
Contribution(label)<edge_begin><edge_end>Contact(name, email)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Contribution(label)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Category(name, label, description)
Platform(file, location, deltapack)<edge_begin><edge_end>Config(os, ws, arch, archive Format)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Config(os, ws, arch, archive Format)
Bundle()<edge_begin><edge_end>Installation Unit(id, version)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Product()
Installation Unit(id, version)<edge_begin><edge_end>Repository(location, label)
Category(name, label, description)<edge_begin><edge_end>Feature(in Product)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Contact(name, email)
Contribution(label)<edge_begin><edge_end>Feature(in Product)
Transition(priority number)<edge_begin><edge_end>Node(name)
Transition(priority number)<edge_begin><edge_end>Event(eventliteral)
Transition(priority number)<edge_begin><edge_end>State()
State()<edge_begin><edge_end>Node(name)
Event(eventliteral)<edge_begin><edge_end>Transition(priority number)
State()<edge_begin><edge_end>Transition(priority number)
State()<edge_begin><edge_end>Function(sourcecode)
Connector(public)<edge_begin><edge_end>History(depth, hot)
Node(name)<edge_begin><edge_end>State()
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Mailing List(name, subscribe, unsubscribe, post, archive, other Archives)
Developer(id)<edge_begin><edge_end>Person(name, email, url, organization, organization Url, roles, timezone, properties)
Contributor()<edge_begin><edge_end>Person(name, email, url, organization, organization Url, roles, timezone, properties)
Resource(target Path, filtering, directory, includes, excludes)<edge_begin><edge_end>String()
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Build(default Goal, source Directory, unit Test Source Directory)
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>String()
Person(name, email, url, organization, organization Url, roles, timezone, properties)<edge_begin><edge_end>String()
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Project(id, group Id, artifact Id, name, description)
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Person(name, email, url, organization, organization Url, roles, timezone, properties)
Developer(id)<edge_begin><edge_end>String()
Build(default Goal, source Directory, unit Test Source Directory)<edge_begin><edge_end>String()
Symbolic Timeout Event()<edge_begin><edge_end>Symbolic Timer(name)
Epsilon Transition()<edge_begin><edge_end>Abstract Transition()
Symbolic Timer(name)<edge_begin><edge_end>Symbolic Timeout Event()
Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Reset Timer Action()<edge_begin><edge_end>Timer Action()
Transition()<edge_begin><edge_end>Abstract Transition()
Set Timer Action(to Value)<edge_begin><edge_end>Timer Action()
Abstract Transition()<edge_begin><edge_end>State(acceptor, id)
Constant Binding()<edge_begin><edge_end>Fix Parameter(value)
Timer Action()<edge_begin><edge_end>Action()
State(acceptor, id)<edge_begin><edge_end>Token()
Event()<edge_begin><edge_end>Fix Parameter(value)
Token Parameter Binding()<edge_begin><edge_end>Symbolic Token Parameter()
Event Guard()<edge_begin><edge_end>Symbolic Event()
Fix Parameter(value)<edge_begin><edge_end>Parameter()
Token()<edge_begin><edge_end>Parameter()
Automaton(name)<edge_begin><edge_end>Symbolic Timer(name)
Abstract Transition()<edge_begin><edge_end>Action()
Symbolic Input Event(name)<edge_begin><edge_end>Symbolic Event()
Automaton(name)<edge_begin><edge_end>Token()
Binding()<edge_begin><edge_end>Symbolic Event Parameter()
Symbolic Event Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Token()<edge_begin><edge_end>State(acceptor, id)
Event Guard()<edge_begin><edge_end>Binding()
Automaton(name)<edge_begin><edge_end>State(acceptor, id)
Automaton(name)<edge_begin><edge_end>Symbolic Parameter(name)
Symbolic Token Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Complex Event Processor()<edge_begin><edge_end>Symbolic Input Event(name)
Complex Event Processor()<edge_begin><edge_end>Automaton(name)
Token Parameter Binding()<edge_begin><edge_end>Binding()
State(acceptor, id)<edge_begin><edge_end>Abstract Transition()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Keyword(description)<edge_begin><edge_end>Paper()
Position(description)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Named(name)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent)
Paper()<edge_begin><edge_end>Paragraph(content)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Position(description)
Publication Structure()<edge_begin><edge_end>Paper()
Publication System()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Paper()<edge_begin><edge_end>Keyword(description)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Position(description)<edge_begin><edge_end>Named(name)
Keyword(description)<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Structure()
Knowledge Manager()<edge_begin><edge_end>Keyword(description)
Knowledge Manager()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
State(entry, do, exit)<edge_begin><edge_end>Node(name, id)
Pseudostate(pseudo Type)<edge_begin><edge_end>Node(name, id)
Final State()<edge_begin><edge_end>State(entry, do, exit)
State(entry, do, exit)<edge_begin><edge_end>Region(priority)
Statechart(name, UUID)<edge_begin><edge_end>Data Element(name, io Type, port)
Transition(priority, expression, id)<edge_begin><edge_end>Node(name, id)
Region(priority)<edge_begin><edge_end>Node(name, id)
Event(trigger)<edge_begin><edge_end>Data Element(name, io Type, port)
Statechart(name, UUID)<edge_begin><edge_end>Region(priority)
Stub State(reference State)<edge_begin><edge_end>State Vertex()
Signal Event()<edge_begin><edge_end>Signal()
State()<edge_begin><edge_end>Action(is Asynchronous)
Parameter(kind)<edge_begin><edge_end>Behavioral Feature(is Query)
Change Event()<edge_begin><edge_end>Event()
Argument()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Feature(owner Scope)<edge_begin><edge_end>Classifier()
Object Set Expression()<edge_begin><edge_end>Expression(language, body)
Transition()<edge_begin><edge_end>State Machine()
Synch State(bound)<edge_begin><edge_end>Integer()
Transition()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Guard()
State Machine()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Transition()
Argument()<edge_begin><edge_end>Expression(language, body)
Composite State(is Concurrent)<edge_begin><edge_end>State Vertex()
Generalization(discriminator)<edge_begin><edge_end>String()
Reception(specification, is Root, is Leaf, is Abstract)<edge_begin><edge_end>Boolean()
Behavioral Feature(is Query)<edge_begin><edge_end>Boolean()
Composite State(is Concurrent)<edge_begin><edge_end>State()
Event()<edge_begin><edge_end>Parameter(kind)
Action(is Asynchronous)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Send Action()<edge_begin><edge_end>Action(is Asynchronous)
Time Event()<edge_begin><edge_end>Time Expression()
Final State()<edge_begin><edge_end>State()
Reception(specification, is Root, is Leaf, is Abstract)<edge_begin><edge_end>Signal()
Transition()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Action Sequence()<edge_begin><edge_end>Action(is Asynchronous)
Return Action()<edge_begin><edge_end>Action(is Asynchronous)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Boolean()
Generalization(discriminator)<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
State()<edge_begin><edge_end>State Vertex()
Simple State()<edge_begin><edge_end>State()
Argument()<edge_begin><edge_end>Action(is Asynchronous)
Transition()<edge_begin><edge_end>Action(is Asynchronous)
Signal Event()<edge_begin><edge_end>Event()
Guard()<edge_begin><edge_end>Boolean Expression()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Element()
Behavioral Feature(is Query)<edge_begin><edge_end>Parameter(kind)
Change Event()<edge_begin><edge_end>Boolean Expression()
Destroy Action()<edge_begin><edge_end>Action(is Asynchronous)
Behavioral Feature(is Query)<edge_begin><edge_end>Feature(owner Scope)
Feature(owner Scope)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Boolean Expression()<edge_begin><edge_end>Expression(language, body)
Classifier()<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Send Action()<edge_begin><edge_end>Signal()
Generalization(discriminator)<edge_begin><edge_end>Relationship()
Call Action()<edge_begin><edge_end>Operation(concurrency, is Root, is Leaf, is Abstract, specification)
Operation(concurrency, is Root, is Leaf, is Abstract, specification)<edge_begin><edge_end>String()
Time Event()<edge_begin><edge_end>Event()
Time Expression()<edge_begin><edge_end>Expression(language, body)
Action(is Asynchronous)<edge_begin><edge_end>Boolean()
Stub State(reference State)<edge_begin><edge_end>String()
Action(is Asynchronous)<edge_begin><edge_end>Argument()
Classifier()<edge_begin><edge_end>Namespace()
Action(is Asynchronous)<edge_begin><edge_end>Object Set Expression()
State Machine()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Namespace()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
State Vertex()<edge_begin><edge_end>Composite State(is Concurrent)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Generalization(discriminator)
State Machine()<edge_begin><edge_end>Submachine State()
Parameter(kind)<edge_begin><edge_end>Classifier()
Guard()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Operation(concurrency, is Root, is Leaf, is Abstract, specification)<edge_begin><edge_end>Boolean()
Submachine State()<edge_begin><edge_end>State Machine()
Parameter(kind)<edge_begin><edge_end>Expression(language, body)
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Namespace()
Classifier()<edge_begin><edge_end>Generalization(discriminator)
Call Event()<edge_begin><edge_end>Operation(concurrency, is Root, is Leaf, is Abstract, specification)
Generalization(discriminator)<edge_begin><edge_end>Classifier()
Call Event()<edge_begin><edge_end>Event()
Terminate Action()<edge_begin><edge_end>Action(is Asynchronous)
Submachine State()<edge_begin><edge_end>Composite State(is Concurrent)
Event()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Parameter(kind)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Call Action()<edge_begin><edge_end>Action(is Asynchronous)
Expression(language, body)<edge_begin><edge_end>String()
Action Expression()<edge_begin><edge_end>Expression(language, body)
Model Element(name, visibility, is Specification)<edge_begin><edge_end>String()
Guard()<edge_begin><edge_end>Transition()
Uninterpreted Action()<edge_begin><edge_end>Action(is Asynchronous)
Relationship()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Reception(specification, is Root, is Leaf, is Abstract)<edge_begin><edge_end>String()
Tech Report()<edge_begin><edge_end>Authored Entry()
Unpublished(note)<edge_begin><edge_end>Authored Entry()
Thesis Entry(school)<edge_begin><edge_end>String()
Authored Entry()<edge_begin><edge_end>Author(author)
Master Thesis()<edge_begin><edge_end>Thesis Entry(school)
Article(journal)<edge_begin><edge_end>Titled Entry(title)
Book Titled Entry(booktitle)<edge_begin><edge_end>Bib Te X Entry(id)
Thesis Entry(school)<edge_begin><edge_end>Dated Entry(year)
Ph D Thesis()<edge_begin><edge_end>Thesis Entry(school)
In Book(chapter)<edge_begin><edge_end>Integer()
Thesis Entry(school)<edge_begin><edge_end>Titled Entry(title)
Book Titled Entry(booktitle)<edge_begin><edge_end>String()
Thesis Entry(school)<edge_begin><edge_end>Authored Entry()
Book(publisher)<edge_begin><edge_end>Authored Entry()
Bib Te X File()<edge_begin><edge_end>Bib Te X Entry(id)
Booklet()<edge_begin><edge_end>Dated Entry(year)
Tech Report()<edge_begin><edge_end>Titled Entry(title)
Dated Entry(year)<edge_begin><edge_end>Bib Te X Entry(id)
In Proceedings()<edge_begin><edge_end>Proceedings()
Manual()<edge_begin><edge_end>Titled Entry(title)
Author(author)<edge_begin><edge_end>String()
Article(journal)<edge_begin><edge_end>Dated Entry(year)
Unpublished(note)<edge_begin><edge_end>String()
In Proceedings()<edge_begin><edge_end>Book Titled Entry(booktitle)
In Collection()<edge_begin><edge_end>Book(publisher)
In Proceedings()<edge_begin><edge_end>Authored Entry()
Misc()<edge_begin><edge_end>Bib Te X Entry(id)
Authored Entry()<edge_begin><edge_end>Bib Te X Entry(id)
In Collection()<edge_begin><edge_end>Book Titled Entry(booktitle)
Unpublished(note)<edge_begin><edge_end>Titled Entry(title)
Dated Entry(year)<edge_begin><edge_end>String()
Titled Entry(title)<edge_begin><edge_end>Bib Te X Entry(id)
Proceedings()<edge_begin><edge_end>Titled Entry(title)
Bib Te X Entry(id)<edge_begin><edge_end>String()
Article(journal)<edge_begin><edge_end>Authored Entry()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Workbook()<edge_begin><edge_end>Worksheet(name)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Worksheet(name)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Worksheet(name)<edge_begin><edge_end>Workbook()
Table Element(index)<edge_begin><edge_end>Integer()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Number Value(value)<edge_begin><edge_end>Double()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Data()<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Value Type()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Custom Document Property(name)<edge_begin><edge_end>String()
String Value(value)<edge_begin><edge_end>String()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Comment(author, show Always)<edge_begin><edge_end>String()
Version Type(n, nn)<edge_begin><edge_end>Integer()
String Value(value)<edge_begin><edge_end>Value Type()
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Worksheet(name)<edge_begin><edge_end>String()
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Comment(author, show Always)<edge_begin><edge_end>Data()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Comment(author, show Always)
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Integer()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Value Type()<edge_begin><edge_end>Data()
Error Value()<edge_begin><edge_end>Value Type()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Details()
Contribution(label)<edge_begin><edge_end>Status Provider()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Identification Provider()
Feature()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Properties()<edge_begin><edge_end>Property(key, value)
Mapped Unit()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Mapped Unit()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Custom Category(identifier, label, description)
Installable Units()<edge_begin><edge_end>Miscellaneous()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Contribution(label)
IU Details()<edge_begin><edge_end>Provided Capabilities()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Feature()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Installable Units()<edge_begin><edge_end>Fragments()
Map Rule()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Contribution(label)<edge_begin><edge_end>Identification Provider()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Map Rule()
Feature()<edge_begin><edge_end>Bundles()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Validation Set(abstract, extension, label)
Categories()<edge_begin><edge_end>Category()
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contact(name, email)
Category()<edge_begin><edge_end>Fragments()
Requirements()<edge_begin><edge_end>Requirement Wrapper()
Available Versions Header()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Custom Category(identifier, label, description)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
IU Details()<edge_begin><edge_end>Licenses()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Status Provider()
Contribution(label)<edge_begin><edge_end>Description Provider(description)
Contribution(label)<edge_begin><edge_end>Contact(name, email)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Status Provider()
Exclusion Rule()<edge_begin><edge_end>Map Rule()
IU Details()<edge_begin><edge_end>Properties()
Map Rule()<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Mapped Unit()<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Product()<edge_begin><edge_end>Bundles()
Requirement Wrapper()<edge_begin><edge_end>Label Provider(label)
Metadata Repository Structured View(name, loaded, location)<edge_begin><edge_end>Repository References()
Installable Unit Request(name, version Range)<edge_begin><edge_end>Status Provider()
Products()<edge_begin><edge_end>Product()
Fragments()<edge_begin><edge_end>Fragment()
Bundle()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Available Versions Header()<edge_begin><edge_end>Available Version(version Match, version, filter, available From)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Available Versions Header()
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Description Provider(description)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Custom Category(identifier, label, description)<edge_begin><edge_end>Feature()
Feature()<edge_begin><edge_end>Features()
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Validation Set(abstract, extension, label)
Category()<edge_begin><edge_end>Categories()
Features()<edge_begin><edge_end>Feature()
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type, filter)
Contact(name, email)<edge_begin><edge_end>Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)
Installable Units()<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type, filter)
Contribution(label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Category()<edge_begin><edge_end>Products()
Category()<edge_begin><edge_end>Bundles()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Bundle()
IU Details()<edge_begin><edge_end>Touchpoints()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Identification Provider()
Installable Units()<edge_begin><edge_end>Products()
Configuration(operating System, window System, architecture)<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Description Provider(description)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Product()
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Description Provider(description)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Repository Browser(loading)<edge_begin><edge_end>Metadata Repository Structured View(name, loaded, location)
Feature()<edge_begin><edge_end>Fragments()
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Metadata Repository Structured View(name, loaded, location)<edge_begin><edge_end>Properties()
Map Rule()<edge_begin><edge_end>Description Provider(description)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Custom Category(identifier, label, description)<edge_begin><edge_end>Status Provider()
Product()<edge_begin><edge_end>Fragments()
Contribution(label)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Available Version(version Match, version, filter, available From)
Installable Units()<edge_begin><edge_end>Features()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Category()<edge_begin><edge_end>Features()
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Fragment()<edge_begin><edge_end>Bundle()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Status Provider()
Bundles()<edge_begin><edge_end>Bundle()
Metadata Repository Structured View(name, loaded, location)<edge_begin><edge_end>Installable Units()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Category()
Typed Transition()<edge_begin><edge_end>Transition()
State(label)<edge_begin><edge_end>Transition()
Typed Transition()<edge_begin><edge_end>Guard()
Parameter(position, symbolic Name)<edge_begin><edge_end>Typed Transition()
Automaton(event Pattern Id)<edge_begin><edge_end>Init State()
State(label)<edge_begin><edge_end>Event Token()
Init State()<edge_begin><edge_end>State(label)
Parameter Table()<edge_begin><edge_end>Event Token()
Guard()<edge_begin><edge_end>Typed Transition()
Epsilon Transition()<edge_begin><edge_end>Transition()
Trap State()<edge_begin><edge_end>State(label)
Holds For()<edge_begin><edge_end>Timed Zone(time)
Timed Zone(time)<edge_begin><edge_end>State(label)
Typed Transition()<edge_begin><edge_end>Parameter(position, symbolic Name)
Internal Model()<edge_begin><edge_end>Automaton(event Pattern Id)
Automaton(event Pattern Id)<edge_begin><edge_end>Timed Zone(time)
Internal Model()<edge_begin><edge_end>Event Token()
Automaton(event Pattern Id)<edge_begin><edge_end>Trap State()
Automaton(event Pattern Id)<edge_begin><edge_end>Final State()
Parameter Table()<edge_begin><edge_end>Parameter Binding(symbolic Name, value)
Within()<edge_begin><edge_end>Timed Zone(time)
Parameter Binding(symbolic Name, value)<edge_begin><edge_end>Parameter Table()
Event Token()<edge_begin><edge_end>State(label)
Negative Transition()<edge_begin><edge_end>Typed Transition()
Final State()<edge_begin><edge_end>State(label)
Link(uri)<edge_begin><edge_end>Fragment()
Fragment Container()<edge_begin><edge_end>Fragment()
Section()<edge_begin><edge_end>Fragment Container()
Subsubsection()<edge_begin><edge_end>Named Element(id, name, label)
Documentation(title)<edge_begin><edge_end>Term Entry(description)
Text Container()<edge_begin><edge_end>Text(text)
Html Code()<edge_begin><edge_end>Text(text)
Image(original Source, resource, context Class Name)<edge_begin><edge_end>Named Element(id, name, label)
Subsubsection()<edge_begin><edge_end>Fragment()
Image(original Source, resource, context Class Name)<edge_begin><edge_end>Fragment()
Subsection()<edge_begin><edge_end>Fragment()
Term Entry(description)<edge_begin><edge_end>Named Element(id, name, label)
Image(original Source, resource, context Class Name)<edge_begin><edge_end>Width(width, unit)
Reference(referred Label)<edge_begin><edge_end>Text(text)
List()<edge_begin><edge_end>Fragment()
Subsection()<edge_begin><edge_end>Fragment Container()
List()<edge_begin><edge_end>List Item(text)
Fragment Container()<edge_begin><edge_end>Text Container()
Table()<edge_begin><edge_end>Fragment()
XML(context Class Name, resource, content)<edge_begin><edge_end>Named Element(id, name, label)
Paragraph()<edge_begin><edge_end>Text Container()
Page Break()<edge_begin><edge_end>Fragment()
Subsubsection()<edge_begin><edge_end>Fragment Container()
Paragraph()<edge_begin><edge_end>Fragment()
XML(context Class Name, resource, content)<edge_begin><edge_end>Fragment()
Section()<edge_begin><edge_end>Named Element(id, name, label)
Table()<edge_begin><edge_end>Table Row()
Code()<edge_begin><edge_end>Text(text)
Table Row()<edge_begin><edge_end>Table Cell(content, span)
Listing()<edge_begin><edge_end>Text Container()
Listing()<edge_begin><edge_end>Fragment()
Line()<edge_begin><edge_end>Text(text)
SAP Table(table Search Type)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out, web Service Url Text For O Auth, consume Key, consume Secret, callback Host, callback Port, salesforce Version, token, login Type)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
Salesforce Module Unit(module Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAPBW Table(model Type, active, source System Name, info Area Name, inner IO Type)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out, web Service Url Text For O Auth, consume Key, consume Secret, callback Host, callback Port, salesforce Version, token, login Type)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>Additional Connection Property(property Name, Value)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Td Table()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
SAP Table Field(business Name, ref Table)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
BRMS Connection(xml Field, url Name, tac Webapp Name, class Name, module Used, package)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out, web Service Url Text For O Auth, consume Key, consume Secret, callback Host, callback Port, salesforce Version, token, login Type)<edge_begin><edge_end>Salesforce Module Unit(module Name)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Additional Properties(key, value)
Connection(version, Context Mode, Context Id, context Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name, as Xml Schema)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Function Parameter(name, type, description, length, changing, test Value, table Reside In Tables)<edge_begin><edge_end>SAP Function Parameter(name, type, description, length, changing, test Value, table Reside In Tables)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name, as Xml Schema)
EDIFACT Connection(Xml Name, File Name, Xml Path)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
FTP Connection(Host, Port, Username, Password, Mode, Ecoding, SFTP, FTPS, Method, Privatekey, Passphrase, Keystore File, Keystore Password, Usesocks, Proxyhost, Proxyport, Proxyuser, Proxypassword, Custom Encode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Additional Properties(key, value)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>List()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Input SAP Function Parameter Table()
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context, server Url)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Header Footer Connection(is Header, imports, main Code, libraries)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Connection(version, Context Mode, Context Id, context Name)<edge_begin><edge_end>Queries Connection()
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>SAP Function Param Data()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name, as Xml Schema)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>Td Table()
Salesforce Module Unit(module Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
SAPBW Table(model Type, active, source System Name, info Area Name, inner IO Type)<edge_begin><edge_end>SAP Table(table Search Type)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>HL7File Node(File Path, Order, Attribute, Default Value, Related Column, Repeatable)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>WSDL Parameter(Element, source, Column, Expression, Parameter Info, Parameter Info Parent)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Content()
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAPBW Table Field(logical Name)<edge_begin><edge_end>SAP Table Field(business Name, ref Table)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Condition Type(input Column, function, operator, value)
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Output SAP Function Parameter Table()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Td Column()<edge_begin><edge_end>Td Sql Data Type(java Data Type, nullable, unsigned Attribute, case Sensitive, auto Increment, local Type Name, searchable)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Td Expression(version, modification Date, name, expression Variable Map)<edge_begin><edge_end>java Hash Map()
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List, generation Mode)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
State(initial, final, id, name)<edge_begin><edge_end>Command()
Execute Command(operation)<edge_begin><edge_end>Expression()
Statemachine()<edge_begin><edge_end>State(initial, final, id, name)
Print Command()<edge_begin><edge_end>Command()
Transition()<edge_begin><edge_end>Expression()
Print Command()<edge_begin><edge_end>Expression()
Statemachine()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>State(initial, final, id, name)
Verbatim Expression(code)<edge_begin><edge_end>Expression()
Set Command(signal)<edge_begin><edge_end>Command()
Set Command(signal)<edge_begin><edge_end>Expression()
State Property Expression(property)<edge_begin><edge_end>Expression()
Alternative Flow Alternative()<edge_begin><edge_end>Condition(condition)
Step(name, label, description)<edge_begin><edge_end>Actor(name, type, description)
Step(name, label, description)<edge_begin><edge_end>Step Alternative(finalize Flow, final State)
Use Case(name, uc Name, goals)<edge_begin><edge_end>Exception Flow(condition)
Step(name, label, description)<edge_begin><edge_end>Entity Ref()
Use Case(name, uc Name, goals)<edge_begin><edge_end>Alternative Flow()
Use Cases Model()<edge_begin><edge_end>Package Declaration(name, description)
Use Case(name, uc Name, goals)<edge_begin><edge_end>Actor(name, type, description)
Flow(final State)<edge_begin><edge_end>Step(name, label, description)
Use Case(name, uc Name, goals)<edge_begin><edge_end>Basic Flow()
Named Flow(name)<edge_begin><edge_end>Flow(final State)
Package Declaration(name, description)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Step(name, label, description)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Alternative Flow()<edge_begin><edge_end>Named Flow(name)
Package Declaration(name, description)<edge_begin><edge_end>Actor(name, type, description)
Basic Flow()<edge_begin><edge_end>Flow(final State)
Step Alternative(finalize Flow, final State)<edge_begin><edge_end>Step(name, label, description)
Namespace Import()<edge_begin><edge_end>Package Declaration(name, description)
Alternative Flow Alternative()<edge_begin><edge_end>Step Alternative(finalize Flow, final State)
Local Alternative(description)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Precondition(name)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Use Case(name, uc Name, goals)<edge_begin><edge_end>Precondition(name)
Local Alternative(description)<edge_begin><edge_end>Step Alternative(finalize Flow, final State)
Actor(name, type, description)<edge_begin><edge_end>Actor(name, type, description)
Package Declaration(name, description)<edge_begin><edge_end>Namespace Import()
Static Column Family()<edge_begin><edge_end>Column Family(name)
Data Structure Type()<edge_begin><edge_end>Type()
Column(name)<edge_begin><edge_end>Type()
Column Family(name)<edge_begin><edge_end>Key Space(name, replication Factor, replica Placement Strategy)
Map Type(key Type, base Type)<edge_begin><edge_end>Data Structure Type()
Dynamic Column Family()<edge_begin><edge_end>Column Family(name)
Key Space(name, replication Factor, replica Placement Strategy)<edge_begin><edge_end>Column Family(name)
Collection Type(kind, key Type)<edge_begin><edge_end>Data Structure Type()
Column Family(name)<edge_begin><edge_end>Column(name)
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Transition Specification()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Statechart Root()<edge_begin><edge_end>Statechart Specification(namespace)
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>State Specification()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Transition Root()<edge_begin><edge_end>Def Root()
Primitive Value Expression()<edge_begin><edge_end>Literal()
State Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Real Literal(value)<edge_begin><edge_end>Literal()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Int Literal(value)<edge_begin><edge_end>Literal()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Event Raising()<edge_begin><edge_end>Expression()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Logical Not Expression()<edge_begin><edge_end>Expression()
Operation Call()<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Root()<edge_begin><edge_end>Def Root()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Event Derivation()<edge_begin><edge_end>Expression()
Event Definition(direction)<edge_begin><edge_end>Event Derivation()
Logical And Expression()<edge_begin><edge_end>Expression()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Operation Call()<edge_begin><edge_end>Operation()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Conditional Expression()<edge_begin><edge_end>Expression()
Petri Net(kind, time Type)<edge_begin><edge_end>Page()
Derived()<edge_begin><edge_end>PN Pattern()
Has Label()<edge_begin><edge_end>Label()
Node()<edge_begin><edge_end>Arc()
Derived()<edge_begin><edge_end>Pragmatic(name)
Ref Place()<edge_begin><edge_end>Place Node()
Conditinoal()<edge_begin><edge_end>Container()
Atomic()<edge_begin><edge_end>Block()
Conditional()<edge_begin><edge_end>Container()
Page()<edge_begin><edge_end>Has Name()
Container()<edge_begin><edge_end>Block()
Instance(sub Page ID)<edge_begin><edge_end>Node()
Principal()<edge_begin><edge_end>Instance(sub Page ID)
Service()<edge_begin><edge_end>Block()
Place Node()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Page()
Petri Net(kind, time Type)<edge_begin><edge_end>Has Name()
Node()<edge_begin><edge_end>Pragmatic(name)
Custom Derived Pragmatics()<edge_begin><edge_end>Custom Pragmatics()
Place()<edge_begin><edge_end>Ref Place()
Block()<edge_begin><edge_end>Place Node()
Service()<edge_begin><edge_end>Instance(sub Page ID)
Page()<edge_begin><edge_end>Arc()
Ref Trans()<edge_begin><edge_end>Transition Node()
Transition()<edge_begin><edge_end>Transition Node()
Custom Explicit Pragmatics()<edge_begin><edge_end>Explicit()
Ref Place()<edge_begin><edge_end>Place()
Object()<edge_begin><edge_end>Has Name()
Arc()<edge_begin><edge_end>Node()
Node()<edge_begin><edge_end>Object()
Custom Explicit Pragmatics()<edge_begin><edge_end>Custom Pragmatics()
Page()<edge_begin><edge_end>Has Label()
Bindings()<edge_begin><edge_end>Binding(template)
Label()<edge_begin><edge_end>Has Label()
HL Arc Addin(kind)<edge_begin><edge_end>HL Annotation()
Page()<edge_begin><edge_end>Object()
Binding(template)<edge_begin><edge_end>Pragmatic(name)
Pragmatic(name)<edge_begin><edge_end>Placement Constraints()
Transition Node()<edge_begin><edge_end>Node()
Object()<edge_begin><edge_end>Has Label()
Principal()<edge_begin><edge_end>Service()
Petri Net(kind, time Type)<edge_begin><edge_end>Has Label()
Custom Derived Pragmatics()<edge_begin><edge_end>Derived()
Object()<edge_begin><edge_end>Page()
In Collection(chapter, type)<edge_begin><edge_end>String()
Tech Report(type, number, address, note)<edge_begin><edge_end>Titled Entry(title)
Publishered Entry(publisher)<edge_begin><edge_end>Entry(id, abstract)
Thesis Entry(type, address, note)<edge_begin><edge_end>Dated Entry(year, month)
Manual(organization, address, edition, note)<edge_begin><edge_end>String()
Editored Entry(editor)<edge_begin><edge_end>Entry(id, abstract)
Dated Entry(year, month)<edge_begin><edge_end>Entry(id, abstract)
Noted Entry(note)<edge_begin><edge_end>String()
Article(volume, number, pages, note)<edge_begin><edge_end>String()
Journal Entry(journal)<edge_begin><edge_end>String()
Thesis Entry(type, address, note)<edge_begin><edge_end>Titled Entry(title)
In Book(chapter, type)<edge_begin><edge_end>String()
Booklet(howpublished, address, note)<edge_begin><edge_end>String()
Thesis Entry(type, address, note)<edge_begin><edge_end>String()
Conference()<edge_begin><edge_end>In Proceedings(pages)
Dated Entry(year, month)<edge_begin><edge_end>String()
Journal Entry(journal)<edge_begin><edge_end>Entry(id, abstract)
Bibtex File()<edge_begin><edge_end>Entry(id, abstract)
Authored Entry()<edge_begin><edge_end>Author(name)
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>String()
In Collection(chapter, type)<edge_begin><edge_end>Book Titled Entry(booktitle)
Noted Entry(note)<edge_begin><edge_end>Entry(id, abstract)
Article(volume, number, pages, note)<edge_begin><edge_end>Titled Entry(title)
Unpublished()<edge_begin><edge_end>Noted Entry(note)
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Authored Entry()
Book Titled Entry(booktitle)<edge_begin><edge_end>Entry(id, abstract)
Article(volume, number, pages, note)<edge_begin><edge_end>Authored Entry()
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Dated Entry(year, month)
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Titled Entry(title)
Entry(id, abstract)<edge_begin><edge_end>String()
Unpublished()<edge_begin><edge_end>Authored Entry()
Tech Report(type, number, address, note)<edge_begin><edge_end>String()
Unpublished()<edge_begin><edge_end>Titled Entry(title)
Author(name)<edge_begin><edge_end>String()
Misc(title, howpublished, month, year, note)<edge_begin><edge_end>Entry(id, abstract)
Institution Entry(institution)<edge_begin><edge_end>Entry(id, abstract)
Editored Entry(editor)<edge_begin><edge_end>String()
Tech Report(type, number, address, note)<edge_begin><edge_end>Institution Entry(institution)
Book Titled Entry(booktitle)<edge_begin><edge_end>String()
Titled Entry(title)<edge_begin><edge_end>Entry(id, abstract)
Proceedings(editor, volume, number, series, address, organization, publisher, note)<edge_begin><edge_end>String()
Unpublished()<edge_begin><edge_end>Dated Entry(year, month)
In Collection(chapter, type)<edge_begin><edge_end>Book(volume, number, series, address, edition, note)
Thesis Entry(type, address, note)<edge_begin><edge_end>School Entry(school)
School Entry(school)<edge_begin><edge_end>Entry(id, abstract)
Misc(title, howpublished, month, year, note)<edge_begin><edge_end>Author(name)
Thesis Entry(type, address, note)<edge_begin><edge_end>Authored Entry()
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Publishered Entry(publisher)
Booklet(howpublished, address, note)<edge_begin><edge_end>Author(name)
Proceedings(editor, volume, number, series, address, organization, publisher, note)<edge_begin><edge_end>Titled Entry(title)
Booklet(howpublished, address, note)<edge_begin><edge_end>Titled Entry(title)
In Proceedings(pages)<edge_begin><edge_end>String()
Manual(organization, address, edition, note)<edge_begin><edge_end>Authored Entry()
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Editored Entry(editor)
In Proceedings(pages)<edge_begin><edge_end>Authored Entry()
Institution Entry(institution)<edge_begin><edge_end>String()
Misc(title, howpublished, month, year, note)<edge_begin><edge_end>String()
In Proceedings(pages)<edge_begin><edge_end>Proceedings(editor, volume, number, series, address, organization, publisher, note)
School Entry(school)<edge_begin><edge_end>String()
Phd Thesis()<edge_begin><edge_end>Thesis Entry(type, address, note)
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>String()
Custom Properties Collection()<edge_begin><edge_end>Custom Property(name, data Type)
Geom()<edge_begin><edge_end>NURBS To()
Email Routing Data(data, size)<edge_begin><edge_end>String()
VB Project Data(data)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Pages Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Print Setup()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Boolean()
Tab()<edge_begin><edge_end>Tabs Collection()
Windows Info()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Color Entry(rgb)<edge_begin><edge_end>String()
Para()<edge_begin><edge_end>Shape Elt()
Field()<edge_begin><edge_end>Shape Elt()
Field()<edge_begin><edge_end>Del Elt(del)
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
XYAB Elt()<edge_begin><edge_end>XYA Elt()
Tabs Collection()<edge_begin><edge_end>IX Elt(i X)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shapes Collection()
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
XY Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Pages Collection()
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Face Names Table()
I Xrequired Elt(i X)<edge_begin><edge_end>Integer()
Elliptical Arc To()<edge_begin><edge_end>XYABCD Elt()
Text Elt()<edge_begin><edge_end>Text()
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Page Sheet()<edge_begin><edge_end>Master Elt()
Line To()<edge_begin><edge_end>XY Elt()
Char()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Custom Properties Collection()
Del Elt(del)<edge_begin><edge_end>Boolean()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Integer()
Page Sheet()<edge_begin><edge_end>Unique Id Elt(Unique ID)
Geom()<edge_begin><edge_end>Line To()
Icon(value)<edge_begin><edge_end>String()
Geom()<edge_begin><edge_end>Ellipse()
Geom()<edge_begin><edge_end>Shape Elt()
Style Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Arc To()<edge_begin><edge_end>XYA Elt()
Geom()<edge_begin><edge_end>Elliptical Arc To()
XYABCDE Elt()<edge_begin><edge_end>XYABCD Elt()
Connects Collection()<edge_begin><edge_end>Master Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Solution XML()
Fonts Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Masters Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Double()
Fld()<edge_begin><edge_end>I Xrequired Elt(i X)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Masters Collection()
Para()<edge_begin><edge_end>Del Elt(del)
Style Sheet()<edge_begin><edge_end>Style Sheets Collection()
Document Sheet()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Boolean()
Cp()<edge_begin><edge_end>Text Elt()
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Geom()<edge_begin><edge_end>Infinite Line()
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Page Elt()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>String()
Char()<edge_begin><edge_end>Del Elt(del)
Char()<edge_begin><edge_end>Shape Elt()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>String()
String Elt(value)<edge_begin><edge_end>Text Elt()
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>String()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Identified Elt(ID)
String Elt(value)<edge_begin><edge_end>String()
Geom()<edge_begin><edge_end>Spline Knot()
Event List()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Email Routing Data(data, size)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>VB Project Data(data)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Shapes Collection()<edge_begin><edge_end>Page Elt()
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Spline Knot()<edge_begin><edge_end>XYA Elt()
Icon(value)<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Pp()<edge_begin><edge_end>Text Elt()
Geom()<edge_begin><edge_end>Spline Start()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Colors Table()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Custom Properties Collection()<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Spline Knot()<edge_begin><edge_end>Geom()
Geom()<edge_begin><edge_end>Polyline To()
Polyline To()<edge_begin><edge_end>Geom()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Email Routing Data(data, size)
XY Elt()<edge_begin><edge_end>Del Elt(del)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Style Sheets Collection()
Tab()<edge_begin><edge_end>IX Elt(i X)
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Geom()<edge_begin><edge_end>IX Elt(i X)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Integer()
Char()<edge_begin><edge_end>IX Elt(i X)
Face Names Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
XYABCD Elt()<edge_begin><edge_end>XYAB Elt()
Tabs Collection()<edge_begin><edge_end>Shape Elt()
Identified Elt(ID)<edge_begin><edge_end>Integer()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Identified Elt(ID)
Style Sheets Collection()<edge_begin><edge_end>Style Sheet()
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Fonts Table()<edge_begin><edge_end>Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Arc To()<edge_begin><edge_end>Geom()
Para()<edge_begin><edge_end>IX Elt(i X)
VB Project Data(data)<edge_begin><edge_end>String()
Style Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Field()<edge_begin><edge_end>IX Elt(i X)
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Page Sheet()<edge_begin><edge_end>Page Elt()
XYABCD Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Colors Table()<edge_begin><edge_end>Color Entry(rgb)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Fonts Table()
Custom Property(name, data Type)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Event List()
Line To()<edge_begin><edge_end>Geom()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
Color Entry(rgb)<edge_begin><edge_end>I Xrequired Elt(i X)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
Style Sheet()<edge_begin><edge_end>Identified Elt(ID)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Header Footer()
Print Setup()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Named Elt(name, name U)<edge_begin><edge_end>String()
Text()<edge_begin><edge_end>Shape Elt()
Pp()<edge_begin><edge_end>I Xrequired Elt(i X)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Sheet()
Geom()<edge_begin><edge_end>Move To()
Icon(value)<edge_begin><edge_end>Master Elt()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Fonts Table()
Elliptical Arc To()<edge_begin><edge_end>Geom()
Connects Collection()<edge_begin><edge_end>Page Elt()
Color Entry(rgb)<edge_begin><edge_end>Colors Table()
Custom Property(name, data Type)<edge_begin><edge_end>Custom Properties Collection()
NURBS To()<edge_begin><edge_end>Geom()
Tp()<edge_begin><edge_end>I Xrequired Elt(i X)
Cell Type(unit, formula, err, value)<edge_begin><edge_end>String()
Spline Start()<edge_begin><edge_end>Geom()
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Shapes Collection()<edge_begin><edge_end>Master Elt()
Document Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Masters Collection()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Polyline To()<edge_begin><edge_end>XYA Elt()
Header Footer()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
XY Elt()<edge_begin><edge_end>IX Elt(i X)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Face Names Table()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
Document Settings Elt()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Move To()<edge_begin><edge_end>XY Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
XYA Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Tabs Collection()<edge_begin><edge_end>Tab()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Style Sheets Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Windows Info()
Email Routing Data(data, size)<edge_begin><edge_end>Integer()
Actor Reference()<edge_begin><edge_end>Identified Element(name, id, description)
Variable()<edge_begin><edge_end>Identified Element(name, id, description)
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Identified Element(name, id, description)
Specification(version)<edge_begin><edge_end>Contact Information(address, email, phone Number, country)
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Element Refinement(sub Element Ref Entries, refined Element Entries)
Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Normalized Ratio()
Trace Design Element Ref(container)<edge_begin><edge_end>Verifiable Element(verified)
Abstract Requirement(risk)<edge_begin><edge_end>Requirements Package()
Non Functional Goal()<edge_begin><edge_end>Abstract Goal()
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Textual Contractual Element(priority)
Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Identified Element(name, id, description)
Referenced Design Elements(agregation Type)<edge_begin><edge_end>Identified Element(name, id, description)
Sub Goal Reference()<edge_begin><edge_end>Abstract Goal()
Specification(version)<edge_begin><edge_end>Stakeholder()
Rationale()<edge_begin><edge_end>Identified Element(name, id, description)
Requirements Package()<edge_begin><edge_end>Verifiable Element(verified)
System Context()<edge_begin><edge_end>System Overview(purpose)
System Overview(purpose)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Prioritized Sat Design Element Ref(priority, weight)<edge_begin><edge_end>Satisfiable Design Element Ref()
Quality Objective(modality, bound)<edge_begin><edge_end>Non Functional Goal()
Element Refinement(sub Element Ref Entries, refined Element Entries)<edge_begin><edge_end>Refineable Element()
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Specification(version)
Ref Query Collected Design Elements()<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Positive Factor()
Verifiable Design Element Ref()<edge_begin><edge_end>Design Element Reference(evaluation Result)
Specification(version)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Syst Context Design Elem Ref()<edge_begin><edge_end>Design Element Reference(evaluation Result)
Satisfiable Design Element Ref()<edge_begin><edge_end>Design Element Reference(evaluation Result)
Requirements Package()<edge_begin><edge_end>Abstract Requirement(risk)
Requirement()<edge_begin><edge_end>Assumption()
Design Element Reference(evaluation Result)<edge_begin><edge_end>Identified Element(name, id, description)
Textual Contractual Element(priority)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Interaction Variable(type, neglected)<edge_begin><edge_end>Variable()
Goals Package()<edge_begin><edge_end>Rdal Org Package(contractual Element Entries, refinement Entries)
Referenced Design Elements(agregation Type)<edge_begin><edge_end>Design Element Reference(evaluation Result)
Requirement()<edge_begin><edge_end>Abstract Requirement(risk)
Abstract Requirement(risk)<edge_begin><edge_end>Textual Contractual Element(priority)
Conflict(degree)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Requirement Refinement()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Goal Refinement()<edge_begin><edge_end>Element Refinement(sub Element Ref Entries, refined Element Entries)
Goal Refinement()<edge_begin><edge_end>Abstract Goal()
Trace Design Element Ref(container)<edge_begin><edge_end>Requirements Coverage Data(nb Requirements, verification Level)
Assumption()<edge_begin><edge_end>Abstract Requirement(risk)
System Overview(purpose)<edge_begin><edge_end>Interaction Variable(type, neglected)
Sub Element Reference(weight, referenced Element Entries)<edge_begin><edge_end>Refineable Element()
Stakeholder()<edge_begin><edge_end>Contact Information(address, email, phone Number, country)
Element Refinement(sub Element Ref Entries, refined Element Entries)<edge_begin><edge_end>Sub Element Reference(weight, referenced Element Entries)
Prioritized Sat Design Element Ref(priority, weight)<edge_begin><edge_end>Normalized Ratio()
Conflict(degree)<edge_begin><edge_end>Identified Element(name, id, description)
Requirement Refinement()<edge_begin><edge_end>Verifiable Element(verified)
System Context()<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Satisfiable Element(satisfaction Level)<edge_begin><edge_end>Normalized Ratio()
Specification(version)<edge_begin><edge_end>Conflict(degree)
Traceable To Design Elements Element()<edge_begin><edge_end>Identified Element(name, id, description)
Element Refinement(sub Element Ref Entries, refined Element Entries)<edge_begin><edge_end>Identified Element(name, id, description)
Abstract Requirement(risk)<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Abstract Goal()<edge_begin><edge_end>Conflict(degree)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Normalized Ratio()
Identified Element(name, id, description)<edge_begin><edge_end>User Property(name, value)
Requirements Package()<edge_begin><edge_end>Requirement Refinement()
Sub Requirement Reference()<edge_begin><edge_end>Abstract Requirement(risk)
Specification(version)<edge_begin><edge_end>System Overview(purpose)
Quality Objective(modality, bound)<edge_begin><edge_end>Sensitivity()
Conflict(degree)<edge_begin><edge_end>Normalized Ratio()
Requirement Refinement()<edge_begin><edge_end>Sub Requirement Reference()
Trace()<edge_begin><edge_end>Specification(version)
System Context()<edge_begin><edge_end>Interaction Variable(type, neglected)
Sub Element Reference(weight, referenced Element Entries)<edge_begin><edge_end>Identified Element(name, id, description)
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Rdal Org Package(contractual Element Entries, refinement Entries)
Goals Package()<edge_begin><edge_end>Abstract Goal()
System Overview(purpose)<edge_begin><edge_end>System Context()
Assumption()<edge_begin><edge_end>Requirement()
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Date()
Sub Goal Reference()<edge_begin><edge_end>Sub Element Reference(weight, referenced Element Entries)
System Overview(purpose)<edge_begin><edge_end>Capability()
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Rationale()
Abstract Requirement(risk)<edge_begin><edge_end>Normalized Ratio()
Abstract Goal()<edge_begin><edge_end>Refineable Element()
Verifiable Design Element Ref()<edge_begin><edge_end>Verifiable Element(verified)
Assumption()<edge_begin><edge_end>Assumption()
Traceable To Design Elements Element()<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Abstract Goal()<edge_begin><edge_end>Textual Contractual Element(priority)
Traceable To Design Elements Element()<edge_begin><edge_end>Specification(version)
Rationale()<edge_begin><edge_end>Stakeholder()
Contact Information(address, email, phone Number, country)<edge_begin><edge_end>Identified Element(name, id, description)
Specification(version)<edge_begin><edge_end>Actor Reference()
Non Functional Property()<edge_begin><edge_end>Identified Element(name, id, description)
System Function Goal()<edge_begin><edge_end>Abstract Goal()
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Requirement Refinement()<edge_begin><edge_end>Abstract Requirement(risk)
Abstract Goal()<edge_begin><edge_end>Goals Package()
Goal Refinement()<edge_begin><edge_end>Sub Goal Reference()
Requirements Package()<edge_begin><edge_end>Rdal Org Package(contractual Element Entries, refinement Entries)
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)
Quality Objective(modality, bound)<edge_begin><edge_end>Non Functional Property()
Abstract Requirement(risk)<edge_begin><edge_end>Verifiable Element(verified)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Identified Element(name, id, description)
Sub Requirement Reference()<edge_begin><edge_end>Sub Element Reference(weight, referenced Element Entries)
Design Element Reference(evaluation Result)<edge_begin><edge_end>Traceable To Design Elements Element()
Prioritized Sat Design Element Ref(priority, weight)<edge_begin><edge_end>Positive Integer()
Goal Refinement()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Trace Design Element Ref(container)<edge_begin><edge_end>Design Element Reference(evaluation Result)
Trace()<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Specification(version)<edge_begin><edge_end>Verifiable Element(verified)
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Traceable To Design Elements Element()
S Column(simple Type)<edge_begin><edge_end>S Inlined SQL Type(value)
S String()<edge_begin><edge_end>S Inlined SQL Type(value)
S Table(entityname, cached, prefix)<edge_begin><edge_end>S Settings(schema, javapackage, engine)
S Enum()<edge_begin><edge_end>S Ext Declared SQL Type()
S Decimal()<edge_begin><edge_end>S Inlined SQL Type(value)
S Table Member(name)<edge_begin><edge_end>S Column Props(nullable, aes, index, javacolumn)
S Join Column()<edge_begin><edge_end>S Table Member(name)
S Column(simple Type)<edge_begin><edge_end>S Table Member(name)
S Model(generated File)<edge_begin><edge_end>S Settings(schema, javapackage, engine)
S Table(entityname, cached, prefix)<edge_begin><edge_end>S Table Member(name)
S Table(entityname, cached, prefix)<edge_begin><edge_end>S Artifact(name)
S Join Column()<edge_begin><edge_end>S Table(entityname, cached, prefix)
S Enum()<edge_begin><edge_end>S Enum Literal(name, value)
Task Element()<edge_begin><edge_end>Commentable Element(comment)
Project()<edge_begin><edge_end>Target(if, unless)
Target(if, unless)<edge_begin><edge_end>Describable Element(description)
Attribute(value)<edge_begin><edge_end>String()
Target(if, unless)<edge_begin><edge_end>Task()
Target(if, unless)<edge_begin><edge_end>Named Element(name)
Project()<edge_begin><edge_end>Named Element(name)
Project()<edge_begin><edge_end>Commentable Element(comment)
Target(if, unless)<edge_begin><edge_end>Commentable Element(comment)
Attribute(value)<edge_begin><edge_end>Named Element(name)
Named Element(name)<edge_begin><edge_end>String()
Task()<edge_begin><edge_end>Task Element()
Target(if, unless)<edge_begin><edge_end>Target(if, unless)
Project()<edge_begin><edge_end>Property(name, value, location, refid, resource, file, url, environment, classpath, classpathref, prefix)
Target(if, unless)<edge_begin><edge_end>String()
Commentable Element(comment)<edge_begin><edge_end>String()
Property(name, value, location, refid, resource, file, url, environment, classpath, classpathref, prefix)<edge_begin><edge_end>String()
Task Element()<edge_begin><edge_end>Task Element()
Task Element()<edge_begin><edge_end>Named Element(name)
Root Folder(name)<edge_begin><edge_end>Or State()
Data Var()<edge_begin><edge_end>Association Data State Base()
State()<edge_begin><edge_end>Or State()
Root Folder(name)<edge_begin><edge_end>String()
Mga Object(name, position)<edge_begin><edge_end>String()
Or State()<edge_begin><edge_end>State Data Relation(value, color)
State Data Relation(value, color)<edge_begin><edge_end>Or State()
State Base(default Transition, marked)<edge_begin><edge_end>Mga Object(name, position)
Root Folder(name)<edge_begin><edge_end>Root Folder(name)
Data Var()<edge_begin><edge_end>State Base(default Transition, marked)
Init()<edge_begin><edge_end>Or State()
State Data Relation(value, color)<edge_begin><edge_end>Association Data State Base()
Or State()<edge_begin><edge_end>Init()
State Base(default Transition, marked)<edge_begin><edge_end>Association State State()
State Base(default Transition, marked)<edge_begin><edge_end>Boolean()
Association Data State Base()<edge_begin><edge_end>Data Var()
State Date Relation(value, color)<edge_begin><edge_end>String()
Compound State()<edge_begin><edge_end>Or State()
State Base(default Transition, marked)<edge_begin><edge_end>Data Var()
Or State()<edge_begin><edge_end>Root Folder(name)
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>Or State()
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>String()
Compound State()<edge_begin><edge_end>State Base(default Transition, marked)
State Data Relation(value, color)<edge_begin><edge_end>String()
Data Var()<edge_begin><edge_end>Mga Object(name, position)
Compound State()<edge_begin><edge_end>And State()
Or State()<edge_begin><edge_end>Data Var()
State Base(default Transition, marked)<edge_begin><edge_end>Association Data State Base()
Or State()<edge_begin><edge_end>State()
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>Association State State()
State Base(default Transition, marked)<edge_begin><edge_end>String()
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>Boolean()
Data Var()<edge_begin><edge_end>Or State()
Association Data State Base()<edge_begin><edge_end>State Data Relation(value, color)
Or State()<edge_begin><edge_end>Compound State()
State Data Relation(value, color)<edge_begin><edge_end>Primitive State()
State Date Relation(value, color)<edge_begin><edge_end>Mga Object(name, position)
Classifier(is Abstract)<edge_begin><edge_end>Type()
Packageable Element()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Classifier(is Abstract)<edge_begin><edge_end>Boolean()
Parameterable Element()<edge_begin><edge_end>Element()
Named Element(name, visibility, qualified Name)<edge_begin><edge_end>Namespace()
Relationship()<edge_begin><edge_end>Element()
Classifier(is Abstract)<edge_begin><edge_end>Templateable Element()
Classifier(is Abstract)<edge_begin><edge_end>Classifier(is Abstract)
Extend()<edge_begin><edge_end>Use Case()
Type()<edge_begin><edge_end>Packageable Element()
Extension Point()<edge_begin><edge_end>Use Case()
Redefinable Element(is Leaf)<edge_begin><edge_end>Classifier(is Abstract)
Redefinable Element(is Leaf)<edge_begin><edge_end>Redefinable Element(is Leaf)
Templateable Element()<edge_begin><edge_end>Element()
Use Case()<edge_begin><edge_end>Include()
Extend()<edge_begin><edge_end>Extension Point()
Behaviored Classifier()<edge_begin><edge_end>Classifier(is Abstract)
Directed Relationship()<edge_begin><edge_end>Relationship()
Namespace()<edge_begin><edge_end>Packageable Element()
Classifier(is Abstract)<edge_begin><edge_end>Namespace()
Include()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Extend()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Extension Point()<edge_begin><edge_end>Redefinable Element(is Leaf)
Use Case()<edge_begin><edge_end>Classifier(is Abstract)
Use Case()<edge_begin><edge_end>Behaviored Classifier()
Packageable Element()<edge_begin><edge_end>Parameterable Element()
Include()<edge_begin><edge_end>Use Case()
Namespace()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Use Case()<edge_begin><edge_end>Extend()
Include()<edge_begin><edge_end>Directed Relationship()
Directed Relationship()<edge_begin><edge_end>Element()
Named Element(name, visibility, qualified Name)<edge_begin><edge_end>Element()
Actor()<edge_begin><edge_end>Behaviored Classifier()
Redefinable Element(is Leaf)<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
MULTISET()<edge_begin><edge_end>Collection Type()
Structured Type(is final, is instantiable)<edge_begin><edge_end>Attribute(default)
Typed Table()<edge_begin><edge_end>Typed Table()
Structured Type(is final, is instantiable)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Boolean Type(descriptor)<edge_begin><edge_end>Predefined Type()
String Feature(key, value)<edge_begin><edge_end>Feature()
Datetime Type(descriptor)<edge_begin><edge_end>Predefined Type()
Derived Table(query expression)<edge_begin><edge_end>Table(name)
ROW()<edge_begin><edge_end>Field()
Table(name)<edge_begin><edge_end>View()
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Table(name)<edge_begin><edge_end>Schema(name)
Data Type()<edge_begin><edge_end>Schema(name)
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Trigger(name)<edge_begin><edge_end>Restriction()
Typed Table()<edge_begin><edge_end>Base Table()
Function()<edge_begin><edge_end>Data Type()
Function()<edge_begin><edge_end>Behavioural Component(name, body)
Trigger Descriptor(event, action Time, triggered Action, level)<edge_begin><edge_end>Trigger(name)
Collection Type()<edge_begin><edge_end>Collection Type()
User Defined Type(name)<edge_begin><edge_end>Data Type()
Schema(name)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
Procedure()<edge_begin><edge_end>Behavioural Component(name, body)
Schema(name)<edge_begin><edge_end>Table(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Method(name, body)<edge_begin><edge_end>Method Parameter()
Collection Type()<edge_begin><edge_end>Data Type()
Structured Type(is final, is instantiable)<edge_begin><edge_end>User Defined Type(name)
Structural Component(name)<edge_begin><edge_end>Restriction()
Base Table()<edge_begin><edge_end>Table(name)
Behavioural Component(name, body)<edge_begin><edge_end>Schema(name)
Method(name, body)<edge_begin><edge_end>Data Type()
Predefined Type()<edge_begin><edge_end>Distinct Type()
View()<edge_begin><edge_end>Table(name)
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
Interval Feature(key, value)<edge_begin><edge_end>Feature()
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Collection Type()<edge_begin><edge_end>Constructed Type(name)
Restriction()<edge_begin><edge_end>Structural Component(name)
Column(default)<edge_begin><edge_end>Table(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Behavioural Component(name, body)<edge_begin><edge_end>Parameter With Mode(mode)
Method Parameter()<edge_begin><edge_end>Parameter(name)
Typed Table()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Constructed Type(name)<edge_begin><edge_end>Data Type()
Column Constraint()<edge_begin><edge_end>Restriction()
Structural Component(name)<edge_begin><edge_end>View()
Not Null()<edge_begin><edge_end>Column Constraint()
Attribute(default)<edge_begin><edge_end>Structural Component(name)
Method(name, body)<edge_begin><edge_end>Method(name, body)
Reference Type()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Field()<edge_begin><edge_end>ROW()
Domain(name, expression, default)<edge_begin><edge_end>Schema(name)
Distinct Type()<edge_begin><edge_end>Predefined Type()
Column(default)<edge_begin><edge_end>Structural Component(name)
Structural Component(name)<edge_begin><edge_end>Feature()
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Parameter(name)<edge_begin><edge_end>Data Type()
Interval Type(descriptor)<edge_begin><edge_end>Predefined Type()
View()<edge_begin><edge_end>Structural Component(name)
Table(name)<edge_begin><edge_end>Restriction()
Trigger(name)<edge_begin><edge_end>Structural Component(name)
Numeric Type(descriptor)<edge_begin><edge_end>Predefined Type()
Restriction()<edge_begin><edge_end>Table(name)
Structural Component(name)<edge_begin><edge_end>Data Type()
Trigger(name)<edge_begin><edge_end>Trigger Descriptor(event, action Time, triggered Action, level)
ROW()<edge_begin><edge_end>Constructed Type(name)
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Era Type(calendar, style)
Currency Style Type(text, text1, text2, text3, text4, automatic Order, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)
Boolean Style Type(text, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Boolean Type()
Text Style Type(text, group, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Text Content Type()
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Year Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Scientific Number Type(decimal Places, grouping, min Exponent Digits, min Integer Digits)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Month Type(calendar, possessive Form, style, textual)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Era Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Number Style Type(text, any Number Group, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Quarter Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Text Content Type()
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Year Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Fraction Type(denominator Value, grouping, min Denominator Digits, min Integer Digits, min Numerator Digits)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Week Of Year Type(calendar)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Seconds Type(decimal Places, style)
Week Of Year Type(calendar)<edge_begin><edge_end>Calendar Type()
Day Of Week Type(calendar, style)<edge_begin><edge_end>Calendar Type()
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Am Pm Type()
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Calendar Type()
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Hours Type(style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Week Of Year Type(calendar)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Embedded Text Type(mixed, position)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Seconds Type(decimal Places, style)
Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)<edge_begin><edge_end>Embedded Text Type(mixed, position)
Month Type(calendar, possessive Form, style, textual)<edge_begin><edge_end>Calendar Type()
Currency Style Type(text, text1, text2, text3, text4, automatic Order, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Currency Symbol Type(mixed, country, language)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Month Type(calendar, possessive Form, style, textual)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Minutes Type(style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Percentage Style Type(text, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Day Of Week Type(calendar, style)
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Minutes Type(style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Hours Type(style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Minutes Type(style)
Year Type(calendar, style)<edge_begin><edge_end>Calendar Type()
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Text Style Type(text, group, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Currency Style Type(text, text1, text2, text3, text4, automatic Order, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Quarter Type(calendar, style)
Percentage Style Type(text, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Boolean Type()
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Hours Type(style)
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Seconds Type(decimal Places, style)
Graph Graph Pattern()<edge_begin><edge_end>Graph Pattern()
Function(name)<edge_begin><edge_end>Group Condition()
Function(name)<edge_begin><edge_end>Constraint()
Service Graph Pattern()<edge_begin><edge_end>Graph Node()
Filter Pattern()<edge_begin><edge_end>Expression()
Insert Query(graph)<edge_begin><edge_end>Modify Query(with Graph)
Selection Query()<edge_begin><edge_end>Base()
Service Graph Pattern()<edge_begin><edge_end>Graph Pattern()
Selection Query()<edge_begin><edge_end>Where Clause()
Construct Query()<edge_begin><edge_end>Group Graph Pattern()
Ask Query()<edge_begin><edge_end>Selection Query()
Sub Select Query()<edge_begin><edge_end>Where Clause()
Delete Query(graph)<edge_begin><edge_end>Modify Query(with Graph)
Built In Call()<edge_begin><edge_end>Group Condition()
Selection Query()<edge_begin><edge_end>SPARQL Query()
Min Agregate()<edge_begin><edge_end>Aggregate()
Update Query()<edge_begin><edge_end>Update Operation()
Base()<edge_begin><edge_end>IRI(value)
Group Aggregate(is Distinct, value)<edge_begin><edge_end>Expression()
Built In Call()<edge_begin><edge_end>Constraint()
Sub Select Query()<edge_begin><edge_end>Having Clause()
Sparql Function()<edge_begin><edge_end>Function(name)
Exists Pattern()<edge_begin><edge_end>Group Graph Pattern()
Or Filter Expression()<edge_begin><edge_end>Expression()
Modify Query(with Graph)<edge_begin><edge_end>Group Graph Pattern()
Dataset Clause()<edge_begin><edge_end>IRI(value)
Variable(name)<edge_begin><edge_end>Graph Node()
Exists Pattern()<edge_begin><edge_end>Graph Pattern()
Construct Query()<edge_begin><edge_end>Selection Query()
Named Variable()<edge_begin><edge_end>Prefix(name, iref)
Insert Data Query(graph)<edge_begin><edge_end>Modify Query(with Graph)
Not Exists Pattern()<edge_begin><edge_end>Group Graph Pattern()
Service Data Set()<edge_begin><edge_end>Dataset Clause()
Where Clause()<edge_begin><edge_end>Group Graph Pattern()
Select Query(is Distinct, is Reduced, all)<edge_begin><edge_end>Selection Query()
Property List()<edge_begin><edge_end>Graph Node()
Selection Query()<edge_begin><edge_end>Group Clause()
Selection Query()<edge_begin><edge_end>Limit Clause(limit)
Minus Pattern()<edge_begin><edge_end>Group Graph Pattern()
Select Query(is Distinct, is Reduced, all)<edge_begin><edge_end>Variable(name)
Group Aggregate(is Distinct, value)<edge_begin><edge_end>Aggregate()
Delete Where Query()<edge_begin><edge_end>Modify Query(with Graph)
Insert Query(graph)<edge_begin><edge_end>Where Clause()
Selection Query()<edge_begin><edge_end>Dataset Clause()
Avg Aggregate()<edge_begin><edge_end>Aggregate()
Clear Graph Query(uri, is Default)<edge_begin><edge_end>Update Operation()
Selection Query()<edge_begin><edge_end>Having Clause()
Named Function()<edge_begin><edge_end>Function(name)
Built In Call()<edge_begin><edge_end>Variable(name)
Expression Filter Expression(operator)<edge_begin><edge_end>Expression()
Sample Aggregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Function(name)<edge_begin><edge_end>Variable(name)
Triples Same Subject()<edge_begin><edge_end>Graph Pattern()
Drop Graph Query(is Silent, graph)<edge_begin><edge_end>Update Operation()
Graph Node()<edge_begin><edge_end>Filter Node()
Type Tag()<edge_begin><edge_end>Graph Node()
Group Clause()<edge_begin><edge_end>Group Condition()
Not Exists Pattern()<edge_begin><edge_end>Graph Pattern()
Named Variable()<edge_begin><edge_end>Variable(name)
Triples Same Subject()<edge_begin><edge_end>Graph Node()
Named Function()<edge_begin><edge_end>Prefix(name, iref)
SPARQL Query()<edge_begin><edge_end>Prefix(name, iref)
Optional Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Function(name)<edge_begin><edge_end>Filter Node()
Load Graph Query(graph, into Graph)<edge_begin><edge_end>Update Operation()
Named Data Set()<edge_begin><edge_end>Dataset Clause()
IRI(value)<edge_begin><edge_end>Graph Node()
Built In Call()<edge_begin><edge_end>Expression()
Minus Pattern()<edge_begin><edge_end>Graph Pattern()
Value()<edge_begin><edge_end>Graph Node()
Triples Same Subject()<edge_begin><edge_end>Property List()
Sum Aggregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Group Or Union Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Delete Query(graph)<edge_begin><edge_end>Where Clause()
Service Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Default Data Set()<edge_begin><edge_end>Dataset Clause()
Sample Aggregate()<edge_begin><edge_end>Aggregate()
Max Aggregate()<edge_begin><edge_end>Aggregate()
Graph Graph Pattern()<edge_begin><edge_end>Graph Node()
Group Graph Pattern Sub()<edge_begin><edge_end>Group Graph Pattern()
Parameter(name)<edge_begin><edge_end>Graph Node()
And Filter Expression()<edge_begin><edge_end>Expression()
Sub Select Query()<edge_begin><edge_end>Group Clause()
Create Graph Query(is Silent, graph)<edge_begin><edge_end>Update Operation()
Blank Node(name)<edge_begin><edge_end>Graph Node()
Sum Aggregate()<edge_begin><edge_end>Aggregate()
Type Tag()<edge_begin><edge_end>RDF Tag()
Un Named Variable()<edge_begin><edge_end>Variable(name)
Avg Aggregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Min Agregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Group Or Union Graph Pattern()<edge_begin><edge_end>Graph Pattern()
Having Clause()<edge_begin><edge_end>Constraint()
Provided Capability()<edge_begin><edge_end>I Provided Capability(name, namespace, version)
Map Rule()<edge_begin><edge_end>Description Provider(description)
Category()<edge_begin><edge_end>Bundles()
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Details()
Installable Units()<edge_begin><edge_end>Fragments()
Metadata Repository()<edge_begin><edge_end>I Metadata Repository()
Valid Configurations Rule()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
IU Presentation(id, version, name, label, description, type)<edge_begin><edge_end>Installable Unit()
Contribution(label)<edge_begin><edge_end>Description Provider(description)
I Touchpoint Type(id, version)<edge_begin><edge_end>Version()
Update Descriptor()<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Version Range()
Product()<edge_begin><edge_end>Bundles()
Product()<edge_begin><edge_end>Features()
Instruction Map(key)<edge_begin><edge_end>Touchpoint Instruction()
Feature()<edge_begin><edge_end>Fragments()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Description Provider(description)
Touchpoints()<edge_begin><edge_end>I Touchpoint Type(id, version)
Contribution(label)<edge_begin><edge_end>Contact(name, email)
I Copyright(location, body)<edge_begin><edge_end>URI()
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
Valid Configurations Rule()<edge_begin><edge_end>Map Rule()
Category()<edge_begin><edge_end>IU Details()
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Status Provider()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>I Adaptable()
Installable Units()<edge_begin><edge_end>Products()
Provided Capability Wrapper()<edge_begin><edge_end>I Provided Capability(name, namespace, version)
IU Details()<edge_begin><edge_end>Required Capabilities()
IU Presentation(id, version, name, label, description, type)<edge_begin><edge_end>Version()
Product()<edge_begin><edge_end>Fragments()
Installable Unit()<edge_begin><edge_end>I Installable Unit(filter, id, version, resolved, singleton)
Installable Units()<edge_begin><edge_end>Categories()
Touchpoint Data()<edge_begin><edge_end>I Touchpoint Data()
Required Capability Wrapper()<edge_begin><edge_end>Required Capability()
I Installable Unit Fragment()<edge_begin><edge_end>I Installable Unit(filter, id, version, resolved, singleton)
IU Details()<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Fragments()<edge_begin><edge_end>Fragment()
Installable Unit Fragment()<edge_begin><edge_end>Installable Unit()
Installable Unit()<edge_begin><edge_end>Artifact Key()
I Update Descriptor(id, range, description, severity)<edge_begin><edge_end>Version Range()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Status Provider()
I Metadata Repository()<edge_begin><edge_end>I Queryable()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Product()
Fragment()<edge_begin><edge_end>Bundle()
Product()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Custom Category(identifier, label, description)<edge_begin><edge_end>Feature()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contact(name, email)
IU Details()<edge_begin><edge_end>Provided Capabilities()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Category()<edge_begin><edge_end>Products()
Provided Capability Wrapper()<edge_begin><edge_end>Provided Capability()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contribution(label)
Features()<edge_begin><edge_end>Feature()
IU Details()<edge_begin><edge_end>Touchpoints()
Mapped Unit()<edge_begin><edge_end>Installable Unit Request(name, version Range)
IU Details()<edge_begin><edge_end>I License(location, body, digest)
Bundles()<edge_begin><edge_end>Bundle()
Feature()<edge_begin><edge_end>Bundles()
Custom Category(identifier, label, description)<edge_begin><edge_end>Status Provider()
Metadata Repository()<edge_begin><edge_end>Repository Reference(location, type, options, nickname)
Category()<edge_begin><edge_end>Features()
Installable Unit Request(name, version Range)<edge_begin><edge_end>Description Provider(description)
Installable Units()<edge_begin><edge_end>Miscellaneous()
Required Capabilities()<edge_begin><edge_end>Required Capability Wrapper()
IU Details()<edge_begin><edge_end>Properties()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Feature()
Installable Unit()<edge_begin><edge_end>Required Capability()
IU Details()<edge_begin><edge_end>I Copyright(location, body)
I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)<edge_begin><edge_end>Version Range()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Bundle()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Required Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Other IU()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
I Metadata Repository()<edge_begin><edge_end>I Repository(location, name, type, version, description, provider, modifiable)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Category()
Copyright()<edge_begin><edge_end>I Copyright(location, body)
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type)
Custom Category(identifier, label, description)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Contribution(label)<edge_begin><edge_end>Mapped Repository(mirror Artifacts, category Prefix)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Map Rule()
Contribution(label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Map Rule()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Touchpoint Instruction()<edge_begin><edge_end>I Touchpoint Instruction(body, import Attribute)
Touchpoints()<edge_begin><edge_end>Touchpoint Data()
I Provided Capability(name, namespace, version)<edge_begin><edge_end>Version()
Bundle()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Products()<edge_begin><edge_end>Product()
Touchpoint Data()<edge_begin><edge_end>Instruction Map(key)
Properties()<edge_begin><edge_end>Property(key, value)
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Metadata Repository()
Contribution(label)<edge_begin><edge_end>Status Provider()
Metadata Repository()<edge_begin><edge_end>Property(key, value)
License()<edge_begin><edge_end>I License(location, body, digest)
Contact(name, email)<edge_begin><edge_end>Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Description Provider(description)
Category()<edge_begin><edge_end>Fragments()
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>URI()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Custom Category(identifier, label, description)
Metadata Repository()<edge_begin><edge_end>Installable Unit()
Installable Units()<edge_begin><edge_end>Bundles()
Installable Units()<edge_begin><edge_end>Features()
Configuration(operating System, window System, architecture)<edge_begin><edge_end>Enabled Status Provider(enabled)
Provided Capabilities()<edge_begin><edge_end>Provided Capability Wrapper()
I License(location, body, digest)<edge_begin><edge_end>URI()
Status Provider()<edge_begin><edge_end>Status(code, message)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Copyright(location, body)
Exclusion Rule()<edge_begin><edge_end>Map Rule()
Required Capability Wrapper()<edge_begin><edge_end>I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)
Artifact Key()<edge_begin><edge_end>I Artifact Key(classifier, id, version)
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Properties()
Contribution(label)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Miscellaneous()<edge_begin><edge_end>Other IU()
Category()<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type)
Transition()<edge_begin><edge_end>Net Content Element()
Arc()<edge_begin><edge_end>Net Content Element()
Name()<edge_begin><edge_end>Labeled Element()
Net Element()<edge_begin><edge_end>PNML Document()
Net Content()<edge_begin><edge_end>Located Element(location)
Net Element()<edge_begin><edge_end>Ided Element(id)
Labeled Element()<edge_begin><edge_end>Located Element(location)
Arc()<edge_begin><edge_end>Net Content()
Net Content Element()<edge_begin><edge_end>Net Content()
Ided Element(id)<edge_begin><edge_end>Located Element(location)
PNML Document()<edge_begin><edge_end>URI(value)
Labeled Element()<edge_begin><edge_end>Label(text)
Net Element()<edge_begin><edge_end>Net Content()
Place()<edge_begin><edge_end>Net Content Element()
Located Element(location)<edge_begin><edge_end>String()
URI(value)<edge_begin><edge_end>Located Element(location)
Net Content()<edge_begin><edge_end>Net Element()
Name()<edge_begin><edge_end>Net Element()
Arc()<edge_begin><edge_end>Ided Element(id)
Net Content Element()<edge_begin><edge_end>Ided Element(id)
Name()<edge_begin><edge_end>Net Content()
PNML Document()<edge_begin><edge_end>Located Element(location)
Net Element()<edge_begin><edge_end>Name()
Label(text)<edge_begin><edge_end>Labeled Element()
Net Content()<edge_begin><edge_end>Name()
Arc(kind, weight)<edge_begin><edge_end>Node(name)
Fire Transition Event(time)<edge_begin><edge_end>Transition(min time, max time)
Place dynamic(marking)<edge_begin><edge_end>Node dynamic()
PN Trace()<edge_begin><edge_end>PN Scenario()
Petri Net dynamic()<edge_begin><edge_end>Petri Net(name)
PN Scenario()<edge_begin><edge_end>PN Trace()
Petri Net(name)<edge_begin><edge_end>Node(name)
Fire Transition Event(time)<edge_begin><edge_end>Petri Net Event()
Petri Net dynamic()<edge_begin><edge_end>Node dynamic()
Node(name)<edge_begin><edge_end>Petri Net(name)
Node dynamic()<edge_begin><edge_end>Node(name)
Place(initial Marking)<edge_begin><edge_end>Node(name)
Arc(kind, weight)<edge_begin><edge_end>Petri Net(name)
Petri Net(name)<edge_begin><edge_end>Arc(kind, weight)
PN Scenario()<edge_begin><edge_end>PN Sim Event(internal, date, name)
Transition(min time, max time)<edge_begin><edge_end>Node(name)
Extend()<edge_begin><edge_end>Extension Point()
Use Case(extension Point)<edge_begin><edge_end>String()
Extension Point()<edge_begin><edge_end>Use Case(extension Point)
Extension Point()<edge_begin><edge_end>Model Element()
Extend()<edge_begin><edge_end>Boolean Expression(value)
Use Case(extension Point)<edge_begin><edge_end>Extension Point()
Include()<edge_begin><edge_end>Relation Ship()
Extend()<edge_begin><edge_end>Use Case(extension Point)
Location Reference(value)<edge_begin><edge_end>String()
Use Case(extension Point)<edge_begin><edge_end>Extend()
Actor()<edge_begin><edge_end>Classifier()
Classifier()<edge_begin><edge_end>Instance()
Extension Point()<edge_begin><edge_end>Extend()
Boolean Expression(value)<edge_begin><edge_end>String()
Extend()<edge_begin><edge_end>Relation Ship()
Instance()<edge_begin><edge_end>Classifier()
Use Case Instance()<edge_begin><edge_end>Instance()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Feature Request()<edge_begin><edge_end>Help Request()
Corresponding Author()<edge_begin><edge_end>Author()
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Event URL()<edge_begin><edge_end>Event()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Review()
User()<edge_begin><edge_end>Person(email)
Activity()<edge_begin><edge_end>Person(email)
Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Preview()<edge_begin><edge_end>Review Form()
Administrator()<edge_begin><edge_end>Person(email)
Person(email)<edge_begin><edge_end>Activity()
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Person(email)<edge_begin><edge_end>Inforamtion()
Paper(paper ID, title)<edge_begin><edge_end>Author()
Reviewer()<edge_begin><edge_end>Administrator()
Role()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>User()
Help Request()<edge_begin><edge_end>Request()
Conference Member()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Event()
Reviewer()<edge_begin><edge_end>External Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Head Role()<edge_begin><edge_end>Role()
Rejection Email()<edge_begin><edge_end>Email()
Document()<edge_begin><edge_end>User()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Email()<edge_begin><edge_end>Document()
Author Role()<edge_begin><edge_end>Role()
Document()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>User()
Activity()<edge_begin><edge_end>Thing()
Review Form()<edge_begin><edge_end>Event Setup()
Detail()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Reviewer()
Event Tracks()<edge_begin><edge_end>Event Setup()
Event Approval()<edge_begin><edge_end>Activity()
Symposium()<edge_begin><edge_end>Event()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email)
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Co-author()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(email)
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Notification Email()<edge_begin><edge_end>Email()
Document()<edge_begin><edge_end>Person(email)
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Meta-Review()<edge_begin><edge_end>Review()
Author Not Reviewer()<edge_begin><edge_end>Author()
User()<edge_begin><edge_end>Document()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Person(email)<edge_begin><edge_end>Event()
Request()<edge_begin><edge_end>Activity()
Committe Role()<edge_begin><edge_end>Role()
Program Committee Chair()<edge_begin><edge_end>Chairman()
Template()<edge_begin><edge_end>Document()
Event Setup()<edge_begin><edge_end>Event()
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Reviewer Role()<edge_begin><edge_end>Role()
Event()<edge_begin><edge_end>Administrator()
Event()<edge_begin><edge_end>Event Setup()
Role()<edge_begin><edge_end>Administrator()
Assistance()<edge_begin><edge_end>Help Request()
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title)
Group Email()<edge_begin><edge_end>Email()
Event Creation()<edge_begin><edge_end>Activity()
Misc()<edge_begin><edge_end>Help Request()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Person(email)<edge_begin><edge_end>String()
Admin Role()<edge_begin><edge_end>Role()
Paper(paper ID, title)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
External Reviewer()<edge_begin><edge_end>Reviewer()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Acceptance()<edge_begin><edge_end>Decision()
Approval Email()<edge_begin><edge_end>Event()
Account()<edge_begin><edge_end>Person(email)
Reviewer()<edge_begin><edge_end>User()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Conference Chair()<edge_begin><edge_end>Conference Member()
Committee()<edge_begin><edge_end>User()
Rejection()<edge_begin><edge_end>Decision()
Workshop()<edge_begin><edge_end>Event()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event()
Research Topic()<edge_begin><edge_end>Event Setup()
Associated Chair()<edge_begin><edge_end>Chairman()
Event()<edge_begin><edge_end>Thing()
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Administrator()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Reviewer()<edge_begin><edge_end>Bid()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Submission()<edge_begin><edge_end>Document()
Person(email)<edge_begin><edge_end>Account()
Registration()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Event()<edge_begin><edge_end>Event Tracks()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Member()<edge_begin><edge_end>Person(email)
Associated Chair()<edge_begin><edge_end>Conference Member()
Person(email)<edge_begin><edge_end>Person(email)
Paper Typologies()<edge_begin><edge_end>Event Setup()
Email Template()<edge_begin><edge_end>Event Setup()
Emphasize()<edge_begin><edge_end>Mark Up()
Abstract Section()<edge_begin><edge_end>Text Or Markup()
Ordered List()<edge_begin><edge_end>Item()
Table()<edge_begin><edge_end>Table Row()
Section4()<edge_begin><edge_end>Abstract Section()
Section()<edge_begin><edge_end>Abstract Section()
Document()<edge_begin><edge_end>Abstract Section()
Chapter()<edge_begin><edge_end>Abstract Section()
Document()<edge_begin><edge_end>Part()
Document()<edge_begin><edge_end>Text Or Markup()
Item()<edge_begin><edge_end>Text Or Markup()
Section2Ref()<edge_begin><edge_end>Section2()
Section2()<edge_begin><edge_end>Abstract Section()
Emphasize()<edge_begin><edge_end>Markup In Code()
Ref()<edge_begin><edge_end>Identifiable(name)
Ref()<edge_begin><edge_end>Markup In Code()
Glossary()<edge_begin><edge_end>Glossary Entry(name, alias)
Part()<edge_begin><edge_end>Chapter()
Emphasize()<edge_begin><edge_end>Text Or Markup()
Ordered List()<edge_begin><edge_end>Mark Up()
Anchor()<edge_begin><edge_end>Mark Up()
Table Data()<edge_begin><edge_end>Text Or Markup()
Section()<edge_begin><edge_end>Section2()
Glossary Entry(name, alias)<edge_begin><edge_end>Text Or Markup()
Abstract Section()<edge_begin><edge_end>Identifiable(name)
Todo(text)<edge_begin><edge_end>Markup In Code()
Code Ref()<edge_begin><edge_end>Text Or Markup()
Anchor()<edge_begin><edge_end>Identifiable(name)
Section Ref()<edge_begin><edge_end>Section()
Document()<edge_begin><edge_end>Chapter()
Section3()<edge_begin><edge_end>Abstract Section()
Chapter()<edge_begin><edge_end>Section()
Code Ref()<edge_begin><edge_end>Mark Up()
Code Block()<edge_begin><edge_end>Lang Def(keywords, name)
Ref()<edge_begin><edge_end>Text Or Markup()
Link(url, text)<edge_begin><edge_end>Mark Up()
Code Block()<edge_begin><edge_end>Mark Up()
Part Ref()<edge_begin><edge_end>Part()
Anchor()<edge_begin><edge_end>Markup In Code()
Document()<edge_begin><edge_end>Glossary()
Document()<edge_begin><edge_end>Lang Def(keywords, name)
Ref()<edge_begin><edge_end>Mark Up()
Unordered List()<edge_begin><edge_end>Mark Up()
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Editor(name)
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Publisher(name, address)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Editor(name)
Proceedings(title, year, month, isbn)<edge_begin><edge_end>Record(ee, url, key, mdate)
Proceedings(title, year, month, isbn)<edge_begin><edge_end>Organization(name)
Masters Thesis(title, year, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Publisher(name, address)
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Organization(name)
Masters Thesis(title, year, month)<edge_begin><edge_end>School(name, address)
Www(title, year, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
Journal(name)<edge_begin><edge_end>Article(title, from Page, to Page, number, volume, month, year)
Ph D Thesis(title, year, month)<edge_begin><edge_end>School(name, address)
Record(ee, url, key, mdate)<edge_begin><edge_end>Author(name)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Organization(name)
Author(name)<edge_begin><edge_end>Record(ee, url, key, mdate)
Book(title, year, month, volume, series, edition, isbn)<edge_begin><edge_end>Publisher(name, address)
Www(title, year, month)<edge_begin><edge_end>Editor(name)
Proceedings(title, year, month, isbn)<edge_begin><edge_end>Editor(name)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Element Reference Expression()<edge_begin><edge_end>Expression()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Transition Reaction()<edge_begin><edge_end>Transition Statement()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Def Root()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Real Literal(value)<edge_begin><edge_end>Literal()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Statechart Root()<edge_begin><edge_end>Statechart Definition(namespace)
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Event Raising()<edge_begin><edge_end>Expression()
Event Raised Reference Expression()<edge_begin><edge_end>Expression()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>Def Root()
Event Definition(direction, type)<edge_begin><edge_end>Event Derivation()
State Root()<edge_begin><edge_end>State Declaration()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Hex Literal(value)<edge_begin><edge_end>Literal()
Root()<edge_begin><edge_end>Def Root()
Logical Or Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Def Root()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Reaction Priority(priority)<edge_begin><edge_end>Reaction Property()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Assignment(operator)<edge_begin><edge_end>Expression()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Transition Root()<edge_begin><edge_end>Transition Statement()
Conditional Expression()<edge_begin><edge_end>Expression()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Variable Definition(readonly, external, type)<edge_begin><edge_end>Expression()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Reaction()<edge_begin><edge_end>Effect()
Statechart()<edge_begin><edge_end>Reactive Element()
Vertex()<edge_begin><edge_end>Region(priority)
Exit()<edge_begin><edge_end>Pseudostate()
Pseudostate()<edge_begin><edge_end>Vertex()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
Composite Element()<edge_begin><edge_end>Region(priority)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
Scope()<edge_begin><edge_end>Declaration()
Regular State()<edge_begin><edge_end>Vertex()
Statechart()<edge_begin><edge_end>Specification Element(specification)
Transition(priority)<edge_begin><edge_end>Specification Element(specification)
Choice(kind)<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Reactive Element()<edge_begin><edge_end>Reaction()
Vertex()<edge_begin><edge_end>Transition(priority)
Entry(kind)<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Region(priority)<edge_begin><edge_end>Composite Element()
Synchronization()<edge_begin><edge_end>Pseudostate()
Event()<edge_begin><edge_end>Declaration()
Variable()<edge_begin><edge_end>Declaration()
Region(priority)<edge_begin><edge_end>Vertex()
Scope()<edge_begin><edge_end>Variable()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
Project(id, workspace)<edge_begin><edge_end>Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)
Project(id, workspace)<edge_begin><edge_end>Schema(extension Name, extension Id, plugin Name)
Source(comment, handled, mark, content)<edge_begin><edge_end>Located Element(absolute Path, name)
Extension Reference(name, java, package, project)<edge_begin><edge_end>Schema(extension Name, extension Id, plugin Name)
Java(package)<edge_begin><edge_end>Source(comment, handled, mark, content)
Configuration(location, temp)<edge_begin><edge_end>Project(id, workspace)
Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)<edge_begin><edge_end>Source(comment, handled, mark, content)
Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)<edge_begin><edge_end>Dependency(name, version, reexport, diagraph)
Extension Point(id, name, schema, diagraph)<edge_begin><edge_end>Extension(point Id, clazz, id, name, extra, diagraph)
Project(id, workspace)<edge_begin><edge_end>Plugin(extra)
Extension Point(id, name, schema, diagraph)<edge_begin><edge_end>Plugin(extra)
Schema(extension Name, extension Id, plugin Name)<edge_begin><edge_end>Project(id, workspace)
Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)<edge_begin><edge_end>Class Path(name)
Dependency(name, version, reexport, diagraph)<edge_begin><edge_end>Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)
Schema(extension Name, extension Id, plugin Name)<edge_begin><edge_end>Extension Reference(name, java, package, project)
Extension(point Id, clazz, id, name, extra, diagraph)<edge_begin><edge_end>Extension Attribute(name, value)
Plugin(extra)<edge_begin><edge_end>Project(id, workspace)
Plugin(extra)<edge_begin><edge_end>Extension Point(id, name, schema, diagraph)
Schema(extension Name, extension Id, plugin Name)<edge_begin><edge_end>Source(comment, handled, mark, content)
Project(id, workspace)<edge_begin><edge_end>Located Element(absolute Path, name)
Extension(point Id, clazz, id, name, extra, diagraph)<edge_begin><edge_end>Extension Point(id, name, schema, diagraph)
Plugin(extra)<edge_begin><edge_end>Source(comment, handled, mark, content)
Extension Reference(name, java, package, project)<edge_begin><edge_end>Java(package)
Extension(point Id, clazz, id, name, extra, diagraph)<edge_begin><edge_end>Java(package)
Region Container()<edge_begin><edge_end>Named Element(name)
Move Backard And Turning Left Action(duration, start Tick, diff, speed)<edge_begin><edge_end>Action()
Region Container()<edge_begin><edge_end>Region(name)
FSM Event()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Named Element(name)
TFSM()<edge_begin><edge_end>Transition()
Evaluate Guard()<edge_begin><edge_end>Condition()
TFSM()<edge_begin><edge_end>FSM Clock(value)
State()<edge_begin><edge_end>Transition()
Timed System()<edge_begin><edge_end>TFSM()
Move Backard And Turning Right Action(duration, start Tick, diff, speed)<edge_begin><edge_end>Action()
State()<edge_begin><edge_end>TFSM()
Action()<edge_begin><edge_end>Named Element(name)
TFSM()<edge_begin><edge_end>State()
Timed System()<edge_begin><edge_end>Named Element(name)
SCAN Collision Action()<edge_begin><edge_end>Action()
System Property Condition(expected Attribute Value)<edge_begin><edge_end>Condition()
Move Backard Action(duration, start Tick, speed)<edge_begin><edge_end>Action()
Region(name)<edge_begin><edge_end>State()
Action Sequence()<edge_begin><edge_end>Action()
Timed System()<edge_begin><edge_end>FSM Clock(value)
Turning Right Action(duration, start Tick, speed)<edge_begin><edge_end>Action()
Temporal Guard(after Duration)<edge_begin><edge_end>Guard()
Move Forward And Turning Left Action(duration, start Tick, diff, speed)<edge_begin><edge_end>Action()
Timed System()<edge_begin><edge_end>FSM Event()
Move Forward Action(duration, start Tick, speed)<edge_begin><edge_end>Action()
Deceleratet Action(ratio, start Tick)<edge_begin><edge_end>Action()
TFSM()<edge_begin><edge_end>Region Container()
Transition()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Guard()
All Action Finished Condition()<edge_begin><edge_end>Condition()
FSM Clock(value)<edge_begin><edge_end>Named Element(name)
Transition()<edge_begin><edge_end>FSM Event()
Collision Sensor Condition()<edge_begin><edge_end>Condition()
Temporal Guard(after Duration)<edge_begin><edge_end>FSM Clock(value)
Event Guard()<edge_begin><edge_end>Guard()
Evaluate Guard()<edge_begin><edge_end>Guard()
Emergency Stop Action()<edge_begin><edge_end>Action()
State()<edge_begin><edge_end>Region Container()
Goal(priority, synopsis)<edge_begin><edge_end>Agent(is Human)
Process()<edge_begin><edge_end>Organization()
Requirements Definition(version, date)<edge_begin><edge_end>Organization()
Annotable Element()<edge_begin><edge_end>Basic Element(name, documentation, id)
Relation Ship(source Min, source Max, target Min, target Max)<edge_begin><edge_end>Entity()
Privilege Group(documentation)<edge_begin><edge_end>Privilege(category)
Entity()<edge_begin><edge_end>Basic Element(name, documentation, id)
Entity()<edge_begin><edge_end>Attribute(type)
Organization()<edge_begin><edge_end>Model Element()
Goal(priority, synopsis)<edge_begin><edge_end>Goal(priority, synopsis)
Goal(priority, synopsis)<edge_begin><edge_end>Privilege Group(documentation)
Privilege Group(documentation)<edge_begin><edge_end>Entity()
Relation Ship(source Min, source Max, target Min, target Max)<edge_begin><edge_end>Basic Element(name, documentation, id)
Basic Element(name, documentation, id)<edge_begin><edge_end>Model Element()
Goal Step()<edge_begin><edge_end>Process()
Attribute(type)<edge_begin><edge_end>Basic Element(name, documentation, id)
Privilege(category)<edge_begin><edge_end>Basic Element(name, documentation, id)
Agent(is Human)<edge_begin><edge_end>Annotable Element()
Annotable Element()<edge_begin><edge_end>Annotation(author, annotation, date, status, id, comment)
Entity()<edge_begin><edge_end>Entity()
Goal Step()<edge_begin><edge_end>Goal(priority, synopsis)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Td Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Input SAP Function Parameter Table()
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Td XML Element(java Type)<edge_begin><edge_end>Td XML Content()
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Td XML Element(java Type)<edge_begin><edge_end>Td XML Document(xsd File Path)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Subscriber Table(system)<edge_begin><edge_end>Td Table()
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Td XML Content()<edge_begin><edge_end>Td XML Element(java Type)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Td Column()<edge_begin><edge_end>Td Sql Data Type(java Data Type, nullable, unsigned Attribute, case Sensitive, auto Increment, local Type Name, searchable)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Object Flow State()<edge_begin><edge_end>Model Element(name)
Final State()<edge_begin><edge_end>State()
Composite State()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State Vertex()
Guard()<edge_begin><edge_end>Model Element(name)
Activity()<edge_begin><edge_end>Partition()
Transition()<edge_begin><edge_end>Guard()
State Machine()<edge_begin><edge_end>Model Element(name)
Guard()<edge_begin><edge_end>Boolean Expression(language, body)
State Machine()<edge_begin><edge_end>Transition()
Composite State()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>State Vertex()
Pseudostate(kind)<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Model Element(name)
Partition()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Transition()
Action State(is Dynamic)<edge_begin><edge_end>State()
Publication Structure()<edge_begin><edge_end>Paper()
Review Note(content)<edge_begin><edge_end>Named(name)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Researcher(name, for Name, position)
Place Holder Rule()<edge_begin><edge_end>Place Holder()
Paragraph(content)<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Researcher(name, for Name, position)<edge_begin><edge_end>Paper()
Rule(text, key)<edge_begin><edge_end>Place Holder Rule()
Publication Process(min Time, max Time)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Review Note(content)<edge_begin><edge_end>Place Holder Rn()
Publication System()<edge_begin><edge_end>Publication Structure()
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Researcher(name, for Name, position)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Place Holder Rn()<edge_begin><edge_end>Place Holder()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Paper()<edge_begin><edge_end>Researcher(name, for Name, position)
Place Holder Rs()<edge_begin><edge_end>Place Holder()
Progress(percent)<edge_begin><edge_end>Paper()
Review()<edge_begin><edge_end>Review Note(content)
Researcher(name, for Name, position)<edge_begin><edge_end>Write()
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Place Holder PP()
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Sequence(sequence Type)
Publication Process(min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Researcher(name, for Name, position)<edge_begin><edge_end>Review()
Write()<edge_begin><edge_end>Paragraph(content)
Write()<edge_begin><edge_end>Labelled(lname)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name, position)
Sequence(sequence Type)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Named(name)
Review()<edge_begin><edge_end>Labelled(lname)
Index Def(clustered, unique)<edge_begin><edge_end>Index Column Def(name, ordering, sequence)
Index Column Def(name, ordering, sequence)<edge_begin><edge_end>Database Object Def(label)
Catalog Container(name, active, supports Guest Access)<edge_begin><edge_end>Catalog Generation Strategy(create Index On View, create Relative Record Number)
Index Def(clustered, unique)<edge_begin><edge_end>Database Object Def(label)
Prepared Statement()<edge_begin><edge_end>Statement()
Table Column Def(default, name, nullable)<edge_begin><edge_end>Database Object Def(label)
View Def(query Select)<edge_begin><edge_end>Table Def()
Database Container(vendor, version)<edge_begin><edge_end>Catalog Container(name, active, supports Guest Access)
Catalog Container(name, active, supports Guest Access)<edge_begin><edge_end>Connection Config(vendor, version, url, catalog, persistent)
Schema Def()<edge_begin><edge_end>Database Object Def(label)
Table Def()<edge_begin><edge_end>Table Column Def(default, name, nullable)
Expr Bit(op)<edge_begin><edge_end>Expression()
Primary Key Column Constraint(asc, desc, autoincrement)<edge_begin><edge_end>Column Constraint()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DML Statement()
Create Table Statement(temporary)<edge_begin><edge_end>Table Definition(name)
Old Column()<edge_begin><edge_end>Column Source(name)
Expr Add(op)<edge_begin><edge_end>Expression()
Not Null Constraint()<edge_begin><edge_end>Column Constraint()
Function(all)<edge_begin><edge_end>Expression()
Single Source Select Statement()<edge_begin><edge_end>Select Statement()
Case()<edge_begin><edge_end>Expression()
Single Source Select Statement()<edge_begin><edge_end>Select Source(name)
Result Column()<edge_begin><edge_end>Expression()
Not Null()<edge_begin><edge_end>Expression()
Expression Default Value()<edge_begin><edge_end>Expression()
Literal()<edge_begin><edge_end>Expression()
Drop View Statement(if Exists)<edge_begin><edge_end>Create View Statement(temporary)
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Having Expressions()
Column Def(type)<edge_begin><edge_end>Column Source(name)
Function(all)<edge_begin><edge_end>Configuration Statement(name)
Insert Statement(conflict Resolution)<edge_begin><edge_end>DML Statement()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Group By Expressions()
Delete Statement()<edge_begin><edge_end>Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Where Expressions()
Null Literal(literal)<edge_begin><edge_end>Literal Value()
Literal Default Value()<edge_begin><edge_end>Literal Value()
Delete Statement()<edge_begin><edge_end>DML Statement()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Join Source()
Column Def(type)<edge_begin><edge_end>Column Constraint()
Current Time Literal(literal)<edge_begin><edge_end>Literal Value()
Single Source Join()<edge_begin><edge_end>Single Source()
String Literal(literal)<edge_begin><edge_end>Literal Value()
Null Check Expression()<edge_begin><edge_end>Expression()
Alter Table Add Column Statement()<edge_begin><edge_end>Column Source(name)
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DDL Statement()
Create View Statement(temporary)<edge_begin><edge_end>Table Definition(name)
New Column()<edge_begin><edge_end>Column Source(name)
Ordering Term List()<edge_begin><edge_end>Ordering Term(asc, desc)
Unique Table Constraint()<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Column Source Ref(all)<edge_begin><edge_end>Column Source(name)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Select Statement()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select List()
Create Table Statement(temporary)<edge_begin><edge_end>Column Source(name)
Function Argument()<edge_begin><edge_end>Function Arg(type, name)
New Column()<edge_begin><edge_end>Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select Core Expression()
Action Statement()<edge_begin><edge_end>Content Uri(type)
Current Time Stamp Literal(literal)<edge_begin><edge_end>Literal Value()
Join Source()<edge_begin><edge_end>Single Source()
Alter Table Add Column Statement()<edge_begin><edge_end>DDL Statement()
Primary Constraint()<edge_begin><edge_end>Table Constraint(name)
Select Statement()<edge_begin><edge_end>DML Statement()
Drop Trigger Statement(if Exists)<edge_begin><edge_end>Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)
Case Expression()<edge_begin><edge_end>Case()
Having Expressions()<edge_begin><edge_end>Expression()
Drop View Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Create Table Statement(temporary)<edge_begin><edge_end>Table Constraint(name)
Function(all)<edge_begin><edge_end>Select Statement()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>Table Definition(name)
Where Expressions()<edge_begin><edge_end>Expression()
Content Uri(type)<edge_begin><edge_end>Content Uri Segment(name)
Drop Table Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Expression()
Expression Default Value()<edge_begin><edge_end>Default Value()
Drop Index Statement(if Exists)<edge_begin><edge_end>Create Index Statement(unique, name)
Select Statement()<edge_begin><edge_end>Select Core Expression()
Select Statement Expression(not, exists)<edge_begin><edge_end>Select Statement()
Function Argument()<edge_begin><edge_end>Expression()
Indexed Column(collation Name, asc, desc)<edge_begin><edge_end>Column Def(type)
Case Expression()<edge_begin><edge_end>Expression()
Expr Or(op)<edge_begin><edge_end>Expression()
Literal()<edge_begin><edge_end>Literal Value()
Expr Equal(op)<edge_begin><edge_end>Expression()
Join Source()<edge_begin><edge_end>Join Statement(natural, left, outer, inner, cross)
Select Core(op)<edge_begin><edge_end>Select Core Expression()
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Numeric Literal(number)<edge_begin><edge_end>Literal Value()
Config Block()<edge_begin><edge_end>Configuration Statement(name)
Not Null Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Update Column Expression()<edge_begin><edge_end>Column Def(type)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Table Definition(name)
Drop Trigger Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Table Definition(name)<edge_begin><edge_end>DDL Statement()
Alter Table Rename Statement()<edge_begin><edge_end>Table Definition(name)
Group By Expressions()<edge_begin><edge_end>Expression()
Drop Index Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Default Constraint()<edge_begin><edge_end>Column Constraint()
Check Table Constraint()<edge_begin><edge_end>Expression()
Create Index Statement(unique, name)<edge_begin><edge_end>DDL Statement()
Create Index Statement(unique, name)<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Is Null()<edge_begin><edge_end>Expression()
Database Block(name)<edge_begin><edge_end>Init Block()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>Expression()
Current Date Literal(literal)<edge_begin><edge_end>Literal Value()
Expr Mult(op)<edge_begin><edge_end>Expression()
Expr Relate(op)<edge_begin><edge_end>Expression()
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Single Source()
Update Statement(conflict Resolution)<edge_begin><edge_end>Update Column Expression()
Unique Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Select Source(name)<edge_begin><edge_end>Single Source()
Single Source Join()<edge_begin><edge_end>Join Source()
Select List()<edge_begin><edge_end>Column Source(name)
Select Statement Expression(not, exists)<edge_begin><edge_end>Expression()
Default Constraint()<edge_begin><edge_end>Default Value()
Old Column()<edge_begin><edge_end>Expression()
Cast Expression(type)<edge_begin><edge_end>Expression()
Action Statement()<edge_begin><edge_end>Configuration Statement(name)
Column Source Ref(all)<edge_begin><edge_end>Select Source(name)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Expression()
Column Source Ref(all)<edge_begin><edge_end>Expression()
Select Statement()<edge_begin><edge_end>Ordering Term List()
Ordering Term(asc, desc)<edge_begin><edge_end>Expression()
Expr Concat(op)<edge_begin><edge_end>Expression()
Update Column Expression()<edge_begin><edge_end>Expression()
Declaration()<edge_begin><edge_end>Atom()
Object Property Range()<edge_begin><edge_end>Class Expression()
Data Max Cardinality(cardinality)<edge_begin><edge_end>Data Range()
Object Union Of()<edge_begin><edge_end>Class Expression()
Ask Query()<edge_begin><edge_end>Atom()
Irreflexive Object Property()<edge_begin><edge_end>Object Property Expression()
Data Property Assertion()<edge_begin><edge_end>Data Property Expression()
Named Individual()<edge_begin><edge_end>Individual()
Object Property Declaration()<edge_begin><edge_end>Declaration()
Disjoint Data Properties()<edge_begin><edge_end>Data Property Expression()
Inverse Object Property Atom()<edge_begin><edge_end>Object Property Atom()
Variable(symbol)<edge_begin><edge_end>Term()
Disjoint Union()<edge_begin><edge_end>Class Atom()
Object Property Domain()<edge_begin><edge_end>Object Property Atom()
Full IRI()<edge_begin><edge_end>IRI(id)
Object Exact Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Data Property Domain()<edge_begin><edge_end>Data Property Expression()
Direct Sub Class Of()<edge_begin><edge_end>Class Expression()
Data Max Cardinality(cardinality)<edge_begin><edge_end>Data Property Expression()
Object Min Cardinality(cardinality)<edge_begin><edge_end>Object Property Expression()
Class Atom()<edge_begin><edge_end>Atom()
Object All Values From()<edge_begin><edge_end>Class Expression()
Literal(lexical Form)<edge_begin><edge_end>Datatype()
Asymmetric Object Property()<edge_begin><edge_end>Object Property Expression()
Object Some Values From()<edge_begin><edge_end>Class Expression()
Data Property()<edge_begin><edge_end>Data Property Expression()
Equivalent Classes()<edge_begin><edge_end>Class Atom()
Symmetric Object Property()<edge_begin><edge_end>Object Property Atom()
Object One Of()<edge_begin><edge_end>Individual()
Select Query()<edge_begin><edge_end>Atom()
Data Property Assertion()<edge_begin><edge_end>Individual()
Class Variable()<edge_begin><edge_end>Class Expression()
Same Individual()<edge_begin><edge_end>Individual()
Select Query()<edge_begin><edge_end>Variable(symbol)
Class Declaration()<edge_begin><edge_end>Class Variable()
Ontology Document()<edge_begin><edge_end>Import()
Object Property()<edge_begin><edge_end>Object Property Expression()
Templateable Element()<edge_begin><edge_end>Template Signature()
Direct Sub Class Of()<edge_begin><edge_end>Class Atom()
Class()<edge_begin><edge_end>Class Expression()
Inverse Functional Object Property()<edge_begin><edge_end>Object Property Expression()
Has Key()<edge_begin><edge_end>Object Property Expression()
Equivalent Data Properties()<edge_begin><edge_end>Data Property Atom()
Negative Data Property Assertion()<edge_begin><edge_end>Data Property Expression()
Ontology Document()<edge_begin><edge_end>IRI(id)
Data Property Assertion()<edge_begin><edge_end>Assertion()
Construct Query()<edge_begin><edge_end>Atom()
Data Min Cardinality(cardinality)<edge_begin><edge_end>Data Property Expression()
Transitive Object Property()<edge_begin><edge_end>Object Property Expression()
Datatype()<edge_begin><edge_end>Data Range()
Individual Variable()<edge_begin><edge_end>Individual()
Reflexive Object Property()<edge_begin><edge_end>Object Property Atom()
Object Property Declaration()<edge_begin><edge_end>Object Property Variable()
Inverse Object Property()<edge_begin><edge_end>Object Property Expression()
Template Binding()<edge_begin><edge_end>Template Signature()
Data Property Range()<edge_begin><edge_end>Data Property Expression()
Expression()<edge_begin><edge_end>Parameterable Element()
Negative Data Property Assertion()<edge_begin><edge_end>Abstract Literal()
Object Intersection Of()<edge_begin><edge_end>Class Expression()
Strict Sub Class Of()<edge_begin><edge_end>Class Atom()
Irreflexive Object Property()<edge_begin><edge_end>Object Property Atom()
Constant()<edge_begin><edge_end>IRI(id)
Sub Object Property Of()<edge_begin><edge_end>Object Property Chain()
Templateable Element()<edge_begin><edge_end>Template Binding()
Same Individual()<edge_begin><edge_end>Assertion()
Negative Object Property Assertion()<edge_begin><edge_end>Assertion()
Data Has Value()<edge_begin><edge_end>Data Property Expression()
Datatype Restriction()<edge_begin><edge_end>Data Range()
Datatype Property Declaration()<edge_begin><edge_end>Declaration()
Template Parameter()<edge_begin><edge_end>Template Parameter Substitution()
Data One Of()<edge_begin><edge_end>Abstract Literal()
Prefix Definition(pref)<edge_begin><edge_end>Full IRI()
Data Property()<edge_begin><edge_end>Constant()
Facet Restriction()<edge_begin><edge_end>IRI(id)
Data Property Expression()<edge_begin><edge_end>Expression()
Individual Declaration()<edge_begin><edge_end>Named Individual()
Object All Values From()<edge_begin><edge_end>Object Property Expression()
Abbreviated IRI()<edge_begin><edge_end>IRI(id)
Data Some Values From()<edge_begin><edge_end>Data Range()
Sub Data Property Of()<edge_begin><edge_end>Data Property Expression()
Assertion()<edge_begin><edge_end>Atom()
Data Max Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Data Complement Of()<edge_begin><edge_end>Data Range()
Datatype()<edge_begin><edge_end>Constant()
Data Union Of()<edge_begin><edge_end>Data Range()
Data Property Range()<edge_begin><edge_end>Data Range()
Direct Class Assertion()<edge_begin><edge_end>Individual()
Import()<edge_begin><edge_end>IRI(id)
Class Assertion()<edge_begin><edge_end>Individual()
Object Property Declaration()<edge_begin><edge_end>Object Property()
Template Parameter Substitution()<edge_begin><edge_end>Template Binding()
Disjoint Union()<edge_begin><edge_end>Class Variable()
Object Property Assertion()<edge_begin><edge_end>Individual()
Object Property Range()<edge_begin><edge_end>Object Property Atom()
Equivalent Classes()<edge_begin><edge_end>Class Expression()
Object Property Assertion()<edge_begin><edge_end>Object Property Expression()
Describe Query()<edge_begin><edge_end>IRI(id)
Ontology Document()<edge_begin><edge_end>Query()
Class Declaration()<edge_begin><edge_end>Class()
Data Property Atom()<edge_begin><edge_end>Atom()
Template Signature()<edge_begin><edge_end>Templateable Element()
Ask Query()<edge_begin><edge_end>Query()
Data Some Values From()<edge_begin><edge_end>Class Expression()
Negative Object Property Assertion()<edge_begin><edge_end>Individual()
Disjoint Classes()<edge_begin><edge_end>Class Expression()
Construct Query()<edge_begin><edge_end>Query()
Object Property Expression()<edge_begin><edge_end>Expression()
Class Expression()<edge_begin><edge_end>Expression()
Disjoint Object Properties()<edge_begin><edge_end>Object Property Atom()
Object Some Values From()<edge_begin><edge_end>Object Property Expression()
Data Some Values From()<edge_begin><edge_end>Data Property Expression()
Sub Class Of()<edge_begin><edge_end>Class Expression()
Literal Variable()<edge_begin><edge_end>Abstract Literal()
Data Property Range()<edge_begin><edge_end>Data Property Atom()
Object Property Variable()<edge_begin><edge_end>Variable(symbol)
Direct Class Assertion()<edge_begin><edge_end>Assertion()
Data Property Domain()<edge_begin><edge_end>Class Expression()
Strict Sub Class Of()<edge_begin><edge_end>Class Expression()
Negative Object Property Assertion()<edge_begin><edge_end>Object Property Expression()
Data Min Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Select Query()<edge_begin><edge_end>Query()
Has Key()<edge_begin><edge_end>Atom()
Object Max Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Object Property Range()<edge_begin><edge_end>Object Property Expression()
Ask Query()<edge_begin><edge_end>Templateable Element()
Ontology Document()<edge_begin><edge_end>Prefix Definition(pref)
Named Individual()<edge_begin><edge_end>Constant()
Object Property Domain()<edge_begin><edge_end>Class Expression()
Object Property Atom()<edge_begin><edge_end>Atom()
Disjoint Object Properties()<edge_begin><edge_end>Object Property Expression()
Data Intersection Of()<edge_begin><edge_end>Data Range()
Datatype Restriction()<edge_begin><edge_end>Facet Restriction()
Functional Object Property()<edge_begin><edge_end>Object Property Atom()
Individual Declaration()<edge_begin><edge_end>Declaration()
Data Min Cardinality(cardinality)<edge_begin><edge_end>Data Range()
Negative Data Property Assertion()<edge_begin><edge_end>Assertion()
Data Property Variable()<edge_begin><edge_end>Variable(symbol)
Object Complement Of()<edge_begin><edge_end>Class Expression()
Object Property Chain()<edge_begin><edge_end>Object Property Expression()
Has Key()<edge_begin><edge_end>Data Property Expression()
Sub Data Property Of()<edge_begin><edge_end>Data Property Atom()
Object Has Value()<edge_begin><edge_end>Object Property Expression()
Literal Variable()<edge_begin><edge_end>Variable(symbol)
Class Declaration()<edge_begin><edge_end>Declaration()
Data Has Value()<edge_begin><edge_end>Abstract Literal()
Reflexive Object Property()<edge_begin><edge_end>Object Property Expression()
Class Assertion()<edge_begin><edge_end>Assertion()
Object Exact Cardinality(cardinality)<edge_begin><edge_end>Object Property Expression()
Sub Object Property Of()<edge_begin><edge_end>Object Property Expression()
Constant()<edge_begin><edge_end>Term()
Describe Query()<edge_begin><edge_end>Templateable Element()
Object One Of()<edge_begin><edge_end>Class Expression()
Negative Data Property Assertion()<edge_begin><edge_end>Individual()
Data Exact Cardinality(cardinality)<edge_begin><edge_end>Data Property Expression()
Literal(lexical Form)<edge_begin><edge_end>Abstract Literal()
Equivalent Object Properties()<edge_begin><edge_end>Object Property Expression()
Inverse Functional Object Property()<edge_begin><edge_end>Object Property Atom()
Object Min Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Individual Variable()<edge_begin><edge_end>Variable(symbol)
Different Individuals()<edge_begin><edge_end>Assertion()
Describe Query()<edge_begin><edge_end>Atom()
Object Max Cardinality(cardinality)<edge_begin><edge_end>Object Property Expression()
Direct Class Assertion()<edge_begin><edge_end>Class Expression()
Individual Declaration()<edge_begin><edge_end>Individual Variable()
Data All Values From()<edge_begin><edge_end>Data Range()
Datatype Property Declaration()<edge_begin><edge_end>Data Property()
Data Property Variable()<edge_begin><edge_end>Data Property Expression()
Class Assertion()<edge_begin><edge_end>Class Expression()
Data All Values From()<edge_begin><edge_end>Class Expression()
Equivalent Object Properties()<edge_begin><edge_end>Object Property Atom()
Anonymous Individual(node ID)<edge_begin><edge_end>Individual()
Object Property Variable()<edge_begin><edge_end>Object Property Expression()
Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)<edge_begin><edge_end>State(label, id)
Initial State()<edge_begin><edge_end>State(label, id)
Normal State()<edge_begin><edge_end>State(label, id)
State Machine()<edge_begin><edge_end>State Machine Variable(type, name)
Normal State()<edge_begin><edge_end>Action(action Label, action Statement)
State(label, id)<edge_begin><edge_end>State(label, id)
State Machine()<edge_begin><edge_end>Declaration()
Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)<edge_begin><edge_end>Declaration()
Final State()<edge_begin><edge_end>State(label, id)
Echo(message, file, append)<edge_begin><edge_end>String()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
Task()<edge_begin><edge_end>Target(name, description, unless, if Condition)
Project(name, basedir, description)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Filter(token, value)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Target(name, description, unless, if Condition)<edge_begin><edge_end>String()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>Set()
Path Element(path, location)<edge_begin><edge_end>Basic()
Project(name, basedir, description)<edge_begin><edge_end>Path(id, refid)
File List(dir, files)<edge_begin><edge_end>Basic()
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Path(id, refid)<edge_begin><edge_end>String()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Pattern Set()<edge_begin><edge_end>Set()
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File List(dir, files)<edge_begin><edge_end>String()
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Property Location(location)<edge_begin><edge_end>String()
Property File(file)<edge_begin><edge_end>Property()
File Set(dir)<edge_begin><edge_end>Set()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Property Value(value)<edge_begin><edge_end>Property Name(name)
Property Location(location)<edge_begin><edge_end>Property Name(name)
New Task()<edge_begin><edge_end>Task Def(name, classname)
Filters File(file)<edge_begin><edge_end>String()
Property Name(name)<edge_begin><edge_end>Property()
Class Path(refid)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Excludes()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Property File(file)<edge_begin><edge_end>String()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Task Def(name, classname)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Includes()
Set()<edge_begin><edge_end>Pattern()
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>String()
Property Env(environment)<edge_begin><edge_end>String()
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Attribut(name, value)<edge_begin><edge_end>String()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
New Task()<edge_begin><edge_end>Task()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Property Name(name)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File Set(dir)<edge_begin><edge_end>String()
Basic()<edge_begin><edge_end>Pattern()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
New Task()<edge_begin><edge_end>Attribut(name, value)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>String()
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>String()
Filters File(file)<edge_begin><edge_end>Basic()
Path(id, refid)<edge_begin><edge_end>Set()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Property Value(value)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Mkdir(dir)<edge_begin><edge_end>String()
Project(name, basedir, description)<edge_begin><edge_end>Property()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
Mkdir(dir)<edge_begin><edge_end>File Task()
Section()<edge_begin><edge_end>Document()
Text Element(description)<edge_begin><edge_end>Element With IL(name, label)
Abstract Requirement()<edge_begin><edge_end>Section()
Element With IL(name, label)<edge_begin><edge_end>String()
Requirement()<edge_begin><edge_end>Abstract Requirement()
Cover Link()<edge_begin><edge_end>Typed Element(type)
Cover Link()<edge_begin><edge_end>Abstract Requirement()
Attribute(value)<edge_begin><edge_end>Typed Element(type)
Section()<edge_begin><edge_end>Section()
Project()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>Element With IL(name, label)
Typed Element(type)<edge_begin><edge_end>String()
Abstract Requirement()<edge_begin><edge_end>Attribute(value)
Section()<edge_begin><edge_end>Text Element(description)
Document()<edge_begin><edge_end>Section()
Macro Requirement()<edge_begin><edge_end>Abstract Requirement()
Abstract Requirement()<edge_begin><edge_end>Macro Requirement()
Element With IL(name, label)<edge_begin><edge_end>Typed Element(type)
Abstract Requirement()<edge_begin><edge_end>Cover Link()
Section()<edge_begin><edge_end>Abstract Requirement()
Dimension(width, height)<edge_begin><edge_end>Node Graphics()
PNML Document()<edge_begin><edge_end>Module()
NC Name(value)<edge_begin><edge_end>String()
Arc()<edge_begin><edge_end>Inscription()
URI(value)<edge_begin><edge_end>String()
Edge Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Import Node()<edge_begin><edge_end>Instance()
Tool Specific(tool, version)<edge_begin><edge_end>Arc()
Interface()<edge_begin><edge_end>Reference()
Page()<edge_begin><edge_end>Page Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Node()<edge_begin><edge_end>Net Content Element()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Integer()
Labeled Element()<edge_begin><edge_end>Label(text)
Fill(gradientrotation)<edge_begin><edge_end>Color()
Import Node()<edge_begin><edge_end>Reference()
Edge Graphics()<edge_begin><edge_end>Arc()
Position()<edge_begin><edge_end>Edge Graphics()
Module()<edge_begin><edge_end>Interface()
Arc()<edge_begin><edge_end>Net Content Element()
Net Element()<edge_begin><edge_end>Ided Element(id)
Net Graphics()<edge_begin><edge_end>Net Element()
Labeled Element()<edge_begin><edge_end>Annotation Graphics()
Page Graphics()<edge_begin><edge_end>Page()
Arc()<edge_begin><edge_end>Tool Specific(tool, version)
Label(text)<edge_begin><edge_end>String()
Interface()<edge_begin><edge_end>Node()
Line(width, shape, style)<edge_begin><edge_end>Color()
Page()<edge_begin><edge_end>Tool Specific(tool, version)
Fill(gradientrotation)<edge_begin><edge_end>URI(value)
Page()<edge_begin><edge_end>Net Content()
Import Node()<edge_begin><edge_end>NC Name(value)
Reference Place()<edge_begin><edge_end>Net Content()
Module()<edge_begin><edge_end>Ided Element(id)
Node Graphics()<edge_begin><edge_end>Node()
Line(width, shape, style)<edge_begin><edge_end>Annotation Graphics()
Node Graphics()<edge_begin><edge_end>Line(width, shape, style)
Place()<edge_begin><edge_end>Initial Marking()
Net Element()<edge_begin><edge_end>PNML Document()
Annotation Graphics()<edge_begin><edge_end>Graphics()
Inscription()<edge_begin><edge_end>Arc()
Line(width, shape, style)<edge_begin><edge_end>Edge Graphics()
Edge Graphics()<edge_begin><edge_end>Line(width, shape, style)
Label(text)<edge_begin><edge_end>Labeled Element()
Node Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Reference Place()<edge_begin><edge_end>Reference()
Tool Specific(tool, version)<edge_begin><edge_end>Net Element()
Reference Transition()<edge_begin><edge_end>Reference()
Edge Graphics()<edge_begin><edge_end>Position()
Annotation Graphics()<edge_begin><edge_end>Font(family, style, weight, size, decoration, align, rotation)
Net Element()<edge_begin><edge_end>URI(value)
Net Content()<edge_begin><edge_end>Module()
Offset()<edge_begin><edge_end>Annotation Graphics()
Node Graphics()<edge_begin><edge_end>Dimension(width, height)
Page Graphics()<edge_begin><edge_end>Graphics()
Net Element()<edge_begin><edge_end>Net Graphics()
Tool Specific(tool, version)<edge_begin><edge_end>Node()
Name()<edge_begin><edge_end>Net Content()
Node()<edge_begin><edge_end>Node Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Annotation Graphics()
Node Graphics()<edge_begin><edge_end>Position()
Tool Specific(tool, version)<edge_begin><edge_end>String()
Edge Graphics()<edge_begin><edge_end>Graphics()
Instance()<edge_begin><edge_end>Ided Element(id)
Node Graphics()<edge_begin><edge_end>Graphics()
Line(width, shape, style)<edge_begin><edge_end>Node Graphics()
Name()<edge_begin><edge_end>Labeled Element()
Transition()<edge_begin><edge_end>Net Content Element()
Net Content()<edge_begin><edge_end>Page()
Inscription()<edge_begin><edge_end>Labeled Element()
Annotation Graphics()<edge_begin><edge_end>Line(width, shape, style)
Place()<edge_begin><edge_end>Net Content Element()
Node()<edge_begin><edge_end>Tool Specific(tool, version)
Ided Element(id)<edge_begin><edge_end>String()
Dimension(width, height)<edge_begin><edge_end>Integer()
Position()<edge_begin><edge_end>Coordinate(x, y)
Coordinate(x, y)<edge_begin><edge_end>Integer()
Any Element(name, text)<edge_begin><edge_end>String()
Net Content Element()<edge_begin><edge_end>Net Content()
Net Content Element()<edge_begin><edge_end>Node()
Net Content()<edge_begin><edge_end>Name()
Reference Transition()<edge_begin><edge_end>Net Content()
Initial Marking()<edge_begin><edge_end>Place()
Tool Specific(tool, version)<edge_begin><edge_end>Page()
Module()<edge_begin><edge_end>Net Content()
Instance()<edge_begin><edge_end>Import Node()
Arc()<edge_begin><edge_end>Ided Element(id)
Module()<edge_begin><edge_end>PNML Document()
Annotation Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Annotation Graphics()
Arc()<edge_begin><edge_end>Edge Graphics()
Net Element()<edge_begin><edge_end>Net Content()
Initial Marking()<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Net Element()
Data Base(SGB Dname)<edge_begin><edge_end>Named Element(name)
Tuple()<edge_begin><edge_end>Table()
Tuple Element(value)<edge_begin><edge_end>Tuple()
Table()<edge_begin><edge_end>Named Element(name)
Tuple()<edge_begin><edge_end>Tuple Element(value)
Tuple Element(value)<edge_begin><edge_end>String()
Table()<edge_begin><edge_end>Tuple()
Data Base(SGB Dname)<edge_begin><edge_end>String()
Named Element(name)<edge_begin><edge_end>String()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>String()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>String()
TR(valign, align)<edge_begin><edge_end>TABLE Element(bgcolor, background)
HTML Element(value)<edge_begin><edge_end>HTML Element(value)
HEAD Element()<edge_begin><edge_end>HEAD()
TABLE Element(bgcolor, background)<edge_begin><edge_end>String()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TABLE Element(bgcolor, background)
H6()<edge_begin><edge_end>BODY Element()
LI(li Value)<edge_begin><edge_end>List Element(type)
OL(start)<edge_begin><edge_end>String()
BBODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>String()
HEAD()<edge_begin><edge_end>HTML()
LI(li Value)<edge_begin><edge_end>String()
HTML()<edge_begin><edge_end>HEAD()
A(ahref, name, id)<edge_begin><edge_end>BODY Element()
H3()<edge_begin><edge_end>BODY Element()
TABLE Element(bgcolor, background)<edge_begin><edge_end>BODY Element()
HTML Element(value)<edge_begin><edge_end>String()
SPAN(style)<edge_begin><edge_end>String()
TH()<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
TR(valign, align)<edge_begin><edge_end>TABLE(border, width, cellspacing, cellpadding)
BBODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML Element(value)
LINK(rel, title, ahref, type)<edge_begin><edge_end>HEAD Element()
HEAD()<edge_begin><edge_end>HEAD Element()
OPTION(selected, option Value)<edge_begin><edge_end>String()
H4()<edge_begin><edge_end>BODY Element()
SELECT(multiple, size, name)<edge_begin><edge_end>String()
BBODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>BODY Element()
HEAD Element()<edge_begin><edge_end>HTML Element(value)
TR(valign, align)<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
UL()<edge_begin><edge_end>List Element(type)
DIV(align)<edge_begin><edge_end>BODY Element()
P()<edge_begin><edge_end>BODY Element()
BODY Element()<edge_begin><edge_end>BBODY(background, bgcolor, text, link, alink, vlink)
TR(valign, align)<edge_begin><edge_end>String()
TITLE()<edge_begin><edge_end>HEAD Element()
H1()<edge_begin><edge_end>BODY Element()
BR(clear)<edge_begin><edge_end>BODY Element()
HTML()<edge_begin><edge_end>BBODY(background, bgcolor, text, link, alink, vlink)
STYLE()<edge_begin><edge_end>BODY Element()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TR(valign, align)
Website()<edge_begin><edge_end>HTML()
List Element(type)<edge_begin><edge_end>String()
EM()<edge_begin><edge_end>BODY Element()
HEAD()<edge_begin><edge_end>HTML Element(value)
SPAN(style)<edge_begin><edge_end>BODY Element()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>BODY Element()
OL(start)<edge_begin><edge_end>List Element(type)
Stakeholder Role()<edge_begin><edge_end>Set Entry()
Variation Point Instance()<edge_begin><edge_end>Product()
Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Variation Point Instance()<edge_begin><edge_end>Abstract Feature()
Goal(soft, type)<edge_begin><edge_end>Abstract Feature()
Solution Domain Use Case()<edge_begin><edge_end>Use Case()
Asset()<edge_begin><edge_end>Danger()
Mitigation()<edge_begin><edge_end>Urml Model Element(reviewed)
Goal(soft, type)<edge_begin><edge_end>Urml Model Element(reviewed)
Variation Point(multiplicity)<edge_begin><edge_end>Variation Point Instance()
Goal(soft, type)<edge_begin><edge_end>Stakeholder()
Goal Reference(weight)<edge_begin><edge_end>Goal(soft, type)
Urml Project Settings()<edge_begin><edge_end>Phase()
Product()<edge_begin><edge_end>Variation Point Instance()
Variation Point Instance()<edge_begin><edge_end>Urml Model Element(reviewed)
Non Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Procedural Mitigation(mitigation Procedure)<edge_begin><edge_end>Mitigation()
Abstract Feature()<edge_begin><edge_end>Functional Requirement()
Asset()<edge_begin><edge_end>Urml Model Element(reviewed)
Use Case()<edge_begin><edge_end>Urml Model Element(reviewed)
Functional Requirement()<edge_begin><edge_end>Functional Requirement()
Non Functional Requirement()<edge_begin><edge_end>Abstract Feature()
Non Functional Requirement()<edge_begin><edge_end>Non Functional Requirement()
Feature()<edge_begin><edge_end>Abstract Feature()
Stakeholder()<edge_begin><edge_end>Goal(soft, type)
Abstract Feature()<edge_begin><edge_end>Variation Point Instance()
Actor()<edge_begin><edge_end>Use Case()
Service()<edge_begin><edge_end>Requirement(terminal)
Danger()<edge_begin><edge_end>Urml Model Element(reviewed)
Application Domain Use Case()<edge_begin><edge_end>Goal(soft, type)
Goal(soft, type)<edge_begin><edge_end>Application Domain Use Case()
Product()<edge_begin><edge_end>Feature()
Stakeholder()<edge_begin><edge_end>Urml Model Element(reviewed)
Service()<edge_begin><edge_end>Service()
Urml Model Element(reviewed)<edge_begin><edge_end>Urml Model Element(reviewed)
Application Domain Use Case()<edge_begin><edge_end>Use Case()
Solution Domain Use Case()<edge_begin><edge_end>Abstract Feature()
Danger()<edge_begin><edge_end>Mitigation()
Variation Point(multiplicity)<edge_begin><edge_end>Abstract Feature()
Abstract Feature()<edge_begin><edge_end>Non Functional Requirement()
Requirement(terminal)<edge_begin><edge_end>Service()
Service()<edge_begin><edge_end>Asset()
Product()<edge_begin><edge_end>Urml Model Element(reviewed)
Requirement(terminal)<edge_begin><edge_end>Mitigation()
Abstract Feature()<edge_begin><edge_end>Solution Domain Use Case()
Phase()<edge_begin><edge_end>Phase Set Entry()
Mitigation()<edge_begin><edge_end>Danger()
Abstract Feature()<edge_begin><edge_end>Urml Model Element(reviewed)
Transition(group, id)<edge_begin><edge_end>Node Graphics(group)
Annotation Graphics()<edge_begin><edge_end>Two Dim Vector(x, y)
Page(group, id)<edge_begin><edge_end>Reference Place(group, id, ref)
Reference Place(group, id, ref)<edge_begin><edge_end>Pnml Annotation(text)
Transition(group, id)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Page(group, id)<edge_begin><edge_end>Net Graphics(group)
Transformation(text)<edge_begin><edge_end>Annotation Graphics()
Reference Place(group, id, ref)<edge_begin><edge_end>Node Graphics(group)
Connection Weight(connection)<edge_begin><edge_end>Stat(text)
Net(group, id, type)<edge_begin><edge_end>Pnml Annotation(text)
Inscription(text)<edge_begin><edge_end>Annotation Graphics()
Arc(group, id, source, target)<edge_begin><edge_end>Pnml Annotation(text)
Node Graphics(group)<edge_begin><edge_end>Two Dim Vector(x, y)
Place(group, id)<edge_begin><edge_end>Node Graphics(group)
Roles()<edge_begin><edge_end>Role(text)
Transition Specific(token Case Sensitive, tool, version)<edge_begin><edge_end>Processing Time()
Net(group, id, type)<edge_begin><edge_end>Arc(group, id, source, target)
Page(group, id)<edge_begin><edge_end>Page(group, id)
Connection Weights()<edge_begin><edge_end>Connection Weight(connection)
Reference Place Specific(tool, version)<edge_begin><edge_end>Node Graphics(group)
Arc(group, id, source, target)<edge_begin><edge_end>Inscription(text)
Page(group, id)<edge_begin><edge_end>Arc(group, id, source, target)
Transition Specific(token Case Sensitive, tool, version)<edge_begin><edge_end>Roles()
Transition(group, id)<edge_begin><edge_end>Pnml Annotation(text)
Net(group, id, type)<edge_begin><edge_end>Place Type1()
Arc(group, id, source, target)<edge_begin><edge_end>Edge Graphics()
Pnml Annotation(text)<edge_begin><edge_end>Annotation Graphics()
Place(group, id)<edge_begin><edge_end>Place Type(text)
Cost()<edge_begin><edge_end>Stat(text)
Reference Place(group, id, ref)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Net Graphics(group)<edge_begin><edge_end>Two Dim Vector(x, y)
Net(group, id, type)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Document Root(mixed)<edge_begin><edge_end>Pnml(group)
Page(group, id)<edge_begin><edge_end>Pnml Annotation(text)
Arc(group, id, source, target)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Stat(text)<edge_begin><edge_end>Non Negative Decimal()
Net(group, id, type)<edge_begin><edge_end>Net Graphics(group)
Pnml(group)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Place(group, id)<edge_begin><edge_end>Pnml Annotation(text)
Transition(group, id)<edge_begin><edge_end>Transformation(text)
Initial Marking(text)<edge_begin><edge_end>Annotation Graphics()
Place Type1()<edge_begin><edge_end>Place(group, id)
Transition(group, id)<edge_begin><edge_end>Transition Type(text)
Transition Specific(token Case Sensitive, tool, version)<edge_begin><edge_end>Cost()
Page(group, id)<edge_begin><edge_end>Place Type1()
Page(group, id)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Page()<edge_begin><edge_end>Has Label()
CPN Tools Transition Addin()<edge_begin><edge_end>Time()
Condition()<edge_begin><edge_end>Annotation()
CPN Tools Transition Addin()<edge_begin><edge_end>Priority()
Priority()<edge_begin><edge_end>Annotation()
HL Transition Addin()<edge_begin><edge_end>Condition()
Transition Node()<edge_begin><edge_end>CPN Tools Transition Addin()
Name()<edge_begin><edge_end>HL Annotation()
Place Node()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Has Id(id)
Transition Node()<edge_begin><edge_end>HL Transition Addin()
CPN Tools Transition Addin()<edge_begin><edge_end>Code()
Object()<edge_begin><edge_end>Has Id(id)
Instance(sub Page ID)<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Node()
HL Place Addin()<edge_begin><edge_end>Sort()
Transition()<edge_begin><edge_end>Transition Node()
Code()<edge_begin><edge_end>Annotation()
Has Label()<edge_begin><edge_end>Label()
Node()<edge_begin><edge_end>Arc()
Annotation()<edge_begin><edge_end>HL Annotation Addin(text)
Sort()<edge_begin><edge_end>Annotation()
HL Place Addin()<edge_begin><edge_end>HL Marking()
HL Arc Addin(kind)<edge_begin><edge_end>HL Annotation()
Object()<edge_begin><edge_end>Has Tool Info()
Node()<edge_begin><edge_end>Object()
HL Annotation()<edge_begin><edge_end>Annotation()
Attribute()<edge_begin><edge_end>Label()
HL Declaration()<edge_begin><edge_end>Has Id(id)
Label()<edge_begin><edge_end>Has Label()
Tool Info(tool, version)<edge_begin><edge_end>Has Tool Info()
Arc()<edge_begin><edge_end>Page()
Has Tool Info()<edge_begin><edge_end>Tool Info(tool, version)
Instance(sub Page ID)<edge_begin><edge_end>Parameter Assignment(parameter, value)
Label()<edge_begin><edge_end>Has Tool Info()
Place Node()<edge_begin><edge_end>HL Place Addin()
Place()<edge_begin><edge_end>Ref Place()
Object()<edge_begin><edge_end>Page()
Arc()<edge_begin><edge_end>HL Arc Addin(kind)
Page()<edge_begin><edge_end>Has Id(id)
Petri Net(kind, time Type)<edge_begin><edge_end>Page()
Transition Node()<edge_begin><edge_end>Node()
Fusion Group()<edge_begin><edge_end>Place()
Time()<edge_begin><edge_end>Annotation()
Petri Net(kind, time Type)<edge_begin><edge_end>Has Name()
Ref Place()<edge_begin><edge_end>Place()
HL Marking()<edge_begin><edge_end>Annotation()
Page()<edge_begin><edge_end>Has Name()
Parameter Assignment(parameter, value)<edge_begin><edge_end>Instance(sub Page ID)
Ref Place()<edge_begin><edge_end>Place Node()
Page()<edge_begin><edge_end>Petri Net(kind, time Type)
Petri Net(kind, time Type)<edge_begin><edge_end>Fusion Group()
Paper()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Keyword(word)<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paper()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Keyword(word)
Paragraph(content)<edge_begin><edge_end>Named(name)
Review Note(content)<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Named(name)
Review(date)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Position(description)<edge_begin><edge_end>Position(description)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Keyword(description)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Knowledge Manager()<edge_begin><edge_end>Named(name)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Position(description)<edge_begin><edge_end>Named(name)
Review Note(content)<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(description)
Keyword(description)<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Review(date)<edge_begin><edge_end>Labelled(lname)
Publication Structure()<edge_begin><edge_end>Named(name)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Knowledge Manager()<edge_begin><edge_end>Keyword(description)
Paper()<edge_begin><edge_end>Paper()
Column Family(name)<edge_begin><edge_end>Row(key)
Column(key, timestamp)<edge_begin><edge_end>Data Type()
UTF8Type(value)<edge_begin><edge_end>Data Type()
Counter Column Type(value)<edge_begin><edge_end>Data Type()
Double Type(value)<edge_begin><edge_end>Data Type()
Row(key)<edge_begin><edge_end>Column(key, timestamp)
Boolean Type(value)<edge_begin><edge_end>Data Type()
Date Type(value)<edge_begin><edge_end>Data Type()
Decimal Type(value)<edge_begin><edge_end>Decimal()
Row(key)<edge_begin><edge_end>Super Column(key)
Column(key, timestamp)<edge_begin><edge_end>Timestamp()
Float Type(value)<edge_begin><edge_end>Data Type()
Date Type(value)<edge_begin><edge_end>Timestamp()
Integer Type(value)<edge_begin><edge_end>Data Type()
UUID Type(value)<edge_begin><edge_end>Data Type()
Keyspace(name)<edge_begin><edge_end>Column Family(name)
Ascii Type(value)<edge_begin><edge_end>Data Type()
G Composite State()<edge_begin><edge_end>Transition(preserve Timers)
G Abstract State()<edge_begin><edge_end>G Abstract Action(kind)
Long Value()<edge_begin><edge_end>Number Value()
G State()<edge_begin><edge_end>Named(name, comment)
Get Parameter()<edge_begin><edge_end>Value()
Get Parameter()<edge_begin><edge_end>Parameter()
Call Action()<edge_begin><edge_end>G Abstract Action(kind)
G State()<edge_begin><edge_end>G Abstract State()
Transition(preserve Timers)<edge_begin><edge_end>Value()
Constant Value(value)<edge_begin><edge_end>Value()
G Statemachine(package)<edge_begin><edge_end>G Composite State()
Transition(preserve Timers)<edge_begin><edge_end>Named(name, comment)
G Stop State()<edge_begin><edge_end>G Abstract State()
Parameter()<edge_begin><edge_end>Named(name, comment)
String Value()<edge_begin><edge_end>Constant Value(value)
G Start State()<edge_begin><edge_end>G Abstract State()
Boolean Value()<edge_begin><edge_end>Constant Value(value)
G Composite State()<edge_begin><edge_end>G Abstract State()
Call Action()<edge_begin><edge_end>Call(action Id)
Transition(preserve Timers)<edge_begin><edge_end>G Abstract State()
Initial()<edge_begin><edge_end>Abstract Node()
Final()<edge_begin><edge_end>Abstract Node()
Transition(operations)<edge_begin><edge_end>Abstract Node()
Statemachine(translation, self Name)<edge_begin><edge_end>Statemachine(translation, self Name)
Statemachine(translation, self Name)<edge_begin><edge_end>Transition(operations)
Statemachine(translation, self Name)<edge_begin><edge_end>Abstract Node()
State(active)<edge_begin><edge_end>Abstract Node()
State(active)<edge_begin><edge_end>Statemachine Owner()
Statemachine Owner()<edge_begin><edge_end>Statemachine(translation, self Name)
Place()<edge_begin><edge_end>Initial Marking()
Transition()<edge_begin><edge_end>Guard()
Arc Expression()<edge_begin><edge_end>CPN Inscription(text)
Arc()<edge_begin><edge_end>Arc Expression()
Sort()<edge_begin><edge_end>CPN Inscription(text)
Transition()<edge_begin><edge_end>Transition()
Initial Marking()<edge_begin><edge_end>CPN Inscription(text)
Page()<edge_begin><edge_end>Page()
Place()<edge_begin><edge_end>Place()
Guard()<edge_begin><edge_end>CPN Inscription(text)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(word)
Transition(guard Label, guard Expression)<edge_begin><edge_end>State(id, kind, name)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Paper()
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Paper()
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Progress(percent)
Publication System()<edge_begin><edge_end>Position(description)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Position(description)<edge_begin><edge_end>Position(description)
State(id, kind, name)<edge_begin><edge_end>Transition(guard Label, guard Expression)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Review(date)<edge_begin><edge_end>Labelled(lname)
Publication Status(label)<edge_begin><edge_end>State Machine Variable()
State(id, kind, name)<edge_begin><edge_end>State Machine Object(label)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Paragraph(content)<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Knowledge Manager()<edge_begin><edge_end>Keyword(word)
Position(description)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Publication System()<edge_begin><edge_end>Publication Structure()
Publication System()<edge_begin><edge_end>Named(name)
Keyword(word)<edge_begin><edge_end>Paper()
Transition(guard Label, guard Expression)<edge_begin><edge_end>State Machine Object(label)
Paper()<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Publication Structure()<edge_begin><edge_end>Named(name)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Knowledge Manager()<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
State Transition()<edge_begin><edge_end>State Machine Action()
Controller Attribute()<edge_begin><edge_end>Controller()
View State()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State()
Sub Controller State()<edge_begin><edge_end>Controller()
Controller()<edge_begin><edge_end>Controller Attribute()
State Machine()<edge_begin><edge_end>State()
State Transition()<edge_begin><edge_end>State()
Sub Controller State()<edge_begin><edge_end>State()
Controller()<edge_begin><edge_end>State Machine()
Composite State(is Concurrent)<edge_begin><edge_end>Boolean()
State()<edge_begin><edge_end>Event()
Composite State(is Concurrent)<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Event()
Guard()<edge_begin><edge_end>Transition()
Guard()<edge_begin><edge_end>Boolean Expression(value)
Composite State(is Concurrent)<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>State()
State Vertex()<edge_begin><edge_end>Composite State(is Concurrent)
Event()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>State Vertex()
State()<edge_begin><edge_end>State Machine()
Transition()<edge_begin><edge_end>Guard()
Transition()<edge_begin><edge_end>State Machine()
Transition()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>Transition()
From Entry()<edge_begin><edge_end>Variable Declaration(name)
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Select Statement()<edge_begin><edge_end>Order By Clause()
From Class(type)<edge_begin><edge_end>From Join(is Fetch)
Alias Attribute Expression(direction, attributes)<edge_begin><edge_end>Variable()
String Literal(value)<edge_begin><edge_end>Literal()
Addition Expression(operator)<edge_begin><edge_end>Expression(unary Operator, is Not)
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Select Expression()
Update Statement()<edge_begin><edge_end>JPQL Query()
Comparison Operator Expression(operator)<edge_begin><edge_end>Expression(unary Operator, is Not)
Group By Clause()<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Alias Attribute Expression(direction, attributes)<edge_begin><edge_end>Variable Declaration(name)
Update Statement()<edge_begin><edge_end>Update Clause()
Update Item()<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Expression(unary Operator, is Not)<edge_begin><edge_end>Variable()
Integer Literal(value)<edge_begin><edge_end>Literal()
From Join(is Fetch)<edge_begin><edge_end>Variable Declaration(name)
Having Clause()<edge_begin><edge_end>Expression(unary Operator, is Not)
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
Delete Statement()<edge_begin><edge_end>JPQL Query()
Expression(unary Operator, is Not)<edge_begin><edge_end>Select Expression()
JPQL Query()<edge_begin><edge_end>Where Clause()
Select Statement()<edge_begin><edge_end>JPQL Query()
Order By Clause()<edge_begin><edge_end>Order By Spec()
Expression Term()<edge_begin><edge_end>Expression(unary Operator, is Not)
Variable()<edge_begin><edge_end>Expression Term()
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Literal()<edge_begin><edge_end>Variable()
Min Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Max Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Float Literal()<edge_begin><edge_end>Literal()
Set Clause()<edge_begin><edge_end>Update Item()
Alias Attribute Expression(direction, attributes)<edge_begin><edge_end>Order By Spec()
Join()<edge_begin><edge_end>From Join(is Fetch)
Group By Clause()<edge_begin><edge_end>Having Clause()
Float Literal()<edge_begin><edge_end>Float(integer Value, fraction Value)
Function Expression(name, trim Spec)<edge_begin><edge_end>Expression(unary Operator, is Not)
And Expression()<edge_begin><edge_end>Expression(unary Operator, is Not)
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Update Clause()<edge_begin><edge_end>From Entry()
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Select Statement()<edge_begin><edge_end>Group By Clause()
Or Expression()<edge_begin><edge_end>Expression(unary Operator, is Not)
From Collection()<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Select Statement()<edge_begin><edge_end>From Clause()
Select Statement()<edge_begin><edge_end>Select Clause(is Distinct)
Update Item()<edge_begin><edge_end>Literal()
Delete Clause()<edge_begin><edge_end>From Clause()
From Collection()<edge_begin><edge_end>From Entry()
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Count Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Multiplication Expression(operator)<edge_begin><edge_end>Expression(unary Operator, is Not)
Delete Statement()<edge_begin><edge_end>Delete Clause()
Primary Key()<edge_begin><edge_end>Unique Constraint()
Derived Table(query expression)<edge_begin><edge_end>Table(name)
Method(name, body)<edge_begin><edge_end>Method Parameter()
Structural Component(name)<edge_begin><edge_end>Restriction()
Table(name)<edge_begin><edge_end>Restriction()
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Collection Type()<edge_begin><edge_end>Data Type()
Character String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Table(name)<edge_begin><edge_end>View()
Structural Component(name)<edge_begin><edge_end>Data Type()
Method Parameter()<edge_begin><edge_end>Parameter(name)
Domain(name, expression, default)<edge_begin><edge_end>Domain Constraint()
Parameter(name)<edge_begin><edge_end>Data Type()
Numeric Type(descriptor)<edge_begin><edge_end>Predefined Type()
Function()<edge_begin><edge_end>Data Type()
Not Null()<edge_begin><edge_end>Column Constraint()
Collection Type()<edge_begin><edge_end>Collection Type()
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Unique Constraint()
Structured Type(is final, is instantiable)<edge_begin><edge_end>Attribute(default)
Trigger Descriptor(event, action Time, triggered Action, level)<edge_begin><edge_end>Trigger(name)
Column(default)<edge_begin><edge_end>Table(name)
Collection Type()<edge_begin><edge_end>Constructed Type(name)
Domain Constraint()<edge_begin><edge_end>Domain(name, expression, default)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Typed Table()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Trigger(name)<edge_begin><edge_end>Structural Component(name)
Domain Constraint()<edge_begin><edge_end>Table Constraint(name)
Schema(name)<edge_begin><edge_end>Table(name)
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Reference Type()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Reference Type()<edge_begin><edge_end>Constructed Type(name)
ROW()<edge_begin><edge_end>Field()
Typed Table()<edge_begin><edge_end>Typed Table()
Boolean Type(descriptor)<edge_begin><edge_end>Predefined Type()
User Defined Type(name)<edge_begin><edge_end>Data Type()
Restriction()<edge_begin><edge_end>Table(name)
ROW()<edge_begin><edge_end>Constructed Type(name)
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Trigger(name)<edge_begin><edge_end>Restriction()
Structural Component(name)<edge_begin><edge_end>Feature()
Method Parameter()<edge_begin><edge_end>Method(name, body)
Structural Component(name)<edge_begin><edge_end>View()
Table Constraint(name)<edge_begin><edge_end>Restriction()
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Column Constraint()<edge_begin><edge_end>Restriction()
View()<edge_begin><edge_end>Derived Table(query expression)
Function()<edge_begin><edge_end>Behavioural Component(name, body)
String Feature(key, value)<edge_begin><edge_end>Feature()
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Distinct Type()<edge_begin><edge_end>Predefined Type()
Base Table()<edge_begin><edge_end>Table(name)
Table(name)<edge_begin><edge_end>Column(default)
ROW()<edge_begin><edge_end>ROW()
Schema(name)<edge_begin><edge_end>Domain(name, expression, default)
Data Type()<edge_begin><edge_end>Schema(name)
Numeric Feature(key, value)<edge_begin><edge_end>Feature()
Predefined Type()<edge_begin><edge_end>Data Type()
View()<edge_begin><edge_end>Table(name)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Trigger(name)<edge_begin><edge_end>Trigger Descriptor(event, action Time, triggered Action, level)
Schema(name)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Method(name, body)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
Field()<edge_begin><edge_end>Structural Component(name)
Distinct Type()<edge_begin><edge_end>Feature()
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
Predefined Type()<edge_begin><edge_end>Distinct Type()
Typed Table()<edge_begin><edge_end>Base Table()
Domain(name, expression, default)<edge_begin><edge_end>Structural Component(name)
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
Restriction()<edge_begin><edge_end>Structural Component(name)
Constructed Type(name)<edge_begin><edge_end>Data Type()
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>String()
Software(website, title, description)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Seminar(title, abstract, place, date From, date Until, url4slides)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Team(name, meaning, status, url Page)<edge_begin><edge_end>Activity Report()
Master Thesis()<edge_begin><edge_end>Publication()
Open Position(status, mission, duration)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Team(name, meaning, status, url Page)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Article()<edge_begin><edge_end>Publication()
Team(name, meaning, status, url Page)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>Software(website, title, description)
Team(name, meaning, status, url Page)<edge_begin><edge_end>String()
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>Paper(title, url4pdf, state)
Partner(name, country, category)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Publication()<edge_begin><edge_end>Team(name, meaning, status, url Page)
Misc()<edge_begin><edge_end>Publication()
Ph D Thesis()<edge_begin><edge_end>Publication()
Publication()<edge_begin><edge_end>Paper(title, url4pdf, state)
Paper(title, url4pdf, state)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Team(name, meaning, status, url Page)<edge_begin><edge_end>Open Position(status, mission, duration)
Table()<edge_begin><edge_end>Row(auto Fit Height, height)
Worksheet(name)<edge_begin><edge_end>Table()
Boolean Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Value Type()
Column(auto Fit Width, width)<edge_begin><edge_end>Table()
Error Value()<edge_begin><edge_end>Value Type()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Date Time Type Value()<edge_begin><edge_end>Value Type()
Data()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Value Type()<edge_begin><edge_end>Data()
Table()<edge_begin><edge_end>Column(auto Fit Width, width)
Worksheet(name)<edge_begin><edge_end>Workbook()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Row(auto Fit Height, height)<edge_begin><edge_end>Table()
Workbook()<edge_begin><edge_end>Worksheet(name)
Table()<edge_begin><edge_end>Worksheet(name)
Driver()<edge_begin><edge_end>Driver Info()
Test Case(target)<edge_begin><edge_end>Target Type()
Transfer To Symbian(group)<edge_begin><edge_end>Transfer(move, p C Path, symbian Path)
Driver()<edge_begin><edge_end>Task(group, name, pre Reboot Device, timeout)
Test Cases List(operator)<edge_begin><edge_end>Test Case(target)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Start Trace(enable Primary Filters, enable Secondary Filters, disable Primary Filters, disable Secondary Filters, config File Path)
Reference()<edge_begin><edge_end>Task(group, name, pre Reboot Device, timeout)
Execute On PC(group)<edge_begin><edge_end>Cmd PC(value, phase, sync, u RI)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Transfer To Symbian(group)
Execute On Symbian(group)<edge_begin><edge_end>Rtest(result File, symbian Path)
Driver Info()<edge_begin><edge_end>Info(value, key)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Reference()
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Task(group, name, pre Reboot Device, timeout)
Execute On Symbian(group)<edge_begin><edge_end>Test Execute Script(p C Path, symbian Path)
Test Execute Script(p C Path, symbian Path)<edge_begin><edge_end>Test Cases List(operator)
Build(component Name, test Build, u RI)<edge_begin><edge_end>Component Name Type()
Transfer(move, p C Path, symbian Path)<edge_begin><edge_end>Symbian Path()
Retrieve From Symbian(group)<edge_begin><edge_end>Transfer(move, p C Path, symbian Path)
Execute On PC(group)<edge_begin><edge_end>Build(component Name, test Build, u RI)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Execute On PC(group)
Execute On Symbian(group)<edge_begin><edge_end>Cmd Symbian(argument, output, stat Command, sync)
Rtest(result File, symbian Path)<edge_begin><edge_end>Symbian Path()
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Stop Trace()
External(name)<edge_begin><edge_end>Hyper Link()
Internal()<edge_begin><edge_end>Hyper Link()
Category(value)<edge_begin><edge_end>Paragraph Types()
Hyper Link()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Order List Item()<edge_begin><edge_end>Any Text Sequence()
Heading5()<edge_begin><edge_end>Paragraph Types()
Internal()<edge_begin><edge_end>Wiki Page(name)
Ordered List()<edge_begin><edge_end>Order List Item()
Abstract Formatted Inline Content()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Main Template()<edge_begin><edge_end>Any Text Sequence()
Main Template()<edge_begin><edge_end>Template(type)
Ordered List()<edge_begin><edge_end>Paragraph(paragraph)
Any Text Sequence()<edge_begin><edge_end>Any Text()
About Template()<edge_begin><edge_end>Template(type)
Image(name, type, h Align)<edge_begin><edge_end>Any Text Sequence()
Heading4()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Image(name, type, h Align)<edge_begin><edge_end>Paragraph Types()
Heading3()<edge_begin><edge_end>Paragraph Types()
Heading5()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Unorder List Item(level)<edge_begin><edge_end>Any Text Sequence()
Heading2()<edge_begin><edge_end>Paragraph Types()
Image(name, type, h Align)<edge_begin><edge_end>Abstract Unformatted Inline Content()
Hyper Link()<edge_begin><edge_end>Any Text()
Heading3()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Bold()<edge_begin><edge_end>Abstract Formatted Inline Content()
Text(name)<edge_begin><edge_end>Abstract Unformatted Inline Content()
Internal()<edge_begin><edge_end>Text(name)
Abstract Unformatted Inline Content()<edge_begin><edge_end>Any Text()
Block Quote()<edge_begin><edge_end>Any Text Sequence()
Paragraph(paragraph)<edge_begin><edge_end>Paragraph Types()
Wiki Page(name)<edge_begin><edge_end>Paragraph Types()
Abstract Formatted Inline Content()<edge_begin><edge_end>Any Text()
Category(value)<edge_begin><edge_end>Text(name)
About Template()<edge_begin><edge_end>Any Text Sequence()
Unordered List()<edge_begin><edge_end>Paragraph Types()
Unordered List()<edge_begin><edge_end>Paragraph(paragraph)
Unordered List()<edge_begin><edge_end>Unorder List Item(level)
Conflict(degree)<edge_begin><edge_end>Goal(priority)
Specification(version)<edge_begin><edge_end>System Overview(purpose, capabilities)
System Overview(purpose, capabilities)<edge_begin><edge_end>System Context()
Goal(priority)<edge_begin><edge_end>Conflict(degree)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Identified Element(id, name, description)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Identified Element(id, name, description)
Trace Model Element Reference(container)<edge_begin><edge_end>Requirements Coverage Data(nb Requirements, verification Level)
Verification Activity(verification Method, passed)<edge_begin><edge_end>Identified Element(id, name, description)
Requirement()<edge_begin><edge_end>Abstract Requirement(risk)
Goal(priority)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Referenced Model Elements(agregation Type)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
Specification(version)<edge_begin><edge_end>Requirements Group()
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Positive Factor()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Date()
System Overview(purpose, capabilities)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Goal(priority)<edge_begin><edge_end>Ratio()
Abstract Requirement(risk)<edge_begin><edge_end>Verifiable Element(verified)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Stake Holder()<edge_begin><edge_end>Actor(address, email, phone Number)
Ref User Selected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Assumption(type)<edge_begin><edge_end>Abstract Requirement(risk)
Referenced Model Elements(agregation Type)<edge_begin><edge_end>Identified Element(id, name, description)
Specification(version)<edge_begin><edge_end>Verification Activity(verification Method, passed)
System Overview(purpose, capabilities)<edge_begin><edge_end>Goal(priority)
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Identified Element(id, name, description)
Ref Expression Collected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Abstract Requirement(risk)<edge_begin><edge_end>Abstract Requirement(risk)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Stake Holder()
Trace Model Element Reference(container)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
Verification Activity(verification Method, passed)<edge_begin><edge_end>Abstract Requirement(risk)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Variable(type)<edge_begin><edge_end>Identified Element(id, name, description)
Conflict(degree)<edge_begin><edge_end>Identified Element(id, name, description)
System Context()<edge_begin><edge_end>Actor(address, email, phone Number)
Assumption(type)<edge_begin><edge_end>Requirement()
System Context()<edge_begin><edge_end>Identified Element(id, name, description)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Ratio()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Specification(version)<edge_begin><edge_end>Verifiable Element(verified)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Rationale()
Rationale()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Trace()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Abstract Requirement(risk)<edge_begin><edge_end>Verification Activity(verification Method, passed)
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Ratio()
Ref Derived Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Abstract Requirement(risk)<edge_begin><edge_end>Requirements Group()
Requirements Group()<edge_begin><edge_end>Abstract Requirement(risk)
Specification(version)<edge_begin><edge_end>Actor(address, email, phone Number)
Actor(address, email, phone Number)<edge_begin><edge_end>Identified Element(id, name, description)
Stake Holder()<edge_begin><edge_end>Rationale()
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Ratio()
Stake Holder()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Interaction(direction)<edge_begin><edge_end>Identified Element(id, name, description)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Identified Element(id, name, description)
Requirements Group()<edge_begin><edge_end>Verifiable Element(verified)
Abstract Requirement(risk)<edge_begin><edge_end>Variable(type)
Join Right()<edge_begin><edge_end>Class(name)
Left()<edge_begin><edge_end>Attribute(name)
Expression()<edge_begin><edge_end>Condition()
Metamodel(metamodel URL)<edge_begin><edge_end>Metamodel Name(name)
Expression()<edge_begin><edge_end>Select(select)
Select(select)<edge_begin><edge_end>Select Attribute()
Comparison()<edge_begin><edge_end>Left()
Right(value)<edge_begin><edge_end>Metamodel Name(name)
Model(view Name)<edge_begin><edge_end>Metamodel(metamodel URL)
Join Right()<edge_begin><edge_end>Metamodel Name(name)
Left()<edge_begin><edge_end>Metamodel Name(name)
Expression()<edge_begin><edge_end>From()
Join()<edge_begin><edge_end>Join Left()
From()<edge_begin><edge_end>Join()
Join Left()<edge_begin><edge_end>Class(name)
Join()<edge_begin><edge_end>Relation(name)
Right(value)<edge_begin><edge_end>Attribute(name)
Left()<edge_begin><edge_end>Class(name)
Select Attribute()<edge_begin><edge_end>Metamodel Name(name)
Select Attribute()<edge_begin><edge_end>Attribute(name)
Comparison()<edge_begin><edge_end>Right(value)
Transition(condition)<edge_begin><edge_end>String()
Named Element(name)<edge_begin><edge_end>String()
Step(is Initial, is Active, action)<edge_begin><edge_end>Transition To Step()
Step(is Initial, is Active, action)<edge_begin><edge_end>Step To Transition()
Step(is Initial, is Active, action)<edge_begin><edge_end>Element()
Grafcet()<edge_begin><edge_end>Named Element(name)
Grafcet()<edge_begin><edge_end>Connection()
Transition To Step()<edge_begin><edge_end>Transition(condition)
Grafcet()<edge_begin><edge_end>Element()
Connection()<edge_begin><edge_end>Grafcet()
Transition(condition)<edge_begin><edge_end>Step To Transition()
Element()<edge_begin><edge_end>Grafcet()
Connection()<edge_begin><edge_end>Named Element(name)
Step(is Initial, is Active, action)<edge_begin><edge_end>String()
Step To Transition()<edge_begin><edge_end>Connection()
Named Element(name)<edge_begin><edge_end>Located Element(location)
Transition(condition)<edge_begin><edge_end>Element()
Transition To Step()<edge_begin><edge_end>Connection()
Step(is Initial, is Active, action)<edge_begin><edge_end>Boolean()
Located Element(location)<edge_begin><edge_end>String()
Book(title, year, month, volume, series, edition, isbn)<edge_begin><edge_end>Publication()
Sistedes Member()<edge_begin><edge_end>Person(name, surname, email, nationality)
Book(title, year, month, volume, series, edition, isbn)<edge_begin><edge_end>Publisher(name, address)
Person(name, surname, email, nationality)<edge_begin><edge_end>Publication()
Article(title, from Page, to Page, number, volume, month, year)<edge_begin><edge_end>Publication()
In Proceedings(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Publisher(name, address)
Person(name, surname, email, nationality)<edge_begin><edge_end>University(name, city, province Or State, country)
In Proceedings(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Editor(name)
Article(title, from Page, to Page, number, volume, month, year)<edge_begin><edge_end>Journal(name, jcr Indexed, acronym)
Journal(name, jcr Indexed, acronym)<edge_begin><edge_end>Article(title, from Page, to Page, number, volume, month, year)
In Proceedings(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Publication()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Transition Reaction()<edge_begin><edge_end>Transition Statement()
Reaction Priority(priority)<edge_begin><edge_end>Reaction Property()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Statechart Root()<edge_begin><edge_end>Def Root()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Primitive Value Expression(value)<edge_begin><edge_end>Expression()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Event Raising()<edge_begin><edge_end>Expression()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Event Derivation()<edge_begin><edge_end>Expression()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Element Reference Expression()<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>State Declaration()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Statechart Root()<edge_begin><edge_end>Statechart Definition()
Transition Root()<edge_begin><edge_end>Def Root()
Operation Call()<edge_begin><edge_end>Operation(param Types, type)
Transition Root()<edge_begin><edge_end>Transition Statement()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Transition(name)<edge_begin><edge_end>State(name)
Transition(name)<edge_begin><edge_end>Event(description)
State Machine()<edge_begin><edge_end>Simple State()
Final state()<edge_begin><edge_end>State(name)
State Machine()<edge_begin><edge_end>State(name)
State Machine()<edge_begin><edge_end>Composite state()
Composite state()<edge_begin><edge_end>State(name)
Event(description)<edge_begin><edge_end>Transition(name)
Event(description)<edge_begin><edge_end>State(name)
State Machine()<edge_begin><edge_end>Transition(name)
State(name)<edge_begin><edge_end>Transition(name)
State Machine()<edge_begin><edge_end>Event(description)
Var Declaration(name)<edge_begin><edge_end>Expression()
Transition(name)<edge_begin><edge_end>State(name)
Literal()<edge_begin><edge_end>Expression()
Init()<edge_begin><edge_end>Automata(name)
Automata(name)<edge_begin><edge_end>State(name)
Write(init Bit, length)<edge_begin><edge_end>Var Reference()
Write(init Bit, length)<edge_begin><edge_end>Expression()
Var Reference()<edge_begin><edge_end>Expression()
Policy(name, parser URI)<edge_begin><edge_end>Expression()
Cond()<edge_begin><edge_end>Relational(operator)
Read(init Bit, length)<edge_begin><edge_end>Expression()
Integer Lit(value)<edge_begin><edge_end>Literal()
Automata(name)<edge_begin><edge_end>Transition(name)
Var Reference()<edge_begin><edge_end>Var Declaration(name)
Cond()<edge_begin><edge_end>Expression()
Exec()<edge_begin><edge_end>Expression()
Exec()<edge_begin><edge_end>Transition(name)
String Lit(value)<edge_begin><edge_end>Literal()
Relational(operator)<edge_begin><edge_end>Expression()
HL Annotation()<edge_begin><edge_end>Annotation()
HL Declaration()<edge_begin><edge_end>Annotation()
Fusion Group()<edge_begin><edge_end>Place()
Code()<edge_begin><edge_end>Annotation()
Object()<edge_begin><edge_end>Has Id(id)
Ref Trans()<edge_begin><edge_end>Transition Node()
Attribute()<edge_begin><edge_end>Label()
CPN Tools Transition Addin()<edge_begin><edge_end>Code()
Object()<edge_begin><edge_end>Has Label()
Transition Node()<edge_begin><edge_end>HL Transition Addin()
HL Arc Addin(type)<edge_begin><edge_end>HL Annotation()
HL Marking()<edge_begin><edge_end>Annotation()
Page()<edge_begin><edge_end>Has Label()
Time()<edge_begin><edge_end>Annotation()
HL Declaration()<edge_begin><edge_end>Has Id(id)
Node()<edge_begin><edge_end>Arc()
Place()<edge_begin><edge_end>Ref Place()
Transition Node()<edge_begin><edge_end>Node()
Object()<edge_begin><edge_end>Page()
Condition()<edge_begin><edge_end>Annotation()
Place()<edge_begin><edge_end>Place Node()
Petri Net(type)<edge_begin><edge_end>Has Tool Info()
Petri Net(type)<edge_begin><edge_end>Has Name()
Transition()<edge_begin><edge_end>Transition Node()
Label()<edge_begin><edge_end>Has Tool Info()
Annotation()<edge_begin><edge_end>Label()
Arc()<edge_begin><edge_end>Page()
HL Place Addin()<edge_begin><edge_end>Type()
Fusion Group()<edge_begin><edge_end>Petri Net(type)
Page()<edge_begin><edge_end>Has Name()
Label()<edge_begin><edge_end>Has Label()
Place Node()<edge_begin><edge_end>Node()
Ref Place()<edge_begin><edge_end>Place()
Instance(sub Page ID)<edge_begin><edge_end>Node()
HL Transition Addin()<edge_begin><edge_end>Condition()
Node()<edge_begin><edge_end>Object()
Ref Place()<edge_begin><edge_end>Place Node()
Petri Net(type)<edge_begin><edge_end>Has Label()
Arc()<edge_begin><edge_end>HL Arc Addin(type)
Annotation()<edge_begin><edge_end>HL Annotation Addin(text)
Type()<edge_begin><edge_end>Annotation()
Page()<edge_begin><edge_end>Petri Net(type)
HL Place Addin()<edge_begin><edge_end>HL Marking()
Arc()<edge_begin><edge_end>Node()
Page()<edge_begin><edge_end>Arc()
CPN Tools Transition Addin()<edge_begin><edge_end>Time()
Petri Net(type)<edge_begin><edge_end>Fusion Group()
Tool Info(tool, version)<edge_begin><edge_end>Has Tool Info()
Instance(sub Page ID)<edge_begin><edge_end>Parameter Assignment(parameter, value)
Petri Net(type)<edge_begin><edge_end>Has Id(id)
Has Tool Info()<edge_begin><edge_end>Tool Info(tool, version)
Activation(name)<edge_begin><edge_end>Return Value(name, is Void)
Transition(name)<edge_begin><edge_end>Input(name)
Activation(name)<edge_begin><edge_end>Output(name)
Output(name)<edge_begin><edge_end>Operation(name)
Automaton(name)<edge_begin><edge_end>Activation(name)
Input(name)<edge_begin><edge_end>Operation(name)
Output(name)<edge_begin><edge_end>Object(name)
Transition(name)<edge_begin><edge_end>Activation(name)
Automaton(name)<edge_begin><edge_end>Transition(name)
Transition(name)<edge_begin><edge_end>State(name)
Automaton(name)<edge_begin><edge_end>State(name)
Sub Doc Elt()<edge_begin><edge_end>Para Content Elt()
Word Document()<edge_begin><edge_end>Styles Elt()
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Picture()<edge_begin><edge_end>Picture Type()
Symbol()<edge_begin><edge_end>Sym Elt()
Float Value(value)<edge_begin><edge_end>Value Type()
Word Document()<edge_begin><edge_end>String Property()
Fonts List Elt()<edge_begin><edge_end>Word Document()
Para Elt()<edge_begin><edge_end>Para Pr Elt()
Run Elt()<edge_begin><edge_end>Para Content Elt()
Version Type(n, nn)<edge_begin><edge_end>Integer()
No Break Hyphen()<edge_begin><edge_end>Run Content Elt()
Instr Text()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>Custom Document Properties Collection()
Word Document()<edge_begin><edge_end>Lists Elt()
Body Elt()<edge_begin><edge_end>Sect Pr Elt()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Tab()<edge_begin><edge_end>Run Content Elt()
Para Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Run Elt()<edge_begin><edge_end>Run Content Elt()
Cf Chunk()<edge_begin><edge_end>Block Level Elt()
H Link Elt()<edge_begin><edge_end>Para Content Elt()
String Value(value)<edge_begin><edge_end>Value Type()
String Property()<edge_begin><edge_end>String Type(val)
Endnote()<edge_begin><edge_end>Run Content Elt()
Block Level Elt()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Footnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Block Level Elt()<edge_begin><edge_end>Body Elt()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Body Elt()<edge_begin><edge_end>Block Level Elt()
String Type(val)<edge_begin><edge_end>String()
Para Content Elt()<edge_begin><edge_end>Para Elt()
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Word Document()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Tab()<edge_begin><edge_end>Tab Elt()
Pg Num()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>Doc Pr Elt()
Separator()<edge_begin><edge_end>Run Content Elt()
Styles Elt()<edge_begin><edge_end>Word Document()
Footnote()<edge_begin><edge_end>Run Content Elt()
Run Level Elt()<edge_begin><edge_end>Block Level Chunk Elt()
String Value(value)<edge_begin><edge_end>String()
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>Fonts List Elt()
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Run Content Elt()<edge_begin><edge_end>Run Elt()
Text()<edge_begin><edge_end>String Type(val)
Run Pr Elt()<edge_begin><edge_end>Run Elt()
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Para Pr Elt()<edge_begin><edge_end>Para Elt()
Smart Tags Collection()<edge_begin><edge_end>Word Document()
Sect Pr Elt()<edge_begin><edge_end>Body Elt()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
Annotation Ref()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Text()<edge_begin><edge_end>Run Content Elt()
Block Level Chunk Elt()<edge_begin><edge_end>Block Level Elt()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Break Elt(type)<edge_begin><edge_end>Run Content Elt()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Word Document()<edge_begin><edge_end>Body Elt()
Simple Field Elt()<edge_begin><edge_end>Para Content Elt()
Cr()<edge_begin><edge_end>Run Content Elt()
Lists Elt()<edge_begin><edge_end>Word Document()
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Note Elt(type, suppress Ref)<edge_begin><edge_end>Block Level Elt()
Para Elt()<edge_begin><edge_end>Para Content Elt()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Del Instr Text()<edge_begin><edge_end>String Type(val)
Run Elt()<edge_begin><edge_end>Run Pr Elt()
tbls()<edge_begin><edge_end>Db Object Name(dbname)
Or Table()<edge_begin><edge_end>From Table()
Select Sub Set(op, all)<edge_begin><edge_end>Select(select)
Or Order By Column()<edge_begin><edge_end>Order By Column Full(col Order Int, direction)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Full Expression(c, not Prm, isnull)
In Oper(op)<edge_begin><edge_end>Sub Query Operand()
Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)<edge_begin><edge_end>Operand List()
Op List()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
Select(select)<edge_begin><edge_end>Or Expr()
Operand()<edge_begin><edge_end>Op Function Cast(type, p, p2)
Operand()<edge_begin><edge_end>P Operand(prm)
Operand()<edge_begin><edge_end>Exp Operand(prm)
Op List()<edge_begin><edge_end>Operand List()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Db Object Name All(dbname)
Sql Case When()<edge_begin><edge_end>Or Expr()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Comparison(operator, sub Operator)
Operand()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
Like Operand(op2)<edge_begin><edge_end>Op Function Cast(type, p, p2)
Sql Case When()<edge_begin><edge_end>Operands()
Comparison(operator, sub Operator)<edge_begin><edge_end>Operands()
Operands()<edge_begin><edge_end>Operands()
Or Column()<edge_begin><edge_end>Column Or Alias(alias, all Cols)
Prms()<edge_begin><edge_end>JR Parameter(jrprm)
Sub Query Operand()<edge_begin><edge_end>Select Query()
Table Or Alias(alias)<edge_begin><edge_end>Table Full()
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg()
Col()<edge_begin><edge_end>Column Full()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>In Oper(op)
Group By Column Full()<edge_begin><edge_end>Or Group By Column()
Order By Column Full(col Order Int, direction)<edge_begin><edge_end>Or Order By Column()
SQL Case Operand()<edge_begin><edge_end>SQL Case Whens()
Op F List()<edge_begin><edge_end>Op Function Arg Operand()
Db Object Name(dbname)<edge_begin><edge_end>Column Full()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Expr Group()
Minus()<edge_begin><edge_end>Operands()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Operands()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Between(op Between)
tbls()<edge_begin><edge_end>Table Full()
Model()<edge_begin><edge_end>Or Order By Column()
From Table Join(join)<edge_begin><edge_end>Or Expr()
Op Function(fname)<edge_begin><edge_end>Op Function Arg()
Star()<edge_begin><edge_end>Operands()
Model()<edge_begin><edge_end>Select Query()
From Table()<edge_begin><edge_end>Table Or Alias(alias)
In Oper(op)<edge_begin><edge_end>Operand List()
Operand()<edge_begin><edge_end>Operand()
JR Parameter(jrprm)<edge_begin><edge_end>Prms()
Group By Column Full()<edge_begin><edge_end>Column Full()
Operands()<edge_begin><edge_end>Operand()
Between(op Between)<edge_begin><edge_end>Operands()
Op Function Cast(type, p, p2)<edge_begin><edge_end>Operands()
Like Operand(op2)<edge_begin><edge_end>Op Function(fname)
Column Operand()<edge_begin><edge_end>Column Full()
Select(select)<edge_begin><edge_end>Select Sub Set(op, all)
Operand()<edge_begin><edge_end>Op Function(fname)
X Expr(xf)<edge_begin><edge_end>Prms()
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg Agregate()
From Table()<edge_begin><edge_end>From Table Join(join)
Order By Column Full(col Order Int, direction)<edge_begin><edge_end>Column Full()
Select(select)<edge_begin><edge_end>Select Query()
Select(select)<edge_begin><edge_end>Or Table()
Operand()<edge_begin><edge_end>Sub Query Operand()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Operands()
Table Or Alias(alias)<edge_begin><edge_end>Sub Query Operand()
Sql Case When()<edge_begin><edge_end>SQL Case Whens()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Like(op Like)
Div()<edge_begin><edge_end>Operands()
Or Expr()<edge_begin><edge_end>Full Expression(c, not Prm, isnull)
Table Or Alias(alias)<edge_begin><edge_end>Db Object Name(dbname)
Select(select)<edge_begin><edge_end>Or Group By Column()
Expr Group()<edge_begin><edge_end>Or Expr()
Concat()<edge_begin><edge_end>Operands()
Operand()<edge_begin><edge_end>SQL Case Operand()
Operands()<edge_begin><edge_end>Op Function Arg Agregate()
Place Reference()<edge_begin><edge_end>Place(token, final Marking)
Node(name, type)<edge_begin><edge_end>Annotation(text)
Ref Marked Place(token)<edge_begin><edge_end>Place Reference()
Transition()<edge_begin><edge_end>Node(name, type)
Arc(weight)<edge_begin><edge_end>Node(name, type)
Arc To Place()<edge_begin><edge_end>Arc(weight)
Marking()<edge_begin><edge_end>Ref Marked Place(token)
Pt Net()<edge_begin><edge_end>Annotation(text)
Place Ext(probability, is Start)<edge_begin><edge_end>Place(token, final Marking)
Pt Net()<edge_begin><edge_end>Place(token, final Marking)
Node(name, type)<edge_begin><edge_end>Arc(weight)
Pt Net()<edge_begin><edge_end>Transition()
Transition Ext(probability, min Time, cost, max Time, confidentiality)<edge_begin><edge_end>Transition()
Arc To Transition Ext(probability)<edge_begin><edge_end>Arc To Transition()
Pt Net()<edge_begin><edge_end>Marking()
Arc To Place Ext(probability)<edge_begin><edge_end>Arc To Place()
Choose Rule()<edge_begin><edge_end>Rule()
Type(with Null)<edge_begin><edge_end>Method(is Abstract, is Shared, is Entry Point, is Override)
Integer Constant(val)<edge_begin><edge_end>Integer()
Range Sequence()<edge_begin><edge_end>Sequence Term()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
Update Field Rule()<edge_begin><edge_end>Update Rule()
Conditional Rule()<edge_begin><edge_end>Term()
Parameter(name)<edge_begin><edge_end>String()
Tulplet Term()<edge_begin><edge_end>Term()
Skip Rule()<edge_begin><edge_end>Rule()
Namespace(name)<edge_begin><edge_end>String()
Enumerate Sequence()<edge_begin><edge_end>Term()
Type(with Null)<edge_begin><edge_end>Var Declaration(is Constant, is Declaration, is Local, name)
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>String()
Update Rule()<edge_begin><edge_end>Term()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Boolean()
Step Expression()<edge_begin><edge_end>Step(name)
Structure(name, super Structure Name)<edge_begin><edge_end>String()
Step Expression()<edge_begin><edge_end>Term()
Rule()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Enumerate Set()<edge_begin><edge_end>Set Term()
Enumerator(name)<edge_begin><edge_end>Term()
Range Sequence()<edge_begin><edge_end>Term()
Main()<edge_begin><edge_end>Function(name)
Initially()<edge_begin><edge_end>Var Term(name)
Return Rule()<edge_begin><edge_end>Rule()
Function(name)<edge_begin><edge_end>Asm L Element()
Var Or Case()<edge_begin><edge_end>Structure(name, super Structure Name)
Function(name)<edge_begin><edge_end>Body()
Step Until Fix Point()<edge_begin><edge_end>Step(name)
Main()<edge_begin><edge_end>Initially()
Asm L File()<edge_begin><edge_end>Main()
Remove Rule()<edge_begin><edge_end>Rule()
Namespace(name)<edge_begin><edge_end>Asm L Element()
Set Term()<edge_begin><edge_end>Term()
Update Map Rule()<edge_begin><edge_end>Var Term(name)
Exists Term(is Unique)<edge_begin><edge_end>Predicate Term()
Conditional Rule()<edge_begin><edge_end>Body()
Step While()<edge_begin><edge_end>Step Expression()
Enumerate Sequence()<edge_begin><edge_end>Sequence Term()
Update Var Rule()<edge_begin><edge_end>Term()
Return Rule()<edge_begin><edge_end>Term()
Operator(op Name)<edge_begin><edge_end>Term()
Parameter(name)<edge_begin><edge_end>Method(is Abstract, is Shared, is Entry Point, is Override)
Exists Term(is Unique)<edge_begin><edge_end>Boolean()
Enumerator(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Algorithm Set()<edge_begin><edge_end>In Where Holds()
Enumerate Set()<edge_begin><edge_end>Term()
Remove Rule()<edge_begin><edge_end>Var Term(name)
Any In()<edge_begin><edge_end>Predicate Term()
Structure(name, super Structure Name)<edge_begin><edge_end>Asm L Element()
Class(name, is Abstract, super Class Name)<edge_begin><edge_end>Var Or Method()
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Parameter(name)
Update Map Rule()<edge_begin><edge_end>Term()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Asm L Element()
Step For Each()<edge_begin><edge_end>Step(name)
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Boolean()
Case(name)<edge_begin><edge_end>Var Or Case()
String Constant(val)<edge_begin><edge_end>Constant()
Range Set()<edge_begin><edge_end>Term()
Map Term(separator)<edge_begin><edge_end>String()
Algorithm Set()<edge_begin><edge_end>Set Term()
New Instance()<edge_begin><edge_end>Method Call Term(name)
Step For Each()<edge_begin><edge_end>In Where Holds()
Var Or Method()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Class(name, is Abstract, super Class Name)<edge_begin><edge_end>String()
Named Type(name)<edge_begin><edge_end>String()
Enumeration(name)<edge_begin><edge_end>Enumerator(name)
Initially()<edge_begin><edge_end>Term()
In Where Holds()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Function(name)
Range Set()<edge_begin><edge_end>Set Term()
Update Map Rule()<edge_begin><edge_end>Update Rule()
Map Term(separator)<edge_begin><edge_end>Term()
Predicate Term()<edge_begin><edge_end>In Where Holds()
Method Call Term(name)<edge_begin><edge_end>String()
Add Rule()<edge_begin><edge_end>Term()
In Where Holds()<edge_begin><edge_end>Term()
Forall Rule()<edge_begin><edge_end>Rule()
Choose Rule()<edge_begin><edge_end>In Where Holds()
Tuplet Type()<edge_begin><edge_end>Type(with Null)
Step Until()<edge_begin><edge_end>Step Expression()
Constant()<edge_begin><edge_end>Term()
Method Call Term(name)<edge_begin><edge_end>Term()
Function(name)<edge_begin><edge_end>String()
Update Var Rule()<edge_begin><edge_end>Update Rule()
Var Or Method()<edge_begin><edge_end>Class(name, is Abstract, super Class Name)
Main()<edge_begin><edge_end>Asm L File()
Initially()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
String Constant(val)<edge_begin><edge_end>String()
Enumeration(name)<edge_begin><edge_end>String()
Type(with Null)<edge_begin><edge_end>Boolean()
Type(with Null)<edge_begin><edge_end>Parameter(name)
Choose Rule()<edge_begin><edge_end>Body()
Null Constant()<edge_begin><edge_end>Constant()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Var Or Case()
Case(name)<edge_begin><edge_end>String()
Conditional Rule()<edge_begin><edge_end>Rule()
Else If()<edge_begin><edge_end>Conditional Rule()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Type(with Null)
Type(with Null)<edge_begin><edge_end>Asm L Element()
Structure(name, super Structure Name)<edge_begin><edge_end>Var Or Case()
Term()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Enumeration(name)<edge_begin><edge_end>Asm L Element()
Forall Rule()<edge_begin><edge_end>In Where Holds()
Map Type()<edge_begin><edge_end>Type(with Null)
Update Rule()<edge_begin><edge_end>Rule()
Asm L Element()<edge_begin><edge_end>Asm L File()
Var Or Case()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Parameter(name)<edge_begin><edge_end>Type(with Null)
Asm L File()<edge_begin><edge_end>Asm L Element()
Var Term(name)<edge_begin><edge_end>String()
Remove Rule()<edge_begin><edge_end>Term()
Named Type(name)<edge_begin><edge_end>Type(with Null)
Conditional Rule()<edge_begin><edge_end>Else If()
Parameter(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Var Or Method()
Column(default, nullable, precision, length)<edge_begin><edge_end>Model Element(name)
Constraints(deferrable, deferred)<edge_begin><edge_end>Model Element(name)
Primary Key Con()<edge_begin><edge_end>P Key And Unique()
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>Constraints(deferrable, deferred)
Database()<edge_begin><edge_end>System Data Type(predefined Length, predefined Dec Places)
Table()<edge_begin><edge_end>Unique Con()
P Key And Unique()<edge_begin><edge_end>Column(default, nullable, precision, length)
Table()<edge_begin><edge_end>Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>P Key And Unique()
Table()<edge_begin><edge_end>Check Con(check Condition)
User Defined Data Type(precision, length, default Value)<edge_begin><edge_end>Data Type()
Column(default, nullable, precision, length)<edge_begin><edge_end>Data Type()
Unique Con()<edge_begin><edge_end>P Key And Unique()
Table()<edge_begin><edge_end>Primary Key Con()
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>Table()
System Data Type(predefined Length, predefined Dec Places)<edge_begin><edge_end>Data Type()
Table()<edge_begin><edge_end>Column(default, nullable, precision, length)
Data Type()<edge_begin><edge_end>Model Element(name)
Column(default, nullable, precision, length)<edge_begin><edge_end>Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)
Column(default, nullable, precision, length)<edge_begin><edge_end>P Key And Unique()
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>Column(default, nullable, precision, length)
Database()<edge_begin><edge_end>Table()
User Defined Data Type(precision, length, default Value)<edge_begin><edge_end>System Data Type(predefined Length, predefined Dec Places)
Default Value Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Check Column Constraint()<edge_begin><edge_end>Expression()
Column(type)<edge_begin><edge_end>Table()
Foreign Key Table Constraint()<edge_begin><edge_end>Column(type)
Check Table Constraint()<edge_begin><edge_end>Expression()
Database()<edge_begin><edge_end>Table()
Foreign Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Foreign Key Column Constraint()<edge_begin><edge_end>Column(type)
Database()<edge_begin><edge_end>Index()
View()<edge_begin><edge_end>Name Provider(name)
Table Mapping()<edge_begin><edge_end>String To Table Mapping Entry Map(key)
Foreign Key Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Database Version()<edge_begin><edge_end>Column Mapping()
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Database()<edge_begin><edge_end>Name Provider(name)
Database Version()<edge_begin><edge_end>Database Version()
Unique Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Database Version()<edge_begin><edge_end>Database()
Primary Key Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Table()<edge_begin><edge_end>Name Provider(name)
Table()<edge_begin><edge_end>Column(type)
Not Null Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Table()<edge_begin><edge_end>Database()
Database Versions(package Name, file Name)<edge_begin><edge_end>Database Version()
Column Mapping()<edge_begin><edge_end>String To Column Mapping Entry Map(key)
Table()<edge_begin><edge_end>Table Constraint(name)
Primary Key Table Constraint()<edge_begin><edge_end>Indexed Column()
Database Version()<edge_begin><edge_end>Table Mapping()
Database()<edge_begin><edge_end>View()
Trigger()<edge_begin><edge_end>Name Provider(name)
Primary Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Database()<edge_begin><edge_end>Trigger()
Unique Table Constraint()<edge_begin><edge_end>Indexed Column()
Foreign Key Table Constraint()<edge_begin><edge_end>Table()
Unique Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Indexed Column()<edge_begin><edge_end>Column(type)
Row(Row Index)<edge_begin><edge_end>Cell(Value Formatted, Cell Type, Double Value, String Value)
Cell(Value Formatted, Cell Type, Double Value, String Value)<edge_begin><edge_end>Row(Row Index)
Sheet(Sheet Name, Sheet Index)<edge_begin><edge_end>Column(Column Index)
Spreadsheet(File Path, Label)<edge_begin><edge_end>Sheet(Sheet Name, Sheet Index)
Column(Column Index)<edge_begin><edge_end>Cell(Value Formatted, Cell Type, Double Value, String Value)
Sheet(Sheet Name, Sheet Index)<edge_begin><edge_end>Row(Row Index)
Cell(Value Formatted, Cell Type, Double Value, String Value)<edge_begin><edge_end>Column(Column Index)
Column(Column Index)<edge_begin><edge_end>Sheet(Sheet Name, Sheet Index)
Dataflow System(protocol)<edge_begin><edge_end>Dataflow Net()
State Machine Transition(priority)<edge_begin><edge_end>Firing Rule(comp Type)
Dataflow Net()<edge_begin><edge_end>Node()
State Machine()<edge_begin><edge_end>Node()
Node()<edge_begin><edge_end>Dataflow Net()
Firing Rule(comp Type)<edge_begin><edge_end>Channel()
Dataflow System(protocol)<edge_begin><edge_end>Named Element(name)
Process(host)<edge_begin><edge_end>Named Element(name)
State Machine State()<edge_begin><edge_end>State Machine()
Dataflow Net()<edge_begin><edge_end>Process(host)
State Machine Transition(priority)<edge_begin><edge_end>State Machine State()
State Machine()<edge_begin><edge_end>Firing Rule(comp Type)
Node()<edge_begin><edge_end>Named Element(name)
Channel()<edge_begin><edge_end>Named Element(name)
Dataflow Net()<edge_begin><edge_end>Channel()
Firing Rule(comp Type)<edge_begin><edge_end>Named Element(name)
State Machine State()<edge_begin><edge_end>Named Element(name)
State Machine State()<edge_begin><edge_end>State Machine Transition(priority)
State Machine()<edge_begin><edge_end>State Machine State()
BODY Element()<edge_begin><edge_end>HTML Element(value)
BR(clear)<edge_begin><edge_end>String()
BR(clear)<edge_begin><edge_end>BODY Element()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>String()
FORM(action, method)<edge_begin><edge_end>String()
TABLE Element(bgcolor, background)<edge_begin><edge_end>BODY Element()
MAP()<edge_begin><edge_end>BODY Element()
HTML()<edge_begin><edge_end>BODY(background, bgcolor, text, link, alink, vlink)
TITLE()<edge_begin><edge_end>HEAD Element()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TR(valign, align)<edge_begin><edge_end>TABLE Element(bgcolor, background)
H1()<edge_begin><edge_end>BODY Element()
SPAN(style)<edge_begin><edge_end>BODY Element()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>String()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TR(valign, align)
FONT(color, face, size)<edge_begin><edge_end>String()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML Element(value)
LI(li Value)<edge_begin><edge_end>String()
DIV(align)<edge_begin><edge_end>BODY Element()
FONT(color, face, size)<edge_begin><edge_end>BODY Element()
PRE()<edge_begin><edge_end>BODY Element()
TEXTAREA(name, rows, cols)<edge_begin><edge_end>String()
AREA(shape, coords, ahref)<edge_begin><edge_end>BODY Element()
TR(valign, align)<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
INPUT(align, maxlength, size, checked, src, input Value, name, type)<edge_begin><edge_end>String()
EMBED(src, width, height, align, vspace, hspace, border)<edge_begin><edge_end>String()
H3()<edge_begin><edge_end>BODY Element()
HEAD()<edge_begin><edge_end>HTML Element(value)
List Element(type)<edge_begin><edge_end>String()
A(ahref, name, id)<edge_begin><edge_end>String()
EMBED(src, width, height, align, vspace, hspace, border)<edge_begin><edge_end>BODY Element()
STRIKE()<edge_begin><edge_end>BODY Element()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>BODY Element()
SUB()<edge_begin><edge_end>BODY Element()
STYLE()<edge_begin><edge_end>BODY Element()
PARAM(name, param Value)<edge_begin><edge_end>String()
OL(start)<edge_begin><edge_end>List Element(type)
HEAD Element()<edge_begin><edge_end>HTML Element(value)
EM()<edge_begin><edge_end>BODY Element()
HEAD Element()<edge_begin><edge_end>HEAD()
SMALL()<edge_begin><edge_end>BODY Element()
SPAN(style)<edge_begin><edge_end>String()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML()
TT()<edge_begin><edge_end>BODY Element()
P()<edge_begin><edge_end>BODY Element()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>String()
TR(valign, align)<edge_begin><edge_end>String()
AREA(shape, coords, ahref)<edge_begin><edge_end>String()
LINK(rel, title, ahref, type)<edge_begin><edge_end>String()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TR(valign, align)
HEAD()<edge_begin><edge_end>HTML()
TR(valign, align)<edge_begin><edge_end>TABLE(border, width, cellspacing, cellpadding)
HTML Element(value)<edge_begin><edge_end>String()
HEAD()<edge_begin><edge_end>HEAD Element()
H2()<edge_begin><edge_end>BODY Element()
I()<edge_begin><edge_end>BODY Element()
SELECT(multiple, size, name)<edge_begin><edge_end>String()
FRAME(src, name, marginwidth, marginheight, scrolling, noresize)<edge_begin><edge_end>String()
B()<edge_begin><edge_end>BODY Element()
OPTION(selected, option Value)<edge_begin><edge_end>String()
LINK(rel, title, ahref, type)<edge_begin><edge_end>HEAD Element()
BIG()<edge_begin><edge_end>BODY Element()
NOEMBED()<edge_begin><edge_end>BODY Element()
STRONG()<edge_begin><edge_end>BODY Element()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>BODY Element()
IFRAME()<edge_begin><edge_end>FRAME(src, name, marginwidth, marginheight, scrolling, noresize)
H4()<edge_begin><edge_end>BODY Element()
Paragraph(content)<edge_begin><edge_end>Named(name)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Paper()
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Publication System()<edge_begin><edge_end>Publication Structure()
Collaboration(ratio)<edge_begin><edge_end>Paper()
Knowledge Manager()<edge_begin><edge_end>Named(name)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Publication Structure()<edge_begin><edge_end>Paper()
Review(date)<edge_begin><edge_end>Review Note(content)
Paper()<edge_begin><edge_end>Paper Keyword(weight)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Knowledge Manager()<edge_begin><edge_end>Keyword(description)
Review Note(content)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Paper()
Review(date)<edge_begin><edge_end>Labelled(lname)
Keyword(description)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Publication System()<edge_begin><edge_end>Position(description)
Paper()<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Position(description)<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Alias()<edge_begin><edge_end>Named(name)
Aggregate Root()<edge_begin><edge_end>Named(name)
Boolean Literal(value)<edge_begin><edge_end>Literal()
Aggregate Root()<edge_begin><edge_end>Alias()
String Literal(value)<edge_begin><edge_end>Literal()
From Statement()<edge_begin><edge_end>Aggregate Root()
Query()<edge_begin><edge_end>Select Statement()
Select Expression()<edge_begin><edge_end>Alias()
Path Expression()<edge_begin><edge_end>Named(name)
Query()<edge_begin><edge_end>From Statement()
Integer Literal(value)<edge_begin><edge_end>Literal()
Function Call(function)<edge_begin><edge_end>Function Argument()
State(is Initial)<edge_begin><edge_end>I Named Element(name)
Transition Segment Specification()<edge_begin><edge_end>Action()
Action()<edge_begin><edge_end>I Expression Term()
Data State Variable(type)<edge_begin><edge_end>I Named Element(name)
Component()<edge_begin><edge_end>I Named Element(name)
Port(type)<edge_begin><edge_end>I Expression Term()
Var(identifier)<edge_begin><edge_end>I Expression Term()
Port(type)<edge_begin><edge_end>I Named Element(name)
Transition Segment()<edge_begin><edge_end>Transition Segment Specification()
Data State Variable(type)<edge_begin><edge_end>I Expression Term()
Transition Segment Specification()<edge_begin><edge_end>I Expression Term()
State(is Initial)<edge_begin><edge_end>Transition Segment Specification()
Int Const(value)<edge_begin><edge_end>I Expression Term()
State Automaton()<edge_begin><edge_end>Transition Segment()
Transition Segment()<edge_begin><edge_end>I Named Element(name)
State Automaton()<edge_begin><edge_end>State(is Initial)
Operation(operator)<edge_begin><edge_end>I Expression Term()
Input Port()<edge_begin><edge_end>Port(type)
Bool Const(value)<edge_begin><edge_end>I Expression Term()
Component()<edge_begin><edge_end>State Automaton()
Use Case()<edge_begin><edge_end>Include()
Actor()<edge_begin><edge_end>Classifier()
Use Case()<edge_begin><edge_end>Classifier()
Extension Point()<edge_begin><edge_end>Use Case()
Use Case Diagram c()<edge_begin><edge_end>Classifier()
Association c()<edge_begin><edge_end>Relationship()
Include()<edge_begin><edge_end>Directed Relationship()
Classifier()<edge_begin><edge_end>Namespace()
Classifier()<edge_begin><edge_end>Classifier()
Directed Relationship()<edge_begin><edge_end>Relationship()
System c()<edge_begin><edge_end>Classifier()
Include()<edge_begin><edge_end>Named Element(name)
Extend c(Expression)<edge_begin><edge_end>Directed Relationship()
Extend c(Expression)<edge_begin><edge_end>Use Case()
Extension Point()<edge_begin><edge_end>Named Element(name)
Use Case()<edge_begin><edge_end>Extension Point()
Association c()<edge_begin><edge_end>Classifier()
System c()<edge_begin><edge_end>Use Case()
Association c()<edge_begin><edge_end>Multiplicity Element c(source Lower, source Upper, target Lower, target Upper)
Extend c(Expression)<edge_begin><edge_end>Named Element(name)
Classifier()<edge_begin><edge_end>Generalization()
Use Case Diagram c()<edge_begin><edge_end>Relationship()
Final Node()<edge_begin><edge_end>Node()
Timeout Transition()<edge_begin><edge_end>Transition(trigger Event Name)
Conditional Node()<edge_begin><edge_end>Condition(expression)
State Machine(name)<edge_begin><edge_end>Node()
Conditional Node()<edge_begin><edge_end>Node()
Node()<edge_begin><edge_end>Transition(trigger Event Name)
Initial Node()<edge_begin><edge_end>Node()
Transition(trigger Event Name)<edge_begin><edge_end>Condition(expression)
State(name, duration)<edge_begin><edge_end>Node()
Date Time(date)<edge_begin><edge_end>Type()
Integer(integer, length)<edge_begin><edge_end>Type()
Text(text)<edge_begin><edge_end>Type()
Table(name)<edge_begin><edge_end>Attribute(attribute Name)
Attribute(attribute Name)<edge_begin><edge_end>Property()
Database(name)<edge_begin><edge_end>Table(name)
Auto Increment(auto Increment)<edge_begin><edge_end>Property()
Primary Key(primary Key)<edge_begin><edge_end>Property()
Attribute(attribute Name)<edge_begin><edge_end>Type()
Varchar(varchar, length)<edge_begin><edge_end>Type()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index Element(asc)
Data Base(url)<edge_begin><edge_end>Table Container()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Primary Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key Element()
Foreign Key Element()<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Table()<edge_begin><edge_end>Constraint(expression)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key()
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Table()<edge_begin><edge_end>Abstract Table()
Constraint(expression)<edge_begin><edge_end>Named Element(name)
Abstract Table()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Named Element(name)
Primary Key()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Abstract Table()<edge_begin><edge_end>Table Container()
Table()<edge_begin><edge_end>Foreign Key()
Data Base(url)<edge_begin><edge_end>Schema()
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Named Element(name)
Index Element(asc)<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Foreign Key()<edge_begin><edge_end>Foreign Key Element()
Table()<edge_begin><edge_end>Primary Key()
Table Container()<edge_begin><edge_end>Named Element(name)
Constraint(expression)<edge_begin><edge_end>Table()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Named Element(name)<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Foreign Key Element()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Table Container()<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
View(query)<edge_begin><edge_end>Abstract Table()
Schema()<edge_begin><edge_end>Table Container()
Abstract Table()<edge_begin><edge_end>Named Element(name)
Index Element(asc)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Column()
Error Value()<edge_begin><edge_end>Value Type()
Data()<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Value Type()
Workbook()<edge_begin><edge_end>Worksheet(name)
Worksheet(name)<edge_begin><edge_end>Table()
Column()<edge_begin><edge_end>Col Or Row Element(hidden, span)
Table()<edge_begin><edge_end>Row()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Cell(formula)<edge_begin><edge_end>Data()
Cell(formula)<edge_begin><edge_end>Table Element(index)
Row()<edge_begin><edge_end>Cell(formula)
Extended Query Select()<edge_begin><edge_end>Extended Query Expression Body(optimize Records Number)
Call Statement(parms)<edge_begin><edge_end>Definition Statement()
Fetch Statement(cursor Name, into, position, relative Position)<edge_begin><edge_end>Binding Statement()
Prepare Statement(from, statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)
Definition Parser()<edge_begin><edge_end>Statement Parser()
Prepare Statement(from, statement Name)<edge_begin><edge_end>Binding Statement()
Create Table Statement()<edge_begin><edge_end>Definition Statement()
Rename Statement(new Name, system, target)<edge_begin><edge_end>Definition Statement()
Describe Statement(statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)
Definition Writer()<edge_begin><edge_end>Statement Writer()
Lock Table Statement(allow Read, share Mode)<edge_begin><edge_end>Definition Statement()
Execute Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Statement Writer()<edge_begin><edge_end>Name Helper()
Rollback Statement(hold)<edge_begin><edge_end>Definition Statement()
Execute Immediate Statement(variable)<edge_begin><edge_end>Binding Statement()
Disconnect Statement(target)<edge_begin><edge_end>Definition Statement()
Binding Parse Result()<edge_begin><edge_end>Binding Parse Error()
Set Connection Statement(database Name)<edge_begin><edge_end>Definition Statement()
Create View Statement(fields, query)<edge_begin><edge_end>Definition Statement()
Connect Statement(pwd, reset, to, user)<edge_begin><edge_end>Definition Statement()
Name Helper()<edge_begin><edge_end>SQL Object Name Helper()
Commit Statement(hold)<edge_begin><edge_end>Definition Statement()
Describe Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Open Statement(cursor, using, using Type)<edge_begin><edge_end>Binding Statement()
Binding Parser()<edge_begin><edge_end>Statement Parser()
Drop Statement(range, target)<edge_begin><edge_end>Definition Statement()
Create Alias Statement()<edge_begin><edge_end>Definition Statement()
Binding Parse Result()<edge_begin><edge_end>Binding Statement()
Create Index Statement(unique)<edge_begin><edge_end>Definition Statement()
Set Transaction Statement(isolation Level, rw Operation)<edge_begin><edge_end>Binding Statement()
Release Statement(server Name)<edge_begin><edge_end>Definition Statement()
Query Parameter(data Type)<edge_begin><edge_end>Query(query Type, query Sql, catalog)
Prompt(system, extension)<edge_begin><edge_end>Saflet Project(enabled)
Query(query Type, query Sql, catalog)<edge_begin><edge_end>Safi Result Set(use Cache, scrollable, read Only, scroll Mode, holdability Mode)
Safi Driver Manager()<edge_begin><edge_end>DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
Saflet Project(enabled)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)<edge_begin><edge_end>DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)
Saflet Project(enabled)<edge_begin><edge_end>Saflet(code, subsystem Id)
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>Query(query Type, query Sql, catalog)
Role()<edge_begin><edge_end>Entitlement()
Safi Server(bind IP, management Port, running, debug, db Port)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Telephony Subsystem(hostname, running, private, visible Safi Server IP, enabled, manager Name, manager Password, manager Port, version Id, prompt Directory, platform Id)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>Properties()
Server Resource(name, last Modified, last Updated, id, description)<edge_begin><edge_end>User(firstname, lastname, password)
Telephony Subsystem(hostname, running, private, visible Safi Server IP, enabled, manager Name, manager Password, manager Port, version Id, prompt Directory, platform Id)<edge_begin><edge_end>Safi Server(bind IP, management Port, running, debug, db Port)
User(firstname, lastname, password)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
User(firstname, lastname, password)<edge_begin><edge_end>Role()
Safi Server(bind IP, management Port, running, debug, db Port)<edge_begin><edge_end>User(firstname, lastname, password)
DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
Query Parameter(data Type)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
Query(query Type, query Sql, catalog)<edge_begin><edge_end>Query Parameter(data Type)
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)
Prompt(system, extension)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Saflet(code, subsystem Id)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)<edge_begin><edge_end>Safi Driver Manager()
Safi Result Set(use Cache, scrollable, read Only, scroll Mode, holdability Mode)<edge_begin><edge_end>Query(query Type, query Sql, catalog)
Entitlement()<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Query(query Type, query Sql, catalog)<edge_begin><edge_end>DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Transition Root()<edge_begin><edge_end>Def Root()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Transition Root()<edge_begin><edge_end>Transition Specification()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Reaction Effect()<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Expression()
String Literal(value)<edge_begin><edge_end>Literal()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Root()<edge_begin><edge_end>Def Root()
Event Raising Expression()<edge_begin><edge_end>Expression()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Statechart Root()<edge_begin><edge_end>Statechart Specification(namespace)
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Statechart Specification(namespace)<edge_begin><edge_end>Statechart Scope()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Event Derivation()<edge_begin><edge_end>Expression()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Typed Element Reference Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Def Root()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Query Definition(identifier Quote String, host Variable Marker, host Variable Marker Supported, cast Expression Supported, default Keyword For Insert Value Supported, extended Grouping Supported, table Alias In Delete Supported)
Sequence Definition(type Enumeration Supported, cache Supported, order Supported, no Maximum Value String, no Minimum Value String, no Cache String, cache Default Value)<edge_begin><edge_end>Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Sequence Definition(type Enumeration Supported, cache Supported, order Supported, no Maximum Value String, no Minimum Value String, no Cache String, cache Default Value)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Trigger Definition(maximum Reference Part Length, maximum Action Body Length, type Supported, when Clause Supported, granularity Supported, references Clause Supported, per Column Update Trigger Supported, instead Of Trigger Supported, row Trigger Reference Supported, table Trigger Reference Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Constructed Data Type Definition(array Datatype Supported, multiset Datatype Supported, row Datatype Supported, reference Datatype Supported, cursor Datatype Supported)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>SQL Syntax Definition(keywords, operators, termination Character)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Column Definition(identity Supported, computed Supported, identity Start Value Supported, identity Increment Supported, identity Minimum Supported, identity Maximum Supported, identity Cycle Supported, maximum Identifier Length)
Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)<edge_begin><edge_end>Field Qualifier Definition(name, maximum Precision, default Precision, precision Supported, maximum Scale, default Scale, scale Supported)
Column Definition(identity Supported, computed Supported, identity Start Value Supported, identity Increment Supported, identity Minimum Supported, identity Maximum Supported, identity Cycle Supported, maximum Identifier Length)<edge_begin><edge_end>Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Schema Definition(maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Extended Definition(name, value)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>User Defined Type Definition(default Value Supported, distinct Type Supported, structured Type Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Privileged Element Definition(name)
Field Qualifier Definition(name, maximum Precision, default Precision, precision Supported, maximum Scale, default Scale, scale Supported)<edge_begin><edge_end>Field Qualifier Definition(name, maximum Precision, default Precision, precision Supported, maximum Scale, default Scale, scale Supported)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Table Definition(audit Supported, data Capture Supported, edit Proc Supported, encoding Supported, valid Proc Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Stored Procedure Definition(null Input Action Supported, package Generation Supported, determininstic Supported, returned Null Supported, returned Type Declaration Constraint Supported, parameter Init Value Supported, parameter Style Supported, return Type Supported, parameter Declaration Constraint Supported, maximum Action Body Length, parameter Style, language Type, function Language Type, procedure Type, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Debugger Definition(condition Supported)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Constraint Definition(deferrable Constraint Supported, informational Constraint Supported, clustered Primary Key Supported, clustered Unique Constraint Supported, primary Key Nullable, unique Key Nullable, maximum Check Expression Length, parent Update DRI Rule Type, parent Delete DRI Rule Type, check Option, maximum Primary Key Identifier Length, maximum Foreign Key Identifier Length, maximum Check Constraint Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Index Definition(percent Free Terminology, percent Free Changeable, clustering Supported, cluster Changeable, fill Factor Supported, included Columns Supported, maximum Identifier Length)
Privileged Element Definition(name)<edge_begin><edge_end>Privilege Definition(name)
Stored Procedure Definition(null Input Action Supported, package Generation Supported, determininstic Supported, returned Null Supported, returned Type Declaration Constraint Supported, parameter Init Value Supported, parameter Style Supported, return Type Supported, parameter Declaration Constraint Supported, maximum Action Body Length, parameter Style, language Type, function Language Type, procedure Type, maximum Identifier Length)<edge_begin><edge_end>Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Def Root()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
String Literal(value)<edge_begin><edge_end>Literal()
Parenthesized Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Hex Literal(value)<edge_begin><edge_end>Literal()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Event Raising Expression()<edge_begin><edge_end>Expression()
Real Literal(value)<edge_begin><edge_end>Literal()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Def Root()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Reaction Effect()<edge_begin><edge_end>Expression()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Element Reference Expression(operation Call)<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Int Literal(value)<edge_begin><edge_end>Literal()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Logical Not Expression()<edge_begin><edge_end>Expression()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Transition Root()<edge_begin><edge_end>Transition Specification()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Conditional Expression()<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
Token()<edge_begin><edge_end>Token Attribute(type, name, value)
Element Net Marked()<edge_begin><edge_end>Token Type Element Net()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
Synchronization(kind, key)<edge_begin><edge_end>I Net Element(name, comment)
Token Binding()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Variadic Expression()<edge_begin><edge_end>I Net Element(name, comment)
High Level Petri Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
Element Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
Transition()<edge_begin><edge_end>Node()
Token Multiset Expression()<edge_begin><edge_end>Token Multi Set()
Place Marking()<edge_begin><edge_end>I Entity Identifiable(uuid)
Place()<edge_begin><edge_end>Arc PT()
Token Weight(weight)<edge_begin><edge_end>I Entity Identifiable(uuid)
Arc TP()<edge_begin><edge_end>Arc()
Token Multi Set()<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Symbol Node SN(constraints)<edge_begin><edge_end>Node()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>I Entity Identifiable(uuid)
Arc()<edge_begin><edge_end>High Level Petri Net()
NPN Diagram Net System()<edge_begin><edge_end>High Level Petri Net()
Arc TP()<edge_begin><edge_end>Token Variadic Expression()
Node()<edge_begin><edge_end>I Net Element(name, comment)
Atom()<edge_begin><edge_end>I Net Element(name, comment)
Token Multi Set()<edge_begin><edge_end>Token Type()
Place()<edge_begin><edge_end>Arc TP()
Token Net()<edge_begin><edge_end>Token Type Element Net()
Variable(name)<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Diagram NPN Marked()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Attribute(type, name, value)<edge_begin><edge_end>I Entity Identifiable(uuid)
Context Variable()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Expression Binding()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Net()<edge_begin><edge_end>Element Net Marked()
NPN Diagram Net System()<edge_begin><edge_end>I Entity Identifiable(uuid)
High Level Petri Net()<edge_begin><edge_end>Node()
NPN Symbol Token SN(constraints)<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Type Atomic()<edge_begin><edge_end>Atom()
Token Type Atomic()<edge_begin><edge_end>Token Atomic()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>NPN Diagram Net System()
High Level Petri Net Marked()<edge_begin><edge_end>Marking()
Token Atomic()<edge_begin><edge_end>Token()
NPN Diagram NPN Marked()<edge_begin><edge_end>N Pnet Marked()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>NPN Diagram Net System()
Place()<edge_begin><edge_end>Node()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
Element Net Marked()<edge_begin><edge_end>Marking()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Place SN()
Monom Constant(power)<edge_begin><edge_end>Token()
N Pnet()<edge_begin><edge_end>High Level Petri Net()
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
Synchronization(kind, key)<edge_begin><edge_end>Transition Synchronized()
Arc()<edge_begin><edge_end>I Net Element(name, comment)
N Pnet()<edge_begin><edge_end>I Net Element(name, comment)
NPN Diagram NPN Marked()<edge_begin><edge_end>NPN Diagram Net System()
Arc PT()<edge_begin><edge_end>Transition()
Token Variadic Expression()<edge_begin><edge_end>Monom(power)
NPN Symbol Token SN(constraints)<edge_begin><edge_end>NPN Symbol Place SN()
Context Variable()<edge_begin><edge_end>Variable(name)
Token Binding()<edge_begin><edge_end>Token()
Monom(power)<edge_begin><edge_end>Variable(name)
N Pnet Marked()<edge_begin><edge_end>NPN Diagram Net System()
Token Multiset Expression()<edge_begin><edge_end>Token Type()
Place Marking()<edge_begin><edge_end>Token Multi Set()
High Level Petri Net()<edge_begin><edge_end>I Net Element(name, comment)
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Place SN()
I Net Element(name, comment)<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Type Atomic()<edge_begin><edge_end>Token Type()
N Pnet()<edge_begin><edge_end>Net Constant()
Token Type Element Net()<edge_begin><edge_end>Token Type()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Token SN(constraints)
Token Type()<edge_begin><edge_end>I Net Element(name, comment)
Place Marking()<edge_begin><edge_end>Place()
N Pnet()<edge_begin><edge_end>Synchronization(kind, key)
Net Constant()<edge_begin><edge_end>Token Binding()
Marking()<edge_begin><edge_end>I Net Element(name, comment)
Token Multi Set()<edge_begin><edge_end>Token Weight(weight)
Monom Constant(power)<edge_begin><edge_end>I Entity Identifiable(uuid)
Monom Constant(power)<edge_begin><edge_end>Variable(name)
NPN Symbol Token SN(constraints)<edge_begin><edge_end>Rectangle()
N Pnet Marked()<edge_begin><edge_end>N Pnet()
Place()<edge_begin><edge_end>Token Type()
Monom(power)<edge_begin><edge_end>I Entity Identifiable(uuid)
Marking()<edge_begin><edge_end>Place Marking()
Token Atomic()<edge_begin><edge_end>Atom()
Token Expression Binding()<edge_begin><edge_end>Token Variadic Expression()
Transition Synchronized()<edge_begin><edge_end>Synchronization(kind, key)
High Level Petri Net()<edge_begin><edge_end>Arc()
Token Variadic Expression()<edge_begin><edge_end>Monom Constant(power)
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Transition SN()
Token Weight(weight)<edge_begin><edge_end>Token()
Token Multiset Expression()<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Transition SN()
N Pnet Marked()<edge_begin><edge_end>Marking()
Token Binding()<edge_begin><edge_end>Variable(name)
Transition Synchronized()<edge_begin><edge_end>Transition()
Arc PT()<edge_begin><edge_end>Place()
Net Constant()<edge_begin><edge_end>I Net Element(name, comment)
Transition()<edge_begin><edge_end>Arc TP()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>Rectangle()
N Pnet Marked()<edge_begin><edge_end>I Net Element(name, comment)
Arc PT()<edge_begin><edge_end>Arc()
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>HL7File Node(File Path, Order, Attribute, Default Value, Related Column, Repeatable)
Td Column()<edge_begin><edge_end>Td Sql Data Type(java Data Type, nullable, unsigned Attribute, case Sensitive, auto Increment, local Type Name, searchable)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Subscriber Table(system)<edge_begin><edge_end>Td Table()
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>List()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Test Input Parameter Table()
Header Footer Connection(is Header, imports, main Code, libraries)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>WSDL Parameter(Element, source, Column, Expression, Parameter Info, Parameter Info Parent)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Td Xml Content()<edge_begin><edge_end>Td Xml Element Type(java Type)
FTP Connection(Host, Port, Username, Password, Mode, Ecoding, SFTP, FTPS, Method, Keystore File, Keystore Password, Usesocks, Proxyhost, Proxyport, Proxyuser, Proxypassword, Custom Encode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Concept(Loop Expression, Loop Limit, input Model)<edge_begin><edge_end>Td Table()
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Output SAP Function Parameter Table()
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Content()
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model)
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Concept(Loop Expression, Loop Limit, input Model)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Ebcdic Connection(Mid File, Data File)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Queries Connection()
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Schema(xsd File Path)
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>List()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Td Table()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Input SAP Function Parameter Table()
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
Concept(Loop Expression, Loop Limit, input Model)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Cross Table Description()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
D Feature Column(feature Name)<edge_begin><edge_end>D Column(label, visible, width)
Table Navigation Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Create Line Tool()<edge_begin><edge_end>Create Tool()
D Cell Style()<edge_begin><edge_end>Table Mapping(semantic Elements)
Edition Table Description()<edge_begin><edge_end>Feature Column Mapping(feature Name, label Expression, feature Parent Expression)
Style Updater()<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Create Line Tool()
Create Cross Column Tool()<edge_begin><edge_end>Create Tool()
Foreground Conditional Style(predicate Expression)<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
D Table(header Column Width)<edge_begin><edge_end>Line Container()
D Line(label, visible, collapsed)<edge_begin><edge_end>Line Container()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Delete Line Tool()
Delete Line Tool()<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Cell Updater(can Edit)
Create Line Tool()<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Table Tool()<edge_begin><edge_end>Table Variable(documentation)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Create Cell Tool()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Style Updater()
Cell Updater(can Edit)<edge_begin><edge_end>Label Edit Tool()
Label Edit Tool()<edge_begin><edge_end>Table Tool()
Cross Table Description()<edge_begin><edge_end>Create Cross Column Tool()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Create Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Create Line Tool()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Style Updater()
Cross Table Description()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Style Updater()
D Cell(label)<edge_begin><edge_end>D Line(label, visible, collapsed)
Delete Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Create Cell Tool()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Table Creation Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Create Cross Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Cell Updater(can Edit)
D Table Element()<edge_begin><edge_end>Table Mapping(semantic Elements)
Style Updater()<edge_begin><edge_end>Background Style Description()
D Line(label, visible, collapsed)<edge_begin><edge_end>D Cell(label)
Edition Table Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element()
D Target Column()<edge_begin><edge_end>D Table Element Updater()
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
D Column(label, visible, width)<edge_begin><edge_end>D Table Element()
D Target Column()<edge_begin><edge_end>D Column(label, visible, width)
Background Conditional Style(predicate Expression)<edge_begin><edge_end>Background Style Description()
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style)
Create Cell Tool()<edge_begin><edge_end>Table Tool()
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Style Updater()
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element Updater()
D Column(label, visible, width)<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style)
D Cell(label)<edge_begin><edge_end>D Column(label, visible, width)
Delete Line Tool()<edge_begin><edge_end>Delete Tool()
D Table(header Column Width)<edge_begin><edge_end>D Table Element Updater()
D Column(label, visible, width)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
D Cell(label)<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Delete Column Tool()<edge_begin><edge_end>Delete Tool()
D Line(label, visible, collapsed)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Create Column Tool()<edge_begin><edge_end>Create Tool()
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Table Mapping(semantic Elements)
Style Updater()<edge_begin><edge_end>Background Conditional Style(predicate Expression)
Create Tool()<edge_begin><edge_end>Table Tool()
D Column(label, visible, width)<edge_begin><edge_end>D Cell(label)
State Machine()<edge_begin><edge_end>State(initial Time, final Time)
Timed Transition(duration)<edge_begin><edge_end>Transition(initial Time, final Time, time)
State(initial Time, final Time)<edge_begin><edge_end>Transition(initial Time, final Time, time)
State Machine()<edge_begin><edge_end>Named Element(name)
Pseudostate()<edge_begin><edge_end>State(initial Time, final Time)
Join()<edge_begin><edge_end>Pseudostate()
Transition(initial Time, final Time, time)<edge_begin><edge_end>Trigger(expression)
Transition(initial Time, final Time, time)<edge_begin><edge_end>Named Element(name)
Fork()<edge_begin><edge_end>Pseudostate()
Initial State()<edge_begin><edge_end>State(initial Time, final Time)
State(initial Time, final Time)<edge_begin><edge_end>Named Element(name)
Transition(initial Time, final Time, time)<edge_begin><edge_end>State(initial Time, final Time)
Final State()<edge_begin><edge_end>State(initial Time, final Time)
Delete Column()<edge_begin><edge_end>Table Column(type)
Type Change To Column(new Type)<edge_begin><edge_end>Table Column(type)
Type Change To Column(new Type)<edge_begin><edge_end>Table()
Type Change To Column(new Type)<edge_begin><edge_end>Operation()
Delete Table()<edge_begin><edge_end>Operation()
Rename Column(new Column Name)<edge_begin><edge_end>Table()
Unique Index()<edge_begin><edge_end>Index()
Db Object()<edge_begin><edge_end>Named Element(name)
Constraint()<edge_begin><edge_end>Db Object()
Create Table(table Name)<edge_begin><edge_end>Table Column(type)
Add Column(new Column Name)<edge_begin><edge_end>Table()
Operation()<edge_begin><edge_end>Model Root()
Table()<edge_begin><edge_end>Schema()
Index()<edge_begin><edge_end>Table Column(type)
Table()<edge_begin><edge_end>Table Constraint()
Table Constraint()<edge_begin><edge_end>Named Element(name)
Create Table(table Name)<edge_begin><edge_end>Table Constraint()
Delete Column()<edge_begin><edge_end>Table()
Index()<edge_begin><edge_end>Schema()
Schema()<edge_begin><edge_end>Table()
Table Column(type)<edge_begin><edge_end>Table()
Column Constraint()<edge_begin><edge_end>Constraint()
Schema()<edge_begin><edge_end>Index()
Delete Table()<edge_begin><edge_end>Table()
Schema()<edge_begin><edge_end>Sequence(cache Size)
Table()<edge_begin><edge_end>Table Column(type)
Query()<edge_begin><edge_end>Column Reference()
Sequence(cache Size)<edge_begin><edge_end>Schema()
Column()<edge_begin><edge_end>Named Element(name)
Sequence(cache Size)<edge_begin><edge_end>Db Object()
Query()<edge_begin><edge_end>Relation()
Add Column(new Column Name)<edge_begin><edge_end>Operation()
Foreign Key()<edge_begin><edge_end>Table Constraint()
Rename Table(new Name)<edge_begin><edge_end>Operation()
Schema()<edge_begin><edge_end>Db Object()
Table()<edge_begin><edge_end>Db Object()
Foreign Key()<edge_begin><edge_end>Table()
Rename Table(new Name)<edge_begin><edge_end>Table()
Column Constraint()<edge_begin><edge_end>Table Column(type)
Index()<edge_begin><edge_end>Table()
Primary Key()<edge_begin><edge_end>Unique Index()
Table()<edge_begin><edge_end>Primary Key()
Database()<edge_begin><edge_end>Schema()
Table Column(type)<edge_begin><edge_end>Column Constraint()
Create Table(table Name)<edge_begin><edge_end>Primary Key()
Table Constraint()<edge_begin><edge_end>Table()
Index()<edge_begin><edge_end>Db Object()
Add Column(new Column Name)<edge_begin><edge_end>Column Constraint()
Delete Column()<edge_begin><edge_end>Operation()
Table()<edge_begin><edge_end>Relation()
Timed System()<edge_begin><edge_end>FSM Clock(number Of Ticks)
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>FSM Event(is Triggered)
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>FSM Clock(number Of Ticks)
Event Guard()<edge_begin><edge_end>Guard()
Timed System()<edge_begin><edge_end>Named Element(name)
Guard()<edge_begin><edge_end>Named Element(name)
State()<edge_begin><edge_end>TFSM(step Number, last State Change Step Number)
Event Guard()<edge_begin><edge_end>FSM Event(is Triggered)
Temporal Guard(after Duration)<edge_begin><edge_end>FSM Clock(number Of Ticks)
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>State()
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>Transition(action)
Transition(action)<edge_begin><edge_end>Guard()
FSM Clock(number Of Ticks)<edge_begin><edge_end>Named Element(name)
State()<edge_begin><edge_end>Named Element(name)
FSM Event(is Triggered)<edge_begin><edge_end>Transition(action)
Transition(action)<edge_begin><edge_end>State()
Timed System()<edge_begin><edge_end>TFSM(step Number, last State Change Step Number)
Timed System()<edge_begin><edge_end>FSM Event(is Triggered)
State()<edge_begin><edge_end>Transition(action)
Transition(action)<edge_begin><edge_end>FSM Event(is Triggered)
Conference()<edge_begin><edge_end>Author(author)
Inproceedings()<edge_begin><edge_end>Bib Type()
Conference()<edge_begin><edge_end>Publisher(publisher)
Proceedings()<edge_begin><edge_end>Address(address)
Inbook(author, editor)<edge_begin><edge_end>Publisher(publisher)
Inbook(author, editor)<edge_begin><edge_end>Bib Type()
Booklet()<edge_begin><edge_end>Author(author)
Proceedings()<edge_begin><edge_end>Bib Type()
Article()<edge_begin><edge_end>Author(author)
Model()<edge_begin><edge_end>Bib Type()
Proceedings()<edge_begin><edge_end>Editor(editor)
Conference()<edge_begin><edge_end>Editor(editor)
Inbook(author, editor)<edge_begin><edge_end>Series(series)
Manual()<edge_begin><edge_end>Organization(organization)
Inbook(author, editor)<edge_begin><edge_end>Pages(pages)
Inbook(author, editor)<edge_begin><edge_end>Address(address)
Incollection()<edge_begin><edge_end>Address(address)
Inproceedings()<edge_begin><edge_end>Address(address)
Conference()<edge_begin><edge_end>Booktitle(booktitle)
Book()<edge_begin><edge_end>Editor(editor)
Techreport()<edge_begin><edge_end>Address(address)
Conference()<edge_begin><edge_end>Address(address)
Incollection()<edge_begin><edge_end>Booktitle(booktitle)
Booklet()<edge_begin><edge_end>Address(address)
Inproceedings()<edge_begin><edge_end>Pages(pages)
Book()<edge_begin><edge_end>Series(series)
Manual()<edge_begin><edge_end>Edition(edition)
Incollection()<edge_begin><edge_end>Publisher(publisher)
Incollection()<edge_begin><edge_end>Bib Type()
Phdthesis()<edge_begin><edge_end>School(school)
Booklet()<edge_begin><edge_end>Howpublished(howpublished)
Incollection()<edge_begin><edge_end>Author(author)
Mastersthesis()<edge_begin><edge_end>Bib Type()
Misc()<edge_begin><edge_end>Author(author)
Book()<edge_begin><edge_end>Address(address)
Conference()<edge_begin><edge_end>Organization(organization)
Manual()<edge_begin><edge_end>Bib Type()
Book()<edge_begin><edge_end>Edition(edition)
Techreport()<edge_begin><edge_end>Bib Type()
Bib Type()<edge_begin><edge_end>Year(year)
Misc()<edge_begin><edge_end>Bib Type()
Inproceedings()<edge_begin><edge_end>Organization(organization)
Manual()<edge_begin><edge_end>Author(author)
Article()<edge_begin><edge_end>Journal(journal)
Book()<edge_begin><edge_end>Volume(volume)
Inbook(author, editor)<edge_begin><edge_end>Chapter(chapter)
Incollection()<edge_begin><edge_end>Editor(editor)
Techreport()<edge_begin><edge_end>Institution(institution)
Unpublished()<edge_begin><edge_end>Author(author)
Incollection()<edge_begin><edge_end>Pages(pages)
Misc()<edge_begin><edge_end>Howpublished(howpublished)
Book()<edge_begin><edge_end>Bib Type()
Article()<edge_begin><edge_end>Volume(volume)
Inbook(author, editor)<edge_begin><edge_end>Volume(volume)
Techreport()<edge_begin><edge_end>Number(number)
Inproceedings()<edge_begin><edge_end>Booktitle(booktitle)
Inproceedings()<edge_begin><edge_end>Series(series)
Inproceedings()<edge_begin><edge_end>Editor(editor)
Incollection()<edge_begin><edge_end>Organization(organization)
Bib Type()<edge_begin><edge_end>Key(key)
Article()<edge_begin><edge_end>Bib Type()
Inproceedings()<edge_begin><edge_end>Author(author)
Techreport()<edge_begin><edge_end>Type(type)
Book()<edge_begin><edge_end>Publisher(publisher)
Conference()<edge_begin><edge_end>Pages(pages)
Manual()<edge_begin><edge_end>Address(address)
Inbook(author, editor)<edge_begin><edge_end>Edition(edition)
Unpublished()<edge_begin><edge_end>Bib Type()
Mastersthesis()<edge_begin><edge_end>Author(author)
Proceedings()<edge_begin><edge_end>Organization(organization)
Normal Step(custom Step Type)<edge_begin><edge_end>Step(label, name)
Exception Flow(condition)<edge_begin><edge_end>Named Flow(name)
Alternative Flow()<edge_begin><edge_end>Named Flow(name)
Local Alternative(description)<edge_begin><edge_end>Step Alternative(condition)
Use Case(description, name, postcondition, pre Conditions)<edge_begin><edge_end>Flow(final State)
Actor(description, name, type)<edge_begin><edge_end>Actor(description, name, type)
Package Declaration(description, name)<edge_begin><edge_end>Actor(description, name, type)
Condition()<edge_begin><edge_end>Step Alternative(condition)
Step(label, name)<edge_begin><edge_end>Step(label, name)
Parallel Flow()<edge_begin><edge_end>Named Flow(name)
Package Declaration(description, name)<edge_begin><edge_end>Use Case(description, name, postcondition, pre Conditions)
Use Cases Model()<edge_begin><edge_end>Package Declaration(description, name)
Step Alternative(condition)<edge_begin><edge_end>Step(label, name)
Alternative Flow Alternative()<edge_begin><edge_end>Step Alternative(condition)
Parallel Step()<edge_begin><edge_end>Parallel Flow()
Basic Flow()<edge_begin><edge_end>Flow(final State)
Parallel Step()<edge_begin><edge_end>Step(label, name)
Named Flow(name)<edge_begin><edge_end>Flow(final State)
Use Case(description, name, postcondition, pre Conditions)<edge_begin><edge_end>Use Case(description, name, postcondition, pre Conditions)
Normal Step(custom Step Type)<edge_begin><edge_end>Step Alternative(condition)
Transition()<edge_begin><edge_end>Element()
Arc(weight)<edge_begin><edge_end>Petri Net()
Named Element(name)<edge_begin><edge_end>String()
Place()<edge_begin><edge_end>Element()
Petri Net()<edge_begin><edge_end>Arc(weight)
Arc(weight)<edge_begin><edge_end>Named Element(name)
Transition()<edge_begin><edge_end>Transition To Place()
Transition To Place()<edge_begin><edge_end>Transition()
Petri Net()<edge_begin><edge_end>Element()
Element()<edge_begin><edge_end>Named Element(name)
Named Element(name)<edge_begin><edge_end>Located Element(location)
Transition()<edge_begin><edge_end>Place To Transition()
Located Element(location)<edge_begin><edge_end>String()
Element()<edge_begin><edge_end>Petri Net()
Movement()<edge_begin><edge_end>Marking()
Transition To Place()<edge_begin><edge_end>Place()
Place To Transition()<edge_begin><edge_end>Place()
Execution()<edge_begin><edge_end>Petri Net()
Marking()<edge_begin><edge_end>Execution()
Execution()<edge_begin><edge_end>Marking()
Movement()<edge_begin><edge_end>Execution()
Movement()<edge_begin><edge_end>Transition()
Place()<edge_begin><edge_end>Transition To Place()
Place()<edge_begin><edge_end>Place To Transition()
Petri Net()<edge_begin><edge_end>Execution()
Transition To Place()<edge_begin><edge_end>Arc(weight)
Marking()<edge_begin><edge_end>Token()
Place To Transition()<edge_begin><edge_end>Transition()
summary of reviews()<edge_begin><edge_end>article()
Conference volume(has a location)<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Chairman()<edge_begin><edge_end>Conference Member()
Track()<edge_begin><edge_end>Conference part()
Tutorial Abstract()<edge_begin><edge_end>Abstract()
bidding of reviewer()<edge_begin><edge_end>activity()
Tutorial Chair()<edge_begin><edge_end>PC Member()
OC Chair()<edge_begin><edge_end>OC Member()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Organizing committee()<edge_begin><edge_end>Committee()
Review()<edge_begin><edge_end>activity()
Conference days()<edge_begin><edge_end>Time()
Speaker()<edge_begin><edge_end>Delegate()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
Review()<edge_begin><edge_end>classification()
Break Event()<edge_begin><edge_end>Non Academic Event()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Fee()<edge_begin><edge_end>Money()
Power Point presentation()<edge_begin><edge_end>Presentation()
Reviewed contribution()<edge_begin><edge_end>Review()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Rejected Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
User()<edge_begin><edge_end>Thing()
Active conference participant()<edge_begin><edge_end>Presentation()
Industrial Session()<edge_begin><edge_end>Conference Session()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Workshop()<edge_begin><edge_end>Conference part()
Chair URL()<edge_begin><edge_end>URL()
Abstract()<edge_begin><edge_end>Extended abstract()
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Conference Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Rejection()<edge_begin><edge_end>Decision()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Organisation()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Conference document()<edge_begin><edge_end>date()
Topic()<edge_begin><edge_end>Working event()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Meta-Review()<edge_begin><edge_end>Review()
Tutorial()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Non speaker()<edge_begin><edge_end>Delegate()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Accepted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
date()<edge_begin><edge_end>Thing()
Conference Chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Preview()<edge_begin><edge_end>Review Form()
User()<edge_begin><edge_end>Document()
Technical commitee()<edge_begin><edge_end>Delegate()
Conference restaurant()<edge_begin><edge_end>Building()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
rejection notification email()<edge_begin><edge_end>notification email()
Negative Review()<edge_begin><edge_end>Review()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Review()
start date of conference()<edge_begin><edge_end>date of conference()
Money()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Head Role()<edge_begin><edge_end>Role()
Track-workshop chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Pending Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Author book proceedings included()<edge_begin><edge_end>Author()
Review()<edge_begin><edge_end>Conference document()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Time()
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Conference Member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Bank transfer()<edge_begin><edge_end>Payment document()
Review()<edge_begin><edge_end>Possible Reviewer()
Test Only Topic()<edge_begin><edge_end>Topic()
Submission event()<edge_begin><edge_end>Administrative event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Call for paper()<edge_begin><edge_end>Conference document()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Academic Institution()<edge_begin><edge_end>Organisation()
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Committee member()
Workshop Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Participant(early Registration)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Workshop()<edge_begin><edge_end>Working event()
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Accommodation Place()<edge_begin><edge_end>Place()
Conference participant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Working event()<edge_begin><edge_end>Administrative event()
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event Approval()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Integer()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Administrator()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Research Topic()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>User()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Co-author()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
External Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Corresponding Author()<edge_begin><edge_end>Author()
Credit card()<edge_begin><edge_end>Card()
Research()<edge_begin><edge_end>Activity before conference()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Programme()<edge_begin><edge_end>Document()
managing of conference process()<edge_begin><edge_end>activity()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Welcome address()<edge_begin><edge_end>Conference activity()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Misc()<edge_begin><edge_end>Help Request()
activity()<edge_begin><edge_end>article()
Session Chair()<edge_begin><edge_end>PC Member()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Communication Theory Topic()<edge_begin><edge_end>Topic()
City()<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Tutorial()<edge_begin><edge_end>Individual Presentation()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Important dates()<edge_begin><edge_end>date()
summary of reviews()<edge_begin><edge_end>activity()
Tax()<edge_begin><edge_end>Money()
Double Blind Review()<edge_begin><edge_end>Reviewer()
TPC Member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Presenter house()<edge_begin><edge_end>Building()
Document()<edge_begin><edge_end>Item()
Full day tour()<edge_begin><edge_end>Activity after conference()
Administrative event()<edge_begin><edge_end>Administrative event()
Topic()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Submission Template()<edge_begin><edge_end>Event Setup()
Car()<edge_begin><edge_end>Transport vehicle()
Evaluated Paper()<edge_begin><edge_end>Review()
Card()<edge_begin><edge_end>Item()
Organising Agency()<edge_begin><edge_end>Organisation()
Reviewer()<edge_begin><edge_end>Double Blind Review()
Administrator()<edge_begin><edge_end>Reviewer()
PC Chair()<edge_begin><edge_end>PC Member()
Submitted contribution()<edge_begin><edge_end>Written contribution()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
Multimedia Topic()<edge_begin><edge_end>Topic()
Regular contribution()<edge_begin><edge_end>Written contribution()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Inforamtion()
Event URL()<edge_begin><edge_end>URL()
SC Member()<edge_begin><edge_end>PC Member()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Time()
Written contribution()<edge_begin><edge_end>Conference contribution()
Van()<edge_begin><edge_end>Transport vehicle()
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>program()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Session chair()<edge_begin><edge_end>Delegate()
Personal Publication History()<edge_begin><edge_end>Personal History()
abstract submission date()<edge_begin><edge_end>date()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Item()<edge_begin><edge_end>Time()
Contributed Talk()<edge_begin><edge_end>Document()
Chair()<edge_begin><edge_end>Committee member()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Organizing Committee()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Abstract()<edge_begin><edge_end>Thing()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Information for participants()<edge_begin><edge_end>Conference document()
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Abstract()<edge_begin><edge_end>Document()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Track()<edge_begin><edge_end>Scientific Event()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
NGO()<edge_begin><edge_end>Organization()
Author cd proceedings included()<edge_begin><edge_end>Author()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Document()<edge_begin><edge_end>Thing()
Student()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Working event()<edge_begin><edge_end>Topic()
Organizing Committee()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Workshop Chair()<edge_begin><edge_end>PC Member()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Member PC()<edge_begin><edge_end>Topic()
notification()<edge_begin><edge_end>article()
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Abstract()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Registration()<edge_begin><edge_end>Conference activity()
Committee()<edge_begin><edge_end>Chair()
Assigned Paper()<edge_begin><edge_end>Submitted Paper()
Taxi()<edge_begin><edge_end>Transport vehicle()
Session Chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Tip()<edge_begin><edge_end>Money()
Communications Topic()<edge_begin><edge_end>Topic()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>date Time()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Country()
Presenter state()<edge_begin><edge_end>State()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Bid()
Publication()<edge_begin><edge_end>Item()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Presentation()<edge_begin><edge_end>Conference activity()
Accept Rating()<edge_begin><edge_end>Review Rating()
Presenter city()<edge_begin><edge_end>City()
Form()<edge_begin><edge_end>Document()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Working event()
Delegate()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
human(e-mail, last name, first name)<edge_begin><edge_end>article()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Reviewer()<edge_begin><edge_end>Thing()
Value added tax()<edge_begin><edge_end>Tax()
Topic()<edge_begin><edge_end>Conference part()
Review()<edge_begin><edge_end>article()
Slide Set()<edge_begin><edge_end>Document()
Program committee()<edge_begin><edge_end>Committee()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Sponsor company house()<edge_begin><edge_end>Building()
Bid()<edge_begin><edge_end>Reviewer()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Coffee Break()<edge_begin><edge_end>Break Event()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Author()<edge_begin><edge_end>Speaker()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Double Blind Review()<edge_begin><edge_end>Thing()
Record of attendance()<edge_begin><edge_end>Document()
Money()<edge_begin><edge_end>Item()
Co-chair()<edge_begin><edge_end>Committee()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event Tracks()<edge_begin><edge_end>Event Setup()
Author information form()<edge_begin><edge_end>Form()
Departure()<edge_begin><edge_end>Activity after conference()
Email()<edge_begin><edge_end>Document()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Introduction()<edge_begin><edge_end>Conference activity()
Single Level Conference()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Item()<edge_begin><edge_end>Thing()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Social program()<edge_begin><edge_end>Conference activity()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Administrator()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Cryptography Topic()<edge_begin><edge_end>Topic()
External Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Administrator()
Email Template()<edge_begin><edge_end>Event Setup()
Sponsor()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Work Shop()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
reviewing proces()<edge_begin><edge_end>activity()
CAD Topic()<edge_begin><edge_end>Topic()
Scholar()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Registration Chair()<edge_begin><edge_end>Organizing Committee()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Technic activity()<edge_begin><edge_end>Conference activity()
Associated Chair()<edge_begin><edge_end>Conference Member()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>article()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Textual Review Question()<edge_begin><edge_end>Review Question()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Boolean()
article()<edge_begin><edge_end>Reviewer()
date of notification()<edge_begin><edge_end>date()
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Possible Reviewer()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Invited talk()<edge_begin><edge_end>Presentation()
Reviewer()<edge_begin><edge_end>Personal Review History()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Conference Participant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Meal Event()<edge_begin><edge_end>Meal Menu()
Place()<edge_begin><edge_end>Item()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Committee member()<edge_begin><edge_end>Committee()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submission()<edge_begin><edge_end>Document()
Administrator()<edge_begin><edge_end>Role()
Author()<edge_begin><edge_end>Conference Member()
Camera Ready Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
review form()<edge_begin><edge_end>article()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Regular contribution()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Scientific Event()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Regular Session()<edge_begin><edge_end>Session()
acceptance notification email()<edge_begin><edge_end>notification email()
Co-author()<edge_begin><edge_end>Author()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>phase of conference()
Worker lecturer()<edge_begin><edge_end>Lecturer()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
article()<edge_begin><edge_end>Abstract()
Abstract()<edge_begin><edge_end>article()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>any URI()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Document()
Hotel registration form()<edge_begin><edge_end>Form()
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
review form()<edge_begin><edge_end>activity()
Speaker lecture()<edge_begin><edge_end>Session()
Invitation letter()<edge_begin><edge_end>Document()
activity()<edge_begin><edge_end>activity()
Organizing Committee()<edge_begin><edge_end>Thing()
Listener()<edge_begin><edge_end>Delegate()
Associated Chair()<edge_begin><edge_end>Chairman()
Student registration fee()<edge_begin><edge_end>Registration fee()
Industrial Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>String()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Closing Talk()<edge_begin><edge_end>Talk Event()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Account()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
Sponsor state()<edge_begin><edge_end>State()
Lecturer()<edge_begin><edge_end>Author()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Decision()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
Author Not Reviewer()<edge_begin><edge_end>Author()
Conference Member()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>URL()
Reviewer()<edge_begin><edge_end>Review()
Building()<edge_begin><edge_end>Place()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Item()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Deadline()<edge_begin><edge_end>Time()
Reception()<edge_begin><edge_end>Social Event()
Role()<edge_begin><edge_end>Administrator()
Conference Banquet()<edge_begin><edge_end>Social Event()
Event Creation()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
article()<edge_begin><edge_end>Author()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Active Paper()<edge_begin><edge_end>Review Rating()
Neutral Review()<edge_begin><edge_end>Review()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Workshop Session()<edge_begin><edge_end>Session()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
Short Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference city()<edge_begin><edge_end>City()
Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference hotel()<edge_begin><edge_end>Building()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Thing()
Program Committee Chair()<edge_begin><edge_end>Review()
Conference airport()<edge_begin><edge_end>Building()
Meal Menu()<edge_begin><edge_end>Document()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>unsigned Long()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
participant()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Conference announcement()<edge_begin><edge_end>Conference document()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
PC Chair()<edge_begin><edge_end>Conference Participant()
Contact Person URL()<edge_begin><edge_end>URL()
Detail()<edge_begin><edge_end>Thing()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Single hotel room()<edge_begin><edge_end>Hotel room()
Conference applicant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Excursion()<edge_begin><edge_end>Social Event()
group email()<edge_begin><edge_end>article()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Author()
Meal Menu()<edge_begin><edge_end>Meal Event()
University()<edge_begin><edge_end>Organization()
Programme Brochure()<edge_begin><edge_end>Document()
Help Request()<edge_begin><edge_end>Request()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
participant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
full paper submission date()<edge_begin><edge_end>date()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>human(e-mail, last name, first name)
end date of conference()<edge_begin><edge_end>date of conference()
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Reviewer()<edge_begin><edge_end>Reviewer()
Possible Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Steering committee()<edge_begin><edge_end>Committee()
program()<edge_begin><edge_end>session()
Money()<edge_begin><edge_end>Thing()
Hotel fee()<edge_begin><edge_end>Fee()
Activity after conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Money()
Paper Author()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Individual Presentation()<edge_begin><edge_end>Document()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Review preference(has a degree)<edge_begin><edge_end>Thing()
Trip()<edge_begin><edge_end>Social event()
Renting()<edge_begin><edge_end>Activity before conference()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Acceptance()<edge_begin><edge_end>Decision()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Presenter university()<edge_begin><edge_end>Building()
Reviewer()<edge_begin><edge_end>Conference Member()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
Free Time Break()<edge_begin><edge_end>Break Event()
Brief introduction for Session chair()<edge_begin><edge_end>Document()
Invited Speaker()<edge_begin><edge_end>Presenter()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Coctail reception()<edge_begin><edge_end>Conference activity()
Contribution co-author()<edge_begin><edge_end>Regular author()
Plenary lecture speaker()<edge_begin><edge_end>Author()
Personal Review History()<edge_begin><edge_end>Personal History()
Submitted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Conference www(has a URL)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Registation deadline()<edge_begin><edge_end>Deadline()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Trip day()<edge_begin><edge_end>Time()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Published Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Meta-Reviewer()
Reviewer Role()<edge_begin><edge_end>Role()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Rejection Email()<edge_begin><edge_end>Email()
Session()<edge_begin><edge_end>Scientific Event()
Member()<edge_begin><edge_end>Participant(early Registration)
Deadline()<edge_begin><edge_end>date()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference Hiker()<edge_begin><edge_end>Delegate()
Performance Topic()<edge_begin><edge_end>Topic()
Student lecturer()<edge_begin><edge_end>Lecturer()
Money()<edge_begin><edge_end>Money()
URL()<edge_begin><edge_end>Thing()
Trip city()<edge_begin><edge_end>City()
Web Site()<edge_begin><edge_end>Document()
Chairman()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Conference state()<edge_begin><edge_end>State()
Conference building()<edge_begin><edge_end>Building()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Administrator()
Conference hall()<edge_begin><edge_end>Place()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Coffee break()<edge_begin><edge_end>Conference activity()
Member PC()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Senior Program Committee member()<edge_begin><edge_end>activity()
Money()<edge_begin><edge_end>Building()
camera-ready submission date()<edge_begin><edge_end>date()
Submissions deadline()<edge_begin><edge_end>Deadline()
Approval Email()<edge_begin><edge_end>Email()
OC Member()<edge_begin><edge_end>Conference Participant()
Assistant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Group Email()<edge_begin><edge_end>Email()
Transparency()<edge_begin><edge_end>Document()
Registration fee()<edge_begin><edge_end>Fee()
Positive Review()<edge_begin><edge_end>Review()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Review()<edge_begin><edge_end>Document()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Administrator()
Science Worker()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Cd proceening()<edge_begin><edge_end>Publication()
Conference Trip()<edge_begin><edge_end>Social Event()
PC Member()<edge_begin><edge_end>Possible Reviewer()
Government Organization()<edge_begin><edge_end>Organization()
conference setup()<edge_begin><edge_end>Topic()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Reviewer()<edge_begin><edge_end>Organizer()
Review Form()<edge_begin><edge_end>Event Setup()
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
abstract of paper()<edge_begin><edge_end>article()
Reviewer()<edge_begin><edge_end>User()
Hotel room()<edge_begin><edge_end>Place()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Review()<edge_begin><edge_end>Reviewed contribution()
Initial manuscipt()<edge_begin><edge_end>Submission()
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Week Reject Rating()<edge_begin><edge_end>Review Rating()
notification email()<edge_begin><edge_end>article()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Conference volume(has a location)<edge_begin><edge_end>Track()
Hotel presenter()<edge_begin><edge_end>Delegate()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Simulating()<edge_begin><edge_end>Research()
Audiovisual equipment()<edge_begin><edge_end>Item()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Organizer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
paper assignment()<edge_begin><edge_end>activity()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Flyer()<edge_begin><edge_end>Document()
Conference part()<edge_begin><edge_end>Track-workshop chair()
Active conference participant()<edge_begin><edge_end>Conference participant()
Academia Organization()<edge_begin><edge_end>Organization()
Reviewer()<edge_begin><edge_end>Speaker()
article()<edge_begin><edge_end>Document()
Lecture(has Acronym)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Author()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Antennas Topic()<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Transport vehicle()<edge_begin><edge_end>Item()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Poster Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference document()
Viza()<edge_begin><edge_end>Document()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Payment document()<edge_begin><edge_end>Document()
Committe Role()<edge_begin><edge_end>Role()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Integer()
Double hotel room()<edge_begin><edge_end>Hotel room()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Mailing list()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Location()
Final manuscript()<edge_begin><edge_end>Submission()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
Committee member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Tutorial()<edge_begin><edge_end>Conference part()
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Activity before conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Lecture(has Acronym)<edge_begin><edge_end>String()
conference setup()<edge_begin><edge_end>Thing()
University()<edge_begin><edge_end>Academic Institution()
Student non speaker()<edge_begin><edge_end>Non speaker()
IASTED non member()<edge_begin><edge_end>Delegate()
Session()<edge_begin><edge_end>Lecture(has Acronym)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
chair()<edge_begin><edge_end>program()
Author()<edge_begin><edge_end>Thing()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Co-author()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Reviewer()<edge_begin><edge_end>Bid()
Session room()<edge_begin><edge_end>Place()
Outside Referee()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Item()
Committee Member()<edge_begin><edge_end>Organizer()
Committee Member()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>date Time()
Author Role()<edge_begin><edge_end>Role()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Administrator()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Meal Break()<edge_begin><edge_end>Break Event()
Attendee()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Research Institute()<edge_begin><edge_end>Academic Institution()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Organization()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Presenter()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Track-workshop chair()<edge_begin><edge_end>Conference part()
Withdrawn Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Presentation()<edge_begin><edge_end>Conference contribution()
notification()<edge_begin><edge_end>activity()
One day presenter()<edge_begin><edge_end>Delegate()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Fee for extra trip()<edge_begin><edge_end>Fee()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Computer()<edge_begin><edge_end>Audiovisual equipment()
Agency Staff Member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Template()<edge_begin><edge_end>Document()
Industry Organization()<edge_begin><edge_end>Organization()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Demo Session()<edge_begin><edge_end>Session()
article()<edge_begin><edge_end>activity()
Program Committee Chair()<edge_begin><edge_end>Chairman()
submission process()<edge_begin><edge_end>activity()
date of conference()<edge_begin><edge_end>date()
article()<edge_begin><edge_end>classification()
Property Name(name)<edge_begin><edge_end>Property()
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Mkdir(dir)<edge_begin><edge_end>File Task()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
File Set(dir)<edge_begin><edge_end>Pattern Set()
File List(dir, files)<edge_begin><edge_end>Basic()
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Filter(token, value)<edge_begin><edge_end>Basic()
Property Env(environment)<edge_begin><edge_end>Property()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Property Location(location)<edge_begin><edge_end>Property Name(name)
Project(name, basedir, description)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Task()<edge_begin><edge_end>Target(name, description, unless, if Condition)
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
File Set(dir)<edge_begin><edge_end>Set()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Class Path(refid)<edge_begin><edge_end>Set()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Task()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
New Task()<edge_begin><edge_end>Attribut(name, value)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Project(name, basedir, description)<edge_begin><edge_end>Path(id, refid)
Target(name, description, unless, if Condition)<edge_begin><edge_end>Target(name, description, unless, if Condition)
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Project(name, basedir, description)<edge_begin><edge_end>Task Def(name, classname)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Path Element(path, location)<edge_begin><edge_end>Basic()
Path(id, refid)<edge_begin><edge_end>Set()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Pattern Set()<edge_begin><edge_end>Set()
Project(name, basedir, description)<edge_begin><edge_end>Property()
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
New Task()<edge_begin><edge_end>Task()
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
File Set(dir)<edge_begin><edge_end>Includes()
Set()<edge_begin><edge_end>Pattern()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Arc()<edge_begin><edge_end>Edge Graphics()
Initial Marking()<edge_begin><edge_end>Place()
PNML Document()<edge_begin><edge_end>URI(value)
Transition()<edge_begin><edge_end>Net Content Element()
Edge Graphics()<edge_begin><edge_end>Arc()
Name()<edge_begin><edge_end>Net Element()
Dimension(width, height)<edge_begin><edge_end>Node Graphics()
Net Element()<edge_begin><edge_end>URI(value)
Name()<edge_begin><edge_end>Net Content()
Node Graphics()<edge_begin><edge_end>Graphics()
Node()<edge_begin><edge_end>Node Graphics()
Ided Element(id)<edge_begin><edge_end>String()
Any Element(name, text)<edge_begin><edge_end>String()
Arc()<edge_begin><edge_end>Ided Element(id)
Net Content()<edge_begin><edge_end>Name()
URI(value)<edge_begin><edge_end>String()
Net Graphics()<edge_begin><edge_end>Graphics()
Initial Marking()<edge_begin><edge_end>Labeled Element()
Arc()<edge_begin><edge_end>Net Content Element()
Annotation Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Edge Graphics()<edge_begin><edge_end>Line(width, shape, style)
Inscription()<edge_begin><edge_end>Labeled Element()
Fill(gradientrotation)<edge_begin><edge_end>Node Graphics()
Node()<edge_begin><edge_end>Tool Specific(tool, version)
Net Element()<edge_begin><edge_end>Ided Element(id)
Node Graphics()<edge_begin><edge_end>Position()
Line(width, shape, style)<edge_begin><edge_end>Node Graphics()
Tool Specific(tool, version)<edge_begin><edge_end>Any Element(name, text)
Line(width, shape, style)<edge_begin><edge_end>Color()
Place()<edge_begin><edge_end>Net Content Element()
Edge Graphics()<edge_begin><edge_end>Position()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Integer()
Fill(gradientrotation)<edge_begin><edge_end>Annotation Graphics()
Annotation Graphics()<edge_begin><edge_end>Offset()
Net Element()<edge_begin><edge_end>PNML Document()
Coordinate(x, y)<edge_begin><edge_end>Integer()
Position()<edge_begin><edge_end>Node Graphics()
Name()<edge_begin><edge_end>Labeled Element()
Tool Specific(tool, version)<edge_begin><edge_end>Node()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Arc()<edge_begin><edge_end>Inscription()
Position()<edge_begin><edge_end>Coordinate(x, y)
Tool Specific(tool, version)<edge_begin><edge_end>String()
Labeled Element()<edge_begin><edge_end>Annotation Graphics()
Line(width, shape, style)<edge_begin><edge_end>Annotation Graphics()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Annotation Graphics()
Node()<edge_begin><edge_end>Net Content Element()
Annotation Graphics()<edge_begin><edge_end>Font(family, style, weight, size, decoration, align, rotation)
Node Graphics()<edge_begin><edge_end>Node()
Annotation Graphics()<edge_begin><edge_end>Labeled Element()
Line(width, shape, style)<edge_begin><edge_end>Integer()
Inscription()<edge_begin><edge_end>Arc()
Net Element()<edge_begin><edge_end>Name()
Fill(gradientrotation)<edge_begin><edge_end>URI(value)
Position()<edge_begin><edge_end>Edge Graphics()
Net Element()<edge_begin><edge_end>Net Graphics()
Edge Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Annotation Graphics()<edge_begin><edge_end>Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Color()
Node Graphics()<edge_begin><edge_end>Line(width, shape, style)
Node()<edge_begin><edge_end>Ided Element(id)
Place()<edge_begin><edge_end>Initial Marking()
Fill(gradientrotation)<edge_begin><edge_end>Edge Graphics()
Dimension(width, height)<edge_begin><edge_end>Integer()
Net Content()<edge_begin><edge_end>Net Element()
Net Content Element()<edge_begin><edge_end>Node()
Net Element()<edge_begin><edge_end>Tool Specific(tool, version)
Node Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Unipivot In Clause(op)<edge_begin><edge_end>Unpivot In Clause Args()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Db Object Name All(dbname)
Or Table()<edge_begin><edge_end>From Table()
Column Full()<edge_begin><edge_end>Pivot For Clause()
Op Function(fname)<edge_begin><edge_end>Op Function Arg()
Pivot Table()<edge_begin><edge_end>Pivot In Clause(pinany)
Op List()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
Analytic Expr Args()<edge_begin><edge_end>Query Partition Clause()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Expr Group(isnot)
Op Function Cast(type, p, p2)<edge_begin><edge_end>Operands()
Or Group By Column()<edge_begin><edge_end>Group By Column Full()
Between(op Between)<edge_begin><edge_end>Operands()
Like(op Like)<edge_begin><edge_end>Like Operand(op2)
Pivot Table()<edge_begin><edge_end>Pivot For Clause()
Unpivot Table()<edge_begin><edge_end>Pivot Columns()
Operand()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
From Table()<edge_begin><edge_end>Or Table()
Op F List()<edge_begin><edge_end>Op Function Arg Operand()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Comparison(operator, sub Operator)
uicargs()<edge_begin><edge_end>Unpivot In Clause Args()
Select(select)<edge_begin><edge_end>Or Column()
OBC Args()<edge_begin><edge_end>Order By Clause Args()
Pivot Col()<edge_begin><edge_end>Pivot Columns()
Windowing Clause Between()<edge_begin><edge_end>Windowing Clause()
Windowing Clause Between()<edge_begin><edge_end>Windowing Clause Operand Following()
Function Extract(v)<edge_begin><edge_end>Operands()
Operand List Group()<edge_begin><edge_end>Operand List()
Operands()<edge_begin><edge_end>Op Function Arg Agregate()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>In Oper(op)
Operand()<edge_begin><edge_end>Column Operand(ora)
Table Or Alias(alias)<edge_begin><edge_end>Unpivot Table()
Unipivot In Clause(op)<edge_begin><edge_end>Unpivot In Clause()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Like(op Like)
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg Agregate()
In Oper(op)<edge_begin><edge_end>Operand List Group()
Div()<edge_begin><edge_end>Operands()
tbls()<edge_begin><edge_end>Table Full()
Unpivot In Clause Arg()<edge_begin><edge_end>Pivot Columns()
Operand()<edge_begin><edge_end>Function Extract(v)
Select(select)<edge_begin><edge_end>Limit(l1)
Col()<edge_begin><edge_end>Column Full()
Table Or Alias(alias)<edge_begin><edge_end>Sub Query Operand()
Analytic Clause()<edge_begin><edge_end>Query Partition Clause()
Unpivot In Clause Arg()<edge_begin><edge_end>Unpivot In Clause Args()
Operand()<edge_begin><edge_end>P Operand(prm)
Select(select)<edge_begin><edge_end>Offset(offset)
Concat()<edge_begin><edge_end>Operands()
Sql Case When()<edge_begin><edge_end>Or Expr()
Order By Clause()<edge_begin><edge_end>Order By Clause Args()
Pivot In Clause(pinany)<edge_begin><edge_end>Unpivot In Clause Args()
Operand()<edge_begin><edge_end>Op Function Cast(type, p, p2)
Operand()<edge_begin><edge_end>Op Function(fname)
Pivot Col()<edge_begin><edge_end>Pivot Function()
Operands()<edge_begin><edge_end>Operand()
Pivot In Clause(pinany)<edge_begin><edge_end>Sub Query Operand()
From Table()<edge_begin><edge_end>Table Or Alias(alias)
Expr Group(isnot)<edge_begin><edge_end>Or Expr()
Like Operand(op2)<edge_begin><edge_end>Op Function(fname)
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Operands()
Or Column()<edge_begin><edge_end>Column Or Alias(alias, all Cols)
Select(select)<edge_begin><edge_end>Or Table()
Select Sub Set(op, all)<edge_begin><edge_end>Select(select)
Order By Clause Arg()<edge_begin><edge_end>Order By Clause Args()
When List()<edge_begin><edge_end>SQL Case Whens()
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg()
Sub Query Operand()<edge_begin><edge_end>Select Query()
tbls()<edge_begin><edge_end>Db Object Name(dbname)
Analytic Expr Arg()<edge_begin><edge_end>Db Object Name(dbname)
Col()<edge_begin><edge_end>Db Object Name(dbname)
Pivots()<edge_begin><edge_end>Pivot Columns()
Select(select)<edge_begin><edge_end>Fetch First(row)
Analytic Expr Arg()<edge_begin><edge_end>Operands()
Exists Oper(op)<edge_begin><edge_end>Operand List Group()
Operand()<edge_begin><edge_end>Exp Operand(prm)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Between(op Between)
X Expr(xf)<edge_begin><edge_end>Operands()
Order By Clause Arg()<edge_begin><edge_end>Analytic Expr Arg()
OBC Args()<edge_begin><edge_end>Order By Clause Arg()
Table Or Alias(alias)<edge_begin><edge_end>Table Full()
Select(select)<edge_begin><edge_end>Or Expr()
Pivot Table()<edge_begin><edge_end>Pivot Functions(abc)
Table Or Alias(alias)<edge_begin><edge_end>Db Object Name(dbname)
Like Operand(op2)<edge_begin><edge_end>P Operand(prm)
Operands()<edge_begin><edge_end>Operands()
Pivot Col()<edge_begin><edge_end>Pivots()
Comparison(operator, sub Operator)<edge_begin><edge_end>Operands()
A Exp Args()<edge_begin><edge_end>Analytic Expr Args()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>X Expr(xf)
Fetch First(row)<edge_begin><edge_end>Integer Value(integer)
Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)<edge_begin><edge_end>Operand List()
Sql Case When()<edge_begin><edge_end>Operands()
pvcs()<edge_begin><edge_end>Pivot Col()
Select(select)<edge_begin><edge_end>Select Sub Set(op, all)
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Db Object Name(dbname)
pcols()<edge_begin><edge_end>Db Object Name(dbname)
Unpivot Table()<edge_begin><edge_end>Unpivot In Clause()
Db Object Name(dbname)<edge_begin><edge_end>Table Full()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Operands()
From Table Join(join)<edge_begin><edge_end>Or Expr()
In Oper(op)<edge_begin><edge_end>Sub Query Operand()
Model()<edge_begin><edge_end>Select Query()
When List()<edge_begin><edge_end>Sql Case When()
Analytic Clause()<edge_begin><edge_end>Order By Clause()
Prms()<edge_begin><edge_end>JR Parameter(jrprm)
JR Parameter(jrprm)<edge_begin><edge_end>Prms()
Group By Column Full()<edge_begin><edge_end>Column Full()
Select(select)<edge_begin><edge_end>Or Group By Column()
Analytic Clause()<edge_begin><edge_end>Windowing Clause()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Or Expr()
Op Function(fname)<edge_begin><edge_end>Function Analytical()
Star()<edge_begin><edge_end>Operands()
Db Object Name(dbname)<edge_begin><edge_end>Pivot Col()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Or Column()
Sql Case When()<edge_begin><edge_end>SQL Case Whens()
pvcs()<edge_begin><edge_end>Pivots()
Op List()<edge_begin><edge_end>Operand List()
Select(select)<edge_begin><edge_end>Or Order By Column()
Or Order By Column()<edge_begin><edge_end>Order By Column Full(col Order Int, direction)
Table Or Alias(alias)<edge_begin><edge_end>Pivot Table()
Windowing Clause Operand Following()<edge_begin><edge_end>Analytic Expr Arg()
Operand()<edge_begin><edge_end>Sub Query Operand()
A Exp Args()<edge_begin><edge_end>Analytic Expr Arg()
Op F List()<edge_begin><edge_end>Op Function Arg()
Order By Column Full(col Order Int, direction)<edge_begin><edge_end>Column Full()
Task Import()<edge_begin><edge_end>Mapping Import()
Type()<edge_begin><edge_end>Named Element(name)
SCT File(file)<edge_begin><edge_end>I File()
SCT File(file)<edge_begin><edge_end>Column()
Task(file Name)<edge_begin><edge_end>Described Element(description)
Task SQL()<edge_begin><edge_end>Task(file Name)
Field(length, position, type)<edge_begin><edge_end>Separated Element(separator)
Task Import()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>FQ Named Element()
User(password)<edge_begin><edge_end>Described Element(description)
Schema()<edge_begin><edge_end>View(sql)
Mapping File()<edge_begin><edge_end>Mapping(expression)
SCT File(file)<edge_begin><edge_end>Domain(type)
Task Export()<edge_begin><edge_end>Task(file Name)
Mapping Import()<edge_begin><edge_end>I Column()
Table()<edge_begin><edge_end>Described Element(description)
Task(file Name)<edge_begin><edge_end>Named Element(name)
User(password)<edge_begin><edge_end>Schema()
Task SQL()<edge_begin><edge_end>Table()
I Column()<edge_begin><edge_end>Described Element(description)
Domain(type)<edge_begin><edge_end>Type()
Task File()<edge_begin><edge_end>File(files, number Of Header Lines)
File(files, number Of Header Lines)<edge_begin><edge_end>I File()
Site()<edge_begin><edge_end>Named Element(name)
View(sql)<edge_begin><edge_end>Described Element(description)
Mapping SQL()<edge_begin><edge_end>Column()
File(files, number Of Header Lines)<edge_begin><edge_end>Field(length, position, type)
Mapping SQL()<edge_begin><edge_end>Mapping(expression)
Task Set()<edge_begin><edge_end>Task(file Name)
Task Set()<edge_begin><edge_end>Described Element(description)
Column()<edge_begin><edge_end>Type()
Native SQL Type()<edge_begin><edge_end>Type()
File Set(hostname)<edge_begin><edge_end>Named Element(name)
Database(dsn)<edge_begin><edge_end>User(password)
I Column()<edge_begin><edge_end>FQ Named Element()
Site()<edge_begin><edge_end>Described Element(description)
Task Export()<edge_begin><edge_end>Table()
Separated Element(separator)<edge_begin><edge_end>Separator()
Task Export()<edge_begin><edge_end>I File()
User(password)<edge_begin><edge_end>Named Element(name)
View(sql)<edge_begin><edge_end>Named Element(name)
Schema()<edge_begin><edge_end>Domain(type)
Schema()<edge_begin><edge_end>Described Element(description)
Task(file Name)<edge_begin><edge_end>Task(file Name)
Domain(type)<edge_begin><edge_end>Data Type()
Site()<edge_begin><edge_end>Task Set()
Table()<edge_begin><edge_end>Column()
Table()<edge_begin><edge_end>Named Element(name)
I Column()<edge_begin><edge_end>Named Element(name)
Mapping File()<edge_begin><edge_end>Field(length, position, type)
Mapping Import()<edge_begin><edge_end>Mapping(expression)
File Set(hostname)<edge_begin><edge_end>I File()
View(sql)<edge_begin><edge_end>FQ Named Element()
Mapping Import()<edge_begin><edge_end>Column()
User(password)<edge_begin><edge_end>FQ Named Element()
Mapping Export()<edge_begin><edge_end>Mapping(expression)
Schema()<edge_begin><edge_end>Named Element(name)
I File()<edge_begin><edge_end>Described Element(description)
Task Set()<edge_begin><edge_end>Named Element(name)
Site()<edge_begin><edge_end>Database(dsn)
Mapping Export()<edge_begin><edge_end>Column()
Column()<edge_begin><edge_end>I Column()
Domain(type)<edge_begin><edge_end>FQ Named Element()
Task Import()<edge_begin><edge_end>I File()
Site()<edge_begin><edge_end>File Set(hostname)
Guard()<edge_begin><edge_end>Typed Transition()
Transition()<edge_begin><edge_end>State(label)
Internal Model(context)<edge_begin><edge_end>Automaton()
Trap State()<edge_begin><edge_end>State(label)
Automaton()<edge_begin><edge_end>State(label)
Within()<edge_begin><edge_end>Timed Zone(time)
Holds For()<edge_begin><edge_end>Timed Zone(time)
State(label)<edge_begin><edge_end>Timed Zone(time)
Typed Transition()<edge_begin><edge_end>Transition()
Epsilon Transition()<edge_begin><edge_end>Transition()
State(label)<edge_begin><edge_end>Event Token()
Typed Transition()<edge_begin><edge_end>Guard()
Event Token()<edge_begin><edge_end>State(label)
State(label)<edge_begin><edge_end>Transition()
Timed Zone(time)<edge_begin><edge_end>State(label)
Automaton()<edge_begin><edge_end>Event Token()
Data Base(SGB Dname)<edge_begin><edge_end>Table()
Column(data Type, null, default Value)<edge_begin><edge_end>String()
Data Base(SGB Dname)<edge_begin><edge_end>String()
Table()<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Data Base(SGB Dname)
Column(data Type, null, default Value)<edge_begin><edge_end>Boolean()
Table()<edge_begin><edge_end>Column(data Type, null, default Value)
Column(data Type, null, default Value)<edge_begin><edge_end>Table()
Column(data Type, null, default Value)<edge_begin><edge_end>Named Element(name)
Transition(match, parameter Count, parameter Keys)<edge_begin><edge_end>Storage(data)
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Storage(data)
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Model(resource, e Graph, object Keys, object Count)
State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)<edge_begin><edge_end>State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)
Transition(match, parameter Count, parameter Keys)<edge_begin><edge_end>Integer Array()
Storage(data)<edge_begin><edge_end>Integer Array()
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)
State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)<edge_begin><edge_end>Storage(data)
Model(resource, e Graph, object Keys, object Count)<edge_begin><edge_end>E Object Integer Map Entry(value)
Model(resource, e Graph, object Keys, object Count)<edge_begin><edge_end>E Graph()
State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)<edge_begin><edge_end>Equality Helper(check Link Order)
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Transition(match, parameter Count, parameter Keys)
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Integer Array()
Publication System()<edge_begin><edge_end>Publication Structure()
Paper()<edge_begin><edge_end>Progress(percent, time)
Progress(percent, time)<edge_begin><edge_end>Publication Process(min Time, max Time)
Paper()<edge_begin><edge_end>Researcher(name, for Name, position)
Progress(percent, time)<edge_begin><edge_end>Labelled(lname)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Researcher(name, for Name, position)
Progress(percent, time)<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Named(name)
Researcher(name, for Name, position)<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Sequence(sequence Type)
Researcher(name, for Name, position)<edge_begin><edge_end>Review()
Review()<edge_begin><edge_end>Labelled(lname)
Write()<edge_begin><edge_end>Labelled(lname)
Review Note(content)<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Paper()
Paper()<edge_begin><edge_end>Paragraph(content)
Sequence(sequence Type)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Publication Process(min Time, max Time)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Researcher(name, for Name, position)<edge_begin><edge_end>Write()
Paragraph(content)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Paper()<edge_begin><edge_end>Named(name)
Statechart()<edge_begin><edge_end>Expression Element(expression)
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Expression Element(expression)
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Scope()<edge_begin><edge_end>Declaration()
Entry(kind)<edge_begin><edge_end>Pseudostate()
Synchronization()<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Named Element(name)
Regular State()<edge_begin><edge_end>Vertex()
Reactive Element()<edge_begin><edge_end>Reaction()
Vertex()<edge_begin><edge_end>Named Element(name)
Choice(kind)<edge_begin><edge_end>Pseudostate()
Scope()<edge_begin><edge_end>Variable()
Transition(priority)<edge_begin><edge_end>Vertex()
Statechart()<edge_begin><edge_end>Reactive Element()
Declaration()<edge_begin><edge_end>Named Element(name)
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
Statechart()<edge_begin><edge_end>Region(priority)
Variable()<edge_begin><edge_end>Declaration()
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Regular State()
Region(priority)<edge_begin><edge_end>Named Element(name)
Vertex()<edge_begin><edge_end>Transition(priority)
Region(priority)<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Region(priority)
Event()<edge_begin><edge_end>Declaration()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Transition(priority)<edge_begin><edge_end>Expression Element(expression)
Scope()<edge_begin><edge_end>Event()
Final State()<edge_begin><edge_end>Regular State()
Reaction()<edge_begin><edge_end>Trigger()
Initial State()<edge_begin><edge_end>State(label, id)
State Machine()<edge_begin><edge_end>Declaration()
State(label, id)<edge_begin><edge_end>State(label, id)
Normal State()<edge_begin><edge_end>Action(action Label, action Statement)
Normal State()<edge_begin><edge_end>State(label, id)
State(label, id)<edge_begin><edge_end>Declaration()
Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)<edge_begin><edge_end>Declaration()
State Machine()<edge_begin><edge_end>State Machine Variable(type, name)
Use Case()<edge_begin><edge_end>Include()
Actor()<edge_begin><edge_end>Named Element(name)
Association()<edge_begin><edge_end>Use Case()
Use Case Container()<edge_begin><edge_end>Named Element(name)
Include()<edge_begin><edge_end>Use Case()
Extend()<edge_begin><edge_end>Use Case()
Use Case()<edge_begin><edge_end>Named Element(name)
Association()<edge_begin><edge_end>Named Element(name)
Association()<edge_begin><edge_end>Actor()
Net()<edge_begin><edge_end>Transition(name)
Place(name)<edge_begin><edge_end>PT Arc()
Transition(name)<edge_begin><edge_end>PT Arc()
PT Arc()<edge_begin><edge_end>Transition(name)
TP Arc()<edge_begin><edge_end>Place(name)
Transition(name)<edge_begin><edge_end>Net()
Place(name)<edge_begin><edge_end>TP Arc()
Transition(name)<edge_begin><edge_end>TP Arc()
Place(name)<edge_begin><edge_end>Net()
PT Arc()<edge_begin><edge_end>Place(name)
TP Arc()<edge_begin><edge_end>Transition(name)
Net()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Net()
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Index Element(asc)
Primary Key()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Constraint(expression)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key()
Constraint(expression)<edge_begin><edge_end>Table()
Foreign Key Element()<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Primary Key()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
Data Base(url)<edge_begin><edge_end>Table Container()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index Element(asc)
View(query)<edge_begin><edge_end>View Element(name, alias)
View(query)<edge_begin><edge_end>Abstract Table()
Foreign Key Element()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Table()<edge_begin><edge_end>Abstract Table()
Table Container()<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Named Element(name)
Foreign Key()<edge_begin><edge_end>Foreign Key Element()
Abstract Table()<edge_begin><edge_end>Table Container()
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Constraint(expression)<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Foreign Key()
Table()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Named Element(name)
Table Container()<edge_begin><edge_end>Named Element(name)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Table()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key Element()
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Named Element(name)
Foreign Key()<edge_begin><edge_end>Named Element(name)
Table Container()<edge_begin><edge_end>Abstract Table()
Named Element(name)<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Table()
Abstract Table()<edge_begin><edge_end>Named Element(name)
Index Element(asc)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Article Recent()<edge_begin><edge_end>Depots Type()
Laboratoire(id)<edge_begin><edge_end>Integer()
Depots Type()<edge_begin><edge_end>Abstract Depot Type()
Art Ouvrage Type(urldoi, titouv, edcom, annee, edsci, serie)<edge_begin><edge_end>Reference Biblio Type()
Notice()<edge_begin><edge_end>Entry()
Ouvrage Type(urldoi, edcom, annee, page)<edge_begin><edge_end>String()
HAL()<edge_begin><edge_end>Connexion(login, password)
Brevet Type(datebrevet, numbrevet, page, pays)<edge_begin><edge_end>String()
Notice()<edge_begin><edge_end>Meta Art Notice Type(domain, abstract)
Connexion(login, password)<edge_begin><edge_end>String()
Autre()<edge_begin><edge_end>Autre Type(urldoi, annee, description)
These Type(orgthe, niveau, defencedate, directeur, codirecteur)<edge_begin><edge_end>String()
Web Link(identifiant)<edge_begin><edge_end>Server()
Art Ouvrage Type(urldoi, titouv, edcom, annee, edsci, serie)<edge_begin><edge_end>String()
Article Retro(date Redaction)<edge_begin><edge_end>Abstract Depot(nom)
Depot(format)<edge_begin><edge_end>Abstract Depot(nom)
Ouvrage()<edge_begin><edge_end>Ouvrage Type(urldoi, edcom, annee, page)
Aut Lab Type()<edge_begin><edge_end>Auteur(nom, prenom, autre Prenom, email, url Perso)
Meta Art Type(domain, abstract)<edge_begin><edge_end>Reference Biblio Type()
Art Revue Type(urldoi, journal, volume, page, annee)<edge_begin><edge_end>String()
HAL()<edge_begin><edge_end>Entry()
Entry()<edge_begin><edge_end>Aut Lab Type()
Autre Type(urldoi, annee, description)<edge_begin><edge_end>Reference Biblio Type()
Meta Type(langue, title, comment, ref Interne, idext, is Epj, is Epl, classification, collaboration, keyword, datevisible, financement, researchteam)<edge_begin><edge_end>String()
Depots Type()<edge_begin><edge_end>Abstract Depot(nom)
Workshop()<edge_begin><edge_end>Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)
Brevet Type(datebrevet, numbrevet, page, pays)<edge_begin><edge_end>Reference Biblio Type()
Article Retro(date Redaction)<edge_begin><edge_end>Article()
Article()<edge_begin><edge_end>Meta Art Type(domain, abstract)
Laboratoire(id)<edge_begin><edge_end>Abstract Meta Lab()
Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)<edge_begin><edge_end>Reference Biblio Type()
Meta Art Type(domain, abstract)<edge_begin><edge_end>Meta Type(langue, title, comment, ref Interne, idext, is Epj, is Epl, classification, collaboration, keyword, datevisible, financement, researchteam)
Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)<edge_begin><edge_end>String()
Depot Web(format)<edge_begin><edge_end>Abstract Depot(nom)
These()<edge_begin><edge_end>These Type(orgthe, niveau, defencedate, directeur, codirecteur)
Auteur(nom, prenom, autre Prenom, email, url Perso)<edge_begin><edge_end>Laboratoire(id)
Entry()<edge_begin><edge_end>Tampon Type(id)
Aut Lab Type()<edge_begin><edge_end>Laboratoire(id)
Ouvrage Type(urldoi, edcom, annee, page)<edge_begin><edge_end>Reference Biblio Type()
Communication()<edge_begin><edge_end>Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)
Article Retro(date Redaction)<edge_begin><edge_end>String()
Meta Lab(id)<edge_begin><edge_end>Abstract Meta Lab()
These Type(orgthe, niveau, defencedate, directeur, codirecteur)<edge_begin><edge_end>Reference Biblio Type()
Brevet()<edge_begin><edge_end>Brevet Type(datebrevet, numbrevet, page, pays)
Abstract Depot(nom)<edge_begin><edge_end>String()
Auteur(nom, prenom, autre Prenom, email, url Perso)<edge_begin><edge_end>String()
Article Recent()<edge_begin><edge_end>Article()
Web Link(identifiant)<edge_begin><edge_end>Abstract Depot Type()
Meta Art Type(domain, abstract)<edge_begin><edge_end>String()
Art Ouvrage()<edge_begin><edge_end>Art Ouvrage Type(urldoi, titouv, edcom, annee, edsci, serie)
Art Revue Type(urldoi, journal, volume, page, annee)<edge_begin><edge_end>Reference Biblio Type()
Meta Art Notice Type(domain, abstract)<edge_begin><edge_end>String()
Story(goal, benefit, completed)<edge_begin><edge_end>Theme()
Actor()<edge_begin><edge_end>Role()
Epic()<edge_begin><edge_end>Story Container()
Story(goal, benefit, completed)<edge_begin><edge_end>Scenario(context, action, outcome)
User()<edge_begin><edge_end>Actor()
System()<edge_begin><edge_end>Actor()
Theme()<edge_begin><edge_end>Theme()
Story(goal, benefit, completed)<edge_begin><edge_end>Parameter(name, type, description)
Story(goal, benefit, completed)<edge_begin><edge_end>Story Base()
Catalog()<edge_begin><edge_end>Catalog Element(id, name, description)
Conditional Protagonist(condition)<edge_begin><edge_end>Protagonist()
Story(goal, benefit, completed)<edge_begin><edge_end>Conditional Protagonist(condition)
Story Base()<edge_begin><edge_end>Catalog Element(id, name, description)
Epic()<edge_begin><edge_end>Story Base()
Theme()<edge_begin><edge_end>Catalog Element(id, name, description)
Role()<edge_begin><edge_end>Protagonist()
Actor()<edge_begin><edge_end>Actor()
Story(goal, benefit, completed)<edge_begin><edge_end>Story(goal, benefit, completed)
Actor()<edge_begin><edge_end>Protagonist()
Scenario(context, action, outcome)<edge_begin><edge_end>Catalog Element(id, name, description)
Story Container()<edge_begin><edge_end>Catalog Element(id, name, description)
Persona(picture)<edge_begin><edge_end>Goal(name, details)
Protagonist()<edge_begin><edge_end>Story Container()
Unpublished(note)<edge_begin><edge_end>Titled Entry(title)
Authored Entry()<edge_begin><edge_end>Author(author)
Book(publisher)<edge_begin><edge_end>Authored Entry()
Titled Entry(title)<edge_begin><edge_end>Bib Te X Entry(id)
Thesis Entry(school)<edge_begin><edge_end>Authored Entry()
Article(journal)<edge_begin><edge_end>Dated Entry(year)
Misc()<edge_begin><edge_end>Bib Te X Entry(id)
Article(journal)<edge_begin><edge_end>Authored Entry()
Bib Te X File()<edge_begin><edge_end>Bib Te X Entry(id)
In Proceedings()<edge_begin><edge_end>Authored Entry()
Book(publisher)<edge_begin><edge_end>Titled Entry(title)
Proceedings()<edge_begin><edge_end>Titled Entry(title)
Tech Report()<edge_begin><edge_end>Authored Entry()
Thesis Entry(school)<edge_begin><edge_end>Titled Entry(title)
In Proceedings()<edge_begin><edge_end>Book Titled Entry(booktitle)
Tech Report()<edge_begin><edge_end>Titled Entry(title)
In Collection()<edge_begin><edge_end>Book Titled Entry(booktitle)
In Proceedings()<edge_begin><edge_end>Proceedings()
Booklet()<edge_begin><edge_end>Dated Entry(year)
Article(journal)<edge_begin><edge_end>Titled Entry(title)
Authored Entry()<edge_begin><edge_end>Bib Te X Entry(id)
Ph D Thesis()<edge_begin><edge_end>Thesis Entry(school)
Thesis Entry(school)<edge_begin><edge_end>Dated Entry(year)
Book(publisher)<edge_begin><edge_end>Dated Entry(year)
Book Titled Entry(booktitle)<edge_begin><edge_end>Bib Te X Entry(id)
Tech Report()<edge_begin><edge_end>Dated Entry(year)
Proceedings()<edge_begin><edge_end>Dated Entry(year)
Transition(description)<edge_begin><edge_end>Event(name)
State()<edge_begin><edge_end>State Machine(name)
DO()<edge_begin><edge_end>State Action()
State Vertex()<edge_begin><edge_end>Label(name)
State Machine Root()<edge_begin><edge_end>State Machine(name)
Composite State(is Concurrent)<edge_begin><edge_end>State Vertex()
Transition(description)<edge_begin><edge_end>Transition Action()
State()<edge_begin><edge_end>Event(name)
Transition(description)<edge_begin><edge_end>State Vertex()
State()<edge_begin><edge_end>State Vertex()
Transition(description)<edge_begin><edge_end>State Machine(name)
Transition(description)<edge_begin><edge_end>State()
State Action()<edge_begin><edge_end>State()
State Machine(name)<edge_begin><edge_end>State()
Action(value)<edge_begin><edge_end>State Machine(name)
ENTRY()<edge_begin><edge_end>State Action()
Transition Action()<edge_begin><edge_end>Transition(description)
State Machine(name)<edge_begin><edge_end>Transition(description)
State()<edge_begin><edge_end>Transition(description)
State Machine(name)<edge_begin><edge_end>Action(value)
State Machine(name)<edge_begin><edge_end>State Machine Root()
EXIT()<edge_begin><edge_end>State Action()
Guard(expression)<edge_begin><edge_end>Transition(description)
State Vertex()<edge_begin><edge_end>Composite State(is Concurrent)
Transition Action()<edge_begin><edge_end>Action(value)
Rejected Paper()<edge_begin><edge_end>paper(full paper size)
Email Template()<edge_begin><edge_end>Event Setup()
Reviewer Role()<edge_begin><edge_end>Role()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
date()<edge_begin><edge_end>Thing()
camera-ready submission date()<edge_begin><edge_end>date()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Administrator()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>String()
Regular author()<edge_begin><edge_end>Conference contributor()
summary of reviews()<edge_begin><edge_end>article()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
rejection notification email()<edge_begin><edge_end>notification email()
Contribution co-author()<edge_begin><edge_end>Regular author()
managing of conference process()<edge_begin><edge_end>activity()
Chairman()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
User()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Active conference participant()<edge_begin><edge_end>Conference participant()
review()<edge_begin><edge_end>activity()
Working event()<edge_begin><edge_end>Event(starts on, ends on)
Review preference(has a degree)<edge_begin><edge_end>Thing()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Participant(early Registration)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Thing()
activity()<edge_begin><edge_end>article()
Paper Typologies()<edge_begin><edge_end>Event Setup()
review form()<edge_begin><edge_end>activity()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Reviewed contribution()<edge_begin><edge_end>Review()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Review Form Setup()<edge_begin><edge_end>Review Form()
Co-chair()<edge_begin><edge_end>Committee member()
Conference contribution()<edge_begin><edge_end>Conference document()
Template()<edge_begin><edge_end>Document()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Active conference participant()<edge_begin><edge_end>Conference contributor()
Paper(paper ID, title)<edge_begin><edge_end>String()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Rejection Email()<edge_begin><edge_end>Email()
Administrator()<edge_begin><edge_end>Role()
Program Committee Chair()<edge_begin><edge_end>Review()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(paper ID, title)<edge_begin><edge_end>Author()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Account()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Event URL()<edge_begin><edge_end>Event(starts on, ends on)
University()<edge_begin><edge_end>Organization()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Submission Template()<edge_begin><edge_end>Event Setup()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Extended abstract()<edge_begin><edge_end>Regular contribution()
Tutorial()<edge_begin><edge_end>Working event()
Review()<edge_begin><edge_end>Document()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Reception()<edge_begin><edge_end>Social event()
Chair()<edge_begin><edge_end>Committee member()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Administrative event()<edge_begin><edge_end>Administrative event()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
Head Role()<edge_begin><edge_end>Role()
Reviewing results event()<edge_begin><edge_end>Administrative event()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Abstract()<edge_begin><edge_end>Extended abstract()
Admin Role()<edge_begin><edge_end>Role()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
Committee()<edge_begin><edge_end>Chair()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title)
Event(starts on, ends on)<edge_begin><edge_end>Administrator()
Review Form()<edge_begin><edge_end>Event Setup()
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
User()<edge_begin><edge_end>Document()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Event(starts on, ends on)<edge_begin><edge_end>Approval Email()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Submission()<edge_begin><edge_end>Document()
Meta-Review()<edge_begin><edge_end>Review()
reviewing proces()<edge_begin><edge_end>activity()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Conference part()<edge_begin><edge_end>Topic()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Reviewer()<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Paper(paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
end date of conference()<edge_begin><edge_end>date of conference()
conference()<edge_begin><edge_end>Thing()
Event Creation()<edge_begin><edge_end>Activity()
Trip()<edge_begin><edge_end>Social event()
Important dates()<edge_begin><edge_end>date()
summary of reviews()<edge_begin><edge_end>activity()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Author Role()<edge_begin><edge_end>Role()
Help Request()<edge_begin><edge_end>Request()
Author()<edge_begin><edge_end>Conference Member()
Working event()<edge_begin><edge_end>Administrative event()
Reviewer()<edge_begin><edge_end>Conference Member()
start date of conference()<edge_begin><edge_end>date of conference()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Reviewer()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>User()
Presentation()<edge_begin><edge_end>Active conference participant()
Call for paper()<edge_begin><edge_end>Conference document()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
activity()<edge_begin><edge_end>intensity()
Conference participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Active conference participant()<edge_begin><edge_end>Presentation()
group email()<edge_begin><edge_end>article()
Scholar()<edge_begin><edge_end>University()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Committee()<edge_begin><edge_end>Co-chair()
Regular()<edge_begin><edge_end>Participant(early Registration)
Event(starts on, ends on)<edge_begin><edge_end>Event Setup()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
paper(full paper size)<edge_begin><edge_end>article()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Document()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on)
Member PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Paper(paper ID, title)<edge_begin><edge_end>Regular contribution()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Event URL()<edge_begin><edge_end>URL()
Organizer()<edge_begin><edge_end>Thing()
External Reviewer()<edge_begin><edge_end>Reviewer()
Author()<edge_begin><edge_end>Paper(paper ID, title)
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title)
Abstract()<edge_begin><edge_end>Thing()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Accepted Paper()<edge_begin><edge_end>paper(full paper size)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Member()<edge_begin><edge_end>Participant(early Registration)
article()<edge_begin><edge_end>activity()
Role()<edge_begin><edge_end>Thing()
Committee member()<edge_begin><edge_end>Committee()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Registration()<edge_begin><edge_end>Activity()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Organization()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Account()
review form()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>article()
Organizing committee()<edge_begin><edge_end>Committee()
Review()<edge_begin><edge_end>Reviewed contribution()
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Working event()<edge_begin><edge_end>Topic()
review()<edge_begin><edge_end>article()
Invited talk()<edge_begin><edge_end>Presentation()
Reviewer()<edge_begin><edge_end>Administrator()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Conference document()
Conference volume(has a location)<edge_begin><edge_end>Track()
notification email()<edge_begin><edge_end>article()
conference setup()<edge_begin><edge_end>Thing()
Bid()<edge_begin><edge_end>Reviewer()
Volunteer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Activity()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
Workshop()<edge_begin><edge_end>Event(starts on, ends on)
Approval Email()<edge_begin><edge_end>Event(starts on, ends on)
Author()<edge_begin><edge_end>User()
Rejection()<edge_begin><edge_end>Decision()
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Administrator()<edge_begin><edge_end>Event(starts on, ends on)
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Senior Reviewer URL()<edge_begin><edge_end>URL()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Conference document()<edge_begin><edge_end>date()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Notification Email()<edge_begin><edge_end>Email()
Passive conference participant()<edge_begin><edge_end>Conference participant()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Misc()<edge_begin><edge_end>Help Request()
Conference volume(has a location)<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Author Not Reviewer()<edge_begin><edge_end>Author()
Track-workshop chair()<edge_begin><edge_end>Conference part()
Committee()<edge_begin><edge_end>User()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
Review()<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Steering committee()<edge_begin><edge_end>Committee()
Group Email()<edge_begin><edge_end>Email()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Reviewer()<edge_begin><edge_end>External Reviewer()
Program committee()<edge_begin><edge_end>Committee()
Assistance()<edge_begin><edge_end>Help Request()
Track()<edge_begin><edge_end>Conference part()
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
submission process()<edge_begin><edge_end>activity()
Participant(early Registration)<edge_begin><edge_end>Boolean()
Event Tracks()<edge_begin><edge_end>Event Setup()
date of conference()<edge_begin><edge_end>date()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
abstract submission date()<edge_begin><edge_end>date()
Reviewer()<edge_begin><edge_end>Bid()
human(e-mail, last name, first name)<edge_begin><edge_end>topic()
Scholar()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
date of notification()<edge_begin><edge_end>date()
Workshop()<edge_begin><edge_end>Conference part()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Tutorial()<edge_begin><edge_end>Conference part()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
full paper submission date()<edge_begin><edge_end>date()
Administrator()<edge_begin><edge_end>User()
Social event()<edge_begin><edge_end>Event(starts on, ends on)
Event Approval()<edge_begin><edge_end>Activity()
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Event Setup()<edge_begin><edge_end>Event(starts on, ends on)
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Science Worker()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Acceptance()<edge_begin><edge_end>Decision()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Event(starts on, ends on)<edge_begin><edge_end>String()
Banquet()<edge_begin><edge_end>Social event()
notification()<edge_begin><edge_end>activity()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference Chair()<edge_begin><edge_end>Chairman()
Committe Role()<edge_begin><edge_end>Role()
Conference Chair()<edge_begin><edge_end>Conference Member()
Chairman()<edge_begin><edge_end>Conference Member()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Email()<edge_begin><edge_end>Document()
Program Committee Chair()<edge_begin><edge_end>Chairman()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Assistant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Chair()<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Corresponding Author()<edge_begin><edge_end>Author()
Request()<edge_begin><edge_end>Activity()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Inforamtion()
Symposium()<edge_begin><edge_end>Event(starts on, ends on)
Committee()<edge_begin><edge_end>Conference volume(has a location)
Student()<edge_begin><edge_end>Participant(early Registration)
Submission event()<edge_begin><edge_end>Administrative event()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
conference()<edge_begin><edge_end>phase of conference()
Event(starts on, ends on)<edge_begin><edge_end>Event Tracks()
Associated Chair()<edge_begin><edge_end>Conference Member()
Committee()<edge_begin><edge_end>Committee member()
Conference document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Mkdir(dir)<edge_begin><edge_end>File Task()
Goal(name)<edge_begin><edge_end>Pre Goal()
Project()<edge_begin><edge_end>Ant Property()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Set()<edge_begin><edge_end>Pattern()
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Abstract Goal()<edge_begin><edge_end>Contents Goal()
Java(classname, jar, fork)<edge_begin><edge_end>Execution Task()
Post Goal()<edge_begin><edge_end>Goal(name)
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
New Task()<edge_begin><edge_end>Task()
Attain Goal()<edge_begin><edge_end>Goal(name)
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Ant Task Def(name, classname)<edge_begin><edge_end>Contents Goal()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
New Task()<edge_begin><edge_end>Ant Task Def(name, classname)
File Set(dir)<edge_begin><edge_end>Includes()
Ant Property Env(environment)<edge_begin><edge_end>Ant Property()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Project()<edge_begin><edge_end>Path(id, refid)
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Jelly Command()<edge_begin><edge_end>Contents Goal()
Ant Property File(file)<edge_begin><edge_end>Ant Property()
File List(dir, files)<edge_begin><edge_end>Basic()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Task()<edge_begin><edge_end>Contents Goal()
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Ant Property()<edge_begin><edge_end>Contents Goal()
Path Element(path, location)<edge_begin><edge_end>Basic()
Post Goal()<edge_begin><edge_end>Pre Post Goal()
Project()<edge_begin><edge_end>Ant Task Def(name, classname)
Ant Property Location(location)<edge_begin><edge_end>Ant Property Name(name)
Project()<edge_begin><edge_end>Xmlns(name, value)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Path(id, refid)<edge_begin><edge_end>Set()
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Ant Property Value(value)<edge_begin><edge_end>Ant Property Name(name)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
Basic()<edge_begin><edge_end>Pattern()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Jelly Set(var, value)<edge_begin><edge_end>Jelly Command()
Pre Goal()<edge_begin><edge_end>Goal(name)
Filter(token, value)<edge_begin><edge_end>Basic()
Ant Property Name(name)<edge_begin><edge_end>Ant Property()
Pre Goal()<edge_begin><edge_end>Pre Post Goal()
File Set(dir)<edge_begin><edge_end>Excludes()
Pattern Set()<edge_begin><edge_end>Set()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Attain Goal()<edge_begin><edge_end>Contents Goal()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
New Task()<edge_begin><edge_end>Attribut(name, value)
Trace()<edge_begin><edge_end>Petrinetv3 Net Initialize()
Trace()<edge_begin><edge_end>Traced Place()
Transition clock Value(clock)<edge_begin><edge_end>State()
Place tokens Value()<edge_begin><edge_end>Traced Token()
State()<edge_begin><edge_end>Transition clock Value(clock)
Petrinetv3 Net Tick Enabled Transitions()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Petrinetv3 Net Initialize()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Traced Place()<edge_begin><edge_end>Place tokens Value()
Petrinetv3 Transition Fire()<edge_begin><edge_end>Small Step()
Place tokens Value()<edge_begin><edge_end>State()
Petrinetv3 Net Run Implicit Step()<edge_begin><edge_end>Small Step()
Root Implicit Step()<edge_begin><edge_end>Small Step()
Traced Transition()<edge_begin><edge_end>Transition clock Value(clock)
State()<edge_begin><edge_end>Place tokens Value()
Petrinetv3 Net Initialize()<edge_begin><edge_end>Small Step()
Petrinetv3 Net Run()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Step()<edge_begin><edge_end>State()
Trace()<edge_begin><edge_end>Petrinetv3 Net Tick Enabled Transitions()
Trace()<edge_begin><edge_end>Petrinetv3 Transition Fire()
Big Step()<edge_begin><edge_end>Step()
Petrinetv3 Net Run()<edge_begin><edge_end>Big Step()
Petrinetv3 Transition Fire()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Trace()<edge_begin><edge_end>Traced Transition()
Petrinetv3 Net Tick Enabled Transitions()<edge_begin><edge_end>Small Step()
Petrinetv3 Net Run Implicit Step()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Trace()<edge_begin><edge_end>Step()
Traced Transition()<edge_begin><edge_end>Traced Place()
State()<edge_begin><edge_end>Step()
Behavioural Component(name, body)<edge_begin><edge_end>Parameter With Mode(mode)
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
ROW()<edge_begin><edge_end>Field()
Typed Table()<edge_begin><edge_end>Typed Table()
Table Constraint(name)<edge_begin><edge_end>Restriction()
Restriction()<edge_begin><edge_end>Structural Component(name)
Table(name)<edge_begin><edge_end>Schema(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Structural Component(name)<edge_begin><edge_end>Restriction()
Datetime Type(descriptor)<edge_begin><edge_end>Predefined Type()
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
Function()<edge_begin><edge_end>Data Type()
Numeric Type(descriptor)<edge_begin><edge_end>Predefined Type()
Method Parameter()<edge_begin><edge_end>Parameter(name)
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Data Type()<edge_begin><edge_end>Schema(name)
Method(name, body)<edge_begin><edge_end>Method Parameter()
Structural Component(name)<edge_begin><edge_end>Feature()
Table(name)<edge_begin><edge_end>Trigger(name, event, action Time, triggered Action)
Behavioural Component(name, body)<edge_begin><edge_end>Schema(name)
Collection Type()<edge_begin><edge_end>Collection Type()
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Method(name, body)<edge_begin><edge_end>Method(name, body)
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Not Null()<edge_begin><edge_end>Column Constraint()
Schema(name)<edge_begin><edge_end>Table(name)
Predefined Type()<edge_begin><edge_end>Distinct Type()
Structured Type(is final, is instantiable)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Derived Table(query expression)<edge_begin><edge_end>Table(name)
Procedure()<edge_begin><edge_end>Behavioural Component(name, body)
ROW()<edge_begin><edge_end>ROW()
Column(default)<edge_begin><edge_end>Structural Component(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
View()<edge_begin><edge_end>Structural Component(name)
Method(name, body)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
Method Parameter()<edge_begin><edge_end>Method(name, body)
Restriction()<edge_begin><edge_end>Table(name)
View()<edge_begin><edge_end>Table(name)
Distinct Type()<edge_begin><edge_end>Feature()
Table(name)<edge_begin><edge_end>Restriction()
MULTISET()<edge_begin><edge_end>Collection Type()
Collection Type()<edge_begin><edge_end>Data Type()
Base Table()<edge_begin><edge_end>Table(name)
Column(default)<edge_begin><edge_end>Table(name)
Collection Type()<edge_begin><edge_end>Constructed Type(name)
Schema(name)<edge_begin><edge_end>Behavioural Component(name, body)
Reference Type()<edge_begin><edge_end>Constructed Type(name)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Unique Constraint()
Table(name)<edge_begin><edge_end>Column(default)
Structural Component(name)<edge_begin><edge_end>View()
Predefined Type()<edge_begin><edge_end>Data Type()
Primary Key()<edge_begin><edge_end>Unique Constraint()
Constructed Type(name)<edge_begin><edge_end>Data Type()
ROW()<edge_begin><edge_end>Constructed Type(name)
String Feature(key, value)<edge_begin><edge_end>Feature()
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Table(name)<edge_begin><edge_end>View()
Trigger(name, event, action Time, triggered Action)<edge_begin><edge_end>Table(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>User Defined Type(name)
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Trigger(name, event, action Time, triggered Action)<edge_begin><edge_end>Structural Component(name)
Numeric Feature(key, value)<edge_begin><edge_end>Feature()
Interval Type(descriptor)<edge_begin><edge_end>Predefined Type()
Attribute(default)<edge_begin><edge_end>Structural Component(name)
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
Binary String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Database()<edge_begin><edge_end>Table()
Simple Key()<edge_begin><edge_end>Key(is Unique, name)
Foreign Key()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Database()
Table()<edge_begin><edge_end>Foreign Key()
Foreign Key()<edge_begin><edge_end>Key(is Unique, name)
Table Element()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Parameter()
Value()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Table()<edge_begin><edge_end>Named Element(name)
Key(is Unique, name)<edge_begin><edge_end>Boolean()
Foreign Key()<edge_begin><edge_end>Column(name, can Be Null)
Parameter()<edge_begin><edge_end>Table()
Type(length, is Unsigned)<edge_begin><edge_end>Boolean()
Named Element(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Type(length, is Unsigned)<edge_begin><edge_end>Named Element(name)
Parameter()<edge_begin><edge_end>Value()
Type(length, is Unsigned)<edge_begin><edge_end>Integer()
Integer Val(value)<edge_begin><edge_end>Integer()
Database()<edge_begin><edge_end>Named Element(name)
Column(name, can Be Null)<edge_begin><edge_end>Key(is Unique, name)
Named Element(name)<edge_begin><edge_end>String()
Key(is Unique, name)<edge_begin><edge_end>Column(name, can Be Null)
Parameter()<edge_begin><edge_end>Named Element(name)
String Val(value)<edge_begin><edge_end>Value()
Null Val()<edge_begin><edge_end>Value()
Table()<edge_begin><edge_end>Table Element()
Key(is Unique, name)<edge_begin><edge_end>String()
String Val(value)<edge_begin><edge_end>String()
Column(name, can Be Null)<edge_begin><edge_end>Foreign Key()
Column(name, can Be Null)<edge_begin><edge_end>Boolean()
Key(is Unique, name)<edge_begin><edge_end>Table Element()
Delay Literal(time Unit)<edge_begin><edge_end>Int Literal(int Value)
Timer Event()<edge_begin><edge_end>Event()
Domain Data Import()<edge_begin><edge_end>Resource Import(import URI)
E Step(feature Name)<edge_begin><edge_end>E Step Filter(free Var Name)
Uri Literal(uri Value)<edge_begin><edge_end>Abstract Uri Literal(uri)
Resource Uri Literal(resource Uri)<edge_begin><edge_end>EURI()
State(name)<edge_begin><edge_end>Abstract State()
Timer Event()<edge_begin><edge_end>Expression()
E Path()<edge_begin><edge_end>Var Ref()
Var Ref()<edge_begin><edge_end>Expression()
E Path()<edge_begin><edge_end>Expression()
Abstract State()<edge_begin><edge_end>Abstract Transition()
Script Event(script)<edge_begin><edge_end>Event()
Exit Event()<edge_begin><edge_end>Abstract Transition Event()
Abstract Uri Literal(uri)<edge_begin><edge_end>Literal()
Script Action(script)<edge_begin><edge_end>Action()
State Machine()<edge_begin><edge_end>Resource Import(import URI)
E Step Filter(free Var Name)<edge_begin><edge_end>Script Expression(script)
Transition Event()<edge_begin><edge_end>Abstract Transition Event()
Literal()<edge_begin><edge_end>Expression()
Initial Transition()<edge_begin><edge_end>Action()
Assignment Action()<edge_begin><edge_end>Action()
Script Expression(script)<edge_begin><edge_end>Expression()
E Object Uri Literal(uri Fragment)<edge_begin><edge_end>Resource Uri Literal(resource Uri)
Transition()<edge_begin><edge_end>State(name)
Resource Uri Literal(resource Uri)<edge_begin><edge_end>Abstract Uri Literal(uri)
Var Def(name)<edge_begin><edge_end>Expression()
Abstract State()<edge_begin><edge_end>Var Def(name)
Abstract Transition()<edge_begin><edge_end>Event()
Transition()<edge_begin><edge_end>Abstract Transition()
Abstract Transition()<edge_begin><edge_end>Action()
Symbolic Action(name)<edge_begin><edge_end>Expression()
State(name)<edge_begin><edge_end>Initial Transition()
E Path()<edge_begin><edge_end>E Step(feature Name)
Float Literal(float Value)<edge_begin><edge_end>Literal()
Boolean Literal(boolean Value)<edge_begin><edge_end>Literal()
Enter Event()<edge_begin><edge_end>Abstract Transition Event()
Int Literal(int Value)<edge_begin><edge_end>Literal()
Abstract Uri Literal(uri)<edge_begin><edge_end>EURI()
Var Def(name)<edge_begin><edge_end>Typed(many)
Symbolic Event(name)<edge_begin><edge_end>Event()
Abstract Transition Event()<edge_begin><edge_end>Event()
String Literal(string Value)<edge_begin><edge_end>Literal()
Assignment Action()<edge_begin><edge_end>Expression()
Region()<edge_begin><edge_end>Abstract State()
Transition()<edge_begin><edge_end>Named Element(name)
State Machine()<edge_begin><edge_end>Region()
Initial State()<edge_begin><edge_end>Pseudostate()
Transition()<edge_begin><edge_end>Statement()
Conditional()<edge_begin><edge_end>Pseudostate()
Shallow History()<edge_begin><edge_end>Pseudostate()
Abstract State()<edge_begin><edge_end>Named Element(name)
State Machine()<edge_begin><edge_end>Named Element(name)
Final State()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Abstract State()
Abstract State()<edge_begin><edge_end>Region()
Region()<edge_begin><edge_end>Named Element(name)
Abstract State()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Trigger(expression)
State()<edge_begin><edge_end>Abstract State()
Region()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Region()
Transition()<edge_begin><edge_end>Constraint()
Junction()<edge_begin><edge_end>Pseudostate()
Pseudostate()<edge_begin><edge_end>Abstract State()
Requirement Argument()<edge_begin><edge_end>Argument()
Person(name)<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Document Root(name)<edge_begin><edge_end>Person(name)
Requirement(identifier, name, priority, is Mandatory)<edge_begin><edge_end>Person(name)
Document Root(name)<edge_begin><edge_end>Category(name)
C Value()<edge_begin><edge_end>Simple Dependency(comment)
Functional Requirement()<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Textual Description(description)<edge_begin><edge_end>Description()
Quality Requirement()<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Refines()<edge_begin><edge_end>Simple Dependency(comment)
Category(name)<edge_begin><edge_end>Category(name)
Requires()<edge_begin><edge_end>Argument()
I Cost()<edge_begin><edge_end>Simple Dependency(comment)
Requirement Argument()<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Simple Dependency(comment)<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Simple Dependency(comment)<edge_begin><edge_end>Dependency()
Requires()<edge_begin><edge_end>Dependency()
Person(name)<edge_begin><edge_end>Category(name)
Requirement(identifier, name, priority, is Mandatory)<edge_begin><edge_end>Description()
Binary Operator Argument(operator)<edge_begin><edge_end>Argument()
Value Front Operation Minus()<edge_begin><edge_end>Value Front Operation()
Simple Term Integer()<edge_begin><edge_end>Simple Term(value)
Order By Parameter Desc()<edge_begin><edge_end>Order By Parameter()
Simple Value()<edge_begin><edge_end>Value Operation()
Set Expression()<edge_begin><edge_end>Select Expression()
Order By Select Expression()<edge_begin><edge_end>Select Expression()
Condition Operation Lesser()<edge_begin><edge_end>Condition Operation()
Condition Value()<edge_begin><edge_end>Value()
Table Expression(label)<edge_begin><edge_end>Table(name)
Simple Term Float()<edge_begin><edge_end>Simple Term(value)
Simple Condition()<edge_begin><edge_end>Condition()
Condition Operation Un Equal2()<edge_begin><edge_end>Condition Operation()
Exists Condition()<edge_begin><edge_end>Select Expression()
In Condition()<edge_begin><edge_end>Select Expression()
Integer()<edge_begin><edge_end>Data Type()
And Or Expression Operation()<edge_begin><edge_end>Expression Operation()
Select Expression()<edge_begin><edge_end>Where Expression()
Count Star Term()<edge_begin><edge_end>Term()
Column Operation Count()<edge_begin><edge_end>Column Operation()
Set Operation Union()<edge_begin><edge_end>Select Parameter()
Null Term()<edge_begin><edge_end>Term()
Operation Condition()<edge_begin><edge_end>Condition Operation()
Select Expression()<edge_begin><edge_end>Limit Expression(limit, offset)
Operation Condition()<edge_begin><edge_end>Simple Condition()
Select Parameter All()<edge_begin><edge_end>Select Parameter()
Column Operation Max()<edge_begin><edge_end>Column Operation()
Order By Column Expression()<edge_begin><edge_end>Column(name)
Time Stamp()<edge_begin><edge_end>Date()
Condition Value()<edge_begin><edge_end>Condition()
Single Column Expression(alias)<edge_begin><edge_end>Column Operation()
Join Table Expression()<edge_begin><edge_end>Table Expression(label)
Single Column Expression(alias)<edge_begin><edge_end>Expression()
Simple Condition()<edge_begin><edge_end>Value()
Between Condition()<edge_begin><edge_end>Simple Condition()
Boolean Term True()<edge_begin><edge_end>Boolean Term()
Simple Expression()<edge_begin><edge_end>Expression()
In Condition()<edge_begin><edge_end>Expression Operation Not()
Order By Select Expression()<edge_begin><edge_end>Order By Expression()
Simple Term(value)<edge_begin><edge_end>Term()
Select Expression()<edge_begin><edge_end>Set Expression()
Value Operation Divide()<edge_begin><edge_end>Value Operation()
Value Operation Multiply()<edge_begin><edge_end>Value Operation()
Simple Value()<edge_begin><edge_end>Term()
Function Value(function Name)<edge_begin><edge_end>Value()
Is Null Condition()<edge_begin><edge_end>Expression Operation Not()
Set Operation Minus()<edge_begin><edge_end>Set Operation()
Value Front Operation Plus()<edge_begin><edge_end>Value Front Operation()
Select Expression()<edge_begin><edge_end>Select Parameter()
Where Expression()<edge_begin><edge_end>Expression()
Table Expression(label)<edge_begin><edge_end>Select Expression()
Join Table Expression()<edge_begin><edge_end>Join Operation()
Double()<edge_begin><edge_end>Data Type()
Value Operation Parallel()<edge_begin><edge_end>Value Operation()
Simple Expression()<edge_begin><edge_end>Expression Operation Not()
Order By Alias Expression(alias)<edge_begin><edge_end>Order By Expression()
Simple Value()<edge_begin><edge_end>Value Front Operation()
Select Expression()<edge_begin><edge_end>Group By Expression()
Real()<edge_begin><edge_end>Data Type()
String()<edge_begin><edge_end>Data Type()
Column Term()<edge_begin><edge_end>Term()
In Condition()<edge_begin><edge_end>Simple Condition()
Join Table Expression()<edge_begin><edge_end>Expression()
Join Operation Right()<edge_begin><edge_end>Join Operation()
Is Null Condition()<edge_begin><edge_end>Simple Condition()
Condition Operation Greater()<edge_begin><edge_end>Condition Operation()
Select Expression()<edge_begin><edge_end>Having Expression()
Expression Operation Not()<edge_begin><edge_end>Expression Operation()
Condition Operation Great Equal()<edge_begin><edge_end>Condition Operation()
Single Column Expression(alias)<edge_begin><edge_end>Select Parameter()
Like Condition()<edge_begin><edge_end>Simple Condition()
Column Operation Sum()<edge_begin><edge_end>Column Operation()
Condition Operation Less Equal()<edge_begin><edge_end>Condition Operation()
Expression Operation And()<edge_begin><edge_end>And Or Expression Operation()
Like Condition()<edge_begin><edge_end>Expression Operation Not()
Expression Operation Or()<edge_begin><edge_end>And Or Expression Operation()
Condition Operation Equal()<edge_begin><edge_end>Condition Operation()
Column Term()<edge_begin><edge_end>Column(name)
Simple Term String()<edge_begin><edge_end>Simple Term(value)
Table List Expression()<edge_begin><edge_end>Join Table Expression()
Column Expression()<edge_begin><edge_end>Single Column Expression(alias)
Set Operation Union()<edge_begin><edge_end>Set Operation()
Order By Expression()<edge_begin><edge_end>Order By Parameter()
Boolean Term False()<edge_begin><edge_end>Boolean Term()
Column Operation Avg()<edge_begin><edge_end>Column Operation()
Column Operation Some()<edge_begin><edge_end>Column Operation()
Set Operation Except()<edge_begin><edge_end>Select Parameter Distinct()
Order By Parameter Asc()<edge_begin><edge_end>Order By Parameter()
Select Expression()<edge_begin><edge_end>From Expression()
Set Operation Except()<edge_begin><edge_end>Set Operation()
Simple Expression()<edge_begin><edge_end>And Or Expression Operation()
Date()<edge_begin><edge_end>Data Type()
Join Operation Left()<edge_begin><edge_end>Join Operation()
Boolean Term()<edge_begin><edge_end>Term()
Simple Value()<edge_begin><edge_end>Value()
Set Operation Intersect()<edge_begin><edge_end>Set Operation()
Column Operation Min()<edge_begin><edge_end>Column Operation()
Requirement Project()<edge_begin><edge_end>Hierarchical Element(next Req Index)
Requirement(external Resources)<edge_begin><edge_end>Identified Element(identifier, short Description)
Attribute Configuration()<edge_begin><edge_end>Configurated Attribute(name, type)
Hierarchical Element(next Req Index)<edge_begin><edge_end>Hierarchical Element(next Req Index)
Special Chapter()<edge_begin><edge_end>Hierarchical Element(next Req Index)
Anonymous Requirement()<edge_begin><edge_end>Requirement(external Resources)
Requirement(external Resources)<edge_begin><edge_end>Attribute(name)
Object Attribute()<edge_begin><edge_end>Attribute(name)
Attribute Link(partial)<edge_begin><edge_end>Object Attribute()
Trash Chapter()<edge_begin><edge_end>Special Chapter()
Hierarchical Element(next Req Index)<edge_begin><edge_end>Requirement(external Resources)
Special Chapter()<edge_begin><edge_end>Requirement(external Resources)
Text Attribute(value)<edge_begin><edge_end>Attribute(name)
Attribute Allocate()<edge_begin><edge_end>Object Attribute()
Requirement Project()<edge_begin><edge_end>Upstream Model()
Problem Chapter()<edge_begin><edge_end>Special Chapter()
Deleted Chapter()<edge_begin><edge_end>Special Chapter()
Requirement Project()<edge_begin><edge_end>Identified Element(identifier, short Description)
Configurated Attribute(name, type)<edge_begin><edge_end>Attribute Value(value)
Hierarchical Element(next Req Index)<edge_begin><edge_end>Identified Element(identifier, short Description)
Untraced Chapter()<edge_begin><edge_end>Special Chapter()
Element(name)<edge_begin><edge_end>String()
Petri Net()<edge_begin><edge_end>Transition()
Petri Net()<edge_begin><edge_end>Place()
Trans To Place Arc()<edge_begin><edge_end>Place()
Trans To Place Arc()<edge_begin><edge_end>Arc(weight)
Petri Net()<edge_begin><edge_end>Element(name)
Transition()<edge_begin><edge_end>Place To Trans Arc()
Place()<edge_begin><edge_end>Trans To Place Arc()
Place To Trans Arc()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Trans To Place Arc()
Arc(weight)<edge_begin><edge_end>Integer()
Place()<edge_begin><edge_end>Place To Trans Arc()
Place To Trans Arc()<edge_begin><edge_end>Arc(weight)
Place To Trans Arc()<edge_begin><edge_end>Place()
Place()<edge_begin><edge_end>Element(name)
Column(default)<edge_begin><edge_end>Table(name)
Reference Type()<edge_begin><edge_end>Constructed Type(name)
Predefined Type()<edge_begin><edge_end>Distinct Type()
Attribute(default)<edge_begin><edge_end>Structural Component(name)
ROW()<edge_begin><edge_end>Field()
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Trigger(name)<edge_begin><edge_end>Trigger Descriptor(event, action Time, triggered Action, level)
Distinct Type()<edge_begin><edge_end>Predefined Type()
Reference Type()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Structural Component(name)<edge_begin><edge_end>Restriction()
Trigger Descriptor(event, action Time, triggered Action, level)<edge_begin><edge_end>Trigger(name)
Table(name)<edge_begin><edge_end>Restriction()
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Unique Constraint()
Character String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Table(name)<edge_begin><edge_end>Column(default)
View()<edge_begin><edge_end>Structural Component(name)
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
Method(name, body)<edge_begin><edge_end>Data Type()
Schema(name)<edge_begin><edge_end>Data Type()
Distinct Type()<edge_begin><edge_end>Feature()
Method(name, body)<edge_begin><edge_end>Method Parameter()
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
Typed Table()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Method Parameter()<edge_begin><edge_end>Parameter(name)
Parameter(name)<edge_begin><edge_end>Data Type()
Behavioural Component(name, body)<edge_begin><edge_end>Schema(name)
Collection Type()<edge_begin><edge_end>Collection Type()
String Feature(key, value)<edge_begin><edge_end>Feature()
Numeric Feature(key, value)<edge_begin><edge_end>Feature()
Interval Feature(key, value)<edge_begin><edge_end>Feature()
ROW()<edge_begin><edge_end>ROW()
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Table(name)<edge_begin><edge_end>View()
Collection Type()<edge_begin><edge_end>Data Type()
Derived Table(query expression)<edge_begin><edge_end>Table(name)
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
Datetime Type(descriptor)<edge_begin><edge_end>Predefined Type()
Primary Key()<edge_begin><edge_end>Unique Constraint()
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Constructed Type(name)<edge_begin><edge_end>Data Type()
Trigger(name)<edge_begin><edge_end>Structural Component(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Attribute(default)
Schema(name)<edge_begin><edge_end>Table(name)
Data Type()<edge_begin><edge_end>Schema(name)
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Column Constraint()<edge_begin><edge_end>Restriction()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Table Constraint(name)<edge_begin><edge_end>Restriction()
Behavioural Component(name, body)<edge_begin><edge_end>Parameter With Mode(mode)
Table(name)<edge_begin><edge_end>Schema(name)
Typed Table()<edge_begin><edge_end>Base Table()
Schema(name)<edge_begin><edge_end>Behavioural Component(name, body)
Binary String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Field()<edge_begin><edge_end>Structural Component(name)
View()<edge_begin><edge_end>Table(name)
User Defined Type(name)<edge_begin><edge_end>Data Type()
Structural Component(name)<edge_begin><edge_end>Feature()
Field()<edge_begin><edge_end>ROW()
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Restriction()<edge_begin><edge_end>Structural Component(name)
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Procedure()<edge_begin><edge_end>Behavioural Component(name, body)
Column(default)<edge_begin><edge_end>Structural Component(name)
MULTISET()<edge_begin><edge_end>Collection Type()
Not Null()<edge_begin><edge_end>Column Constraint()
Method(name, body)<edge_begin><edge_end>Method(name, body)
Boolean Type(descriptor)<edge_begin><edge_end>Predefined Type()
Init()<edge_begin><edge_end>IVR Event()
Collected()<edge_begin><edge_end>Branch()
Branch()<edge_begin><edge_end>Action()
IVR Event()<edge_begin><edge_end>Transition()
Timer()<edge_begin><edge_end>Transition()
Remove Record(record Id)<edge_begin><edge_end>Ivr Action()
Managed(success, code)<edge_begin><edge_end>IVR Event()
Call(from, to)<edge_begin><edge_end>IVR Event()
Transition()<edge_begin><edge_end>State(nombre)
Play(base URL, media URI)<edge_begin><edge_end>Ivr Action()
Branch()<edge_begin><edge_end>State(nombre)
New Call(from, to)<edge_begin><edge_end>Ivr Action()
Key(key)<edge_begin><edge_end>Branch()
Set Timer(millis)<edge_begin><edge_end>Action()
Pick Up()<edge_begin><edge_end>IVR Event()
Send Sms()<edge_begin><edge_end>Action()
State Machine(nombre)<edge_begin><edge_end>State(nombre)
SMS Received()<edge_begin><edge_end>SMS(from, to, text)
Collect Timeout()<edge_begin><edge_end>IVR Event()
Bye()<edge_begin><edge_end>IVR Event()
Play Record()<edge_begin><edge_end>Play(base URL, media URI)
Collected()<edge_begin><edge_end>IVR Event()
Otherwise()<edge_begin><edge_end>Branch()
Composite State()<edge_begin><edge_end>State Machine(nombre)
Terminate()<edge_begin><edge_end>Ivr Action()
Send Sms()<edge_begin><edge_end>SMS(from, to, text)
Final State()<edge_begin><edge_end>State(nombre)
Play Collect()<edge_begin><edge_end>Play(base URL, media URI)
State(nombre)<edge_begin><edge_end>State(nombre)
Hang Up()<edge_begin><edge_end>Ivr Action()
Composite State()<edge_begin><edge_end>State(nombre)
Terminated()<edge_begin><edge_end>IVR Event()
State(nombre)<edge_begin><edge_end>Transition()
SMS Received()<edge_begin><edge_end>Transition()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Output SAP Function Parameter Table()
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Queries Connection()
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Input SAP Function Parameter Table()
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>SAP Test Input Parameter Table()
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
HL7Connection(Start Char, End Char)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>CDC Connection()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Prefix Condition(prefix Fixed Syntax)<edge_begin><edge_end>Value(val, value)
Action(action, name)<edge_begin><edge_end>Value(val, value)
Action(action, name)<edge_begin><edge_end>Parameter(parameter, name)
Parameter State()<edge_begin><edge_end>Parameter(parameter, name)
Prefix Condition(prefix Fixed Syntax)<edge_begin><edge_end>Timing Constraint(timing Constraint, minmax)
Requirement()<edge_begin><edge_end>Req ID(req ID, name)
Main Functions()<edge_begin><edge_end>System(system, name)
Main Composition()<edge_begin><edge_end>System(system, name)
Timing Constraint(timing Constraint, minmax)<edge_begin><edge_end>Time(value, time Unit)
Main State Transition()<edge_begin><edge_end>Action(action, name)
Actor Event(action)<edge_begin><edge_end>Parameter(parameter, name)
Main Functions()<edge_begin><edge_end>Function(function, name, type)
Main Function()<edge_begin><edge_end>Action(action, name)
Main State Transition()<edge_begin><edge_end>System(system, name)
Prefix()<edge_begin><edge_end>Prefix Right Operand(operator)
Requirement()<edge_begin><edge_end>Prefix()
Main Attributes()<edge_begin><edge_end>System(system, name)
State Event()<edge_begin><edge_end>State(state, name)
Main Attributes()<edge_begin><edge_end>Attribute(attribute, name, type)
XY Elt()<edge_begin><edge_end>Del Elt(del)
Geom()<edge_begin><edge_end>NURBS To()
Spline Knot()<edge_begin><edge_end>XYA Elt()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
XY Elt()<edge_begin><edge_end>IX Elt(i X)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Geom()<edge_begin><edge_end>Move To()
Move To()<edge_begin><edge_end>Geom()
Geom()<edge_begin><edge_end>Del Elt(del)
Arc To()<edge_begin><edge_end>Geom()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>String()
Text()<edge_begin><edge_end>Text Elt()
Page Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Text Elt()<edge_begin><edge_end>Text()
String Elt(value)<edge_begin><edge_end>String()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Page Elt()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Identified Elt(ID)
XYABCD Elt()<edge_begin><edge_end>XYAB Elt()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Boolean()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shape Elt()
Infinite Line()<edge_begin><edge_end>Geom()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
XYABCDE Elt()<edge_begin><edge_end>XYABCD Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
Geom()<edge_begin><edge_end>Ellipse()
Line To()<edge_begin><edge_end>Geom()
XYAB Elt()<edge_begin><edge_end>XYA Elt()
XYABCD Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Visio Document()<edge_begin><edge_end>Pages Collection()
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Spline Start()<edge_begin><edge_end>Geom()
Geom()<edge_begin><edge_end>Arc To()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Masters Collection()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Move To()<edge_begin><edge_end>XY Elt()
Ellipse()<edge_begin><edge_end>XYABCD Elt()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Pages Collection()
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
NURBS To()<edge_begin><edge_end>XYABCDE Elt()
Arc To()<edge_begin><edge_end>XYA Elt()
Cell Type(unit, formula, err, value)<edge_begin><edge_end>String()
Del Elt(del)<edge_begin><edge_end>Boolean()
Named Elt(name, name U)<edge_begin><edge_end>String()
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
XY Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Geom()<edge_begin><edge_end>Line To()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Line To()<edge_begin><edge_end>XY Elt()
Shapes Collection()<edge_begin><edge_end>Page Elt()
Shapes Collection()<edge_begin><edge_end>Master Elt()
IX Elt(i X)<edge_begin><edge_end>Integer()
Geom()<edge_begin><edge_end>Polyline To()
Geom()<edge_begin><edge_end>Spline Start()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Integer()
Geom()<edge_begin><edge_end>Spline Knot()
Polyline To()<edge_begin><edge_end>Geom()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
Elliptical Arc To()<edge_begin><edge_end>Geom()
Elliptical Arc To()<edge_begin><edge_end>XYABCD Elt()
Connects Collection()<edge_begin><edge_end>Master Elt()
Geom()<edge_begin><edge_end>Shape Elt()
Geom()<edge_begin><edge_end>Infinite Line()
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Integer()
Pages Collection()<edge_begin><edge_end>Visio Document()
NURBS To()<edge_begin><edge_end>Geom()
Geom()<edge_begin><edge_end>IX Elt(i X)
Identified Elt(ID)<edge_begin><edge_end>Integer()
XYA Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
XYA Elt()<edge_begin><edge_end>XY Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Visio Document()<edge_begin><edge_end>Masters Collection()
Geom()<edge_begin><edge_end>Elliptical Arc To()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Ellipse()<edge_begin><edge_end>Geom()
Page Sheet()<edge_begin><edge_end>Unique Id Elt(Unique ID)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Shape Elt()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Final State()<edge_begin><edge_end>State()
Region()<edge_begin><edge_end>Vertex(/name)
Region()<edge_begin><edge_end>Transition(/name)
Transition(/name)<edge_begin><edge_end>Vertex(/name)
Transition(/name)<edge_begin><edge_end>Trigger(/name)
State()<edge_begin><edge_end>Vertex(/name)
Pseudostate(kind)<edge_begin><edge_end>Vertex(/name)
Vertex(/name)<edge_begin><edge_end>Region()
State Machine()<edge_begin><edge_end>Behavior(/name)
State Machine()<edge_begin><edge_end>Region()
Activity()<edge_begin><edge_end>Behavior(/name)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Version Type(n, nn)<edge_begin><edge_end>Integer()
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Error Value()<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>String()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Workbook()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Data()<edge_begin><edge_end>Comment(author, show Always)
Boolean Value(value)<edge_begin><edge_end>Boolean()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>String()
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>String()
Data()<edge_begin><edge_end>Value Type()
Workbook()<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Value Type()<edge_begin><edge_end>Data()
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Comment(author, show Always)<edge_begin><edge_end>String()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Table Element(index)<edge_begin><edge_end>Integer()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Number Value(value)<edge_begin><edge_end>Double()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Integer()
Comment(author, show Always)<edge_begin><edge_end>Data()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Table Element(index)<edge_begin><edge_end>Styled Element()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Workbook()<edge_begin><edge_end>Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Integer()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Boolean()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Date Time Type Value()<edge_begin><edge_end>Value Type()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Boolean()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Contribution()<edge_begin><edge_end>Publication()
Researcher()<edge_begin><edge_end>Person()
Session(year)<edge_begin><edge_end>Steering Comitee()
Laboratory()<edge_begin><edge_end>Publication()
Steering Comitee()<edge_begin><edge_end>Person()
Evaluation()<edge_begin><edge_end>Publication()
Program Comitee()<edge_begin><edge_end>Person()
Admin()<edge_begin><edge_end>Location(name)
Researcher()<edge_begin><edge_end>Chapter()
Researcher()<edge_begin><edge_end>Evaluation()
Publication()<edge_begin><edge_end>Chapter()
Conference()<edge_begin><edge_end>Session(year)
Session(year)<edge_begin><edge_end>Contribution()
Session(year)<edge_begin><edge_end>Location(name)
System()<edge_begin><edge_end>Revision Process()
Laboratory()<edge_begin><edge_end>Researcher()
System()<edge_begin><edge_end>Admin()
Chapter()<edge_begin><edge_end>Revision Note()
Image(width, height)<edge_begin><edge_end>Point(x, y)
Table(nb Columns)<edge_begin><edge_end>Header()
Table(nb Columns)<edge_begin><edge_end>Point(x, y)
Sheet(name)<edge_begin><edge_end>Table(nb Columns)
Sheet(name)<edge_begin><edge_end>Text(text Content)
Image(width, height)<edge_begin><edge_end>Title(hiearchy)
Cell()<edge_begin><edge_end>Point(x, y)
Sheet(name)<edge_begin><edge_end>Image(width, height)
Row()<edge_begin><edge_end>Cell()
Header()<edge_begin><edge_end>Cell()
Text(text Content)<edge_begin><edge_end>Title(hiearchy)
Table(nb Columns)<edge_begin><edge_end>Title(hiearchy)
Region(name)<edge_begin><edge_end>Transitions()
Transition(guard, behaviour)<edge_begin><edge_end>Triggers()
States()<edge_begin><edge_end>States Separated()
Region(name)<edge_begin><edge_end>States()
Triggers()<edge_begin><edge_end>Triggers Separated(first Trigger, following Triggers)
Top Region()<edge_begin><edge_end>States()
Transitions()<edge_begin><edge_end>Transition(guard, behaviour)
Top Region()<edge_begin><edge_end>Transitions()
Transition(guard, behaviour)<edge_begin><edge_end>State(name)
States Separated()<edge_begin><edge_end>State(name)
Top Region()<edge_begin><edge_end>Region(name)
Lang Elt(val, bidi)<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Run Elt()<edge_begin><edge_end>Para Content Elt()
Styles Elt(version Of Built In Stylenames)<edge_begin><edge_end>Word Document()
Tab()<edge_begin><edge_end>Tab Elt()
Custom Document Property(name)<edge_begin><edge_end>String()
Note Elt(type, suppress Ref)<edge_begin><edge_end>Block Level Elt()
Table Content Elt()<edge_begin><edge_end>Run Level Elt()
Block Level Chunk Elt()<edge_begin><edge_end>Block Level Elt()
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Pg Num()<edge_begin><edge_end>Run Content Elt()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Endnote()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>String Property()
Table Cell Pr Elt()<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Para Elt()<edge_begin><edge_end>Para Pr Elt(keep Next, keep Lines, page Break Before, supress Line Numbers, suppress Auto Hyphens, contextual Spacing, bidi, justification)
Doc Pr Elt()<edge_begin><edge_end>Word Document()
Endnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Fonts List Elt()<edge_begin><edge_end>Fonts Elt(hint)
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Lists Elt()<edge_begin><edge_end>Word Document()
Table Elt()<edge_begin><edge_end>Table Grid Elt()
Custom Document Properties Collection()<edge_begin><edge_end>Word Document()
Float Value(value)<edge_begin><edge_end>Double()
Table Content Elt()<edge_begin><edge_end>Table Elt()
Row Content Elt()<edge_begin><edge_end>Row Elt()
Del Instr Text()<edge_begin><edge_end>Run Content Elt()
Run Elt()<edge_begin><edge_end>Run Content Elt()
Run Level Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Table Cell Pr Elt()
Word Document()<edge_begin><edge_end>Lists Elt()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Lang Elt(val, bidi)
Break Elt(type)<edge_begin><edge_end>Run Content Elt()
Row Elt()<edge_begin><edge_end>Table Pr Ex Elt()
Cf Chunk()<edge_begin><edge_end>Block Level Elt()
Table Row Pr Elt()<edge_begin><edge_end>Row Elt()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Run Elt()
Picture()<edge_begin><edge_end>Picture Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Date Time Type Value()<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Simple Field Elt()<edge_begin><edge_end>Para Content Elt()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>String Property()
Run Content Elt()<edge_begin><edge_end>Run Elt()
No Break Hyphen()<edge_begin><edge_end>Run Content Elt()
Symbol()<edge_begin><edge_end>Sym Elt()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>String()
Table Content Elt()<edge_begin><edge_end>Row Elt()
Separator()<edge_begin><edge_end>Run Content Elt()
Tab()<edge_begin><edge_end>Run Content Elt()
Para Pr Elt(keep Next, keep Lines, page Break Before, supress Line Numbers, suppress Auto Hyphens, contextual Spacing, bidi, justification)<edge_begin><edge_end>Para Elt()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Double()
Font Elt()<edge_begin><edge_end>String Type(val)
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Table Row Pr Elt()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Block Level Elt()<edge_begin><edge_end>Table Cell Elt()
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Fonts Elt(hint)<edge_begin><edge_end>Fonts List Elt()
Text()<edge_begin><edge_end>String Type(val)
Fonts Elt(hint)<edge_begin><edge_end>String Type(val)
Word Document()<edge_begin><edge_end>Custom Document Properties Collection()
Row Elt()<edge_begin><edge_end>Table Row Pr Elt()
Cr()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>Body Elt()
Table Cell Pr Elt()<edge_begin><edge_end>Table Cell Elt()
Instr Text()<edge_begin><edge_end>Run Content Elt()
Table Pr Ex Elt()<edge_begin><edge_end>Row Elt()
Styles Elt(version Of Built In Stylenames)<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Table Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Picture()<edge_begin><edge_end>Run Content Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
Para Content Elt()<edge_begin><edge_end>Para Elt()
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Table Pr Elt()<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Version Type(n, nn)<edge_begin><edge_end>Integer()
Del Instr Text()<edge_begin><edge_end>String Type(val)
Fonts Elt(hint)<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Block Level Elt()<edge_begin><edge_end>Body Elt()
Boolean Value(value)<edge_begin><edge_end>Value Type()
Row Content Elt()<edge_begin><edge_end>Run Level Elt()
Word Document()<edge_begin><edge_end>Styles Elt(version Of Built In Stylenames)
Underline Property(val, color)<edge_begin><edge_end>String()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Table Pr Elt()
Word Document()<edge_begin><edge_end>Doc Pr Elt()
Fonts List Elt()<edge_begin><edge_end>Word Document()
Row Elt()<edge_begin><edge_end>Row Content Elt()
H Link Elt()<edge_begin><edge_end>Para Content Elt()
Block Level Elt()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Body Elt()<edge_begin><edge_end>Word Document()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Underline Property(val, color)
Word Document()<edge_begin><edge_end>Smart Tags Collection()
String Type(val)<edge_begin><edge_end>String()
Table Cell Elt()<edge_begin><edge_end>Block Level Elt()
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Sub Doc Elt()<edge_begin><edge_end>Para Content Elt()
Word Document()<edge_begin><edge_end>Fonts List Elt()
Run Level Elt()<edge_begin><edge_end>Table Content Elt()
Endnote Ref()<edge_begin><edge_end>Run Content Elt()
Row Content Elt()<edge_begin><edge_end>Table Cell Elt()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Fonts List Elt()<edge_begin><edge_end>Font Elt()
Sect Pr Elt()<edge_begin><edge_end>Body Elt()
Lang Elt(val, bidi)<edge_begin><edge_end>String()
Run Level Elt()<edge_begin><edge_end>Row Content Elt()
Fld Char()<edge_begin><edge_end>Run Content Elt()
Body Elt()<edge_begin><edge_end>Sect Pr Elt()
Run Elt()<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Styles Elt(version Of Built In Stylenames)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Word Document()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Table Elt()<edge_begin><edge_end>Table Pr Elt()
Sym Elt()<edge_begin><edge_end>String Type(val)
Symbol()<edge_begin><edge_end>Run Content Elt()
Styles Elt(version Of Built In Stylenames)<edge_begin><edge_end>Double()
Font Elt()<edge_begin><edge_end>String Property()
Footnote()<edge_begin><edge_end>Run Content Elt()
Annotation Ref()<edge_begin><edge_end>Run Content Elt()
Table Cell Elt()<edge_begin><edge_end>Row Content Elt()
Primary Key()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Constraint(expression)<edge_begin><edge_end>Named Element(name)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Table()
Primary Key()<edge_begin><edge_end>Table()
Foreign Key Element()<edge_begin><edge_end>Database Element(ID, comments)
Table()<edge_begin><edge_end>Constraint(expression)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Foreign Key()<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Abstract Table()
Schema()<edge_begin><edge_end>Table Container()
Index Element(asc)<edge_begin><edge_end>Database Element(ID, comments)
Foreign Key()<edge_begin><edge_end>Foreign Key Element()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Sequence(start, increment, min Value, max Value)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Primary Key()
Primary Key()<edge_begin><edge_end>Named Element(name)
Sequence(start, increment, min Value, max Value)<edge_begin><edge_end>Named Element(name)
Data Base(url)<edge_begin><edge_end>Schema()
Table Container()<edge_begin><edge_end>Abstract Table()
Table()<edge_begin><edge_end>Primary Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Named Element(name)
Named Element(name)<edge_begin><edge_end>Database Element(ID, comments)
Table Container()<edge_begin><edge_end>Named Element(name)
Abstract Table()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Constraint(expression)<edge_begin><edge_end>Table()
Foreign Key Element()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Data Base(url)<edge_begin><edge_end>Table Container()
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Named Element(name)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Index Element(asc)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Abstract Table()
View(query)<edge_begin><edge_end>Abstract Table()
Table()<edge_begin><edge_end>Foreign Key()
Abstract Table()<edge_begin><edge_end>Named Element(name)
Print Setup()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
NURBS To()<edge_begin><edge_end>XYABCDE Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Style Sheet()<edge_begin><edge_end>Identified Elt(ID)
Style Sheets Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Identified Elt(ID)
Geom()<edge_begin><edge_end>Spline Knot()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Solution XML()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Fonts Table()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Double()
Email Routing Data(data, size)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Document Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Geom()<edge_begin><edge_end>Ellipse()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
IX Elt(i X)<edge_begin><edge_end>Integer()
Infinite Line()<edge_begin><edge_end>Geom()
Face Names Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Text()<edge_begin><edge_end>Text Elt()
Connects Collection()<edge_begin><edge_end>Page Elt()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Named Elt(name, name U)
String Elt(value)<edge_begin><edge_end>Text Elt()
Identified Elt(ID)<edge_begin><edge_end>Integer()
Geom()<edge_begin><edge_end>Del Elt(del)
VB Project Data(data)<edge_begin><edge_end>String()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shapes Collection()
NURBS To()<edge_begin><edge_end>Geom()
Custom Property(name, data Type)<edge_begin><edge_end>String()
Geom()<edge_begin><edge_end>Arc To()
Custom Properties Collection()<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
VB Project Data(data)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
Icon(value)<edge_begin><edge_end>Master Elt()
Infinite Line()<edge_begin><edge_end>XYAB Elt()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Pages Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Pages Collection()
Del Elt(del)<edge_begin><edge_end>Boolean()
Geom()<edge_begin><edge_end>Spline Start()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Email Routing Data(data, size)
Custom Properties Collection()<edge_begin><edge_end>Custom Property(name, data Type)
Page Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Email Routing Data(data, size)<edge_begin><edge_end>String()
Text()<edge_begin><edge_end>Shape Elt()
Windows Info()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Move To()<edge_begin><edge_end>XY Elt()
Style Sheets Collection()<edge_begin><edge_end>Style Sheet()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
Arc To()<edge_begin><edge_end>XYA Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Text Elt()<edge_begin><edge_end>Text()
Header Footer()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>VB Project Data(data)
Solution XML()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Shapes Collection()<edge_begin><edge_end>Page Elt()
Page Elt()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Arc To()<edge_begin><edge_end>Geom()
Event List()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Master Elt()
Move To()<edge_begin><edge_end>Geom()
Icon(value)<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Page Sheet()<edge_begin><edge_end>Master Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Style Sheets Collection()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Pages Collection()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>String()
Custom Property(name, data Type)<edge_begin><edge_end>Custom Properties Collection()
Geom()<edge_begin><edge_end>Line To()
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Masters Collection()
String Elt(value)<edge_begin><edge_end>String()
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Page Elt()
Shapes Collection()<edge_begin><edge_end>Master Elt()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shape Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
XYA Elt()<edge_begin><edge_end>XY Elt()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>String()
Colors Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
XYABCDE Elt()<edge_begin><edge_end>XYABCD Elt()
Shape Elt()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Face Names Table()
Spline Knot()<edge_begin><edge_end>XYA Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Windows Info()
Polyline To()<edge_begin><edge_end>Geom()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Colors Table()
Geom()<edge_begin><edge_end>IX Elt(i X)
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Fonts Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Elliptical Arc To()<edge_begin><edge_end>Geom()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Integer()
Connects Collection()<edge_begin><edge_end>Master Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>String()
Line To()<edge_begin><edge_end>XY Elt()
Document Settings Elt()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Sheet()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Boolean()
Spline Start()<edge_begin><edge_end>Geom()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Custom Properties Collection()
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Identified Elt(ID)
Style Sheet()<edge_begin><edge_end>Style Sheets Collection()
Geom()<edge_begin><edge_end>Infinite Line()
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Ellipse()<edge_begin><edge_end>XYABCD Elt()
Geom()<edge_begin><edge_end>NURBS To()
Icon(value)<edge_begin><edge_end>String()
Masters Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Spline Knot()<edge_begin><edge_end>Geom()
Geom()<edge_begin><edge_end>Elliptical Arc To()
Geom()<edge_begin><edge_end>Shape Elt()
Polyline To()<edge_begin><edge_end>XYA Elt()
XYAB Elt()<edge_begin><edge_end>XYA Elt()
Symbolic Input Event(name)<edge_begin><edge_end>Symbolic Event()
Symbolic Timeout Event()<edge_begin><edge_end>Symbolic Event()
Automaton(name)<edge_begin><edge_end>State(acceptor, id)
Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Transition()<edge_begin><edge_end>Abstract Transition()
Free Parameter(excluded Values)<edge_begin><edge_end>Parameter()
Automaton(name)<edge_begin><edge_end>Symbolic Timer(name)
State(acceptor, id)<edge_begin><edge_end>Abstract Transition()
Symbolic Event()<edge_begin><edge_end>Symbolic Parameter(name)
Symbolic Event Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Token Parameter Binding()<edge_begin><edge_end>Binding()
Transition()<edge_begin><edge_end>Event Guard()
Constant Binding()<edge_begin><edge_end>Binding()
Event()<edge_begin><edge_end>Fix Parameter(value)
Set Timer Action(to Value)<edge_begin><edge_end>Timer Action()
Abstract Transition()<edge_begin><edge_end>Action()
Token Parameter Binding()<edge_begin><edge_end>Symbolic Token Parameter()
Symbolic Timeout Event()<edge_begin><edge_end>Symbolic Timer(name)
State(acceptor, id)<edge_begin><edge_end>Token()
Complex Event Processor()<edge_begin><edge_end>Automaton(name)
Epsilon Transition()<edge_begin><edge_end>Abstract Transition()
Event Guard()<edge_begin><edge_end>Symbolic Event()
Complex Event Processor()<edge_begin><edge_end>Symbolic Input Event(name)
Event()<edge_begin><edge_end>Symbolic Event()
Fix Parameter(value)<edge_begin><edge_end>Parameter()
Abstract Transition()<edge_begin><edge_end>State(acceptor, id)
Automaton(name)<edge_begin><edge_end>Token()
Timer Action()<edge_begin><edge_end>Action()
Not Equivalent Relation()<edge_begin><edge_end>State(acceptor, id)
Symbolic Timer(name)<edge_begin><edge_end>Symbolic Timeout Event()
Token()<edge_begin><edge_end>State(acceptor, id)
Event Guard()<edge_begin><edge_end>Binding()
Article()<edge_begin><edge_end>Number Field(number)
Book()<edge_begin><edge_end>Isbn Field(isbn)
Bibtex Entry Types()<edge_begin><edge_end>Title Field(title)
Article()<edge_begin><edge_end>Volume Field(volume)
Bibtex Entry Types()<edge_begin><edge_end>Note Field(note)
Model()<edge_begin><edge_end>Bibtex Entry Types()
Article()<edge_begin><edge_end>Pages Field(pages)
Unknown Field()<edge_begin><edge_end>Unknown Type(type)
Unknown Field()<edge_begin><edge_end>Unknown Value(value)
Bibtex Entry Types()<edge_begin><edge_end>Cite Key(key)
Authors()<edge_begin><edge_end>Fullname(lastname, firstname)
Book()<edge_begin><edge_end>Bibtex Entry Types()
Article()<edge_begin><edge_end>Journal Field(journal)
Book()<edge_begin><edge_end>Publisher Field(publisher)
Bibtex Entry Types()<edge_begin><edge_end>Month Field(month)
Bibtex Entry Types()<edge_begin><edge_end>Unknown Field()
Article()<edge_begin><edge_end>Author Field()
Authors()<edge_begin><edge_end>Author Field()
Bibtex Entry Types()<edge_begin><edge_end>Year Field(year)
Net()<edge_begin><edge_end>Transition()
TP Arc()<edge_begin><edge_end>Transition()
TP Arc()<edge_begin><edge_end>Place()
Transition()<edge_begin><edge_end>Net()
Transition()<edge_begin><edge_end>TP Arc()
PT Arc()<edge_begin><edge_end>Arc()
PT Arc()<edge_begin><edge_end>Place()
Transition()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>Net()
PT Arc()<edge_begin><edge_end>Transition()
Net()<edge_begin><edge_end>Place()
Composite State()<edge_begin><edge_end>State(name)
State Machine(name)<edge_begin><edge_end>State(name)
State(name)<edge_begin><edge_end>Composite State()
U State()<edge_begin><edge_end>State(name)
U Transition()<edge_begin><edge_end>Transition(trigger, effect, name)
State Machine(name)<edge_begin><edge_end>Traced Class(trace)
Transition(trigger, effect, name)<edge_begin><edge_end>Traced Class(trace)
Initial State()<edge_begin><edge_end>State(name)
Transition(trigger, effect, name)<edge_begin><edge_end>State(name)
Final State()<edge_begin><edge_end>State(name)
State Machine(name)<edge_begin><edge_end>Transition(trigger, effect, name)
UI Control(variable Name, value Expression)<edge_begin><edge_end>UISUT Element(name, description, id)
UI State(is Initial, pic)<edge_begin><edge_end>UI Control(variable Name, value Expression)
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UI Condition()
UI Data Variable(constraint RE)<edge_begin><edge_end>UISUT Element(name, description, id)
UI Trigger()<edge_begin><edge_end>UISUT Element(name, description, id)
UISUT()<edge_begin><edge_end>UISUT Element(name, description, id)
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UI Trigger()
UI Statemachine()<edge_begin><edge_end>UI Transition(trigger Str, guard Str, action Str, script Str)
UISUT()<edge_begin><edge_end>UI Statemachine()
Final State()<edge_begin><edge_end>Abstract State()
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UI Data Variable(constraint RE)
Component Trigger()<edge_begin><edge_end>UI Trigger()
Application System()<edge_begin><edge_end>UISUT Element(name, description, id)
UI Statemachine()<edge_begin><edge_end>UISUT Element(name, description, id)
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>Abstract State()
UI Statemachine()<edge_begin><edge_end>UI Data Variable(constraint RE)
Abstract State()<edge_begin><edge_end>UI Transition(trigger Str, guard Str, action Str, script Str)
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UISUT Element(name, description, id)
Initial State()<edge_begin><edge_end>Abstract State()
User Trigger()<edge_begin><edge_end>UI Trigger()
Application System()<edge_begin><edge_end>UISUT()
UI State(is Initial, pic)<edge_begin><edge_end>UI Data Variable(constraint RE)
UI Statemachine()<edge_begin><edge_end>Abstract State()
Abstract State()<edge_begin><edge_end>UISUT Element(name, description, id)
Author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Review()<edge_begin><edge_end>activity()
Senior Reviewer URL()<edge_begin><edge_end>URL()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Co-author()
Acceptance()<edge_begin><edge_end>Decision()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Tutorial()<edge_begin><edge_end>Conference part()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Integer()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
abstract of paper()<edge_begin><edge_end>article()
Head Role()<edge_begin><edge_end>Role()
Document()<edge_begin><edge_end>Thing()
Conference applicant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
acceptance notification email()<edge_begin><edge_end>notification email()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Request()<edge_begin><edge_end>Activity()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Event()<edge_begin><edge_end>Approval Email()
Reviewed contribution()<edge_begin><edge_end>Review()
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
activity()<edge_begin><edge_end>article()
Event()<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Document()<edge_begin><edge_end>User()
notification()<edge_begin><edge_end>activity()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Important dates()<edge_begin><edge_end>date()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Co-author()<edge_begin><edge_end>Author()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
User()<edge_begin><edge_end>Thing()
human(e-mail, last name, first name)<edge_begin><edge_end>topic()
activity()<edge_begin><edge_end>intensity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Account()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Co-author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
Email()<edge_begin><edge_end>Document()
Reviewer()<edge_begin><edge_end>Bid()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Workshop()<edge_begin><edge_end>Event()
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Role()<edge_begin><edge_end>Administrator()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Administrator()<edge_begin><edge_end>Role()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Regular contribution()
Event Tracks()<edge_begin><edge_end>Event Setup()
Account()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Research Topic()<edge_begin><edge_end>Event Setup()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Author()<edge_begin><edge_end>User()
Chair()<edge_begin><edge_end>Committee()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
Reviewer Role()<edge_begin><edge_end>Role()
External Reviewer()<edge_begin><edge_end>Reviewer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Document()
Group Email()<edge_begin><edge_end>Email()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Topic()<edge_begin><edge_end>Conference part()
Committee()<edge_begin><edge_end>Chair()
Conference Chair()<edge_begin><edge_end>Chairman()
Event Creation()<edge_begin><edge_end>Activity()
Event Setup()<edge_begin><edge_end>Event()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Regular contribution()<edge_begin><edge_end>Written contribution()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Track()<edge_begin><edge_end>Conference part()
Reviewer()<edge_begin><edge_end>Thing()
start date of conference()<edge_begin><edge_end>date of conference()
Chair()<edge_begin><edge_end>Committee member()
Conference document()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
human(e-mail, last name, first name)<edge_begin><edge_end>String()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Steering committee()<edge_begin><edge_end>Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Author()
Active conference participant()<edge_begin><edge_end>Conference participant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Review()<edge_begin><edge_end>Conference document()
Symposium()<edge_begin><edge_end>Event()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Passive conference participant()<edge_begin><edge_end>Conference participant()
Conference contribution()<edge_begin><edge_end>Conference document()
Activity()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
summary of reviews()<edge_begin><edge_end>article()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
paper assignment()<edge_begin><edge_end>Program Committee member()
Conference contributor()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Contribution co-author()<edge_begin><edge_end>Regular author()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Inforamtion()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Reviewer()<edge_begin><edge_end>Review()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Administrator()
Conference part()<edge_begin><edge_end>Topic()
Detail()<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
Reviewer()<edge_begin><edge_end>Administrator()
Role()<edge_begin><edge_end>Thing()
Invited talk()<edge_begin><edge_end>Presentation()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Co-chair()<edge_begin><edge_end>Committee member()
Committee member()<edge_begin><edge_end>Committee()
article()<edge_begin><edge_end>activity()
Conference Member()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Event()
Administrator()<edge_begin><edge_end>Reviewer()
conference setup()<edge_begin><edge_end>date()
Active conference participant()<edge_begin><edge_end>Presentation()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
article()<edge_begin><edge_end>classification()
Submission()<edge_begin><edge_end>Document()
Conference participant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
end date of conference()<edge_begin><edge_end>date of conference()
Conference announcement()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>date()
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Event()<edge_begin><edge_end>Event Setup()
Registration()<edge_begin><edge_end>Activity()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>String()
Review()<edge_begin><edge_end>article()
Regular author()<edge_begin><edge_end>Conference contributor()
Review()<edge_begin><edge_end>classification()
Committee()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
User()<edge_begin><edge_end>Document()
Notification Email()<edge_begin><edge_end>Email()
Event()<edge_begin><edge_end>Administrator()
reviewing proces()<edge_begin><edge_end>activity()
Information for participants()<edge_begin><edge_end>Conference document()
Call for participation()<edge_begin><edge_end>Conference document()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event()
Organizer()<edge_begin><edge_end>Thing()
Conference part()<edge_begin><edge_end>Track-workshop chair()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>article()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Committee member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Author()<edge_begin><edge_end>Conference Member()
camera-ready submission date()<edge_begin><edge_end>date()
Document()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference document()
Conference volume(has a location)<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Reviewer()<edge_begin><edge_end>Reviewer()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Administrator()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Event()<edge_begin><edge_end>Event Tracks()
Poster()<edge_begin><edge_end>Conference contribution()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Organizing committee()<edge_begin><edge_end>Committee()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>unsigned Long()
rejection notification email()<edge_begin><edge_end>notification email()
Administrator()<edge_begin><edge_end>User()
Review()<edge_begin><edge_end>Reviewer()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
managing of conference process()<edge_begin><edge_end>activity()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Approval Email()<edge_begin><edge_end>Email()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Author Not Reviewer()<edge_begin><edge_end>Author()
Full Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Submission Template()<edge_begin><edge_end>Event Setup()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>String()
Author Role()<edge_begin><edge_end>Role()
Track-workshop chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Committee()<edge_begin><edge_end>Co-chair()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
summary of reviews()<edge_begin><edge_end>activity()
Corresponding Author()<edge_begin><edge_end>Author()
User()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
article()<edge_begin><edge_end>human(e-mail, last name, first name)
Rejection Email()<edge_begin><edge_end>Email()
date of conference()<edge_begin><edge_end>date()
Workshop()<edge_begin><edge_end>Conference part()
Committe Role()<edge_begin><edge_end>Role()
Program committee()<edge_begin><edge_end>Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Reviewer()
activity()<edge_begin><edge_end>activity()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Decision()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
abstract submission date()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Approval Email()<edge_begin><edge_end>Event()
submission process()<edge_begin><edge_end>activity()
Review()<edge_begin><edge_end>Reviewed contribution()
Event URL()<edge_begin><edge_end>Event()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Conference Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Written contribution()<edge_begin><edge_end>Conference contribution()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Subject Area()
Co-chair()<edge_begin><edge_end>Committee()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Conference www(has a URL)<edge_begin><edge_end>String()
Email Template()<edge_begin><edge_end>Event Setup()
Call for paper()<edge_begin><edge_end>Conference document()
Event Approval()<edge_begin><edge_end>Activity()
Misc()<edge_begin><edge_end>Help Request()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
full paper submission date()<edge_begin><edge_end>date()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Review Form Setup()<edge_begin><edge_end>Review Form()
Review()<edge_begin><edge_end>Document()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Presentation()<edge_begin><edge_end>Conference contribution()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Short Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Associated Chair()<edge_begin><edge_end>Chairman()
review form()<edge_begin><edge_end>article()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Senior Program Committee member()<edge_begin><edge_end>activity()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Reviewer()<edge_begin><edge_end>External Reviewer()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
conference setup()<edge_begin><edge_end>topic()
bidding of reviewer()<edge_begin><edge_end>activity()
Contact Person URL()<edge_begin><edge_end>URL()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>activity()
Content(name)<edge_begin><edge_end>Automaton(name)
Automaton(name)<edge_begin><edge_end>Participant(name)
Transition()<edge_begin><edge_end>Operation(name)
Content(name)<edge_begin><edge_end>Participant(name)
State(name)<edge_begin><edge_end>Message Sequence()
Message()<edge_begin><edge_end>Participant(name)
Automaton(name)<edge_begin><edge_end>Transition()
Message Sequence()<edge_begin><edge_end>Message()
Transition()<edge_begin><edge_end>Value(value)
Automaton(name)<edge_begin><edge_end>State(name)
Transition()<edge_begin><edge_end>State(name)
Content(name)<edge_begin><edge_end>Message()
Content(name)<edge_begin><edge_end>State(name)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
Regular State()<edge_begin><edge_end>Vertex()
Statechart()<edge_begin><edge_end>Named Element(name)
Reaction()<edge_begin><edge_end>Trigger()
Vertex()<edge_begin><edge_end>Region(priority)
Synchronization()<edge_begin><edge_end>Pseudostate()
Region(priority)<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
Declaration()<edge_begin><edge_end>Named Element(name)
Statechart()<edge_begin><edge_end>Reactive Element()
Variable()<edge_begin><edge_end>Declaration()
Pseudostate()<edge_begin><edge_end>Vertex()
Event()<edge_begin><edge_end>Declaration()
Composite Element()<edge_begin><edge_end>Region(priority)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Transition(priority)<edge_begin><edge_end>Vertex()
Reactive Element()<edge_begin><edge_end>Reaction()
Choice(kind)<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Scope()<edge_begin><edge_end>Event()
Vertex()<edge_begin><edge_end>Transition(priority)
Scope()<edge_begin><edge_end>Declaration()
Region(priority)<edge_begin><edge_end>Named Element(name)
Final State()<edge_begin><edge_end>Regular State()
Entry(kind)<edge_begin><edge_end>Pseudostate()
Scope()<edge_begin><edge_end>Variable()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Transition(priority)<edge_begin><edge_end>Reaction()
Mandatory Column()<edge_begin><edge_end>Column Definition()
Grammar(name)<edge_begin><edge_end>Element(name)
Block()<edge_begin><edge_end>Column(name, multiple)
Column(name, multiple)<edge_begin><edge_end>Column Definition()
Block Spec()<edge_begin><edge_end>Block()
Grammar(name)<edge_begin><edge_end>Block()
Row Spec(header)<edge_begin><edge_end>Column Spec()
Optional Column()<edge_begin><edge_end>Column Definition()
Row Spec(header)<edge_begin><edge_end>Syntax(is id, is string, is int, token)
Rule()<edge_begin><edge_end>Syntax Seq()
Column Definition()<edge_begin><edge_end>Column Spec()
Block Spec()<edge_begin><edge_end>Column Spec()
Syntax Seq()<edge_begin><edge_end>Syntax(is id, is string, is int, token)
Table()<edge_begin><edge_end>Foreign Key()
Table()<edge_begin><edge_end>R Model Element(kind, name)
Foreign Key()<edge_begin><edge_end>Column(type)
Column(type)<edge_begin><edge_end>Key()
Column(type)<edge_begin><edge_end>Foreign Key()
Table()<edge_begin><edge_end>Schema()
Foreign Key()<edge_begin><edge_end>Table()
Key()<edge_begin><edge_end>Column(type)
Table()<edge_begin><edge_end>Column(type)
Table()<edge_begin><edge_end>Key()
Column(type)<edge_begin><edge_end>Table()
Key()<edge_begin><edge_end>Table()
Column(type)<edge_begin><edge_end>R Model Element(kind, name)
Schema()<edge_begin><edge_end>R Model Element(kind, name)
Key()<edge_begin><edge_end>R Model Element(kind, name)
SMACH State Machine(Skill Interface)<edge_begin><edge_end>SMACH Transition(name)
SMACH State Machine(Skill Interface)<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Init Action State()<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Final State(type)<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Action State()<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
SMACH Transition(name)<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
SMACH State Machine(Skill Interface)<edge_begin><edge_end>Final State(type)
Service State()<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Petri Net()<edge_begin><edge_end>Arc(weight)
Trans To Place Arc()<edge_begin><edge_end>Arc(weight)
Type(name)<edge_begin><edge_end>Primitive Attribute(name, prim Type)
Place()<edge_begin><edge_end>Identifiable Element(name, author)
Place To Trans Arc()<edge_begin><edge_end>Arc(weight)
Trans To Place Arc()<edge_begin><edge_end>Place()
Place To Trans Arc()<edge_begin><edge_end>Transition()
Place()<edge_begin><edge_end>Type(name)
Petri Net()<edge_begin><edge_end>Place()
Petri Net()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Identifiable Element(name, author)
Place To Trans Arc()<edge_begin><edge_end>Place()
Trans To Place Arc()<edge_begin><edge_end>Transition()
F Key()<edge_begin><edge_end>Scheme(name)
P Key()<edge_begin><edge_end>Column(name)
Scheme(name)<edge_begin><edge_end>Table(name)
Table(name)<edge_begin><edge_end>Column(name)
Table(name)<edge_begin><edge_end>P Key()
Scheme(name)<edge_begin><edge_end>F Key()
F Key()<edge_begin><edge_end>P Key()
F Key()<edge_begin><edge_end>Column(name)
Place()<edge_begin><edge_end>Net()
Net()<edge_begin><edge_end>Place()
TP Arc()<edge_begin><edge_end>Transition()
Place()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>TP Arc()
TP Arc()<edge_begin><edge_end>Place()
Transition()<edge_begin><edge_end>PT Arc()
Net()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Net()
Guard()<edge_begin><edge_end>Model Element(name)
Transition()<edge_begin><edge_end>State Vertex()
Activity Graph()<edge_begin><edge_end>Partition()
Object Flow State()<edge_begin><edge_end>Model Element(name)
Transition()<edge_begin><edge_end>Guard()
Object Flow State()<edge_begin><edge_end>State()
Composite State()<edge_begin><edge_end>State()
State Vertex()<edge_begin><edge_end>Model Element(name)
Final State()<edge_begin><edge_end>State()
Guard()<edge_begin><edge_end>Boolean Expression(language, body)
State Machine()<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>Transition()
Model Element(name)<edge_begin><edge_end>Partition()
Action State(is Dynamic)<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State Vertex()
Pseudostate(kind)<edge_begin><edge_end>State Vertex()
Composite State()<edge_begin><edge_end>State Vertex()
State Vertex()<edge_begin><edge_end>Transition()
Petri Net(name)<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Petri Net(name)<edge_begin><edge_end>Input Arc(weight)
Input Arc(weight)<edge_begin><edge_end>Transition(name)
Output Arc(weight)<edge_begin><edge_end>Transition(name)
Resource()<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Petri Net(name)<edge_begin><edge_end>Transition(name)
Petri Net(name)<edge_begin><edge_end>Output Arc(weight)
Output Arc(weight)<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Token Multiset Expression()<edge_begin><edge_end>I Entity Identifiable(id)
Marking()<edge_begin><edge_end>Place Marking()
Arc TP()<edge_begin><edge_end>Token Variadic Expression()
Arc PT()<edge_begin><edge_end>Token Variadic Expression()
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
N Pnet Marked()<edge_begin><edge_end>Marking()
Arc()<edge_begin><edge_end>I Net Element(name, comment)
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>Point()
Arc PT()<edge_begin><edge_end>Transition()
N Pnet()<edge_begin><edge_end>Synchronization(kind, key)
N Pnet()<edge_begin><edge_end>I Diagram Holder()
Token Type Element Net()<edge_begin><edge_end>Token Type()
Token Type Atomic()<edge_begin><edge_end>Token Type()
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Arc PTSN()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Arc PTSN()
Monom(power)<edge_begin><edge_end>Variable(name)
Transition()<edge_begin><edge_end>Arc TP()
Token Expression Binding()<edge_begin><edge_end>Token Variadic Expression()
Monom Constant(power)<edge_begin><edge_end>I Entity Identifiable(id)
High Level Petri Net()<edge_begin><edge_end>Node()
High Level Petri Net Marked()<edge_begin><edge_end>Marking()
Arc PT()<edge_begin><edge_end>Place()
I Diagram Holder()<edge_begin><edge_end>I Net Element(name, comment)
Token Net()<edge_begin><edge_end>Token()
Element Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Transition SN()
Place Marking()<edge_begin><edge_end>Token Multi Set()
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Place SN()
Node()<edge_begin><edge_end>High Level Petri Net()
Place Marking()<edge_begin><edge_end>I Entity Identifiable(id)
N Pnet()<edge_begin><edge_end>Net Constant()
Context Variable()<edge_begin><edge_end>Variable(name)
Token Multi Set()<edge_begin><edge_end>I Entity Identifiable(id)
Token Atomic()<edge_begin><edge_end>Token()
Monom(power)<edge_begin><edge_end>I Entity Identifiable(id)
Token Binding()<edge_begin><edge_end>Token()
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
Token Type Element Net()<edge_begin><edge_end>Element Net Marked()
Variable(name)<edge_begin><edge_end>Context Variable()
Transition()<edge_begin><edge_end>Node()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>I Entity Identifiable(id)
Token Type Atomic()<edge_begin><edge_end>Token Atomic()
Transition Synchronized()<edge_begin><edge_end>Transition()
Token Multi Set()<edge_begin><edge_end>Token Weight(weight)
Token Type Element Net()<edge_begin><edge_end>Token Net()
Variable(name)<edge_begin><edge_end>I Entity Identifiable(id)
N Pnet()<edge_begin><edge_end>Token Type Atomic()
I Net Element(name, comment)<edge_begin><edge_end>I Entity Identifiable(id)
Token Expression Binding()<edge_begin><edge_end>Token Binding()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
Token Multiset Expression()<edge_begin><edge_end>Token Multi Set()
Transition Synchronized()<edge_begin><edge_end>Synchronization(kind, key)
Token Atomic()<edge_begin><edge_end>Atom()
Token Net()<edge_begin><edge_end>Element Net Marked()
Node()<edge_begin><edge_end>I Net Element(name, comment)
Token Binding()<edge_begin><edge_end>I Entity Identifiable(id)
Token()<edge_begin><edge_end>I Net Element(name, comment)
N Pnet()<edge_begin><edge_end>N Pnet Marked()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Transition SN()
Synchronization(kind, key)<edge_begin><edge_end>Transition Synchronized()
Token Type Atomic()<edge_begin><edge_end>Atom()
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
N Pnet Marked()<edge_begin><edge_end>N Pnet()
NPN Diagram Net System()<edge_begin><edge_end>High Level Petri Net()
Token Variadic Expression()<edge_begin><edge_end>Monom(power)
High Level Petri Net()<edge_begin><edge_end>I Net Element(name, comment)
I Diagram Holder()<edge_begin><edge_end>NPN Diagram Net System()
Token Multiset Expression()<edge_begin><edge_end>Token Type()
Arc PT()<edge_begin><edge_end>Arc()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Place SN()
Transition()<edge_begin><edge_end>Context Variable()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
Place()<edge_begin><edge_end>Arc PT()
Net Constant()<edge_begin><edge_end>I Net Element(name, comment)
NPN Symbol Node SN(constraints)<edge_begin><edge_end>NPN Diagram Net System()
Token Type Element Net()<edge_begin><edge_end>I Diagram Holder()
High Level Petri Net()<edge_begin><edge_end>Arc()
Place()<edge_begin><edge_end>Arc TP()
Context Variable()<edge_begin><edge_end>I Entity Identifiable(id)
NPN Symbol Node SN(constraints)<edge_begin><edge_end>I Entity Identifiable(id)
Arc()<edge_begin><edge_end>High Level Petri Net()
Element Net Marked()<edge_begin><edge_end>Marking()
Transition()<edge_begin><edge_end>Arc PT()
Token Variadic Expression()<edge_begin><edge_end>Monom Constant(power)
Token Expression Binding()<edge_begin><edge_end>I Entity Identifiable(id)
NPN Symbol Node SN(constraints)<edge_begin><edge_end>Node()
Synchronization(kind, key)<edge_begin><edge_end>I Net Element(name, comment)
High Level Petri Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
Token Multi Set()<edge_begin><edge_end>Token Type()
High Level Petri Net Marked()<edge_begin><edge_end>High Level Petri Net()
Place()<edge_begin><edge_end>Token Type()
Atom()<edge_begin><edge_end>I Net Element(name, comment)
Marking()<edge_begin><edge_end>I Net Element(name, comment)
Token Net()<edge_begin><edge_end>Token Type Element Net()
Token Variadic Expression()<edge_begin><edge_end>I Net Element(name, comment)
NPN Diagram Net System()<edge_begin><edge_end>I Entity Identifiable(id)
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>NPN Diagram Net System()
Net Constant()<edge_begin><edge_end>Token Binding()
Event URL()<edge_begin><edge_end>Event()
Conference part()<edge_begin><edge_end>Track-workshop chair()
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Reviewer()<edge_begin><edge_end>User()
Regular author()<edge_begin><edge_end>Conference contributor()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Activity()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Event()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Associated Chair()<edge_begin><edge_end>Chairman()
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
Conference www(has a URL)<edge_begin><edge_end>Conference document(has a date of issue)
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Administrator()<edge_begin><edge_end>User()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Misc()<edge_begin><edge_end>Help Request()
Important dates(is an abstract submission date, is a full paper submission date, is an ending date, is a date of acceptance announcement, is a date of camera ready paper submission, is a starting date)<edge_begin><edge_end>Conference volume(has a location)
External Reviewer()<edge_begin><edge_end>Reviewer()
Meta-Review()<edge_begin><edge_end>Review()
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Assistance()<edge_begin><edge_end>Help Request()
Reviewer()<edge_begin><edge_end>Conference Member()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Conference document(has a date of issue)
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Corresponding Author()<edge_begin><edge_end>Author()
Event()<edge_begin><edge_end>Event Setup()
Organizer()<edge_begin><edge_end>Thing()
Call for paper()<edge_begin><edge_end>Conference document(has a date of issue)
Reviewer Role()<edge_begin><edge_end>Role()
Submission Template()<edge_begin><edge_end>Event Setup()
Chairman()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>Review()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Active conference participant()<edge_begin><edge_end>Presentation()
Reviewer()<edge_begin><edge_end>External Reviewer()
Admin Role()<edge_begin><edge_end>Role()
Committee()<edge_begin><edge_end>Co-chair()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Review preference(has a degree)<edge_begin><edge_end>Thing()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Written contribution()<edge_begin><edge_end>Conference contribution()
Document()<edge_begin><edge_end>Thing()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Group Email()<edge_begin><edge_end>Email()
Symposium()<edge_begin><edge_end>Event()
Event Tracks()<edge_begin><edge_end>Event Setup()
Committee()<edge_begin><edge_end>Chair()
Research Topic()<edge_begin><edge_end>Event Setup()
Associated Chair()<edge_begin><edge_end>Conference Member()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Workshop()<edge_begin><edge_end>Event()
Steering committee()<edge_begin><edge_end>Committee()
Poster()<edge_begin><edge_end>Conference contribution()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Document()
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Conference applicant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Conference Chair()<edge_begin><edge_end>Conference Member()
Important dates(is an abstract submission date, is a full paper submission date, is an ending date, is a date of acceptance announcement, is a date of camera ready paper submission, is a starting date)<edge_begin><edge_end>date()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Approval Email()<edge_begin><edge_end>Email()
Active conference participant()<edge_begin><edge_end>Conference participant()
Review Form()<edge_begin><edge_end>Event Setup()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Conference volume(has a location)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Presentation()<edge_begin><edge_end>Active conference participant()
Co-chair()<edge_begin><edge_end>Committee member()
Program committee()<edge_begin><edge_end>Committee()
Event URL()<edge_begin><edge_end>URL()
Bid()<edge_begin><edge_end>Reviewer()
Event()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Event Approval()<edge_begin><edge_end>Activity()
Submission()<edge_begin><edge_end>Document()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Account()
Head Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Activity()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Committee()<edge_begin><edge_end>Committee member()
Chairman()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Review()<edge_begin><edge_end>Conference document(has a date of issue)
Rejection()<edge_begin><edge_end>Decision()
Presentation()<edge_begin><edge_end>Conference contribution()
Organizing committee()<edge_begin><edge_end>Committee()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Approval Email()<edge_begin><edge_end>Event()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Administrator()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Co-author()<edge_begin><edge_end>Author()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Regular contribution()<edge_begin><edge_end>Written contribution()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Email()<edge_begin><edge_end>Document()
Role()<edge_begin><edge_end>Administrator()
Track-workshop chair()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Conference part()
Abstract()<edge_begin><edge_end>Extended abstract()
Review()<edge_begin><edge_end>Document()
Event()<edge_begin><edge_end>Thing()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Author()<edge_begin><edge_end>User()
Email Template()<edge_begin><edge_end>Event Setup()
Conference www(has a URL)<edge_begin><edge_end>String()
Committee()<edge_begin><edge_end>User()
Conference contribution()<edge_begin><edge_end>Conference document(has a date of issue)
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Detail()<edge_begin><edge_end>Thing()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title)
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Chair()<edge_begin><edge_end>Committee()
Contribution co-author()<edge_begin><edge_end>Regular author()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Bid()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Administrator()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Committee member()<edge_begin><edge_end>Committee()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Co-chair()<edge_begin><edge_end>Committee()
Conference document(has a date of issue)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Conference announcement()<edge_begin><edge_end>Conference document(has a date of issue)
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Inforamtion()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Event()
Track()<edge_begin><edge_end>Conference part()
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title)
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Author Role()<edge_begin><edge_end>Role()
Reviewed contribution()<edge_begin><edge_end>Review()
Conference volume(has a location)<edge_begin><edge_end>Important dates(is an abstract submission date, is a full paper submission date, is an ending date, is a date of acceptance announcement, is a date of camera ready paper submission, is a starting date)
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Template()<edge_begin><edge_end>Document()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Account()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Conference Member()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Conference part()<edge_begin><edge_end>Topic()
Request()<edge_begin><edge_end>Activity()
Chair()<edge_begin><edge_end>Committee member()
Event()<edge_begin><edge_end>Approval Email()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Preview()<edge_begin><edge_end>Review Form()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Conference Chair()<edge_begin><edge_end>Chairman()
Invited talk()<edge_begin><edge_end>Presentation()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Reviewer()<edge_begin><edge_end>Reviewer()
Conference document(has a date of issue)<edge_begin><edge_end>date()
Role()<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Author Not Reviewer()<edge_begin><edge_end>Author()
Information for participants()<edge_begin><edge_end>Conference document(has a date of issue)
Topic()<edge_begin><edge_end>Conference part()
Goal()<edge_begin><edge_end>Performative Requirement(start Time)
Differential Relation(lower Bound, upper Bound, operator, value)<edge_begin><edge_end>Parameter(type, unit, value, metric)
Domain Assumption()<edge_begin><edge_end>Definable Requirement(time, state)
Configuration()<edge_begin><edge_end>Parameter(type, unit, value, metric)
Goal Model(internal Id)<edge_begin><edge_end>Differential Relation(lower Bound, upper Bound, operator, value)
Goal()<edge_begin><edge_end>Goal Model(internal Id)
Requirement(refinement Type)<edge_begin><edge_end>Requirement(refinement Type)
Quality Constraint()<edge_begin><edge_end>Softgoal()
Configuration()<edge_begin><edge_end>Goal Model(internal Id)
Softgoal()<edge_begin><edge_end>Requirement(refinement Type)
Softgoal()<edge_begin><edge_end>Quality Constraint()
Actor()<edge_begin><edge_end>Goal Model(internal Id)
Definable Requirement(time, state)<edge_begin><edge_end>Requirement(refinement Type)
Goal Model(internal Id)<edge_begin><edge_end>Actor()
Quality Constraint()<edge_begin><edge_end>Definable Requirement(time, state)
Goal Model(internal Id)<edge_begin><edge_end>Goal()
Performative Requirement(start Time)<edge_begin><edge_end>Definable Requirement(time, state)
Aw Req(increment Coefficient)<edge_begin><edge_end>Definable Requirement(time, state)
Wait Condition(strict, requested)<edge_begin><edge_end>Condition()
Enum Value()<edge_begin><edge_end>SmlEEnum(name)
Ranges For Parameter()<edge_begin><edge_end>Abstract Ranges()
Parallel()<edge_begin><edge_end>Interaction Fragment()
Message()<edge_begin><edge_end>Sml E Typed Element(name)
Variable Value()<edge_begin><edge_end>Variable(name)
Scenario(singular, kind, name)<edge_begin><edge_end>Interaction()
Message()<edge_begin><edge_end>Role(static, name)
Modal Message(strict, requested)<edge_begin><edge_end>Sml E Typed Element(name)
Variable Fragment()<edge_begin><edge_end>Interaction Fragment()
Enum Ranges()<edge_begin><edge_end>SmlEEnumLiteral(name)
Enum Ranges()<edge_begin><edge_end>Abstract Ranges()
Alternative()<edge_begin><edge_end>Interaction Fragment()
Specification(name)<edge_begin><edge_end>Sml E Package(name)
Specification(name)<edge_begin><edge_end>Import(import URI)
Expression And Variables()<edge_begin><edge_end>Expression Or Region()
Variable Binding Parameter()<edge_begin><edge_end>Variable Value()
Variable Assignment()<edge_begin><edge_end>Variable Expression()
Collaboration(name)<edge_begin><edge_end>Sml E Package(name)
Constraint Block()<edge_begin><edge_end>Message()
Feature Access()<edge_begin><edge_end>Value()
Random Parameter()<edge_begin><edge_end>Parameter Expression()
Condition()<edge_begin><edge_end>Interaction Fragment()
Variable Assignment()<edge_begin><edge_end>Variable Declaration(name)
Specification(name)<edge_begin><edge_end>Event Parameter Ranges()
Collaboration(name)<edge_begin><edge_end>Import(import URI)
Loop()<edge_begin><edge_end>Loop Condition()
Case()<edge_begin><edge_end>Interaction()
Expression Region()<edge_begin><edge_end>Expression Or Region()
Role Binding Constraint()<edge_begin><edge_end>Role(static, name)
Event Parameter Ranges()<edge_begin><edge_end>Ranges For Parameter()
Interrupt Condition()<edge_begin><edge_end>Condition()
Variable Declaration(name)<edge_begin><edge_end>Expression()
Loop Condition()<edge_begin><edge_end>Condition Expression()
Integer Value(value)<edge_begin><edge_end>Value()
Integer Ranges(min, max, values)<edge_begin><edge_end>Abstract Ranges()
Violation Condition()<edge_begin><edge_end>Condition()
Feature Access Binding Expression()<edge_begin><edge_end>Feature Access()
Document()<edge_begin><edge_end>Expression Region()
Condition()<edge_begin><edge_end>Condition Expression()
Specification(name)<edge_begin><edge_end>Collaboration(name)
Variable Expression()<edge_begin><edge_end>Expression()
Expression()<edge_begin><edge_end>Expression And Variables()
Typed Variable Declaration(name)<edge_begin><edge_end>SmlEClassifier(name)
Variable Value()<edge_begin><edge_end>Value()
Role(static, name)<edge_begin><edge_end>SmlEClass(name)
Interaction()<edge_begin><edge_end>Constraint Block()
Parallel()<edge_begin><edge_end>Interaction()
Loop()<edge_begin><edge_end>Interaction()
Specification(name)<edge_begin><edge_end>SmlEClass(name)
Role Binding Constraint()<edge_begin><edge_end>Binding Expression()
Variable Binding Parameter()<edge_begin><edge_end>Parameter Expression()
Ranges For Parameter()<edge_begin><edge_end>Sml E Typed Element(name)
Alternative()<edge_begin><edge_end>Case()
Modal Message(strict, requested)<edge_begin><edge_end>Interaction Fragment()
Modal Message(strict, requested)<edge_begin><edge_end>Role(static, name)
Interaction()<edge_begin><edge_end>Interaction Fragment()
Parameter Binding()<edge_begin><edge_end>Parameter Expression()
Enum Value()<edge_begin><edge_end>Value()
Expression Parameter()<edge_begin><edge_end>Parameter Expression()
Specification(name)<edge_begin><edge_end>Sml E Typed Element(name)
Condition Expression()<edge_begin><edge_end>Expression()
Modal Message(strict, requested)<edge_begin><edge_end>Parameter Binding()
Typed Variable Declaration(name)<edge_begin><edge_end>Variable Expression()
Document()<edge_begin><edge_end>Import(import URI)
Enum Value()<edge_begin><edge_end>SmlEEnumLiteral(name)
Case()<edge_begin><edge_end>Case Condition()
Expression Parameter()<edge_begin><edge_end>Expression()
Unary Operation Expression(operator)<edge_begin><edge_end>Expression()
Value()<edge_begin><edge_end>Expression()
Scenario(singular, kind, name)<edge_begin><edge_end>Role Binding Constraint()
Variable Expression()<edge_begin><edge_end>Expression And Variables()
Collaboration(name)<edge_begin><edge_end>Scenario(singular, kind, name)
XML Value Function Document(returning Option)<edge_begin><edge_end>XML Value Function Document Content()
XML Value Function PI(target Name, returning Option)<edge_begin><edge_end>XML Value Function PI Content()
XML Value Function Comment(returning Option)<edge_begin><edge_end>XML Value Function Comment Content()
XML Value Function Concat Content Item()<edge_begin><edge_end>XML Value Function Concat(returning Option)
XML Value Function Text Content()<edge_begin><edge_end>XML Value Function Text(returning Option)
XML Value Function Forest(null Handling Option, returning Option)<edge_begin><edge_end>XML Namespaces Declaration()
XML Value Function Document(returning Option)<edge_begin><edge_end>XML Value Function()
XML Namespaces Declaration()<edge_begin><edge_end>XML Value Function Forest(null Handling Option, returning Option)
XML Namespaces Declaration()<edge_begin><edge_end>XML Value Function Element(element Name, returning Option)
XML Serialize Function Target()<edge_begin><edge_end>XML Serialize Function(content Option, serialize Version, declaration Option)
XML Namespace Declaration Default(no Default)<edge_begin><edge_end>XML Namespace Declaration Item(uri)
XML Value Function Concat(returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Forest(null Handling Option, returning Option)<edge_begin><edge_end>XML Value Function Forest Content Item()
XML Serialize Function(content Option, serialize Version, declaration Option)<edge_begin><edge_end>XML Serialize Function Encoding(encoding Name)
XML Value Function Parse Content()<edge_begin><edge_end>XML Value Function Parse(content Option, whitespace Handling Option)
XML Value Function Validate Element()<edge_begin><edge_end>XML Value Function Validate According To()
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Value Function()
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Value Function Query(empty Handling Option)
XML Value Function Concat(returning Option)<edge_begin><edge_end>XML Value Function Concat Content Item()
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Value Function Element Content List(null Handling Option)
XML Value Function Validate(content Option)<edge_begin><edge_end>XML Value Function()
XML Table Function(table Row Pattern)<edge_begin><edge_end>XML Namespaces Declaration()
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Predicate Exists()
XML Value Function Validate According To Identifier(schema Name, registered XML Schema Name)<edge_begin><edge_end>XML Value Function Validate According To()
XML Aggregate Function(returning Option)<edge_begin><edge_end>XML Aggregate Sort Specification()
XML Predicate Exists()<edge_begin><edge_end>XML Query Expression(xquery Expr Content)
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Namespaces Declaration()
XML Value Function Comment(returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Text(returning Option)<edge_begin><edge_end>XML Value Function Text Content()
XML Predicate Content()<edge_begin><edge_end>XML Predicate()
XML Serialize Function(content Option, serialize Version, declaration Option)<edge_begin><edge_end>XML Serialize Function Target()
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Attributes Declaration()
XML Value Function Validate Element Name()<edge_begin><edge_end>XML Value Function Validate Element()
XML Predicate Exists()<edge_begin><edge_end>XML Query Argument List(passing Mechanism)
XML Value Function PI(target Name, returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Text(returning Option)<edge_begin><edge_end>XML Value Function()
XML Table Function(table Row Pattern)<edge_begin><edge_end>XML Query Argument List(passing Mechanism)
XML Table Column Definition Regular(passing Option, table Column Pattern)<edge_begin><edge_end>XML Table Column Definition Item()
XML Value Function Validate Element()<edge_begin><edge_end>XML Value Function Validate Element Namespace(no Namespace, namespace URI)
XML Value Function Validate According To URI(no Namespace, target Namespace URI, schema Location URI)<edge_begin><edge_end>XML Value Function Validate According To()
XML Predicate Exists()<edge_begin><edge_end>XML Predicate()
XML Value Function Forest Content Item()<edge_begin><edge_end>XML Value Function Forest(null Handling Option, returning Option)
XML Table Column Definition Item()<edge_begin><edge_end>XML Table Function(table Row Pattern)
XML Namespace Declaration Item(uri)<edge_begin><edge_end>XML Namespaces Declaration()
XML Attributes Declaration()<edge_begin><edge_end>XML Attribute Declaration Item()
XML Value Function Element Content List(null Handling Option)<edge_begin><edge_end>XML Value Function Element(element Name, returning Option)
XML Value Function Query Returning(returning Option, passing Option)<edge_begin><edge_end>XML Value Function Query(empty Handling Option)
XML Namespace Declaration Prefix(prefix)<edge_begin><edge_end>XML Namespace Declaration Item(uri)
XML Namespaces Declaration()<edge_begin><edge_end>XML Table Function(table Row Pattern)
XML Value Function Query(empty Handling Option)<edge_begin><edge_end>XML Query Expression(xquery Expr Content)
XML Value Function Validate(content Option)<edge_begin><edge_end>XML Value Function Validate According To()
XML Query Expression(xquery Expr Content)<edge_begin><edge_end>XML Predicate Exists()
XML Aggregate Sort Specification()<edge_begin><edge_end>XML Aggregate Function(returning Option)
XML Attribute Declaration Item()<edge_begin><edge_end>XML Attributes Declaration()
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Query Argument Item(passing Mechanism)
XML Value Function Document Content()<edge_begin><edge_end>XML Value Function Document(returning Option)
XML Value Function Query(empty Handling Option)<edge_begin><edge_end>XML Query Argument List(passing Mechanism)
XML Value Function Validate Element()<edge_begin><edge_end>XML Value Function Validate Element Name()
XML Value Function Element Content List(null Handling Option)<edge_begin><edge_end>XML Value Function Element Content Item()
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Table Function(table Row Pattern)
XML Value Function Validate Element Namespace(no Namespace, namespace URI)<edge_begin><edge_end>XML Value Function Validate Element()
XML Table Column Definition Ordinality()<edge_begin><edge_end>XML Table Column Definition Item()
XML Predicate Valid()<edge_begin><edge_end>XML Predicate()
XML Value Function Forest(null Handling Option, returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Parse(content Option, whitespace Handling Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Query(empty Handling Option)<edge_begin><edge_end>XML Value Function()
XML Namespaces Declaration()<edge_begin><edge_end>XML Namespace Declaration Item(uri)
m State(name)<edge_begin><edge_end>m State(name)
m Comp(type, name)<edge_begin><edge_end>m Port(name, io, type)
m FSM(name)<edge_begin><edge_end>m Comp(type, name)
m FSM(name)<edge_begin><edge_end>m State(name)
m FSM(name)<edge_begin><edge_end>m Variable(name, type)
m Port(name, io, type)<edge_begin><edge_end>m Variable(name, type)
m State(name)<edge_begin><edge_end>m Variable(name, type)
m Comp(type, name)<edge_begin><edge_end>m FSM(name)
m Transition(name, trigger Exp, guard, action)<edge_begin><edge_end>m Variable(name, type)
m Transition(name, trigger Exp, guard, action)<edge_begin><edge_end>m Port(name, io, type)
m State(name)<edge_begin><edge_end>m FSM(name)
m Comp(type, name)<edge_begin><edge_end>m Comp(type, name)
m State(name)<edge_begin><edge_end>m Transition(name, trigger Exp, guard, action)
Qsar Type()<edge_begin><edge_end>Descriptorprovider Type(id, name, u RL, vendor, version)
Qsar Type()<edge_begin><edge_end>Responseunit Type(description, id, name, shortname, u RL)
Descriptorresultlists Type()<edge_begin><edge_end>Descriptorresult Type(descriptorid, structureid)
Descriptorresult Type(descriptorid, structureid)<edge_begin><edge_end>Descriptorvalue Type(index, label, value)
Qsar Type()<edge_begin><edge_end>Preprocessing Type()
Resource Type(checksum, excluded, file, id, name, no2d, no3d, no Mols, type, u RL)<edge_begin><edge_end>Structure Type(id, inchi, resourceid, resourceindex)
Qsar Type()<edge_begin><edge_end>Responses List Type()
Descriptor Type(id, ontologyid, provider)<edge_begin><edge_end>Parameter Type(key, value)
Preprocessing Type()<edge_begin><edge_end>Preprocessing Step Type(id, name, namespace, order, vendor)
Qsar Type()<edge_begin><edge_end>Descriptorresultlists Type()
Descriptorlist Type()<edge_begin><edge_end>Descriptor Type(id, ontologyid, provider)
Qsar Type()<edge_begin><edge_end>Descriptorlist Type()
Qsar Type()<edge_begin><edge_end>Structurelist Type()
Qsar Type()<edge_begin><edge_end>Metadata Type(authors, datasetname, description, license, u RL)
Large Object Type(size)<edge_begin><edge_end>Sql Data Type(name)
Create Table()<edge_begin><edge_end>Create(name)
Nullable Constraint(not)<edge_begin><edge_end>Constraint()
Unique Key Constraint()<edge_begin><edge_end>Column(sorted, default)
Unique Key Constraint()<edge_begin><edge_end>Constraint()
Primary Key Constraint()<edge_begin><edge_end>Column(sorted, default)
Alter()<edge_begin><edge_end>Alter Table Action()
Add Table Constraint(name)<edge_begin><edge_end>Alter Table Action()
Drop Table Constraint()<edge_begin><edge_end>Constraint()
Column(sorted, default)<edge_begin><edge_end>Constraint()
Create Index(unique, sort Orders)<edge_begin><edge_end>Column(sorted, default)
Create(name)<edge_begin><edge_end>Ddl Statement()
Column Comment()<edge_begin><edge_end>Column(sorted, default)
Column(sorted, default)<edge_begin><edge_end>Reference Clause()
Long(raw)<edge_begin><edge_end>Long Raw()
Alter()<edge_begin><edge_end>Create Table()
Foreign Key Constraint()<edge_begin><edge_end>Reference Clause()
Ddl()<edge_begin><edge_end>Ddl Statement()
Column Comment()<edge_begin><edge_end>Comment(comment)
Raw(size)<edge_begin><edge_end>Long Raw()
Column(sorted, default)<edge_begin><edge_end>Sql Data Type(name)
Sql Interval(year, day, precision, seconds Precision)<edge_begin><edge_end>Sql Date Time()
Long Raw()<edge_begin><edge_end>Sql Data Type(name)
Reference Clause()<edge_begin><edge_end>Column(sorted, default)
Table Comment()<edge_begin><edge_end>Create Table()
Sql Character(national, size)<edge_begin><edge_end>Sql Data Type(name)
Row Id Type(size)<edge_begin><edge_end>Sql Data Type(name)
Sql Time Stamp(precision)<edge_begin><edge_end>Sql Date Time()
Column(sorted, default)<edge_begin><edge_end>Table Property(name)
Table Comment()<edge_begin><edge_end>Comment(comment)
Sql Date Time()<edge_begin><edge_end>Sql Data Type(name)
Alter()<edge_begin><edge_end>Ddl Statement()
Sql Boolean()<edge_begin><edge_end>Sql Data Type(name)
Alter Table Action()<edge_begin><edge_end>Constraint()
Reference Clause()<edge_begin><edge_end>Create Table()
Create Table()<edge_begin><edge_end>Table Property(name)
Sql Date()<edge_begin><edge_end>Sql Date Time()
Drop Table Constraint()<edge_begin><edge_end>Alter Table Action()
Java(classname, jar, fork)<edge_begin><edge_end>Execution Task()
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>String()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>String()
Project()<edge_begin><edge_end>Ant Property()
Ant Property Name(name)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Set()
Format Tstamp(property, pattern, offset, unit, locale)<edge_begin><edge_end>String()
File List(dir, files)<edge_begin><edge_end>Basic()
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Pre Goal()<edge_begin><edge_end>Pre Post Goal()
Ant Property()<edge_begin><edge_end>Contents Goal()
Jelly Command()<edge_begin><edge_end>Contents Goal()
Filter(token, value)<edge_begin><edge_end>Basic()
Pre Post Goal()<edge_begin><edge_end>Abstract Goal()
Project()<edge_begin><edge_end>Goal(name)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Class Path(refid)<edge_begin><edge_end>String()
Jelly Set(var, value)<edge_begin><edge_end>String()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Pre Goal()<edge_begin><edge_end>Goal(name)
Goal(name)<edge_begin><edge_end>String()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Filters File(file)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Path(id, refid)<edge_begin><edge_end>Set()
Project()<edge_begin><edge_end>Xmlns(name, value)
Ant Task Def(name, classname)<edge_begin><edge_end>Contents Goal()
Abstract Goal()<edge_begin><edge_end>Contents Goal()
Project()<edge_begin><edge_end>Ant Task Def(name, classname)
File Set(dir)<edge_begin><edge_end>Excludes()
New Task()<edge_begin><edge_end>Ant Task Def(name, classname)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Ant Property Value(value)<edge_begin><edge_end>Ant Property Name(name)
Path(id, refid)<edge_begin><edge_end>String()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Ant Property Env(environment)<edge_begin><edge_end>Ant Property()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
File List(dir, files)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Exec(executable, dir)<edge_begin><edge_end>String()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Path Element(path, location)<edge_begin><edge_end>String()
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
File Set(dir)<edge_begin><edge_end>String()
Ant Task Def(name, classname)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Filter(token, value)<edge_begin><edge_end>String()
Ant Property File(file)<edge_begin><edge_end>Ant Property()
Filters File(file)<edge_begin><edge_end>Basic()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
Pattern Set()<edge_begin><edge_end>Set()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Ant Property File(file)<edge_begin><edge_end>String()
Mkdir(dir)<edge_begin><edge_end>String()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>String()
Ant Property Env(environment)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Attain Goal()<edge_begin><edge_end>Goal(name)
File Set(dir)<edge_begin><edge_end>Pattern Set()
Ant Property Name(name)<edge_begin><edge_end>Ant Property()
Post Goal()<edge_begin><edge_end>Goal(name)
Mkdir(dir)<edge_begin><edge_end>File Task()
Ant Property Location(location)<edge_begin><edge_end>Ant Property Name(name)
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Class Path(refid)<edge_begin><edge_end>Set()
Project()<edge_begin><edge_end>Pre Post Goal()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Attain Goal()<edge_begin><edge_end>Contents Goal()
File Set(dir)<edge_begin><edge_end>Includes()
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Goal(name)<edge_begin><edge_end>Pre Goal()
New Task()<edge_begin><edge_end>Attribut(name, value)
Attribut(name, value)<edge_begin><edge_end>String()
Project()<edge_begin><edge_end>Path(id, refid)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Goal(name)<edge_begin><edge_end>Post Goal()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Bibliography(bibstyle)<edge_begin><edge_end>General(genprefix, genname, gentext)
Subsection(subsectionprefix, subsectionname, subsectiontext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Title(titleprefix, titletext, authortext)
Abstracte(abstractprefix, abstracttext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Subsection(subsectionprefix, subsectionname, subsectiontext)<edge_begin><edge_end>Subsection(subsectionprefix, subsectionname, subsectiontext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Abstracte(abstractprefix, abstracttext)
Enumerate(enumprefix, enumtext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Commands(comprefix, comname, comtext, number)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>End(endprefix)
Body()<edge_begin><edge_end>Enumerate(enumprefix, enumtext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Body()
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Bibliography(bibstyle)
Body()<edge_begin><edge_end>Section(sectionprefix, sectionname, sectiontext)
Bibliography(bibstyle)<edge_begin><edge_end>Beginbib(Beginbibprefix)
Title(titleprefix, titletext, authortext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Styles(styleprefix, stylesnames, stylenames)
Figures(figprefix, figcaption, figname)<edge_begin><edge_end>General(genprefix, genname, gentext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Begin(beginprefix)
Body()<edge_begin><edge_end>Figures(figprefix, figcaption, figname)
Bibliography(bibstyle)<edge_begin><edge_end>bibitem(bibprefix, bibtext)
Node Graphics()<edge_begin><edge_end>Graphics()
Place()<edge_begin><edge_end>Net Content Element()
Annotation Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Transition()<edge_begin><edge_end>Net Content Element()
Annotation Graphics()<edge_begin><edge_end>Labeled Element()
Fill(gradientrotation)<edge_begin><edge_end>Annotation Graphics()
Reference Place()<edge_begin><edge_end>Reference()
Fill(gradientrotation)<edge_begin><edge_end>Color()
Node()<edge_begin><edge_end>Net Content Element()
Net Element()<edge_begin><edge_end>Net Graphics()
Page()<edge_begin><edge_end>Page Graphics()
Net Content()<edge_begin><edge_end>Page()
Inscription()<edge_begin><edge_end>Arc()
Reference Transition()<edge_begin><edge_end>Net Content()
Coordinate(x, y)<edge_begin><edge_end>Integer()
Edge Graphics()<edge_begin><edge_end>Arc()
Reference Transition()<edge_begin><edge_end>Reference()
Dimension(width, height)<edge_begin><edge_end>Integer()
Edge Graphics()<edge_begin><edge_end>Line(width, shape, style)
Labeled Element()<edge_begin><edge_end>Annotation Graphics()
Initial Marking()<edge_begin><edge_end>Place()
Net Element()<edge_begin><edge_end>URI(value)
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Integer()
Page()<edge_begin><edge_end>Net Content()
Position()<edge_begin><edge_end>Edge Graphics()
Edge Graphics()<edge_begin><edge_end>Position()
Node Graphics()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Net Content()
Dimension(width, height)<edge_begin><edge_end>Node Graphics()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>String()
Net Element()<edge_begin><edge_end>Ided Element(id)
Net Content Element()<edge_begin><edge_end>Node()
Inscription()<edge_begin><edge_end>Labeled Element()
Line(width, shape, style)<edge_begin><edge_end>Node Graphics()
Arc()<edge_begin><edge_end>Net Content Element()
Net Content()<edge_begin><edge_end>Net Element()
Ided Element(id)<edge_begin><edge_end>String()
Reference()<edge_begin><edge_end>Node()
Offset()<edge_begin><edge_end>Annotation Graphics()
Arc()<edge_begin><edge_end>Inscription()
Initial Marking()<edge_begin><edge_end>Labeled Element()
Label(text)<edge_begin><edge_end>Labeled Element()
Net Element()<edge_begin><edge_end>Name()
Edge Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Line(width, shape, style)<edge_begin><edge_end>Edge Graphics()
Net Content Element()<edge_begin><edge_end>Net Content()
URI(value)<edge_begin><edge_end>String()
Node Graphics()<edge_begin><edge_end>Dimension(width, height)
Annotation Graphics()<edge_begin><edge_end>Graphics()
Name()<edge_begin><edge_end>Net Content()
Annotation Graphics()<edge_begin><edge_end>Font(family, style, weight, size, decoration, align, rotation)
Tool Specific(tool, version)<edge_begin><edge_end>Any Element(name, text)
Tool Specific(tool, version)<edge_begin><edge_end>Node()
Name()<edge_begin><edge_end>Net Element()
Node()<edge_begin><edge_end>Node Graphics()
Page Graphics()<edge_begin><edge_end>Page()
Node()<edge_begin><edge_end>Ided Element(id)
Page()<edge_begin><edge_end>Ided Element(id)
Net Content()<edge_begin><edge_end>Name()
Fill(gradientrotation)<edge_begin><edge_end>URI(value)
Reference Place()<edge_begin><edge_end>Net Content()
Node()<edge_begin><edge_end>Tool Specific(tool, version)
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Annotation Graphics()
Position()<edge_begin><edge_end>Coordinate(x, y)
Line(width, shape, style)<edge_begin><edge_end>Integer()
Position()<edge_begin><edge_end>Node Graphics()
Line(width, shape, style)<edge_begin><edge_end>Annotation Graphics()
PNML Document()<edge_begin><edge_end>Net Element()
Net Element()<edge_begin><edge_end>Net Content()
Annotation Graphics()<edge_begin><edge_end>Line(width, shape, style)
Net Element()<edge_begin><edge_end>PNML Document()
Tool Specific(tool, version)<edge_begin><edge_end>Page()
Labeled Element()<edge_begin><edge_end>Label(text)
Net Graphics()<edge_begin><edge_end>Net Element()
Page()<edge_begin><edge_end>Tool Specific(tool, version)
Fill(gradientrotation)<edge_begin><edge_end>Edge Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Tool Specific(tool, version)<edge_begin><edge_end>String()
Arc()<edge_begin><edge_end>Ided Element(id)
Include()<edge_begin><edge_end>Shell Cmd(name)
Target()<edge_begin><edge_end>Values()
Host Program(name)<edge_begin><edge_end>Variable()
Model()<edge_begin><edge_end>Build Entry()
Target()<edge_begin><edge_end>Build Entry()
Object Single File(name)<edge_begin><edge_end>Value()
Entry()<edge_begin><edge_end>Variable()
Object File()<edge_begin><edge_end>Value()
If()<edge_begin><edge_end>Shell Cmd(name)
Variable()<edge_begin><edge_end>Var Slash Sym(name)
Object Shell Cmd()<edge_begin><edge_end>Shell Cmd(name)
Object Shell Cmd()<edge_begin><edge_end>Value()
Object Variable(additional)<edge_begin><edge_end>Variable()
If N Eq()<edge_begin><edge_end>Build Entry()
Shell Part()<edge_begin><edge_end>Var Slash Sym(name)
Variable()<edge_begin><edge_end>If()
My Variable(name)<edge_begin><edge_end>Variable()
Obj m()<edge_begin><edge_end>Assign Extra()
Shell Cmd(name)<edge_begin><edge_end>Shell Part()
Assign()<edge_begin><edge_end>Assign Extra()
Obj y()<edge_begin><edge_end>Object Y()
Obj m()<edge_begin><edge_end>Object M()
Obj y()<edge_begin><edge_end>Assign Extra()
Values()<edge_begin><edge_end>Assign()
My Variable(name)<edge_begin><edge_end>Build Entry()
Ifndef(name)<edge_begin><edge_end>Build Entry()
Object()<edge_begin><edge_end>Build Entry()
Host Program(name)<edge_begin><edge_end>Build Entry()
Shell Part()<edge_begin><edge_end>Shell Cmd(name)
Entry()<edge_begin><edge_end>Assign Extra()
Table(name)<edge_begin><edge_end>Attribute(name, type, nullable, multiplicity)
Attribute(name, type, nullable, multiplicity)<edge_begin><edge_end>Domain(name)
Schema(name)<edge_begin><edge_end>Table(name)
Candidate Key(name)<edge_begin><edge_end>Attribute(name, type, nullable, multiplicity)
Primitive Type()<edge_begin><edge_end>Domain(name)
Schema(name)<edge_begin><edge_end>Domain(name)
Schema(name)<edge_begin><edge_end>Constraint(name, description)
Foreign Key()<edge_begin><edge_end>Table(name)
Enumeration Type()<edge_begin><edge_end>Domain(name)
Foreign Key()<edge_begin><edge_end>Candidate Key(name)
Enumeration Type()<edge_begin><edge_end>Enumerated Literal(name)
Table(name)<edge_begin><edge_end>Foreign Key()
Template()<edge_begin><edge_end>Identifyable(id)
Variable Expression()<edge_begin><edge_end>Identifier(name)
Return Statement()<edge_begin><edge_end>Expression()
Template()<edge_begin><edge_end>Declaration()
Complex Channel Priority(channel Operator)<edge_begin><edge_end>Channel Expression()
Edge()<edge_begin><edge_end>TA Element()
Block Statement()<edge_begin><edge_end>Statement()
Point Expression()<edge_begin><edge_end>Identifier(name)
With Arguments Expression()<edge_begin><edge_end>Expression()
Template Instantiation()<edge_begin><edge_end>Identifier(name)
Array Declaration()<edge_begin><edge_end>Identifier(name)
Variable Declaration()<edge_begin><edge_end>Type(prefix)
Variable Declaration()<edge_begin><edge_end>Variable Identifier()
Simple Channel Priority()<edge_begin><edge_end>Channel Priority()
If Statement()<edge_begin><edge_end>Statement()
Template()<edge_begin><edge_end>Location(urgent, committed)
Integer Range()<edge_begin><edge_end>Type(prefix)
Function Declaration()<edge_begin><edge_end>Block()
TA Parameter()<edge_begin><edge_end>Array Declaration()
Complex Channel Priority(channel Operator)<edge_begin><edge_end>Channel Priority()
Function Declaration()<edge_begin><edge_end>TA Parameter()
Forall Expression()<edge_begin><edge_end>Expression()
For Loop Statement()<edge_begin><edge_end>Statement()
Simple Channel Priority()<edge_begin><edge_end>Channel Expression()
Array Declaration()<edge_begin><edge_end>Array Declaration Type()
Integer Range()<edge_begin><edge_end>Expression()
Edge()<edge_begin><edge_end>Location(urgent, committed)
Edge()<edge_begin><edge_end>Synchronisation()
Simple System()<edge_begin><edge_end>System()
Identifier Type()<edge_begin><edge_end>Identifier(name)
Expression Statement()<edge_begin><edge_end>Statement()
Block()<edge_begin><edge_end>Declaration()
Forall Expression()<edge_begin><edge_end>Type(prefix)
Identifier Channel Expression()<edge_begin><edge_end>Identifier(name)
Function Declaration()<edge_begin><edge_end>Type(prefix)
Type Declaration()<edge_begin><edge_end>Array Declaration()
Project(id)<edge_begin><edge_end>Template()
TA Element()<edge_begin><edge_end>Nameable(name)
Complex System(operator)<edge_begin><edge_end>System()
Exists Expression()<edge_begin><edge_end>Expression()
Return Statement()<edge_begin><edge_end>Statement()
Expression Channel Expression()<edge_begin><edge_end>Channel Expression()
Scalar()<edge_begin><edge_end>Expression()
Template Instantiation()<edge_begin><edge_end>TA Parameter()
Template()<edge_begin><edge_end>Edge()
System Definition()<edge_begin><edge_end>Template Instantiation()
Iteration Statement()<edge_begin><edge_end>Identifier(name)
For Loop Statement()<edge_begin><edge_end>Expression()
Call By Value Parameter()<edge_begin><edge_end>TA Parameter()
Field Declaration()<edge_begin><edge_end>Array Declaration()
TA Parameter()<edge_begin><edge_end>Type(prefix)
Guards()<edge_begin><edge_end>Expression()
Expression Statement()<edge_begin><edge_end>Expression()
Location(urgent, committed)<edge_begin><edge_end>TA Element()
Receive Synchronisation()<edge_begin><edge_end>Synchronisation()
Call By Reference Parameter()<edge_begin><edge_end>TA Parameter()
Simple If Expression()<edge_begin><edge_end>Expression()
Array Type Type()<edge_begin><edge_end>Type(prefix)
Array Initialiser()<edge_begin><edge_end>Initialiser()
Expression Initialiser()<edge_begin><edge_end>Initialiser()
Identifier Channel Expression()<edge_begin><edge_end>Channel Expression()
Function Declaration()<edge_begin><edge_end>Declaration()
Edge()<edge_begin><edge_end>Guards()
System Definition()<edge_begin><edge_end>System()
Do While Loop Statement()<edge_begin><edge_end>Statement()
Exists Expression()<edge_begin><edge_end>Type(prefix)
Edge()<edge_begin><edge_end>Updates()
Synchronisation()<edge_begin><edge_end>Expression()
Variable Declaration()<edge_begin><edge_end>Declaration()
Type Declaration()<edge_begin><edge_end>Declaration()
Identifier Expression()<edge_begin><edge_end>Expression()
Project(id)<edge_begin><edge_end>TA Element()
Location(urgent, committed)<edge_begin><edge_end>Expression()
Iteration Statement()<edge_begin><edge_end>Statement()
TA Element()<edge_begin><edge_end>Commentable(comment)
Iteration Statement()<edge_begin><edge_end>Type(prefix)
Fixed Expression(type)<edge_begin><edge_end>Expression()
Struct()<edge_begin><edge_end>Field Declaration()
Point Expression()<edge_begin><edge_end>Expression()
Template()<edge_begin><edge_end>Nameable(name)
Send Synchronisation()<edge_begin><edge_end>Synchronisation()
Template Instantiation()<edge_begin><edge_end>Expression()
Block()<edge_begin><edge_end>Statement()
Channel Priority Declaration()<edge_begin><edge_end>Channel Priority()
Array Expression Type()<edge_begin><edge_end>Array Declaration Type()
Grouping Expression()<edge_begin><edge_end>Expression()
Array Type Type()<edge_begin><edge_end>Array Declaration Type()
Constant Expression(value)<edge_begin><edge_end>Expression()
Selections()<edge_begin><edge_end>Selection()
Function Declaration()<edge_begin><edge_end>Identifier(name)
Forall Expression()<edge_begin><edge_end>Identifier(name)
Type Declaration()<edge_begin><edge_end>Type(prefix)
Variable Identifier()<edge_begin><edge_end>Array Declaration Type()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Simple Type(type)<edge_begin><edge_end>Type(prefix)
Inc Dec Expression(before Expression, increment)<edge_begin><edge_end>Expression()
Default Channel Priority()<edge_begin><edge_end>Channel Priority()
Project(id)<edge_begin><edge_end>Declaration()
Expression Initialiser()<edge_begin><edge_end>Expression()
Variable Identifier()<edge_begin><edge_end>Initialiser()
Selection()<edge_begin><edge_end>Identifier(name)
Result Column(name)<edge_begin><edge_end>Sql Expr()
Select(all)<edge_begin><edge_end>Select List()
Get()<edge_begin><edge_end>Sql Sentence()
Unique Table Constraint(name)<edge_begin><edge_end>Table Constraint()
Sql Param(name)<edge_begin><edge_end>Sql Expr()
Select(all)<edge_begin><edge_end>Sql Expr()
Get()<edge_begin><edge_end>Table(name)
New Column()<edge_begin><edge_end>Sql Expr()
Sql Library(database, version)<edge_begin><edge_end>Trigger(name, time)
Insert Statement()<edge_begin><edge_end>Table(name)
Delete()<edge_begin><edge_end>Table(name)
Insert Statement()<edge_begin><edge_end>Column(name, null, primary Key)
Update()<edge_begin><edge_end>Sql Sentence()
Update Column Expression()<edge_begin><edge_end>Sql Expr()
Table Ref(alias)<edge_begin><edge_end>Table(name)
Trigger(name, time)<edge_begin><edge_end>Sql Sentence()
Sql String Literal(value)<edge_begin><edge_end>Sql Expr()
New Column()<edge_begin><edge_end>Column(name, null, primary Key)
Sql Library(database, version)<edge_begin><edge_end>Sql Method(array, name)
Ordering Term(asc, desc)<edge_begin><edge_end>Sql Expr()
Delete Table()<edge_begin><edge_end>Table(name)
Select(all)<edge_begin><edge_end>Sql Sentence()
Update()<edge_begin><edge_end>Update Column Expression()
Old Column()<edge_begin><edge_end>Column(name, null, primary Key)
Select(all)<edge_begin><edge_end>Ordering Term(asc, desc)
Trigger Insert()<edge_begin><edge_end>Trigger Action()
Trigger(name, time)<edge_begin><edge_end>Trigger Action()
Trigger Update()<edge_begin><edge_end>Trigger Action()
Sql Method Ref()<edge_begin><edge_end>Sql Sentence()
Sql Library(database, version)<edge_begin><edge_end>Tag(name)
Table(name)<edge_begin><edge_end>Tag(name)
Delete Table()<edge_begin><edge_end>Sql Sentence()
Old Column()<edge_begin><edge_end>Sql Expr()
Trigger Update()<edge_begin><edge_end>Column(name, null, primary Key)
Column(name, null, primary Key)<edge_begin><edge_end>Sql Expr()
Select List()<edge_begin><edge_end>Result Column(name)
Sql Method(array, name)<edge_begin><edge_end>Tag(name)
Table(name)<edge_begin><edge_end>Column(name, null, primary Key)
Column Ref()<edge_begin><edge_end>Table Ref(alias)
Insert()<edge_begin><edge_end>Sql Sentence()
Update()<edge_begin><edge_end>Sql Expr()
Trigger(name, time)<edge_begin><edge_end>Tag(name)
Update Column Expression()<edge_begin><edge_end>Column(name, null, primary Key)
Enum()<edge_begin><edge_end>Enum Element(name, text)
Delete()<edge_begin><edge_end>Sql Expr()
Type Def()<edge_begin><edge_end>Sql Type()
Sql Nested()<edge_begin><edge_end>Sql Expr()
Update()<edge_begin><edge_end>Table(name)
Unique Table Constraint(name)<edge_begin><edge_end>Column(name, null, primary Key)
Sql Placeholder()<edge_begin><edge_end>Sql Expr()
Column Ref()<edge_begin><edge_end>Sql Expr()
Sql Library(database, version)<edge_begin><edge_end>Table(name)
Column(name, null, primary Key)<edge_begin><edge_end>Sql Type()
Insert Statement()<edge_begin><edge_end>Sql Sentence()
Select(all)<edge_begin><edge_end>Table Ref(alias)
Delete()<edge_begin><edge_end>Sql Sentence()
Petri Net(id, type)<edge_begin><edge_end>Page()
Ref Place()<edge_begin><edge_end>Place Node()
Place()<edge_begin><edge_end>Place Node()
Dimension()<edge_begin><edge_end>Coordinate(x, y)
Annotation Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Attribute()<edge_begin><edge_end>Label()
Node Graphics()<edge_begin><edge_end>Position()
Arc Graphics()<edge_begin><edge_end>Graphics()
Place Node()<edge_begin><edge_end>Ref Place()
Position()<edge_begin><edge_end>Coordinate(x, y)
Name(text)<edge_begin><edge_end>Pn Object(id)
Annotation Graphics()<edge_begin><edge_end>Graphics()
Name(text)<edge_begin><edge_end>Petri Net(id, type)
Name(text)<edge_begin><edge_end>Annotation()
Node Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Annotation Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Petri Net(id, type)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Node()<edge_begin><edge_end>Pn Object(id)
Node()<edge_begin><edge_end>Node Graphics()
Page()<edge_begin><edge_end>Petri Net(id, type)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Petri Net(id, type)
Place Node()<edge_begin><edge_end>Node()
Position()<edge_begin><edge_end>Node Graphics()
Annotation Graphics()<edge_begin><edge_end>Offset()
Node Graphics()<edge_begin><edge_end>Node()
Pn Object(id)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Offset()<edge_begin><edge_end>Coordinate(x, y)
Page()<edge_begin><edge_end>Node Graphics()
Transition()<edge_begin><edge_end>Transition Node()
Any Object()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Ref Transition()<edge_begin><edge_end>Transition Node()
Place()<edge_begin><edge_end>PT Marking(text)
Page()<edge_begin><edge_end>Pn Object(id)
Annotation Graphics()<edge_begin><edge_end>Font(align, decoration, family, rotation, size, style, weight)
Annotation()<edge_begin><edge_end>Label()
Arc Graphics()<edge_begin><edge_end>Position()
PT Marking(text)<edge_begin><edge_end>Place()
Offset()<edge_begin><edge_end>Annotation Graphics()
Arc Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Label()
Node Graphics()<edge_begin><edge_end>Dimension()
Annotation Graphics()<edge_begin><edge_end>Annotation()
Pn Object(id)<edge_begin><edge_end>Name(text)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Pn Object(id)
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Annotation Graphics()
Transition Node()<edge_begin><edge_end>Ref Transition()
PT Arc Annotation(text)<edge_begin><edge_end>Arc()
Line(color, shape, width, style)<edge_begin><edge_end>Arc Graphics()
Label()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Transition Node()<edge_begin><edge_end>Node()
Dimension()<edge_begin><edge_end>Node Graphics()
Node()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Arc Graphics()
Arc()<edge_begin><edge_end>Pn Object(id)
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>URI()
Arc()<edge_begin><edge_end>PT Arc Annotation(text)
Line(color, shape, width, style)<edge_begin><edge_end>Annotation Graphics()
Petri Net Doc(xmlns)<edge_begin><edge_end>Petri Net(id, type)
PT Marking(text)<edge_begin><edge_end>Annotation()
Line(color, shape, width, style)<edge_begin><edge_end>Node Graphics()
PT Arc Annotation(text)<edge_begin><edge_end>Annotation()
PT Marking(text)<edge_begin><edge_end>Natural()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Long String()
Document Root(mixed)<edge_begin><edge_end>Wiki(id, name, description, owner)
Document Root(mixed)<edge_begin><edge_end>Translations(default)
Class(id, name)<edge_begin><edge_end>Property(value, name, type)
Document Root(mixed)<edge_begin><edge_end>Classes Type()
Document Root(mixed)<edge_begin><edge_end>Object Summary(id, guid, page Id, page Version, wiki, space, page Name, page Author, page Author Name, class Name, number, headline)
Document Root(mixed)<edge_begin><edge_end>Search Result(type, id, page Full Name, title, wiki, space, page Name, modified, author, author Name, version, language, class Name, object Number, filename, score)
Document Root(mixed)<edge_begin><edge_end>Objects Type()
Tags Type()<edge_begin><edge_end>Link Collection()
Comment(id, page Id, author, author Name, date, highlight, text, reply To)<edge_begin><edge_end>Link Collection()
Page Summary(id, full Name, wiki, space, name, title, parent, parent Id, version, author, author Name, xwiki Relative Url, xwiki Absolute Url, syntax)<edge_begin><edge_end>Translations(default)
Space(id, wiki, name, home, xwiki Relative Url, xwiki Absolute Url)<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Tags Type()
History Summary(page Id, wiki, space, name, version, major Version, minor Version, modified, modifier, modifier Name, language, comment)<edge_begin><edge_end>Link Collection()
Property(value, name, type)<edge_begin><edge_end>Attribute(name, value)
Document Root(mixed)<edge_begin><edge_end>Search Results Type(template)
Document Root(mixed)<edge_begin><edge_end>Page(language, major Version, minor Version, created, creator, creator Name, modified, modifier, modifier Name, comment, content)
Document Root(mixed)<edge_begin><edge_end>Pages Type()
Object()<edge_begin><edge_end>Object Summary(id, guid, page Id, page Version, wiki, space, page Name, page Author, page Author Name, class Name, number, headline)
Pages Type()<edge_begin><edge_end>Page Summary(id, full Name, wiki, space, name, title, parent, parent Id, version, author, author Name, xwiki Relative Url, xwiki Absolute Url, syntax)
Spaces Type()<edge_begin><edge_end>Space(id, wiki, name, home, xwiki Relative Url, xwiki Absolute Url)
Tag(name)<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>History Type()
Document Root(mixed)<edge_begin><edge_end>Property(value, name, type)
Property(value, name, type)<edge_begin><edge_end>Link Collection()
Attachments Type()<edge_begin><edge_end>Attachment(id, name, size, version, page Id, page Version, mime Type, author, author Name, date, xwiki Relative Url, xwiki Absolute Url)
Attachment(id, name, size, version, page Id, page Version, mime Type, author, author Name, date, xwiki Relative Url, xwiki Absolute Url)<edge_begin><edge_end>Link Collection()
Link Collection()<edge_begin><edge_end>Link(href, href Lang, rel, type)
Object()<edge_begin><edge_end>Property(value, name, type)
Attribute(name, value)<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Wikis Type()
Attachments Type()<edge_begin><edge_end>Link Collection()
X Wiki(version)<edge_begin><edge_end>Link Collection()
Syntaxes(syntax)<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Syntaxes(syntax)
Comments Type()<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Comments Type()
Tags Type()<edge_begin><edge_end>Tag(name)
Document Root(mixed)<edge_begin><edge_end>Object()
Document Root(mixed)<edge_begin><edge_end>Tag(name)
Page(language, major Version, minor Version, created, creator, creator Name, modified, modifier, modifier Name, comment, content)<edge_begin><edge_end>Page Summary(id, full Name, wiki, space, name, title, parent, parent Id, version, author, author Name, xwiki Relative Url, xwiki Absolute Url, syntax)
Translation(language)<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Spaces Type()
Classes Type()<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Attachments Type()
Translations(default)<edge_begin><edge_end>Translation(language)
Objects Type()<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Comment(id, page Id, author, author Name, date, highlight, text, reply To)
X Wiki(version)<edge_begin><edge_end>Syntaxes(syntax)
Classes Type()<edge_begin><edge_end>Class(id, name)
Properties Type()<edge_begin><edge_end>Link Collection()
Wikis Type()<edge_begin><edge_end>Wiki(id, name, description, owner)
Comments Type()<edge_begin><edge_end>Comment(id, page Id, author, author Name, date, highlight, text, reply To)
Wikis Type()<edge_begin><edge_end>Link Collection()
Class(id, name)<edge_begin><edge_end>Link Collection()
Document Root(mixed)<edge_begin><edge_end>Attachment(id, name, size, version, page Id, page Version, mime Type, author, author Name, date, xwiki Relative Url, xwiki Absolute Url)
Objects Type()<edge_begin><edge_end>Object Summary(id, guid, page Id, page Version, wiki, space, page Name, page Author, page Author Name, class Name, number, headline)
History Type()<edge_begin><edge_end>History Summary(page Id, wiki, space, name, version, major Version, minor Version, modified, modifier, modifier Name, language, comment)
Search Results Type(template)<edge_begin><edge_end>Link Collection()
Search Result(type, id, page Full Name, title, wiki, space, page Name, modified, author, author Name, version, language, class Name, object Number, filename, score)<edge_begin><edge_end>Link Collection()
Do Forall Rule()<edge_begin><edge_end>Term()
Else If()<edge_begin><edge_end>Else If()
Undef Constant()<edge_begin><edge_end>Constant()
Signature(is Main, name)<edge_begin><edge_end>Located Element(location)
Element Decl(name)<edge_begin><edge_end>String()
Else If()<edge_begin><edge_end>Located Element(location)
Function(return Type, is External)<edge_begin><edge_end>String()
Choose Rule()<edge_begin><edge_end>Term()
Initialization()<edge_begin><edge_end>Rule(in Sequence)
Rule(in Sequence)<edge_begin><edge_end>Boolean()
Initialization()<edge_begin><edge_end>Located Element(location)
Body()<edge_begin><edge_end>Initialization()
Integer Constant(value)<edge_begin><edge_end>Integer()
Extension()<edge_begin><edge_end>Located Element(location)
X Asm Spec()<edge_begin><edge_end>Asm(return Type)
Function(return Type, is External)<edge_begin><edge_end>Parameter(name, type)
Choose Rule()<edge_begin><edge_end>Universe(name, contents)
Do Forall Rule()<edge_begin><edge_end>Variable Decl()
Asm(return Type)<edge_begin><edge_end>Signature(is Main, name)
Meta Information(used As)<edge_begin><edge_end>Access Update Function(type)
Constant()<edge_begin><edge_end>Term()
Universe(name, contents)<edge_begin><edge_end>Universe(name, contents)
Update Rule()<edge_begin><edge_end>Function Or Variable Term()
Integer Constant(value)<edge_begin><edge_end>Constant()
Argument(type)<edge_begin><edge_end>String()
Asm(return Type)<edge_begin><edge_end>String()
Else If()<edge_begin><edge_end>Term()
X Asm Spec()<edge_begin><edge_end>X Asm File()
Function(return Type, is External)<edge_begin><edge_end>Boolean()
Conditional Rule()<edge_begin><edge_end>Else If()
Asm Invocation(asm Name)<edge_begin><edge_end>String()
Function(return Type, is External)<edge_begin><edge_end>Declaration()
Variable Decl()<edge_begin><edge_end>Element Decl(name)
Argument(type)<edge_begin><edge_end>Variable Decl()
String Constant(value)<edge_begin><edge_end>String()
Choose Rule()<edge_begin><edge_end>Rule(in Sequence)
Access Update Function(type)<edge_begin><edge_end>Located Element(location)
Do Forall Rule()<edge_begin><edge_end>Rule(in Sequence)
Conditional Rule()<edge_begin><edge_end>Rule(in Sequence)
Asm(return Type)<edge_begin><edge_end>Located Element(location)
Operator Term(op Name)<edge_begin><edge_end>String()
Conditional Rule()<edge_begin><edge_end>Term()
Extension()<edge_begin><edge_end>Universe(name, contents)
Meta Information(used As)<edge_begin><edge_end>Signature(is Main, name)
Skip Rule()<edge_begin><edge_end>Rule(in Sequence)
Function(return Type, is External)<edge_begin><edge_end>Element Decl(name)
Asm Invocation(asm Name)<edge_begin><edge_end>Term()
Parameter(name, type)<edge_begin><edge_end>String()
Meta Information(used As)<edge_begin><edge_end>Located Element(location)
Asm(return Type)<edge_begin><edge_end>Body()
Return Rule()<edge_begin><edge_end>Term()
Signature(is Main, name)<edge_begin><edge_end>Argument(type)
Located Element(location)<edge_begin><edge_end>String()
Universe(name, contents)<edge_begin><edge_end>Declaration()
Choose Rule()<edge_begin><edge_end>Variable Decl()
Extend Rule()<edge_begin><edge_end>Extension()
Boolean Constant(value)<edge_begin><edge_end>Constant()
Universe(name, contents)<edge_begin><edge_end>String()
Function Or Variable Term()<edge_begin><edge_end>Element Decl(name)
Return Rule()<edge_begin><edge_end>Rule(in Sequence)
Boolean Constant(value)<edge_begin><edge_end>Boolean()
Signature(is Main, name)<edge_begin><edge_end>Boolean()
Term()<edge_begin><edge_end>Located Element(location)
X Asm File()<edge_begin><edge_end>Located Element(location)
Signature(is Main, name)<edge_begin><edge_end>String()
Update Rule()<edge_begin><edge_end>Term()
Asm(return Type)<edge_begin><edge_end>Meta Information(used As)
Update Rule()<edge_begin><edge_end>Rule(in Sequence)
Place Element(name, tokens)<edge_begin><edge_end>Element(id, location)
PNML Document(location)<edge_begin><edge_end>Net Element(name)
Net Element(name)<edge_begin><edge_end>Element(id, location)
Arc Transition2Place()<edge_begin><edge_end>Transition Element(name)
Arc Place2Transition()<edge_begin><edge_end>Element(id, location)
Arc Place2Transition()<edge_begin><edge_end>Transition Element(name)
Arc Transition2Place()<edge_begin><edge_end>Element(id, location)
Arc Transition2Place()<edge_begin><edge_end>Place Element(name, tokens)
Conference announcement()<edge_begin><edge_end>Conference document()
Banquet()<edge_begin><edge_end>Social event()
Author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Meal Menu()<edge_begin><edge_end>Document()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Reviewer()<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Coffee Break()<edge_begin><edge_end>Break Event()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Head Role()<edge_begin><edge_end>Role()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Conference volume(has a location)<edge_begin><edge_end>Track()
Preview()<edge_begin><edge_end>Review Form()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Break Event()<edge_begin><edge_end>Non Academic Event()
Template()<edge_begin><edge_end>Document()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
end date of conference()<edge_begin><edge_end>date of conference()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Role()<edge_begin><edge_end>Thing()
External Reviewer()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Topic()<edge_begin><edge_end>Working event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Group Email()<edge_begin><edge_end>Email()
Corresponding Author()<edge_begin><edge_end>Author()
submission process()<edge_begin><edge_end>activity()
Chair PC()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Review()<edge_begin><edge_end>activity()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Inforamtion()
Administrative event()<edge_begin><edge_end>Administrative event()
NGO()<edge_begin><edge_end>Organization()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Rejection Email()<edge_begin><edge_end>Email()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Chair()<edge_begin><edge_end>Committee member()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Author()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Associated Chair()<edge_begin><edge_end>Conference Member()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Reviewer()<edge_begin><edge_end>Bid()
Tutorial()<edge_begin><edge_end>Conference part()
Conference document()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Reviewer()<edge_begin><edge_end>External Reviewer()
Contact Person URL()<edge_begin><edge_end>URL()
Co-chair()<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Administrator()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Activity()<edge_begin><edge_end>Thing()
Co-author()<edge_begin><edge_end>Author()
Email()<edge_begin><edge_end>Document()
Government Organization()<edge_begin><edge_end>Organization()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Author()<edge_begin><edge_end>article()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Volunteer()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Author()
Registration()<edge_begin><edge_end>Activity()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Personal Review History()<edge_begin><edge_end>Personal History()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Account()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
managing of conference process()<edge_begin><edge_end>activity()
University()<edge_begin><edge_end>Organization()
Antennas Topic()<edge_begin><edge_end>Topic()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Activity()
Presentation()<edge_begin><edge_end>Active conference participant()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Talk Event()<edge_begin><edge_end>Academic Event()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Author()<edge_begin><edge_end>User()
conference setup()<edge_begin><edge_end>Thing()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Co-author()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
summary of reviews()<edge_begin><edge_end>activity()
Working event()<edge_begin><edge_end>Topic()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Attendee()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference contribution()<edge_begin><edge_end>Conference document()
Detail()<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
article()<edge_begin><edge_end>abstract()
Reviewed contribution()<edge_begin><edge_end>Review()
Active conference participant()<edge_begin><edge_end>Presentation()
Scholar()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Chair()<edge_begin><edge_end>Committee()
participant()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Help Request()<edge_begin><edge_end>Request()
Rated Papers()<edge_begin><edge_end>Active Paper()
Member PC()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
CAD Topic()<edge_begin><edge_end>Topic()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
Operating Topicsystems()<edge_begin><edge_end>Topic()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Email Template()<edge_begin><edge_end>Event Setup()
summary of reviews()<edge_begin><edge_end>article()
rejection notification email()<edge_begin><edge_end>notification email()
Full Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Reviewer()
Senior Reviewer URL()<edge_begin><edge_end>URL()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Member PC()<edge_begin><edge_end>Topic()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference Member()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Scholar()<edge_begin><edge_end>University()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Committee()<edge_begin><edge_end>Chair()
article()<edge_begin><edge_end>Reviewer()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Integer()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
acceptance notification email()<edge_begin><edge_end>notification email()
Extended abstract()<edge_begin><edge_end>Regular contribution()
human(e-mail, last name, first name)<edge_begin><edge_end>topic()
Trip()<edge_begin><edge_end>Social event()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
reviewing proces()<edge_begin><edge_end>activity()
Author Not Reviewer()<edge_begin><edge_end>Author()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Role()<edge_begin><edge_end>Administrator()
abstract()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>User()
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>unsigned Long()
chair()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Senior Program Committee member()<edge_begin><edge_end>activity()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Committe Role()<edge_begin><edge_end>Role()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Regular contribution()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Admin Role()<edge_begin><edge_end>Role()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
review form()<edge_begin><edge_end>article()
Reviewer()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
activity()<edge_begin><edge_end>article()
chair()<edge_begin><edge_end>program()
Conference volume(has a location)<edge_begin><edge_end>String()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Paper Presentation()<edge_begin><edge_end>Academic Event()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
article()<edge_begin><edge_end>classification()
Notification Email()<edge_begin><edge_end>Email()
Conference contributor()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Program committee()<edge_begin><edge_end>Committee()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
User()<edge_begin><edge_end>Document()
Active conference participant()<edge_begin><edge_end>Conference participant()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Review Form()<edge_begin><edge_end>Event Setup()
Review()<edge_begin><edge_end>Document()
Presentation()<edge_begin><edge_end>Conference contribution()
Security Topic()<edge_begin><edge_end>Topic()
Active conference participant()<edge_begin><edge_end>Conference contributor()
Written contribution()<edge_begin><edge_end>Conference contribution()
Committee member()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Author()<edge_begin><edge_end>Conference Member()
article()<edge_begin><edge_end>Author()
TPC Member()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Assistant()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Meta-Review()<edge_begin><edge_end>Review()
Working event()<edge_begin><edge_end>Administrative event()
Conference Venue Place()<edge_begin><edge_end>Place()
Research Topic()<edge_begin><edge_end>Event Setup()
Session Chair()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Thing()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Event Creation()<edge_begin><edge_end>Activity()
date()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Reviewer()<edge_begin><edge_end>Reviewer()
Submission event()<edge_begin><edge_end>Administrative event()
Dining Place()<edge_begin><edge_end>Place()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Topic()<edge_begin><edge_end>Conference part()
Excursion()<edge_begin><edge_end>Social Event()
Organizer()<edge_begin><edge_end>Thing()
Committee()<edge_begin><edge_end>Committee member()
Document()<edge_begin><edge_end>Thing()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
abstract submission date()<edge_begin><edge_end>date()
Meal Event()<edge_begin><edge_end>Meal Menu()
Event Approval()<edge_begin><edge_end>Activity()
camera-ready submission date()<edge_begin><edge_end>date()
Meal Break()<edge_begin><edge_end>Break Event()
Registeered applicant()<edge_begin><edge_end>Conference applicant()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Abstract()<edge_begin><edge_end>Thing()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Decision()
Closing Talk()<edge_begin><edge_end>Talk Event()
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Document()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Meeting Room Place()<edge_begin><edge_end>Place()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Meal Event()<edge_begin><edge_end>Non Academic Event()
Review preference(has a degree)<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>date()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
article()<edge_begin><edge_end>activity()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Document()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Acceptance()<edge_begin><edge_end>Decision()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Reviewer()<edge_begin><edge_end>Review()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Event Tracks()<edge_begin><edge_end>Event Setup()
Academia Organization()<edge_begin><edge_end>Organization()
Free Time Break()<edge_begin><edge_end>Break Event()
program()<edge_begin><edge_end>session()
Regular author()<edge_begin><edge_end>Conference contributor()
Contribution co-author()<edge_begin><edge_end>Regular author()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Track()<edge_begin><edge_end>Conference part()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>topic()
Program Committee Chair()<edge_begin><edge_end>Chairman()
Organizing committee()<edge_begin><edge_end>Committee()
Reviewing results event()<edge_begin><edge_end>Administrative event()
Review()<edge_begin><edge_end>article()
Call for paper()<edge_begin><edge_end>Conference document()
review form()<edge_begin><edge_end>activity()
Personal Review History()<edge_begin><edge_end>Reviewer()
Conference volume(has a location)<edge_begin><edge_end>Committee()
User()<edge_begin><edge_end>Thing()
Chair URL()<edge_begin><edge_end>URL()
start date of conference()<edge_begin><edge_end>date of conference()
abstract()<edge_begin><edge_end>article()
Participant(early Registration)<edge_begin><edge_end>Boolean()
Misc()<edge_begin><edge_end>Help Request()
date of conference()<edge_begin><edge_end>date()
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
notification email()<edge_begin><edge_end>article()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Workshop()<edge_begin><edge_end>Academic Event()
Accommodation Place()<edge_begin><edge_end>Place()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Review()<edge_begin><edge_end>Conference document()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Review Form Setup()<edge_begin><edge_end>Review Form()
URL()<edge_begin><edge_end>Thing()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Programme()<edge_begin><edge_end>Document()
activity()<edge_begin><edge_end>activity()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Conference participant()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Microelectronics Topic()<edge_begin><edge_end>Topic()
Submission Template()<edge_begin><edge_end>Event Setup()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Wireless Communications Topic()<edge_begin><edge_end>Topic()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Information for participants()<edge_begin><edge_end>Conference document()
Review preference(has a degree)<edge_begin><edge_end>Integer()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference document()<edge_begin><edge_end>date()
Author Role()<edge_begin><edge_end>Role()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Administrator()
Account()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Textual Review Question()<edge_begin><edge_end>Review Question()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Important dates()<edge_begin><edge_end>date()
Short Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Multimedia Topic()<edge_begin><edge_end>Topic()
Conference www(has a URL)<edge_begin><edge_end>String()
Review()<edge_begin><edge_end>Reviewed contribution()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference document()
Regular contribution()<edge_begin><edge_end>Written contribution()
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Abstract()<edge_begin><edge_end>Extended abstract()
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Invited talk()<edge_begin><edge_end>Presentation()
Review()<edge_begin><edge_end>Reviewer()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Reviewing event()<edge_begin><edge_end>Administrative event()
Committee()<edge_begin><edge_end>Co-chair()
conference setup()<edge_begin><edge_end>URL()
Chairman()<edge_begin><edge_end>Conference Member()
Workshop()<edge_begin><edge_end>Conference part()
Assistance()<edge_begin><edge_end>Help Request()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
abstract of paper()<edge_begin><edge_end>article()
Reviewer()<edge_begin><edge_end>User()
date of notification()<edge_begin><edge_end>date()
paper assignment()<edge_begin><edge_end>Program Committee member()
Slide Set()<edge_begin><edge_end>Document()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Member()<edge_begin><edge_end>Participant(early Registration)
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Organization()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Steering committee()<edge_begin><edge_end>Committee()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Presenter()<edge_begin><edge_end>Author()
notification()<edge_begin><edge_end>article()
Event URL()<edge_begin><edge_end>URL()
Administrator()<edge_begin><edge_end>Role()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Participant(early Registration)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Reviewer Role()<edge_begin><edge_end>Role()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
Student()<edge_begin><edge_end>Participant(early Registration)
Dfa()<edge_begin><edge_end>Named Element(name)
Initial State()<edge_begin><edge_end>Regular State()
Dfa()<edge_begin><edge_end>Regular State()
Language()<edge_begin><edge_end>Named Element(name)
Dfa()<edge_begin><edge_end>Final State()
Dfa()<edge_begin><edge_end>Initial State()
Dfa()<edge_begin><edge_end>Language()
Language()<edge_begin><edge_end>Symbol(literal, description, direction)
Transition()<edge_begin><edge_end>Symbol(literal, description, direction)
Regular State()<edge_begin><edge_end>Transition()
State(description)<edge_begin><edge_end>Named Element(name)
Transition()<edge_begin><edge_end>State(description)
Transition()<edge_begin><edge_end>Ontology Member()
Ontology Member()<edge_begin><edge_end>Pragma(text)
Page()<edge_begin><edge_end>Ontology Member()
Place()<edge_begin><edge_end>Ontology Member()
Petri Net()<edge_begin><edge_end>Petri Net()
Arc()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Ontology Member()
Place()<edge_begin><edge_end>Place()
Ontology Document(iri, path)<edge_begin><edge_end>Pragmatics Ontology(manager)
Page()<edge_begin><edge_end>Page()
Pragmatics Ontology(manager)<edge_begin><edge_end>Ontology Document(iri, path)
Pragmatics Ontology(manager)<edge_begin><edge_end>Ontology Manager()
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Worksheet(name)<edge_begin><edge_end>Workbook()
Number Value(value)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
String Value(value)<edge_begin><edge_end>Value Type()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Error Value()<edge_begin><edge_end>Value Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Custom Document Property(name)<edge_begin><edge_end>String()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Table Element(index)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Comment(author, show Always)<edge_begin><edge_end>Data()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Version Type(n, nn)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Worksheet(name)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Comment(author, show Always)<edge_begin><edge_end>String()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Smart Tags Collection()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
String Value(value)<edge_begin><edge_end>String()
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Comment(author, show Always)
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Worksheet(name)<edge_begin><edge_end>String()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Table Element(index)<edge_begin><edge_end>Styled Element()
Boolean Value(value)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Workbook()<edge_begin><edge_end>Worksheet(name)
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Value Type()<edge_begin><edge_end>Data()
Data()<edge_begin><edge_end>Comment(author, show Always)
Initial State()<edge_begin><edge_end>State(initial Time, final Time)
State Machine()<edge_begin><edge_end>State(initial Time, final Time)
State Machine()<edge_begin><edge_end>Named Element(name)
Transition(initial Time, final Time)<edge_begin><edge_end>Trigger(expression)
Timed Transition(duration)<edge_begin><edge_end>Transition(initial Time, final Time)
Transition(initial Time, final Time)<edge_begin><edge_end>State(initial Time, final Time)
Choice()<edge_begin><edge_end>Pseudostate()
State(initial Time, final Time)<edge_begin><edge_end>Transition(initial Time, final Time)
State(initial Time, final Time)<edge_begin><edge_end>Composite State()
Final State()<edge_begin><edge_end>State(initial Time, final Time)
Region()<edge_begin><edge_end>State(initial Time, final Time)
Join()<edge_begin><edge_end>Pseudostate()
State(initial Time, final Time)<edge_begin><edge_end>State Machine()
State Machine()<edge_begin><edge_end>Variable(name, value)
Transition(initial Time, final Time)<edge_begin><edge_end>State Machine()
Transition(initial Time, final Time)<edge_begin><edge_end>Named Element(name)
Composite State()<edge_begin><edge_end>Region()
Fork()<edge_begin><edge_end>Pseudostate()
State Machine()<edge_begin><edge_end>Transition(initial Time, final Time)
State(initial Time, final Time)<edge_begin><edge_end>Named Element(name)
Color()<edge_begin><edge_end>Color With Transparency()
Transparent(transparent)<edge_begin><edge_end>Color Or Gradient()
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Color()
Gradient()<edge_begin><edge_end>Gradient Layout()
Color()<edge_begin><edge_end>Color Or Gradient()
Transparent(transparent)<edge_begin><edge_end>Color With Transparency()
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Color Or Gradient()
Gradient Ref()<edge_begin><edge_end>Color Or Gradient()
Gradient Ref()<edge_begin><edge_end>Gradient()
Style Container()<edge_begin><edge_end>Style Container Element(name, description)
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Color With Transparency()
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Highlighting Values()
Gradient Layout()<edge_begin><edge_end>Gradient Color Area(offset)
Color Constant Ref(value)<edge_begin><edge_end>Color()
Style()<edge_begin><edge_end>Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)
Style()<edge_begin><edge_end>Style Container Element(name, description)
Gradient()<edge_begin><edge_end>Style Container Element(name, description)
Conference Trip()<edge_begin><edge_end>Social Event()
Email()<edge_begin><edge_end>Document()
Topic()<edge_begin><edge_end>Conference part()
Presentation()<edge_begin><edge_end>Conference contribution()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Notification Email()<edge_begin><edge_end>Email()
summary of reviews()<edge_begin><edge_end>article()
Administrator()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Negative Review()<edge_begin><edge_end>Review()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>String()
Committee()<edge_begin><edge_end>Chair()
Document()<edge_begin><edge_end>User()
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Account()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Approval Email()<edge_begin><edge_end>Email()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Administrator()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
notification()<edge_begin><edge_end>article()
Program Committee Chair()<edge_begin><edge_end>Chairman()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference Participant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
summary of reviews()<edge_begin><edge_end>activity()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Single Level Conference()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Registration()<edge_begin><edge_end>Activity()
Review()<edge_begin><edge_end>Reviewer()
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Administrator()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Help Request()<edge_begin><edge_end>Request()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Author()
Company()<edge_begin><edge_end>Organization()
Full Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Numerical Review Question()<edge_begin><edge_end>Review Question()
Conference part()<edge_begin><edge_end>Track-workshop chair()
Submission event()<edge_begin><edge_end>Administrative event()
Role()<edge_begin><edge_end>Administrator()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Invited Speaker()<edge_begin><edge_end>Presenter()
Meal Menu()<edge_begin><edge_end>Document()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Positive Review()<edge_begin><edge_end>Review()
acceptance notification email()<edge_begin><edge_end>notification email()
Workshop()<edge_begin><edge_end>Working event()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author Not Reviewer()<edge_begin><edge_end>Author()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
Group Email()<edge_begin><edge_end>Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Conference contribution()<edge_begin><edge_end>Conference document()
Cryptography Topic()<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Tutorial()<edge_begin><edge_end>Conference part()
article()<edge_begin><edge_end>Abstract()
Submission Template()<edge_begin><edge_end>Event Setup()
University()<edge_begin><edge_end>Organization()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Subject Area()
article()<edge_begin><edge_end>classification()
Participant(early Registration)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Committe Role()<edge_begin><edge_end>Role()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Workshop Chair()<edge_begin><edge_end>PC Member()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Regular()<edge_begin><edge_end>Participant(early Registration)
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Thing()
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Government Organization()<edge_begin><edge_end>Organization()
review form()<edge_begin><edge_end>article()
Conference volume(has a location)<edge_begin><edge_end>String()
Research Topic()<edge_begin><edge_end>Thing()
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Review()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Closing Talk()<edge_begin><edge_end>Talk Event()
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Event Tracks()<edge_begin><edge_end>Event Setup()
Web Site()<edge_begin><edge_end>Document()
Reviewer()<edge_begin><edge_end>Administrator()
Trip()<edge_begin><edge_end>Social event()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Textual Review Question()<edge_begin><edge_end>Review Question()
PC Member()<edge_begin><edge_end>Possible Reviewer()
Contributed Talk()<edge_begin><edge_end>Document()
Contact Person URL()<edge_begin><edge_end>URL()
review form()<edge_begin><edge_end>activity()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
full paper submission date()<edge_begin><edge_end>date()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
University()<edge_begin><edge_end>Academic Institution()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
group email()<edge_begin><edge_end>article()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Event Approval()<edge_begin><edge_end>Activity()
Reviewing event()<edge_begin><edge_end>Administrative event()
paper assignment()<edge_begin><edge_end>activity()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Administrator()<edge_begin><edge_end>Reviewer()
Academic Institution()<edge_begin><edge_end>Academic Institution()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
PC Chair()<edge_begin><edge_end>PC Member()
date()<edge_begin><edge_end>Thing()
Break Event()<edge_begin><edge_end>Non Academic Event()
managing of conference process()<edge_begin><edge_end>activity()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Evaluated Paper()<edge_begin><edge_end>Review()
conference setup()<edge_begin><edge_end>URL()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>unsigned Long()
Conference Venue Place()<edge_begin><edge_end>Place()
User()<edge_begin><edge_end>Document()
Rejection Email()<edge_begin><edge_end>Email()
Chair()<edge_begin><edge_end>Committee member()
Short Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper Typologies()<edge_begin><edge_end>Event Setup()
Communications Topic()<edge_begin><edge_end>Topic()
Industrial Session()<edge_begin><edge_end>Conference Session()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Contribution co-author()<edge_begin><edge_end>Regular author()
Reviewing results event()<edge_begin><edge_end>Administrative event()
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Tutorial()<edge_begin><edge_end>Working event()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Head Role()<edge_begin><edge_end>Role()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Topic()<edge_begin><edge_end>Working event()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Reviewer()<edge_begin><edge_end>Personal Review History()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
end date of conference()<edge_begin><edge_end>date of conference()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Antennas Topic()<edge_begin><edge_end>Topic()
Neutral Review()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>Bid()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Mobile Computing Topic()<edge_begin><edge_end>Topic()
URL()<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Demo Session()<edge_begin><edge_end>Session()
Active Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Template()<edge_begin><edge_end>Document()
Abstract()<edge_begin><edge_end>Document()
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Scholar()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Reviewer()<edge_begin><edge_end>User()
article()<edge_begin><edge_end>Document()
Organising Agency()<edge_begin><edge_end>Organisation()
Conference Member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Acceptance()<edge_begin><edge_end>Decision()
Individual Presentation()<edge_begin><edge_end>Document()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Call for paper()<edge_begin><edge_end>Conference document()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
Submitted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Reviewer()<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Reviewer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Reviewer()
Invited talk()<edge_begin><edge_end>Presentation()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Document()
conference setup()<edge_begin><edge_end>Thing()
Session()<edge_begin><edge_end>Scientific Event()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Author()<edge_begin><edge_end>Conference Member()
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Conference Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Committee member()<edge_begin><edge_end>Committee()
Conference document()<edge_begin><edge_end>date()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
User()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
camera-ready submission date()<edge_begin><edge_end>date()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Document()
Committee()<edge_begin><edge_end>Co-chair()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>article()
Conference contributor()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
submission process()<edge_begin><edge_end>activity()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Organizer()<edge_begin><edge_end>Thing()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Decision()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
Event Creation()<edge_begin><edge_end>Activity()
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Communication Theory Topic()<edge_begin><edge_end>Topic()
External Reviewer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
program()<edge_begin><edge_end>chair()
Social Event()<edge_begin><edge_end>Non Academic Event()
Reviewer()<edge_begin><edge_end>Conference Member()
Steering committee()<edge_begin><edge_end>Committee()
Programme Brochure()<edge_begin><edge_end>Document()
activity()<edge_begin><edge_end>intensity()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Activity()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rated Papers()<edge_begin><edge_end>Active Paper()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Industry Organization()<edge_begin><edge_end>Organization()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Administrator()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Topic()<edge_begin><edge_end>Review preference(has a degree)
Senior Reviewer URL()<edge_begin><edge_end>URL()
Track()<edge_begin><edge_end>Scientific Event()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Bid()
Activity()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Week Reject Rating()<edge_begin><edge_end>Review Rating()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference Session()<edge_begin><edge_end>Session()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Organization()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Co-chair()<edge_begin><edge_end>Committee()
Free Time Break()<edge_begin><edge_end>Break Event()
Slide Set()<edge_begin><edge_end>Document()
SC Member()<edge_begin><edge_end>PC Member()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
article()<edge_begin><edge_end>Author()
Feature Request()<edge_begin><edge_end>Help Request()
Talk Event()<edge_begin><edge_end>Academic Event()
Member PC()<edge_begin><edge_end>Topic()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Demo Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Personal Review History()<edge_begin><edge_end>Reviewer()
Published Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
notification email()<edge_begin><edge_end>article()
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Accommodation Place()<edge_begin><edge_end>Place()
Dining Place()<edge_begin><edge_end>Place()
Abstract()<edge_begin><edge_end>Extended abstract()
Academia Organization()<edge_begin><edge_end>Organization()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Scholar()<edge_begin><edge_end>University()
Flyer()<edge_begin><edge_end>Document()
Assigned Paper()<edge_begin><edge_end>Submitted Paper()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
Track-workshop chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Conference volume(has a location)<edge_begin><edge_end>Committee()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Two Level Conference()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
NGO()<edge_begin><edge_end>Organization()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
TPC Member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Tutorial Chair()<edge_begin><edge_end>PC Member()
Role()<edge_begin><edge_end>Thing()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Tutorial()<edge_begin><edge_end>Individual Presentation()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Test Only Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Admin Role()<edge_begin><edge_end>Role()
Review()<edge_begin><edge_end>Conference document()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
Review()<edge_begin><edge_end>classification()
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
activity()<edge_begin><edge_end>article()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Reception()<edge_begin><edge_end>Social Event()
Event URL()<edge_begin><edge_end>URL()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Conference www(has a URL)<edge_begin><edge_end>String()
Chairman()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
chair()<edge_begin><edge_end>Reviewer()
Co-chair()<edge_begin><edge_end>Committee member()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Account()
Regular Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Misc()<edge_begin><edge_end>Help Request()
User()<edge_begin><edge_end>Thing()
Request()<edge_begin><edge_end>Activity()
Member PC()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Integer()
Reviewer Role()<edge_begin><edge_end>Role()
Track()<edge_begin><edge_end>Conference part()
Reviewed contribution()<edge_begin><edge_end>Review()
Working event()<edge_begin><edge_end>Topic()
article()<edge_begin><edge_end>activity()
Assistant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Chair URL()<edge_begin><edge_end>URL()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Assistance()<edge_begin><edge_end>Help Request()
Conference part()<edge_begin><edge_end>Topic()
Document()<edge_begin><edge_end>Thing()
Senior Program Committee member()<edge_begin><edge_end>activity()
Review()<edge_begin><edge_end>Possible Reviewer()
Active conference participant()<edge_begin><edge_end>Conference participant()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
OC Chair()<edge_begin><edge_end>OC Member()
Committee member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Rejection()<edge_begin><edge_end>Decision()
Abstract()<edge_begin><edge_end>Thing()
Chair PC()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Presentation()<edge_begin><edge_end>Active conference participant()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Conference applicant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Topic()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Reviewer()<edge_begin><edge_end>Reviewer()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Active Paper()<edge_begin><edge_end>Review Rating()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Conference document()
Workshop()<edge_begin><edge_end>Conference part()
participant()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
program()<edge_begin><edge_end>session()
Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Possible Reviewer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Meal Event()<edge_begin><edge_end>Meal Menu()
conference setup()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
Associated Chair()<edge_begin><edge_end>Chairman()
Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Workshop()<edge_begin><edge_end>Scientific Event()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Review Form Setup()<edge_begin><edge_end>Review Form()
Volunteer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Conference announcement()<edge_begin><edge_end>Conference document()
Paper Author()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Meeting Room Place()<edge_begin><edge_end>Place()
Reviewer()<edge_begin><edge_end>Review()
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Attendee()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Camera Ready event()<edge_begin><edge_end>Administrative event()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
OC Member()<edge_begin><edge_end>Conference Participant()
Chair()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
date of conference()<edge_begin><edge_end>date()
Personal Review History()<edge_begin><edge_end>Personal History()
Organisation()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>activity()
Review()<edge_begin><edge_end>Document()
Submitted contribution()<edge_begin><edge_end>Written contribution()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Student()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Review()<edge_begin><edge_end>Reviewed contribution()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Session Chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Agency Staff Member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Workshop Session()<edge_begin><edge_end>Session()
Associated Chair()<edge_begin><edge_end>Conference Member()
Programme()<edge_begin><edge_end>Document()
Abstract()<edge_begin><edge_end>article()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
chair()<edge_begin><edge_end>program()
Meal Menu()<edge_begin><edge_end>Meal Event()
Administrative event()<edge_begin><edge_end>Administrative event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Author()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Meta-Review()<edge_begin><edge_end>Review()
Member()<edge_begin><edge_end>Participant(early Registration)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Computer Networks Topic()<edge_begin><edge_end>Topic()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Conference Chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>External Reviewer()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Session Chair()<edge_begin><edge_end>Conference Participant()
Regular Session()<edge_begin><edge_end>Session()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Co-author()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Corresponding Author()<edge_begin><edge_end>Author()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Inforamtion()
Co-author()<edge_begin><edge_end>Author()
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Detail()<edge_begin><edge_end>Thing()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Administrator()<edge_begin><edge_end>Role()
Academic Institution()<edge_begin><edge_end>Organisation()
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
Chairman()<edge_begin><edge_end>Conference Member()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Poster Session()<edge_begin><edge_end>Session()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Paper Presentation()<edge_begin><edge_end>Academic Event()
I Required Capability Container()<edge_begin><edge_end>Capability Predicate(version Range)
Builder()<edge_begin><edge_end>I Builder(unit Type)
Aliased Required Capability(alias)<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Effective Capability Facade()<edge_begin><edge_end>Effective Facade()
Bee Hive(resolutions)<edge_begin><edge_end>Bee Model()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Synchronization()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Required Capability(version Range, greedy, max, min)<edge_begin><edge_end>Capability(name Space)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Versioned Capability(version)
Builder Input Context Decorator()<edge_begin><edge_end>Builder Input Decorator()
Effective Capability Facade()<edge_begin><edge_end>Capability(name Space)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>I Required Capability Container()
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Conditional Path Vector()
Conditional Path Vector()<edge_begin><edge_end>Path Vector(paths, base Path)
Best Found Unit Provider()<edge_begin><edge_end>Compound Unit Provider()
Builder Call Facade(aliases)<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Fragment Host()
Build Set(value Map, path Iterator)<edge_begin><edge_end>Path Iterator()
Bee Model()<edge_begin><edge_end>First Found Unit Provider()
Source Predicate()<edge_begin><edge_end>Path Group Predicate()
Build Concern Context(default Properties Removals)<edge_begin><edge_end>I Provided Capability Container()
Input Predicate()<edge_begin><edge_end>Capability Predicate(version Range)
Synchronization()<edge_begin><edge_end>Builder Query()
Effective Unit Facade()<edge_begin><edge_end>Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)
Effective Facade()<edge_begin><edge_end>I Effective Facade()
Requires Predicate(meta)<edge_begin><edge_end>Capability Predicate(version Range)
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Source Predicate()
Effective Requirement Facade()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Build Unit Repository()<edge_begin><edge_end>I Build Unit Repository()
Provides Predicate()<edge_begin><edge_end>Capability Predicate(version Range)
Resolution Info(status)<edge_begin><edge_end>I Status()
Build Call On Referenced Requirement()<edge_begin><edge_end>Build Call Single()
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Output Predicate()
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Requires Predicate(meta)
Builder Call(builder Name)<edge_begin><edge_end>Builder Input()
Unit Resolution Info()<edge_begin><edge_end>Resolution Info(status)
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Build Concern Context(default Properties Removals)
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Capability Predicate(version Range)
Build Call Single()<edge_begin><edge_end>Builder Call(builder Name)
Unit Repository Description(evaluated Options)<edge_begin><edge_end>Build Unit Repository()
Builder Input Group()<edge_begin><edge_end>Builder Input Decorator()
Effective Requirement Facade()<edge_begin><edge_end>Effective Facade()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>I Builder(unit Type)
Output Predicate()<edge_begin><edge_end>Path Group Predicate()
Effective Unit Facade()<edge_begin><edge_end>Effective Requirement Facade()
I Builder(unit Type)<edge_begin><edge_end>Builder Input()
Repository(name, documentation, handler Type)<edge_begin><edge_end>I Build Unit Repository()
Bee Model Repository()<edge_begin><edge_end>Bee Model()
Capability Predicate(version Range)<edge_begin><edge_end>Version Range()
Build Call On Selected Requirements()<edge_begin><edge_end>Build Call Multiple()
Path Group Predicate()<edge_begin><edge_end>Path Vector(paths, base Path)
Build Call On Selected Requirements()<edge_begin><edge_end>Capability Predicate(version Range)
Versioned Capability(version)<edge_begin><edge_end>Capability(name Space)
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>I Required Capability Container()
Unit Name Predicate()<edge_begin><edge_end>Capability Predicate(version Range)
Fragment Host()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Container Configuration(documentation, name)
Build Set(value Map, path Iterator)<edge_begin><edge_end>Path Vector(paths, base Path)
Execution Stack Repository()<edge_begin><edge_end>Build Unit Repository()
Path Group()<edge_begin><edge_end>Conditional Path Vector()
Compound First Found Repository()<edge_begin><edge_end>Compound Build Unit Repository()
I Provided Capability Container()<edge_begin><edge_end>Capability(name Space)
Repository(name, documentation, handler Type)<edge_begin><edge_end>Repo Option(name)
Repository Unit Provider()<edge_begin><edge_end>Unit Provider(documentation)
Build Call On Declared Requirement()<edge_begin><edge_end>Build Call Single()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>First Found Unit Provider()
Repository Unit Provider()<edge_begin><edge_end>I Build Unit Repository()
Repository Unit Provider()<edge_begin><edge_end>Repository(name, documentation, handler Type)
First Found Unit Provider()<edge_begin><edge_end>Compound Unit Provider()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Repository(name, documentation, handler Type)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>I Provided Capability Container()
I Builder(unit Type)<edge_begin><edge_end>I Provided Capability Container()
Compound Build Unit Repository()<edge_begin><edge_end>Build Unit Repository()
Builder Input Decorator()<edge_begin><edge_end>Builder Input()
Compound Unit Provider()<edge_begin><edge_end>Unit Provider(documentation)
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Build Concern Context(default Properties Removals)
Builder Call Facade(aliases)<edge_begin><edge_end>Builder Call(builder Name)
I Builder(unit Type)<edge_begin><edge_end>Unit Parameter Declaration()
Builder Input Condition()<edge_begin><edge_end>Builder Input Decorator()
Build Call On Referenced Requirement()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Provides Predicate()
Bee Model()<edge_begin><edge_end>I Build Unit Container()
Effective Unit Facade()<edge_begin><edge_end>Effective Capability Facade()
Required Capability(version Range, greedy, max, min)<edge_begin><edge_end>Version Range()
I Build Unit Container()<edge_begin><edge_end>Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)
Repository Unit Provider()<edge_begin><edge_end>Repo Option(name)
Build Call On Declared Requirement()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Effective Unit Facade()<edge_begin><edge_end>Effective Facade()
Bee Model Repository()<edge_begin><edge_end>Build Unit Repository()
Effective Builder Call Facade()<edge_begin><edge_end>I Effective Facade()
Project(name)<edge_begin><edge_end>Background(dashboard)
Given(dashboard)<edge_begin><edge_end>Data(type, location Type, quantifier, location)
Loading(new)<edge_begin><edge_end>When()
Scenario(name)<edge_begin><edge_end>When()
Scenario(name)<edge_begin><edge_end>Given(dashboard)
Scenario(name)<edge_begin><edge_end>Then()
When()<edge_begin><edge_end>View(name, desc)
Update(do)<edge_begin><edge_end>View(name, desc)
Update(do)<edge_begin><edge_end>Then()
Goal(function, data)<edge_begin><edge_end>Then()
Feature(name, desc)<edge_begin><edge_end>Scenario(name)
Interaction(action, target)<edge_begin><edge_end>When()
Up IR Iref NE()<edge_begin><edge_end>IR Ireference()
STRING LITERAL2(string)<edge_begin><edge_end>String Literal()
Ask Query()<edge_begin><edge_end>Dataset Clause()
Minus Multiplicative Expression NE()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Str Built In Call NE()<edge_begin><edge_end>Built In Call()
BLANK NODE LABEL(pn local)<edge_begin><edge_end>Blank Node()
Equals Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Blank Node Property List()<edge_begin><edge_end>Triples Node()
Limit Offset Clauses Left NE()<edge_begin><edge_end>Limit Clause()
Bigger Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Function Call()<edge_begin><edge_end>IR Ireference()
Sparql Queries()<edge_begin><edge_end>Prologue()
Object List()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Select Query()<edge_begin><edge_end>Var(varname)
Numeric Literal Negative()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Additive Expression()<edge_begin><edge_end>Multiplicative Expression()
Additional Value Logical NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Graph Pattern Not Triples()<edge_begin><edge_end>Pattern Or Filter NE()
Unary Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Prologue()<edge_begin><edge_end>Prefix Decl()
Dataset Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Construct Template()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional Conditional And Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Triples Same Subject()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional Multiplicative Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Triples Same Subject Right NE()<edge_begin><edge_end>Property List Not Empty()
Additional Value Logical NE()<edge_begin><edge_end>Relational Expression()
Datatype Built In Call NE()<edge_begin><edge_end>Expression()
Is IRI Built In Call NE()<edge_begin><edge_end>Built In Call()
Group Graph Pattern()<edge_begin><edge_end>Additional GGP Element()
Arg List Expression NE()<edge_begin><edge_end>Additional Expression NE()
Str Built In Call NE()<edge_begin><edge_end>Expression()
Additional Conditional And Expression NE()<edge_begin><edge_end>Conditional And Expression()
Is Literal Built In Call NE()<edge_begin><edge_end>Expression()
PN PREFIX(pn prefix)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Not Equal Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Bigger Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Order Clause()<edge_begin><edge_end>Order Condition()
Limit Offset Clauses Left NE()<edge_begin><edge_end>Offset Clause()
Descending Literal()<edge_begin><edge_end>Asc Or Decs()
IRI REF(iri ref)<edge_begin><edge_end>IR Ireference()
Not In List()<edge_begin><edge_end>Graph Term()
Same Term Built In Call NE()<edge_begin><edge_end>Additional Expression NE()
RDF Literal()<edge_begin><edge_end>Primary Expression()
Conditional And Expression()<edge_begin><edge_end>Additional Value Logical NE()
Triples Same Subject Left NE()<edge_begin><edge_end>Triples Same Subject()
STRING LITERAL1(string)<edge_begin><edge_end>String Literal()
Triples Same Subject Left NE()<edge_begin><edge_end>Var Or Term()
Offset Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Is Blank Built In Call NE()<edge_begin><edge_end>Expression()
Verb()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
PNAME LN()<edge_begin><edge_end>Var Or IR Iref()
Prefix Decl()<edge_begin><edge_end>IRI REF(iri ref)
Property List Not Empty()<edge_begin><edge_end>Object List()
Boolean Literal()<edge_begin><edge_end>Primary Expression()
Limit Offset Clauses Right NE()<edge_begin><edge_end>Limit Clause()
Conditional Or Expression()<edge_begin><edge_end>Conditional And Expression()
STRING LITERAL LONG2(string)<edge_begin><edge_end>String Literal()
ANON()<edge_begin><edge_end>Blank Node()
Ask Query()<edge_begin><edge_end>Query()
Langmatches Built In Call NE()<edge_begin><edge_end>Expression()
Order Condition Left NE()<edge_begin><edge_end>Bracketted Expression()
Times Additional Unary Expression NE()<edge_begin><edge_end>Unary Expression()
Offset Clause()<edge_begin><edge_end>INTEGER(integer)
Var(varname)<edge_begin><edge_end>Primary Expression()
Value Logical()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Numeric Literal Positive()<edge_begin><edge_end>Numeric Literal()
Function Call()<edge_begin><edge_end>Arg List()
Named Graph Clause()<edge_begin><edge_end>Source Selector()
Multiplicative Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Relational Expression()<edge_begin><edge_end>Additional Numeric Expression NE()
IR Ireference()<edge_begin><edge_end>Var Or IR Iref()
Object()<edge_begin><edge_end>Graph Node()
Blank Node()<edge_begin><edge_end>Graph Term()
Divided By Additional Unary Expression NE()<edge_begin><edge_end>Unary Expression()
Graph Graph Pattern()<edge_begin><edge_end>Var Or IR Iref()
Is Blank Built In Call NE()<edge_begin><edge_end>Built In Call()
Construct Query()<edge_begin><edge_end>Dataset Clause()
Smaller Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Limit Clause()<edge_begin><edge_end>INTEGER(integer)
Times Additional Unary Expression NE()<edge_begin><edge_end>Additional Unary Expression NE()
Ascending Literal()<edge_begin><edge_end>Asc Or Decs()
Graph Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Expression()<edge_begin><edge_end>Conditional Or Expression()
Source Selector()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
ANON()<edge_begin><edge_end>WS(ws)
Numeric Literal Negative()<edge_begin><edge_end>Numeric Literal()
Plus Multiplicative Expression NE()<edge_begin><edge_end>Multiplicative Expression()
PNAME NS(pn prefix)<edge_begin><edge_end>Var Or IR Iref()
Additive Expression()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Built In Call()<edge_begin><edge_end>Primary Expression()
Plus Primary Expression NE()<edge_begin><edge_end>Primary Expression()
Select Query()<edge_begin><edge_end>Query()
All Variables NE()<edge_begin><edge_end>Variables NE()
Query()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Verb ANE(the A)<edge_begin><edge_end>Verb()
Numeric Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
PNAME LN()<edge_begin><edge_end>PN LOCAL(pn local)
Additional Expression NE()<edge_begin><edge_end>Conditional Or Expression()
Same Term Built In Call NE()<edge_begin><edge_end>Built In Call()
Var(varname)<edge_begin><edge_end>Var Or IR Iref()
Is URI Built In Call NE()<edge_begin><edge_end>Built In Call()
Describe Query()<edge_begin><edge_end>Var Or IR Iref()
Limit Offset Clauses Right NE()<edge_begin><edge_end>Offset Clause()
IR Iref Or Function()<edge_begin><edge_end>Primary Expression()
Where Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Bound Built In Call NE()<edge_begin><edge_end>Var(varname)
Arg List()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Bigger Or Equal Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Describe Query()<edge_begin><edge_end>Query()
Default Graph Clause()<edge_begin><edge_end>Source Selector()
Not Primary Expression NE()<edge_begin><edge_end>Unary Expression()
Var(varname)<edge_begin><edge_end>Order Condition Right NE()
Property List Not Empty()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Property List Not Empty()<edge_begin><edge_end>Verb()
Smaller Or Equal Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Numeric Literal()<edge_begin><edge_end>Primary Expression()
Solution Modifier()<edge_begin><edge_end>Limit Offset Clauses()
Select Query()<edge_begin><edge_end>Solutions Display NE()
Numeric Literal()<edge_begin><edge_end>Graph Term()
Order Condition Left NE()<edge_begin><edge_end>Order Condition()
VAR1()<edge_begin><edge_end>VARNAME(varname)
Arg List Expression NE()<edge_begin><edge_end>Arg List()
Dataset Clause()<edge_begin><edge_end>Graph Clause NE()
Triples Node()<edge_begin><edge_end>Graph Node()
Bound Built In Call NE()<edge_begin><edge_end>Built In Call()
Datatype Built In Call NE()<edge_begin><edge_end>Built In Call()
Relational Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Some Variables NE()<edge_begin><edge_end>Variables NE()
Minus Primary Expression NE()<edge_begin><edge_end>Unary Expression()
Plus Primary Expression NE()<edge_begin><edge_end>Unary Expression()
Not Equal Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
LANGTAG Or IR Iref NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Function Call()<edge_begin><edge_end>Constraint()
Filter()<edge_begin><edge_end>Pattern Or Filter NE()
Construct Query()<edge_begin><edge_end>Solution Modifier()
Minus Multiplicative Expression NE()<edge_begin><edge_end>Multiplicative Expression()
Conditional Or Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Graph Term()<edge_begin><edge_end>Var Or Term()
Object List()<edge_begin><edge_end>Object()
LANGTAG(langtag)<edge_begin><edge_end>LANGTAG Or IR Iref NE()
Select Query()<edge_begin><edge_end>Where Clause()
Arg List NILNE()<edge_begin><edge_end>Not In List()
Is IRI Built In Call NE()<edge_begin><edge_end>Expression()
Relational Expression()<edge_begin><edge_end>Numeric Expression()
IR Iref Or Function()<edge_begin><edge_end>IR Ireference()
Triples Same Subject Right NE()<edge_begin><edge_end>Triples Node()
Sparql Queries()<edge_begin><edge_end>Query()
Is Literal Built In Call NE()<edge_begin><edge_end>Built In Call()
Base Decl()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
IR Ireference()<edge_begin><edge_end>Source Selector()
Describe Query()<edge_begin><edge_end>Where Clause()
Langmatches Built In Call NE()<edge_begin><edge_end>Built In Call()
Built In Call()<edge_begin><edge_end>Constraint()
VAR2()<edge_begin><edge_end>VARNAME(varname)
Value Logical()<edge_begin><edge_end>Relational Expression()
Lang Built In Call NE()<edge_begin><edge_end>Built In Call()
Regex Expression()<edge_begin><edge_end>Expression()
Group Or Union Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Same Term Built In Call NE()<edge_begin><edge_end>Expression()
Prologue()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Where Clause()<edge_begin><edge_end>Group Graph Pattern()
INTEGER(integer)<edge_begin><edge_end>Numeric Literal()
Constraint()<edge_begin><edge_end>Order Condition Right NE()
Additional GGP Element()<edge_begin><edge_end>Triples Block()
RDF Literal()<edge_begin><edge_end>Graph Term()
Conditional Or Expression()<edge_begin><edge_end>Additional Conditional And Expression NE()
Order Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Limit Offset Clauses Left NE()<edge_begin><edge_end>Limit Offset Clauses()
Not Primary Expression NE()<edge_begin><edge_end>Primary Expression()
Group Or Union Graph Pattern()<edge_begin><edge_end>Graph Pattern Not Triples()
RDF Literal()<edge_begin><edge_end>LANGTAG Or IR Iref NE()
Smaller Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Describe Query()<edge_begin><edge_end>Dataset Clause()
Where Clause()<edge_begin><edge_end>Where Literal()
Variables NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Numeric Literal Positive()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Primary Expression()<edge_begin><edge_end>Unary Expression()
Additional GGP Element()<edge_begin><edge_end>Pattern Or Filter NE()
Limit Offset Clauses Right NE()<edge_begin><edge_end>Limit Offset Clauses()
Triples Block()<edge_begin><edge_end>Triples Same Subject()
WS(ws)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Divided By Additional Unary Expression NE()<edge_begin><edge_end>Additional Unary Expression NE()
VARNAME(varname)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Solutions Display NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Bracketted Expression()<edge_begin><edge_end>Primary Expression()
IRI REF(iri ref)<edge_begin><edge_end>Var Or IR Iref()
Distinct NE()<edge_begin><edge_end>Solutions Display NE()
Boolean Literal()<edge_begin><edge_end>Graph Term()
Construct Query()<edge_begin><edge_end>Query()
Graph Clause NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Base Decl()<edge_begin><edge_end>IRI REF(iri ref)
Not In List()<edge_begin><edge_end>WS(ws)
Prefix Decl()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Arg List Expression NE()<edge_begin><edge_end>Expression()
PNAME LN()<edge_begin><edge_end>Prefixed Name()
Graph Graph Pattern()<edge_begin><edge_end>Graph Pattern Not Triples()
STRING LITERAL LONG1(string)<edge_begin><edge_end>String Literal()
Langmatches Built In Call NE()<edge_begin><edge_end>Additional Expression NE()
Prefix Decl()<edge_begin><edge_end>PNAME NS(pn prefix)
Collection()<edge_begin><edge_end>Graph Node()
Filter()<edge_begin><edge_end>Constraint()
Smaller Or Equal Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Plus Multiplicative Expression NE()<edge_begin><edge_end>Additional Multiplicative Expression NE()
True Boolean Literal NE()<edge_begin><edge_end>Boolean Literal()
Triples Same Subject Left NE()<edge_begin><edge_end>Property List Not Empty()
Bracketted Expression()<edge_begin><edge_end>Expression()
Order Condition()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional Unary Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Object()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Conditional And Expression()<edge_begin><edge_end>Value Logical()
Is URI Built In Call NE()<edge_begin><edge_end>Expression()
Additional Numeric Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Collection()<edge_begin><edge_end>Triples Node()
Numeric Expression()<edge_begin><edge_end>Additive Expression()
PNAME NS(pn prefix)<edge_begin><edge_end>Prefixed Name()
Range Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Subquery()<edge_begin><edge_end>Subquery Select Clause()
Subquery()<edge_begin><edge_end>Subquery From Clause(candidate Class Name, is Exclude Subclasses)
Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)<edge_begin><edge_end>Result Naming(identifier)
Conditional Or Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Subquery()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Simple Or Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Group By Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Single String JDOQL()<edge_begin><edge_end>From Clause(candidate Class Name, is Exclude Subclasses)
Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Subquery From Clause(candidate Class Name, is Exclude Subclasses)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Single String JDOQL()<edge_begin><edge_end>Parameters Clause()
Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)<edge_begin><edge_end>Order By Spec()
Field Access Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Single String JDOQL()<edge_begin><edge_end>Order By Clause()
Subquery()<edge_begin><edge_end>Import Clause(import Declarations)
Subquery From Clause(candidate Class Name, is Exclude Subclasses)<edge_begin><edge_end>Alias(identifier)
Subquery()<edge_begin><edge_end>Variables Clause()
Group By Clause()<edge_begin><edge_end>Having Clause()
Single String JDOQL()<edge_begin><edge_end>Import Clause(import Declarations)
Single String JDOQL()<edge_begin><edge_end>Range Clause()
Subquery()<edge_begin><edge_end>Parameters Clause()
Conditional And Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Single String JDOQL()<edge_begin><edge_end>Variables Clause()
Result Clause(is Distinct)<edge_begin><edge_end>Result Spec()
Subquery Result Clause(is Distinct)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Parameters Clause()<edge_begin><edge_end>Parameter Declaration(type, declared Parameter Name)
Single String JDOQL()<edge_begin><edge_end>Select Clause(is Unique)
Single String JDOQL()<edge_begin><edge_end>Group By Clause()
Having Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Where Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Addition Expression(operator)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Select Clause(is Unique)<edge_begin><edge_end>Into Clause(result Class Name)
Comparison Operator Expression(operator)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Para Content Elt()<edge_begin><edge_end>Para Elt()
Del Instr Text()<edge_begin><edge_end>String Type(val)
Endnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Footnote()<edge_begin><edge_end>Run Content Elt()
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Block Level Elt()<edge_begin><edge_end>Body Elt()
Separator()<edge_begin><edge_end>Run Content Elt()
Block Level Elt()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Sym Elt()<edge_begin><edge_end>String Type(val)
Endnote()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Run Elt()<edge_begin><edge_end>Para Content Elt()
Picture()<edge_begin><edge_end>Run Content Elt()
Body Elt()<edge_begin><edge_end>Word Document()
Text()<edge_begin><edge_end>String Type(val)
Text()<edge_begin><edge_end>Run Content Elt()
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Para Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
Del Text()<edge_begin><edge_end>String Type(val)
String Property()<edge_begin><edge_end>String Type(val)
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Tab()<edge_begin><edge_end>Run Content Elt()
Run Elt()<edge_begin><edge_end>Run Content Elt()
Body Elt()<edge_begin><edge_end>Block Level Elt()
Del Instr Text()<edge_begin><edge_end>Run Content Elt()
Del Text()<edge_begin><edge_end>Run Content Elt()
Block Level Chunk Elt()<edge_begin><edge_end>Block Level Elt()
Run Content Elt()<edge_begin><edge_end>Run Elt()
Cr()<edge_begin><edge_end>Run Content Elt()
Fld Char()<edge_begin><edge_end>Run Content Elt()
Symbol()<edge_begin><edge_end>Sym Elt()
Para Elt()<edge_begin><edge_end>Para Content Elt()
String Type(val)<edge_begin><edge_end>String()
Symbol()<edge_begin><edge_end>Run Content Elt()
Remove Sequence()<edge_begin><edge_end>Sequence Change()
Schema Change()<edge_begin><edge_end>DB Diff()
Remove Primary Key()<edge_begin><edge_end>Primary Key Change()
Remove Schema()<edge_begin><edge_end>Schema Change()
Remove Column Change()<edge_begin><edge_end>Column Change()
Add Sequence()<edge_begin><edge_end>Sequence Change()
Add Table()<edge_begin><edge_end>Table Change()
Update Primary Key()<edge_begin><edge_end>Primary Key Change()
Rename Column Change()<edge_begin><edge_end>Column Change()
Alter Table()<edge_begin><edge_end>Table Change()
Add Column Change()<edge_begin><edge_end>Column Change()
Update Index()<edge_begin><edge_end>Index Change()
Alter Schema()<edge_begin><edge_end>Schema Change()
Add Schema()<edge_begin><edge_end>Schema Change()
Constraint Change()<edge_begin><edge_end>DB Diff()
Update Schema Comment Change()<edge_begin><edge_end>Schema Change()
Rename Schema Change()<edge_begin><edge_end>Schema Change()
Update Constraint()<edge_begin><edge_end>Constraint Change()
Remove Table()<edge_begin><edge_end>Table Change()
Remove Foreign Key()<edge_begin><edge_end>Foreign Key Change()
Primary Key Change()<edge_begin><edge_end>DB Diff()
Add Index()<edge_begin><edge_end>Index Change()
Column Change()<edge_begin><edge_end>DB Diff()
Table Change()<edge_begin><edge_end>DB Diff()
Add Foreign Key()<edge_begin><edge_end>Foreign Key Change()
Remove Index()<edge_begin><edge_end>Index Change()
Update Column Comment Change()<edge_begin><edge_end>Column Change()
Index Change()<edge_begin><edge_end>DB Diff()
Update Table Comment Change()<edge_begin><edge_end>Table Change()
Update Column Change()<edge_begin><edge_end>Column Change()
Update Sequence()<edge_begin><edge_end>Sequence Change()
Base Table()<edge_begin><edge_end>Primary Key()
Relationship()<edge_begin><edge_end>Relational Entity(name, name In Source)
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Catalog()
Unique Key()<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
Unique Key()<edge_begin><edge_end>Relational Entity(name, name In Source)
Index(filter Condition, nullable, auto Update, unique)<edge_begin><edge_end>Schema()
Unique Constraint()<edge_begin><edge_end>Base Table()
Procedure(function, update Count)<edge_begin><edge_end>Relational Entity(name, name In Source)
Access Pattern()<edge_begin><edge_end>Relational Entity(name, name In Source)
Access Pattern()<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
Unique Key()<edge_begin><edge_end>Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)
Procedure(function, update Count)<edge_begin><edge_end>Catalog()
Catalog()<edge_begin><edge_end>Procedure(function, update Count)
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Logical Relationship End(multiplicity)
Schema()<edge_begin><edge_end>Index(filter Condition, nullable, auto Update, unique)
Catalog()<edge_begin><edge_end>Index(filter Condition, nullable, auto Update, unique)
Logical Relationship()<edge_begin><edge_end>Relationship()
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Column Set()
Column Set()<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
View()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Base Table()<edge_begin><edge_end>Unique Constraint()
Schema()<edge_begin><edge_end>Logical Relationship()
Procedure Result()<edge_begin><edge_end>Column Set()
Procedure Parameter(direction, default Value, native Type, length, precision, scale, nullable, radix)<edge_begin><edge_end>Procedure(function, update Count)
Procedure Result()<edge_begin><edge_end>Procedure(function, update Count)
Procedure(function, update Count)<edge_begin><edge_end>Schema()
Access Pattern()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Procedure Parameter(direction, default Value, native Type, length, precision, scale, nullable, radix)<edge_begin><edge_end>Relational Entity(name, name In Source)
Primary Key()<edge_begin><edge_end>Base Table()
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Access Pattern()
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)
Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)<edge_begin><edge_end>Unique Key()
Logical Relationship End(multiplicity)<edge_begin><edge_end>Relational Entity(name, name In Source)
Logical Relationship End(multiplicity)<edge_begin><edge_end>Logical Relationship()
Schema()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Index(filter Condition, nullable, auto Update, unique)<edge_begin><edge_end>Catalog()
Base Table()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Index(filter Condition, nullable, auto Update, unique)<edge_begin><edge_end>Relational Entity(name, name In Source)
Procedure(function, update Count)<edge_begin><edge_end>Procedure Parameter(direction, default Value, native Type, length, precision, scale, nullable, radix)
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Access Pattern()
Logical Relationship()<edge_begin><edge_end>Catalog()
Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)<edge_begin><edge_end>Base Table()
Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)<edge_begin><edge_end>Relationship()
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Unique Key()
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Index(filter Condition, nullable, auto Update, unique)
Catalog()<edge_begin><edge_end>Relational Entity(name, name In Source)
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Schema()
Schema()<edge_begin><edge_end>Procedure(function, update Count)
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Relational Entity(name, name In Source)
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Column Set()
Schema()<edge_begin><edge_end>Catalog()
Catalog()<edge_begin><edge_end>Schema()
File Set(dir)<edge_begin><edge_end>Excludes()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Task()<edge_begin><edge_end>Contents Goal()
Filters File(file)<edge_begin><edge_end>String()
Abstract Goal()<edge_begin><edge_end>Contents Goal()
Exec(executable, dir)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>String()
Pattern Set()<edge_begin><edge_end>Set()
Mkdir(dir)<edge_begin><edge_end>String()
Set()<edge_begin><edge_end>Pattern()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>String()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>String()
Goal(name)<edge_begin><edge_end>Abstract Goal()
Ant Task Def(name, classname)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Project()<edge_begin><edge_end>Pre Post Goal()
Ant Property File(file)<edge_begin><edge_end>Ant Property()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Path Element(path, location)<edge_begin><edge_end>String()
New Task()<edge_begin><edge_end>Ant Task Def(name, classname)
Jelly Set(var, value)<edge_begin><edge_end>String()
Project()<edge_begin><edge_end>Xmlns(name, value)
Ant Property Location(location)<edge_begin><edge_end>String()
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Attribut(name, value)<edge_begin><edge_end>String()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Filters File(file)<edge_begin><edge_end>Basic()
Class Path(refid)<edge_begin><edge_end>String()
Format Tstamp(property, pattern, offset, unit, locale)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Pattern Set()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Pre Goal()<edge_begin><edge_end>Goal(name)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Ant Property Value(value)<edge_begin><edge_end>String()
Filter(token, value)<edge_begin><edge_end>Basic()
Filter(token, value)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Attain Goal()<edge_begin><edge_end>Goal(name)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Jelly Set(var, value)<edge_begin><edge_end>Jelly Command()
Jelly For Each(items, var, index Var)<edge_begin><edge_end>Contents Goal()
Path(id, refid)<edge_begin><edge_end>Set()
Ant Property Name(name)<edge_begin><edge_end>Ant Property()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>String()
File List(dir, files)<edge_begin><edge_end>String()
Ant Task Def(name, classname)<edge_begin><edge_end>Contents Goal()
File Set(dir)<edge_begin><edge_end>Set()
Post Goal()<edge_begin><edge_end>Pre Post Goal()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>String()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Ant Property Location(location)<edge_begin><edge_end>Ant Property Name(name)
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>String()
Jelly For Each(items, var, index Var)<edge_begin><edge_end>Jelly Command()
Post Goal()<edge_begin><edge_end>Goal(name)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
New Task()<edge_begin><edge_end>Task()
Pre Goal()<edge_begin><edge_end>Pre Post Goal()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Echo(message, file, append)<edge_begin><edge_end>String()
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Project()<edge_begin><edge_end>Path(id, refid)
Mkdir(dir)<edge_begin><edge_end>File Task()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
File Set(dir)<edge_begin><edge_end>Includes()
File List(dir, files)<edge_begin><edge_end>Basic()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Path Element(path, location)<edge_begin><edge_end>Basic()
Ant Property Name(name)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
New Task()<edge_begin><edge_end>Attribut(name, value)
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Project()<edge_begin><edge_end>Ant Property()
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Set(dir)<edge_begin><edge_end>String()
Goal(name)<edge_begin><edge_end>Post Goal()
Jelly For Each(items, var, index Var)<edge_begin><edge_end>String()
Ant Property Env(environment)<edge_begin><edge_end>Ant Property()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Xmlns(name, value)<edge_begin><edge_end>String()
Rich String Table Row()<edge_begin><edge_end>Rich String Markup(id, style Class)
BPM Process Description()<edge_begin><edge_end>Rich String()
Rich String UI Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Code(lang)<edge_begin><edge_end>Rich String Markup(id, style Class)
General Document()<edge_begin><edge_end>Document Include(var Name)
Rich String H4()<edge_begin><edge_end>Rich String Markup(id, style Class)
Entity Layout()<edge_begin><edge_end>Lunifera Doc Layout()
Rich String Ordered List()<edge_begin><edge_end>Rich String List Element()
UI Layout()<edge_begin><edge_end>Lunifera Doc Layout()
Rich String Open View(view Id)<edge_begin><edge_end>Rich String Markup(id, style Class)
Entity Document(entity Class)<edge_begin><edge_end>Entity Fields()
BPM Human Task Layout()<edge_begin><edge_end>Lunifera Doc Layout()
Rich String Italic()<edge_begin><edge_end>Rich String Markup(id, style Class)
BPM Process Document(process)<edge_begin><edge_end>BPM Process Description()
Rich String Process Ref()<edge_begin><edge_end>BPM Process Document(process)
Rich String List()<edge_begin><edge_end>Rich String List Element()
BPM Human Task Document(task)<edge_begin><edge_end>BPM Human Task Description()
DTO Properties()<edge_begin><edge_end>DTO Property(name)
Rich String Task Ref()<edge_begin><edge_end>BPM Human Task Document(task)
Rich String H3()<edge_begin><edge_end>Rich String Markup(id, style Class)
Lunifera Doc Document()<edge_begin><edge_end>Named Document(name)
Lunifera Doc Layout()<edge_begin><edge_end>Rich String()
Rich String If()<edge_begin><edge_end>Rich String Else If()
Rich String Skype(target)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Process Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Vaaclipse View Document(view)<edge_begin><edge_end>Vaaclipse View Description()
Rich String Table()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Bold()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Underline()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String View Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String URL(location)<edge_begin><edge_end>Rich String Markup(id, style Class)
Document Include(var Name)<edge_begin><edge_end>Lunifera Doc Document()
BPM Process Layout()<edge_begin><edge_end>Lunifera Doc Layout()
DTO Document(dto Class)<edge_begin><edge_end>Lunifera Doc Document()
Rich String Ref(ref Id)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Table()<edge_begin><edge_end>Rich String Table Row()
Rich String Entity Ref()<edge_begin><edge_end>Entity Document(entity Class)
BPM Process Document(process)<edge_begin><edge_end>Lunifera Doc Document()
UI Description()<edge_begin><edge_end>Rich String()
Entity Field(name, type, length, pk, nullable)<edge_begin><edge_end>Rich String()
Vaaclipse View Document(view)<edge_begin><edge_end>Lunifera Doc Document()
Vaaclipse View Layout()<edge_begin><edge_end>Lunifera Doc Layout()
Vaaclipse View Description()<edge_begin><edge_end>Rich String()
Rich String H1()<edge_begin><edge_end>Rich String Markup(id, style Class)
General Document()<edge_begin><edge_end>Lunifera Doc Layout()
Entity Description()<edge_begin><edge_end>Rich String()
BPM Human Task Document(task)<edge_begin><edge_end>Lunifera Doc Document()
Rich String DTO Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Chapter(name)<edge_begin><edge_end>Rich String Markup(id, style Class)
Entity Document(entity Class)<edge_begin><edge_end>Lunifera Doc Document()
Rich String List()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Span()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Table Row()<edge_begin><edge_end>Rich String Table Data()
DTO Document(dto Class)<edge_begin><edge_end>DTO Description()
DTO Description()<edge_begin><edge_end>Rich String()
DTO Property(name)<edge_begin><edge_end>Rich String()
Entity Fields()<edge_begin><edge_end>Entity Field(name, type, length, pk, nullable)
Rich String Task Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
UI Document(ui)<edge_begin><edge_end>UI Description()
Rich String View Ref()<edge_begin><edge_end>Vaaclipse View Document(view)
Rich String Mailto(email)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String UI Ref()<edge_begin><edge_end>UI Document(ui)
Rich String H5()<edge_begin><edge_end>Rich String Markup(id, style Class)
BPM Human Task Description()<edge_begin><edge_end>Rich String()
Rich String Start Process(process Id)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Movie(src, width, height, type)<edge_begin><edge_end>Rich String Markup(id, style Class)
Publication System()<edge_begin><edge_end>Publication Structure()
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Review(date)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Position(description)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Position(description)<edge_begin><edge_end>Position(description)
Progress(percent)<edge_begin><edge_end>Paper()
Paper()<edge_begin><edge_end>Paragraph(content)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phases(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication System()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Review(date)<edge_begin><edge_end>Review Note(content)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Position(description)
Publication Structure()<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Publication System()<edge_begin><edge_end>Keyword(description)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Paper()<edge_begin><edge_end>Named(name)
Document Root(mixed)<edge_begin><edge_end>schema(kind, name, o ID)
Document Root(mixed)<edge_begin><edge_end>tables(group)
schema(kind, name, o ID)<edge_begin><edge_end>foreign Keys(group)
columns(group)<edge_begin><edge_end>column(kind, name, o ID, type)
schema(kind, name, o ID)<edge_begin><edge_end>tables(group)
Document Root(mixed)<edge_begin><edge_end>RDBMS()
referenced Columns(group)<edge_begin><edge_end>o ID(o ID)
foreign Keys(group)<edge_begin><edge_end>foreign Key(kind, name, o ID, owner, refers To)
key2()<edge_begin><edge_end>key(kind, name, o ID)
Document Root(mixed)<edge_begin><edge_end>foreign Keys(group)
Document Root(mixed)<edge_begin><edge_end>has Foreign Keys(group)
has Foreign Keys(group)<edge_begin><edge_end>o ID(o ID)
schemas(group)<edge_begin><edge_end>schema(kind, name, o ID)
Document Root(mixed)<edge_begin><edge_end>schemas(group)
Document Root(mixed)<edge_begin><edge_end>key(kind, name, o ID)
Document Root(mixed)<edge_begin><edge_end>key2()
Document Root(mixed)<edge_begin><edge_end>foreign Key(kind, name, o ID, owner, refers To)
Document Root(mixed)<edge_begin><edge_end>column(kind, name, o ID, type)
column(kind, name, o ID, type)<edge_begin><edge_end>referenced Keys(group)
key(kind, name, o ID)<edge_begin><edge_end>referenced Columns(group)
foreign Key(kind, name, o ID, owner, refers To)<edge_begin><edge_end>referenced Columns(group)
table(kind, name, o ID)<edge_begin><edge_end>columns(group)
RDBMS()<edge_begin><edge_end>schemas(group)
referenced Keys(group)<edge_begin><edge_end>o ID(o ID)
table(kind, name, o ID)<edge_begin><edge_end>key2()
Document Root(mixed)<edge_begin><edge_end>referenced Keys(group)
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Proceedings()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Not Much()<edge_begin><edge_end>Overall Value()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
chair()<edge_begin><edge_end>program()
Organizing Committee()<edge_begin><edge_end>Thing()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Conference hotel()<edge_begin><edge_end>Building()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Organization()
Lecture(has Acronym)<edge_begin><edge_end>String()
notification()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Demo Chair()<edge_begin><edge_end>Conference Participant()
Review()<edge_begin><edge_end>Primary Reviewer()
paper assignment()<edge_begin><edge_end>Program Committee member()
Non speaker()<edge_begin><edge_end>Delegate()
article()<edge_begin><edge_end>classification()
Presenter()<edge_begin><edge_end>Conference Participant()
Author()<edge_begin><edge_end>Award()
Credit card()<edge_begin><edge_end>Card()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
IASTED non member()<edge_begin><edge_end>Delegate()
Abstract()<edge_begin><edge_end>article()
Review Values()<edge_begin><edge_end>Value Partition()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Session(room)<edge_begin><edge_end>Scientific Event()
City()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Possible Reviewer()
Clear Accept()<edge_begin><edge_end>Reccommendation()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Conference document()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>String()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Conference contribution()<edge_begin><edge_end>Conference document()
Conference Banquet()<edge_begin><edge_end>Social Event()
Overall Value()<edge_begin><edge_end>Review Values()
Workshop Chair()<edge_begin><edge_end>PC Member()
Contribution File(has Contribution File Status)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Regular()<edge_begin><edge_end>Participant(early Registration)
Submitted contribution()<edge_begin><edge_end>Written contribution()
Organisation()<edge_begin><edge_end>Thing()
Government Organization()<edge_begin><edge_end>Organization()
Conference announcement()<edge_begin><edge_end>Conference document()
Session Chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
URL()<edge_begin><edge_end>Thing()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Long bool()<edge_begin><edge_end>Value Partition()
Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Speaker()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Reviewer Famliliarity()<edge_begin><edge_end>Review Values()
Evaluated Paper()<edge_begin><edge_end>Review()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>intensity()
Chair()<edge_begin><edge_end>Committee()
date of conference()<edge_begin><edge_end>date()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Transparency()<edge_begin><edge_end>Document(Document ID)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>String()
Multimedia Topic()<edge_begin><edge_end>Topic()
conference()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>date()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
Conference document()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Activity after conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
submission process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Place()<edge_begin><edge_end>Item()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Double Blind Review()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Committee Member()
Deadline(Date)<edge_begin><edge_end>ACM SIGKDD()
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Senior Program Committee member()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Welcome Talk()<edge_begin><edge_end>Talk Event()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
Author book proceedings included()<edge_begin><edge_end>Author()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Contact Author()<edge_begin><edge_end>Author()
Full day tour()<edge_begin><edge_end>Activity after conference()
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Workshop()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Committee()<edge_begin><edge_end>Chair()
Conference applicant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Review()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Important dates()<edge_begin><edge_end>date()
Author of paper student()<edge_begin><edge_end>Author()
Cd proceening()<edge_begin><edge_end>Publication()
Departure()<edge_begin><edge_end>Activity after conference()
PC Chair()<edge_begin><edge_end>PC Member()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>article()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Nonauthor registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
PC Members List()<edge_begin><edge_end>Output Document()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Audiovisual equipment()<edge_begin><edge_end>Item()
Abstract()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Other()<edge_begin><edge_end>Overall Value()
Post Script()<edge_begin><edge_end>Format()
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Workshop()<edge_begin><edge_end>Academic Event()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Subject Area()
program()<edge_begin><edge_end>session()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Academia Organization()<edge_begin><edge_end>Organization()
Sponsor()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Committee member()<edge_begin><edge_end>Committee()
Reject Rating()<edge_begin><edge_end>Review Rating()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>unsigned Long()
Working event()<edge_begin><edge_end>Administrative event()
camera-ready submission date()<edge_begin><edge_end>date()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Author()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Time()
Tutorial Chair()<edge_begin><edge_end>PC Member()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Reception()<edge_begin><edge_end>Social Event()
Simulating()<edge_begin><edge_end>Research()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Setup Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Document(Document ID)<edge_begin><edge_end>Item()
Acceptance()<edge_begin><edge_end>Decision()
Conference Venue Place()<edge_begin><edge_end>Place()
Renting()<edge_begin><edge_end>Activity before conference()
Payment document()<edge_begin><edge_end>Document(Document ID)
IASTED member()<edge_begin><edge_end>Delegate()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Double hotel room()<edge_begin><edge_end>Hotel room()
Value added tax()<edge_begin><edge_end>Tax()
Program Comitee Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Head Role()<edge_begin><edge_end>Role()
University()<edge_begin><edge_end>Academic Institution()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
New Information()<edge_begin><edge_end>Overall Value()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
External Reviewer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
summary of reviews()<edge_begin><edge_end>article()
Regular contribution()<edge_begin><edge_end>Written contribution()
Item()<edge_begin><edge_end>Item()
Welcome address()<edge_begin><edge_end>Conference activity()
reviewing proces()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Chair()<edge_begin><edge_end>Output Document()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Topic()
Reviewer Role()<edge_begin><edge_end>Role()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
MS Word()<edge_begin><edge_end>Format()
Company()<edge_begin><edge_end>Organization()
Web site()<edge_begin><edge_end>Electronic proceeding()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper Author()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Published Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Program Committee Chair()<edge_begin><edge_end>Review()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Event Creation()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Administrator()
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Invited talk()<edge_begin><edge_end>Presentation()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Organizing committee()<edge_begin><edge_end>Committee()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>External Reviewer()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Session Chair()<edge_begin><edge_end>Conference Participant()
Session room()<edge_begin><edge_end>Place()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Hotel room()<edge_begin><edge_end>Place()
Medicine Topic()<edge_begin><edge_end>Topic()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Integer()
Antennas Topic()<edge_begin><edge_end>Topic()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Topic()<edge_begin><edge_end>Working event()
Notification Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Student()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Talk Event()<edge_begin><edge_end>Academic Event()
article()<edge_begin><edge_end>Author()
One conference day()<edge_begin><edge_end>Conference days()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Chair URL()<edge_begin><edge_end>URL()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>ACM SIGKDD()
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Pending Proposed Conflict()
Registration SIGKDD Member()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Working event()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Possible Reviewer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Agency Staff Member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Text()<edge_begin><edge_end>Format()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Boolean()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Program Comitee Chair()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Building()<edge_begin><edge_end>Place()
Item()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Rejection Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Review()<edge_begin><edge_end>Thing()
Highly Practical()<edge_begin><edge_end>Paper Categorization()
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Author()
participant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Advocated Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Poster Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
RFC()<edge_begin><edge_end>Topics()
Registation deadline()<edge_begin><edge_end>Deadline(Date)
Regular Session()<edge_begin><edge_end>Session(room)
rejection notification email()<edge_begin><edge_end>notification email()
Conference activity()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Student lecturer()<edge_begin><edge_end>Lecturer()
Transport vehicle()<edge_begin><edge_end>Item()
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Document(Document ID)
Document(Document ID)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Coctail reception()<edge_begin><edge_end>Conference activity()
Workshop()<edge_begin><edge_end>Conference part()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Money()<edge_begin><edge_end>Money()
paper assignment()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Chair()
Trip()<edge_begin><edge_end>Social event()
Contact Author(Alternate Email)<edge_begin><edge_end>String()
notification()<edge_begin><edge_end>article()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Must Accept()<edge_begin><edge_end>Reccommendation()
Research Topic()<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Humour()<edge_begin><edge_end>Topics()
Multi-author Volume()<edge_begin><edge_end>Document(Document ID)
Paper Typologies()<edge_begin><edge_end>Event Setup()
User()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Program Comitee Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Integer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Author()<edge_begin><edge_end>article()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Workshop()<edge_begin><edge_end>Working event()
Review()<edge_begin><edge_end>classification()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Criterion(has Weight)<edge_begin><edge_end>double()
Meal Event()<edge_begin><edge_end>Meal Menu()
start date of conference()<edge_begin><edge_end>date of conference()
Academic Institution()<edge_begin><edge_end>Organisation()
CD-ROM()<edge_begin><edge_end>Output Document()
Committee Member()<edge_begin><edge_end>Conference Member()
Committees()<edge_begin><edge_end>Domain Topic()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Deadline Paper Submission()<edge_begin><edge_end>Deadline(Date)
Registration Non-Member()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
Member(Web address)<edge_begin><edge_end>String()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
External Reviewers List()<edge_begin><edge_end>Output Document()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Inforamtion()
Science Worker()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Accept Rating()<edge_begin><edge_end>Review Rating()
Deleted Conflict()<edge_begin><edge_end>Conflict Of Interest()
Conference document()<edge_begin><edge_end>date()
Regular Reviewer URL()<edge_begin><edge_end>URL()
User()<edge_begin><edge_end>Document(Document ID)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Listener()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Document(Document ID)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>String()
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Invitation Of Reviewers Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
human(e-mail, last name, first name)<edge_begin><edge_end>article()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference hall()<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
TPC Member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>User()
Hotel registration form()<edge_begin><edge_end>Form()
Secondary Reviewer()<edge_begin><edge_end>Committee Member()
abstract of paper()<edge_begin><edge_end>article()
PC Member()<edge_begin><edge_end>Possible Reviewer()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
review form()<edge_begin><edge_end>article()
Poster()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Lecturer()<edge_begin><edge_end>Author()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Reviewed Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Accommodation Place()<edge_begin><edge_end>Place()
Deadline(Date)<edge_begin><edge_end>date Time()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Item()
Program chair()<edge_begin><edge_end>Conference Program()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Request()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Sponsor city()<edge_begin><edge_end>City()
External Reviewer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Best Applications Paper Award()<edge_begin><edge_end>Award()
Proceedings()<edge_begin><edge_end>Thing()
Admin Role()<edge_begin><edge_end>Role()
Contact Author(Alternate Email)<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Student registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Result of Advocate()<edge_begin><edge_end>Value Partition()
Author()<edge_begin><edge_end>User()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>Integer()
Advocated Paper()<edge_begin><edge_end>Advocate()
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Planed Paper()<edge_begin><edge_end>Conference Program()
Sponzor(Name of sponsor)<edge_begin><edge_end>String()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Committee()<edge_begin><edge_end>Co-chair()
Contributed Talk()<edge_begin><edge_end>Document(Document ID)
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Proceedings()<edge_begin><edge_end>Output Document()
Help Request()<edge_begin><edge_end>Request()
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Document(Document ID)<edge_begin><edge_end>User()
Tutorial()<edge_begin><edge_end>Working event()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Active conference participant()<edge_begin><edge_end>Presentation()
Double Blind Review()<edge_begin><edge_end>Thing()
Microelectronics Topic()<edge_begin><edge_end>Topic()
full paper submission date()<edge_begin><edge_end>date()
Reviewing event()<edge_begin><edge_end>Administrative event()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Organizer()
RTF()<edge_begin><edge_end>Format()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Co-chair()<edge_begin><edge_end>Committee()
Output Document()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Committee()<edge_begin><edge_end>User()
Gold Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Presenter state()<edge_begin><edge_end>State()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Track-workshop chair()<edge_begin><edge_end>Conference part()
program()<edge_begin><edge_end>chair()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>Domain Topic()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference Hiker()<edge_begin><edge_end>Delegate()
Hotel presenter()<edge_begin><edge_end>Delegate()
Review()<edge_begin><edge_end>Conference document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Regular contribution()
Topics()<edge_begin><edge_end>Value Partition()
Rejected paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
conference setup()<edge_begin><edge_end>URL()
Scholar()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference building()<edge_begin><edge_end>Building()
Paper Abstract()<edge_begin><edge_end>Contact Author()
Role()<edge_begin><edge_end>Administrator()
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
conference setup()<edge_begin><edge_end>Topic()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Location()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline(Date)
Sponzorship()<edge_begin><edge_end>Money()
Slot(ends At, begins At)<edge_begin><edge_end>time()
Author of paper()<edge_begin><edge_end>Author()
bidding of reviewer()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Platinum Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Chair()<edge_begin><edge_end>Thing()
Programming()<edge_begin><edge_end>Topics()
Submission event()<edge_begin><edge_end>Administrative event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Best Paper Awards Committee()<edge_begin><edge_end>Committee()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Track-workshop chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Co-chair()<edge_begin><edge_end>Committee member()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>System()
Single hotel room()<edge_begin><edge_end>Hotel room()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Program Comitee()
Demo Session()<edge_begin><edge_end>Session(room)
Corresponding Author()<edge_begin><edge_end>Author()
Plenary lecture speaker()<edge_begin><edge_end>Author()
Format()<edge_begin><edge_end>Value Partition()
managing of conference process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference Member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Conference volume(has a location)<edge_begin><edge_end>String()
Computer()<edge_begin><edge_end>Audiovisual equipment()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Member(Web address)<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Outside Referee()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference Program()<edge_begin><edge_end>Domain Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
Money()<edge_begin><edge_end>Item()
Volunteer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Registration fee(Date, Price, Currency)<edge_begin><edge_end>String()
Research Institute()<edge_begin><edge_end>Academic Institution()
Abstract()<edge_begin><edge_end>Document(Document ID)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>article()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Presentation()<edge_begin><edge_end>Active conference participant()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Organizing Committee member()<edge_begin><edge_end>Organizator()
Computer Science()<edge_begin><edge_end>Topics()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Camera Ready Copy()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Primary Reviewer()<edge_begin><edge_end>Committee Member()
Conflict Rules()<edge_begin><edge_end>Thing()
Presentation()<edge_begin><edge_end>Conference contribution()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Paper File()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Program Comitee()<edge_begin><edge_end>Thing()
Session chair()<edge_begin><edge_end>Delegate()
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>String()
Registration Chair()<edge_begin><edge_end>Organizing Committee()
summary of reviews()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference Trip()<edge_begin><edge_end>Social Event()
Conference Program()<edge_begin><edge_end>Thing()
Senior Reviewer URL()<edge_begin><edge_end>URL()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Registration SIGMOD Member()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Closed Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Social program()<edge_begin><edge_end>Conference activity()
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Viza()<edge_begin><edge_end>Document(Document ID)
Assigned Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Event URL()<edge_begin><edge_end>URL()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Event Tracks()<edge_begin><edge_end>Event Setup()
Committee()<edge_begin><edge_end>Committee member()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Conflict Of Interest()<edge_begin><edge_end>Thing()
Sponzor fee()<edge_begin><edge_end>Fee()
Preview()<edge_begin><edge_end>Review Form()
Review Form Setup()<edge_begin><edge_end>Review Form()
Program Committee()<edge_begin><edge_end>Committee()
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Participant(early Registration)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
HTML()<edge_begin><edge_end>Format()
CAD Topic()<edge_begin><edge_end>Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Research Topic()
Social Event()<edge_begin><edge_end>Non Academic Event()
Tutorial()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Program Comitee Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Organizer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Group Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Introduction()<edge_begin><edge_end>Conference activity()
Slot(ends At, begins At)<edge_begin><edge_end>Session(room)
Book proceeding()<edge_begin><edge_end>Publication()
OC Chair()<edge_begin><edge_end>OC Member()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Power Point presentation()<edge_begin><edge_end>Presentation()
Programme()<edge_begin><edge_end>Document(Document ID)
Committee Member()<edge_begin><edge_end>Organizer()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Topic()
Presenter university()<edge_begin><edge_end>Building()
Author()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Comitee Chair()
Submission()<edge_begin><edge_end>Document(Document ID)
Conference contributor()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Speaker()<edge_begin><edge_end>Document(Document ID)
Source Archive()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Assistant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Speaker()<edge_begin><edge_end>Delegate()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Assignment Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Evaluation()<edge_begin><edge_end>Review()
Deadline Author notification()<edge_begin><edge_end>Deadline(Date)
Silver Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Committee Member()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Adobe PDF()<edge_begin><edge_end>Format()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Performance Topic()<edge_begin><edge_end>Topic()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Bid()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Account()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Author()<edge_begin><edge_end>Thing()
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Review()<edge_begin><edge_end>Document(Document ID)
Conference Chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Cryptography Topic()<edge_begin><edge_end>Topic()
Workshop Session()<edge_begin><edge_end>Session(room)
Money()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Hotel fee()<edge_begin><edge_end>Fee()
acceptance notification email()<edge_begin><edge_end>notification email()
Role()<edge_begin><edge_end>Thing()
Paper Status()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Administrator()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Author Not Reviewer()<edge_begin><edge_end>Author()
Bidding Without Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
Blocked Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Contact Person URL()<edge_begin><edge_end>URL()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
Proposed Conflict()<edge_begin><edge_end>Thing()
Participant(early Registration)<edge_begin><edge_end>Boolean()
Submission Template()<edge_begin><edge_end>Event Setup()
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference state()<edge_begin><edge_end>State()
University()<edge_begin><edge_end>Organization()
Accepted paper(Score)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Co-Author()<edge_begin><edge_end>Author()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Integer()
Final manuscript()<edge_begin><edge_end>Submission()
Reccommendation()<edge_begin><edge_end>Review Values()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Output Document()<edge_begin><edge_end>Chair()
Track()<edge_begin><edge_end>Scientific Event()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Session(room)<edge_begin><edge_end>Accepted Paper()
Excursion()<edge_begin><edge_end>Social Event()
Written contribution()<edge_begin><edge_end>Conference contribution()
Sponsor state()<edge_begin><edge_end>State()
Associated Chair()<edge_begin><edge_end>Chairman()
Student non speaker()<edge_begin><edge_end>Non speaker()
Form()<edge_begin><edge_end>Document(Document ID)
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Programme Brochure()<edge_begin><edge_end>Document(Document ID)
Contact Author()<edge_begin><edge_end>Paper Abstract()
review form()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Document(Document ID)<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Role()
Van()<edge_begin><edge_end>Transport vehicle()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Approval Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
NGO()<edge_begin><edge_end>Organization()
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Paper Status()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Nonmember registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Committee member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Rated Papers()<edge_begin><edge_end>Active Paper()
Valuable Confirmation of Present Knowledge()<edge_begin><edge_end>Overall Value()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Paper Abstract()
chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Banquet()<edge_begin><edge_end>Social event()
date()<edge_begin><edge_end>Thing()
Deadline(Date)<edge_begin><edge_end>date()
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>Fee()
Industry Organization()<edge_begin><edge_end>Organization()
Steering committee()<edge_begin><edge_end>Committee()
end date of conference()<edge_begin><edge_end>date of conference()
group email()<edge_begin><edge_end>article()
Slide Set()<edge_begin><edge_end>Document(Document ID)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Presenter()<edge_begin><edge_end>Author()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Review Form()<edge_begin><edge_end>Event Setup()
Paper File()<edge_begin><edge_end>Domain Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Session(room)<edge_begin><edge_end>String()
Individual Presentation()<edge_begin><edge_end>Document(Document ID)
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
Double Blind Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Document(Document ID)<edge_begin><edge_end>Document(Document ID)
Conference airport()<edge_begin><edge_end>Building()
Assistance()<edge_begin><edge_end>Help Request()
Publication()<edge_begin><edge_end>Item()
Active Paper()<edge_begin><edge_end>Review Rating()
Topic()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Pending Proposed Conflict()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Feature Request()<edge_begin><edge_end>Help Request()
Administrator()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Tip()<edge_begin><edge_end>Money()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Exhibitor()<edge_begin><edge_end>Sponzor(Name of sponsor)
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference days()<edge_begin><edge_end>Time()
Invited Speaker()<edge_begin><edge_end>Speaker()
OC Member()<edge_begin><edge_end>Conference Participant()
Free Time Break()<edge_begin><edge_end>Break Event()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Initial manuscipt()<edge_begin><edge_end>Submission()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Committe Role()<edge_begin><edge_end>Role()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Overall Value()
Member PC()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Technic activity()<edge_begin><edge_end>Conference activity()
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Event Approval()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Abstract()<edge_begin><edge_end>Extended abstract()
ACM SIGKDD()<edge_begin><edge_end>Thing()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
ACM SIGKDD()<edge_begin><edge_end>Sponzor(Name of sponsor)
Information for participants()<edge_begin><edge_end>Conference document()
Contribution co-author()<edge_begin><edge_end>Regular author()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper Abstract()<edge_begin><edge_end>Document(Document ID)
Chairman()<edge_begin><edge_end>Conference Member()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Communications Topic()<edge_begin><edge_end>Topic()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Program Comitee Chair()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Author()<edge_begin><edge_end>Speaker()
Conference restaurant()<edge_begin><edge_end>Building()
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Hidden Conflict()<edge_begin><edge_end>Conflict Of Interest()
General Chair()<edge_begin><edge_end>Organizator()
Advocate()<edge_begin><edge_end>Advocated Paper()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Program Committee member()<edge_begin><edge_end>Organizator()
Accepted paper(Score)<edge_begin><edge_end>Thing()
Information()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Paid applicant()<edge_begin><edge_end>Registeered applicant()
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Program()<edge_begin><edge_end>Output Document()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>date Time()
User()<edge_begin><edge_end>Thing()
Author Role()<edge_begin><edge_end>Role()
Co-author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Place()<edge_begin><edge_end>Thing()
Pending Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Clear Reject()<edge_begin><edge_end>Reccommendation()
Administrator()<edge_begin><edge_end>Thing()
Coffee Break()<edge_begin><edge_end>Break Event()
Program Comitee Chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Program committee()<edge_begin><edge_end>Committee()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Review()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference city()<edge_begin><edge_end>City()
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Author()<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Industrial Session()<edge_begin><edge_end>Conference Session()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Textual Review Question()<edge_begin><edge_end>Review Question()
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Integer()
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>Document(Document ID)
Trip day()<edge_begin><edge_end>Time()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Review()
Registration Student()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Personal Publication History()<edge_begin><edge_end>Personal History()
Chair PC()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
notification email()<edge_begin><edge_end>article()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meta-Review()<edge_begin><edge_end>Review()
Call for paper()<edge_begin><edge_end>Conference document()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Brief introduction for Session chair()<edge_begin><edge_end>Document(Document ID)
article()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Review preference(has a degree)<edge_begin><edge_end>Integer()
Self Conflict()<edge_begin><edge_end>Conflict Of Interest()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Deadline hotel reservation()<edge_begin><edge_end>Deadline(Date)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>ACM SIGKDD()
Mailing list()<edge_begin><edge_end>Document(Document ID)
Sponzor(Name of sponsor)<edge_begin><edge_end>ACM SIGKDD()
Presenter city()<edge_begin><edge_end>City()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
Worker lecturer()<edge_begin><edge_end>Lecturer()
Reviewed contribution()<edge_begin><edge_end>Review()
Review Question()<edge_begin><edge_end>Question()
Conference part()<edge_begin><edge_end>Track-workshop chair()
Author information form()<edge_begin><edge_end>Form()
Program Committee Chair()<edge_begin><edge_end>Chairman()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
External Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Long bool()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Organizing Committee()<edge_begin><edge_end>Committee()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline(Date)
Delegate()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Fee for extra trip()<edge_begin><edge_end>Fee()
Workshop()<edge_begin><edge_end>Scientific Event()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Technical commitee()<edge_begin><edge_end>Delegate()
Balanced Theory and Practice()<edge_begin><edge_end>Paper Categorization()
CD()<edge_begin><edge_end>Electronic proceeding()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Account()
Camera Ready Copy Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Author()<edge_begin><edge_end>Deadline Author notification()
Record of attendance()<edge_begin><edge_end>Document(Document ID)
Bidding Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Tutorial()<edge_begin><edge_end>Individual Presentation()
conference()<edge_begin><edge_end>phase of conference()
Car()<edge_begin><edge_end>Transport vehicle()
Classic Papers()<edge_begin><edge_end>Topics()
Cheque()<edge_begin><edge_end>Payment document()
Meal Break()<edge_begin><edge_end>Break Event()
Review Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Flyer()<edge_begin><edge_end>Document(Document ID)
Author()<edge_begin><edge_end>Conference Member()
Poster Session()<edge_begin><edge_end>Session(room)
Signal Processing Topic()<edge_begin><edge_end>Topic()
Taxi()<edge_begin><edge_end>Transport vehicle()
Organizator()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Chair()<edge_begin><edge_end>Session(room)
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Research Topic()
Index Of Authors()<edge_begin><edge_end>Output Document()
Programme()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Call for participation()<edge_begin><edge_end>Conference document()
Session(room)<edge_begin><edge_end>Thing()
Submissions deadline()<edge_begin><edge_end>Deadline(Date)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Abstract()<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Modelling()<edge_begin><edge_end>Research()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Speaker()
article()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper Question()<edge_begin><edge_end>Question()
participant()<edge_begin><edge_end>conference()
Sponsor company house()<edge_begin><edge_end>Building()
Topic()<edge_begin><edge_end>Thing()
Document(Document ID)<edge_begin><edge_end>Deadline(Date)
Speaker lecture()<edge_begin><edge_end>Session(room)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Review Committee()<edge_begin><edge_end>Committees()
Conditional Expression()<edge_begin><edge_end>Shift Expression(operator)
Event Raising()<edge_begin><edge_end>Signal Event(identifier)
Variable Assignment(operator)<edge_begin><edge_end>Statement()
Variable Reference()<edge_begin><edge_end>Time Expression()
Relational Expression(operator)<edge_begin><edge_end>Shift Expression(operator)
Trigger Expression()<edge_begin><edge_end>Expression()
Multiplicative Expression(operator)<edge_begin><edge_end>Unary Expression(operator)
Shift Expression(operator)<edge_begin><edge_end>Additive Expression(operator)
Additive Expression(operator)<edge_begin><edge_end>Multiplicative Expression(operator)
Bitwise And Expression()<edge_begin><edge_end>Equality Expression(operator)
Conditional Expression()<edge_begin><edge_end>Boolean Or Expression()
Bitwise Or Expression()<edge_begin><edge_end>Bitwise And Expression()
Nested Expression()<edge_begin><edge_end>Conditional Expression()
Trigger()<edge_begin><edge_end>Event()
Boolean Or Expression()<edge_begin><edge_end>Boolean And Expression()
Variable Reference()<edge_begin><edge_end>Primary Expression()
Literal Value(value)<edge_begin><edge_end>Primary Expression()
Event Raising()<edge_begin><edge_end>Statement()
Trigger Expression()<edge_begin><edge_end>Trigger()
Action Expression()<edge_begin><edge_end>Expression()
Variable Assignment(operator)<edge_begin><edge_end>Variable Reference()
Time Event()<edge_begin><edge_end>Event()
Procedure Call()<edge_begin><edge_end>Procedure(identifier)
Time Constant(value, unit)<edge_begin><edge_end>Time Expression()
Equality Expression(operator)<edge_begin><edge_end>Relational Expression(operator)
Signal Event(identifier)<edge_begin><edge_end>Event()
Guard Expression()<edge_begin><edge_end>Expression()
Nested Expression()<edge_begin><edge_end>Primary Expression()
Procedure Call()<edge_begin><edge_end>Statement()
Guard Expression()<edge_begin><edge_end>Boolean Or Expression()
Pseudostate()<edge_begin><edge_end>Vertex()
Scope()<edge_begin><edge_end>Variable()
Reaction()<edge_begin><edge_end>Trigger()
Transition()<edge_begin><edge_end>Specification Element(specification)
Region()<edge_begin><edge_end>Composite Element()
Import Declaration()<edge_begin><edge_end>Declaration()
Statechart(domain ID)<edge_begin><edge_end>Reactive Element()
Transition()<edge_begin><edge_end>Vertex()
Composite Element()<edge_begin><edge_end>Region()
Synchronization()<edge_begin><edge_end>Pseudostate()
Vertex()<edge_begin><edge_end>Region()
Variable()<edge_begin><edge_end>Declaration()
Scope()<edge_begin><edge_end>Declaration()
Entry(kind)<edge_begin><edge_end>Pseudostate()
Exit()<edge_begin><edge_end>Pseudostate()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Statechart(domain ID)<edge_begin><edge_end>Import(imported Namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
Statechart(domain ID)<edge_begin><edge_end>Scoped Element(namespace)
Event()<edge_begin><edge_end>Declaration()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart(domain ID)
Reactive Element()<edge_begin><edge_end>Reaction()
Final State()<edge_begin><edge_end>Regular State()
Reaction()<edge_begin><edge_end>Effect()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
Region()<edge_begin><edge_end>Vertex()
Reaction()<edge_begin><edge_end>Reaction Property()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
Statechart(domain ID)<edge_begin><edge_end>Composite Element()
Transition()<edge_begin><edge_end>Reaction()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Statechart Root()<edge_begin><edge_end>Def Root()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Def Root()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Guard()
Reaction Effect()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>Def Root()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>State Specification()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Time Event Spec(type, unit)<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Int Literal(value)<edge_begin><edge_end>Literal()
Guard()<edge_begin><edge_end>Expression()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Event Raising Expression()<edge_begin><edge_end>Expression()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Parenthesized Expression()<edge_begin><edge_end>Expression()
Hex Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Logical Not Expression()<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
String Literal(value)<edge_begin><edge_end>Literal()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Transition Specification()
Table(border, style, class)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Cell(is Heading, align, style, content)<edge_begin><edge_end>String()
Table(border, style, class)<edge_begin><edge_end>Caption(content)
Row()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Row()<edge_begin><edge_end>Cell(is Heading, align, style, content)
Table(border, style, class)<edge_begin><edge_end>String()
Cell(is Heading, align, style, content)<edge_begin><edge_end>Boolean()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
Table(border, style, class)<edge_begin><edge_end>Row()
Caption(content)<edge_begin><edge_end>String()
Table(border, style, class)<edge_begin><edge_end>Integer()
Update Assignment Expression()<edge_begin><edge_end>Merge Update Specification()
Query Select(distinct)<edge_begin><edge_end>Table Reference()
Table Expression()<edge_begin><edge_end>Table Reference()
Table Reference()<edge_begin><edge_end>Query Select(distinct)
Predicate Quantified Value Select(quantified Type, comparison Operator)<edge_begin><edge_end>Predicate Quantified()
Predicate Quantified Row Select(quantified Type)<edge_begin><edge_end>Predicate Quantified()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Nested()
Query Search Condition(negated Condition)<edge_begin><edge_end>Value Expression Case Search Content()
Value Expression Column()<edge_begin><edge_end>Value Expression Atomic()
Grouping Sets Element Expression()<edge_begin><edge_end>Grouping Sets Element Sublist()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Quantified Row Select(quantified Type)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Row()
Grouping()<edge_begin><edge_end>Grouping Sets Element Expression()
Table In Database()<edge_begin><edge_end>Query Insert Statement()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Quantified Value Select(quantified Type, comparison Operator)
Grouping()<edge_begin><edge_end>Grouping Specification()
Update Of Column()<edge_begin><edge_end>SQL Query Object()
Query Update Statement()<edge_begin><edge_end>Update Assignment Expression()
Predicate Like(not Like)<edge_begin><edge_end>Query Value Expression(unary Operator)
Merge Source Table()<edge_begin><edge_end>SQL Query Object()
Table Function()<edge_begin><edge_end>Table Expression()
Value Expression Scalar Select()<edge_begin><edge_end>Value Expression Atomic()
Result Column()<edge_begin><edge_end>Order By Result Column()
Query Expression Root()<edge_begin><edge_end>With Table Specification()
Super Group Element Expression()<edge_begin><edge_end>Super Group Element()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Value Expression Case Else()<edge_begin><edge_end>Value Expression Case()
Query Search Condition(negated Condition)<edge_begin><edge_end>Search Condition Combined(combined Operator)
Merge Update Specification()<edge_begin><edge_end>Update Assignment Expression()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>With Table Specification()
Merge Operation Specification()<edge_begin><edge_end>SQL Query Object()
Query Merge Statement()<edge_begin><edge_end>Merge Operation Specification()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Query Nested()
Value Expression Column()<edge_begin><edge_end>Table In Database()
Table In Database()<edge_begin><edge_end>Query Delete Statement()
Search Condition Nested()<edge_begin><edge_end>Query Search Condition(negated Condition)
Column Name()<edge_begin><edge_end>With Table Specification()
Values Row()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Search Condition(negated Condition)<edge_begin><edge_end>Query Select(distinct)
Super Group Element()<edge_begin><edge_end>SQL Query Object()
Grouping Sets Element Sublist()<edge_begin><edge_end>Grouping Sets Element()
Update Source Expr List()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Select(distinct)<edge_begin><edge_end>Grouping Specification()
Predicate Exists()<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Order By Value Expression()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Expression Root()<edge_begin><edge_end>Query Insert Statement()
Value Expression Column()<edge_begin><edge_end>Query Insert Statement()
Update Source()<edge_begin><edge_end>Update Assignment Expression()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Predicate Exists()
Query Expression Root()<edge_begin><edge_end>Predicate In Value Select()
Query Result Specification()<edge_begin><edge_end>Query Select(distinct)
Predicate Is Null(not Null)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Table Expression()<edge_begin><edge_end>Result Table All Columns()
Order By Specification(descending, Ordering Spec Option, Null Ordering Option)<edge_begin><edge_end>Query Select Statement()
Merge Source Table()<edge_begin><edge_end>Table Reference()
Query Expression Root()<edge_begin><edge_end>Predicate Quantified Value Select(quantified Type, comparison Operator)
Predicate In Value Row Select()<edge_begin><edge_end>Query Expression Root()
Query Search Condition(negated Condition)<edge_begin><edge_end>Query Delete Statement()
Grouping Expression()<edge_begin><edge_end>Super Group Element Expression()
Value Expression Default Value()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Nested()<edge_begin><edge_end>Query Value Expression(unary Operator)
Table Correlation()<edge_begin><edge_end>Column Name()
With Table Specification()<edge_begin><edge_end>Query Expression Root()
Merge On Condition()<edge_begin><edge_end>Query Search Condition(negated Condition)
Query Expression Root()<edge_begin><edge_end>Predicate In Value Row Select()
Predicate Basic(comparison Operator)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Cursor Reference()<edge_begin><edge_end>SQL Query Object()
Merge On Condition()<edge_begin><edge_end>SQL Query Object()
Table In Database()<edge_begin><edge_end>Value Expression Column()
Predicate Quantified Value Select(quantified Type, comparison Operator)<edge_begin><edge_end>Query Value Expression(unary Operator)
Call Statement()<edge_begin><edge_end>SQL Query Object()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate In Value Select()
Column Name()<edge_begin><edge_end>SQL Query Object()
Super Group Element Expression()<edge_begin><edge_end>Super Group Element Sublist()
Table Function()<edge_begin><edge_end>Query Value Expression(unary Operator)
Update Source Query()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Predicate In Value List()<edge_begin><edge_end>Predicate In(not In)
Query Expression Root()<edge_begin><edge_end>Query Select Statement()
Value Expression Cast()<edge_begin><edge_end>Query Value Expression(unary Operator)
Order By Specification(descending, Ordering Spec Option, Null Ordering Option)<edge_begin><edge_end>SQL Query Object()
Grouping Sets Element Sublist()<edge_begin><edge_end>Grouping Sets Element Expression()
Grouping Expression()<edge_begin><edge_end>Grouping()
Table Reference()<edge_begin><edge_end>Merge Source Table()
Table Joined(join Operator)<edge_begin><edge_end>Query Search Condition(negated Condition)
With Table Specification()<edge_begin><edge_end>Column Name()
Merge On Condition()<edge_begin><edge_end>Query Merge Statement()
Super Group(super Group Type)<edge_begin><edge_end>Grouping()
Order By Result Column()<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Table Reference()<edge_begin><edge_end>SQL Query Object()
Update Assignment Expression()<edge_begin><edge_end>SQL Query Object()
Order By Result Column()<edge_begin><edge_end>Result Column()
Updatability Expression(updatability Type)<edge_begin><edge_end>Update Of Column()
Query Delete Statement()<edge_begin><edge_end>Query Change Statement()
Query Select Statement()<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Predicate(negated Predicate, has Selectivity, selectivity Value)<edge_begin><edge_end>Query Search Condition(negated Condition)
Super Group Element Sublist()<edge_begin><edge_end>Super Group Element Expression()
Table Query Lateral()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Value Expression Function(special Register, distinct, column Function)<edge_begin><edge_end>Query Value Expression(unary Operator)
Merge Target Table()<edge_begin><edge_end>SQL Query Object()
Grouping Sets Element()<edge_begin><edge_end>Grouping Sets()
Query Value Expression(unary Operator)<edge_begin><edge_end>Update Source Expr List()
Query Combined(combined Operator)<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Predicate Quantified()<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Query Select(distinct)<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Update Statement()<edge_begin><edge_end>Table In Database()
Merge Insert Specification()<edge_begin><edge_end>Value Expression Column()
Query Result Specification()<edge_begin><edge_end>SQL Query Object()
Call Statement()<edge_begin><edge_end>Procedure Reference()
Query Value Expression(unary Operator)<edge_begin><edge_end>Grouping Expression()
Predicate Between(not Between)<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Case Search Content()
Value Expression Row()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Select(distinct)<edge_begin><edge_end>Value Expression Variable()
Query Expression Root()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Statement()<edge_begin><edge_end>SQL Query Object()
Table Reference()<edge_begin><edge_end>Table Nested()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Function(special Register, distinct, column Function)
Query Value Expression(unary Operator)<edge_begin><edge_end>Result Column()
Value Expression Case Else()<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Like(not Like)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Query Values()<edge_begin><edge_end>Values Row()
Table Reference()<edge_begin><edge_end>Table Joined(join Operator)
Query Insert Statement()<edge_begin><edge_end>Value Expression Column()
Predicate Quantified Row Select(quantified Type)<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Case Simple()<edge_begin><edge_end>Value Expression Case Simple Content()
Values Row()<edge_begin><edge_end>Query Insert Statement()
Predicate In Value List()<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Is Null(not Null)<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Labeled Duration(labeled Duration Type)<edge_begin><edge_end>Query Value Expression(unary Operator)
With Table Specification()<edge_begin><edge_end>With Table Reference()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Update Source Query()
Table Expression()<edge_begin><edge_end>Value Expression Column()
Search Condition Combined(combined Operator)<edge_begin><edge_end>Query Search Condition(negated Condition)
Grouping Sets()<edge_begin><edge_end>Grouping Sets Element()
Query Search Condition(negated Condition)<edge_begin><edge_end>SQL Query Object()
Value Expression Case Search Content()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>SQL Query Object()
Table Expression()<edge_begin><edge_end>Merge Target Table()
With Table Reference()<edge_begin><edge_end>With Table Specification()
Predicate In Value Row Select()<edge_begin><edge_end>Predicate In(not In)
Value Expression Case Simple()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Combined(combined Operator)
Value Expression Case()<edge_begin><edge_end>Value Expression Atomic()
Merge Source Table()<edge_begin><edge_end>Query Merge Statement()
Update Assignment Expression()<edge_begin><edge_end>Value Expression Column()
Value Expression Case Search()<edge_begin><edge_end>Value Expression Case Search Content()
Updatability Expression(updatability Type)<edge_begin><edge_end>SQL Query Object()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate In Value Row Select()
Value Expression Column()<edge_begin><edge_end>Merge Insert Specification()
Predicate In(not In)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Call Statement()<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Cast()<edge_begin><edge_end>Value Expression Atomic()
Query Nested()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Delete Statement()<edge_begin><edge_end>Query Search Condition(negated Condition)
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Query Combined(combined Operator)
Value Expression Scalar Select()<edge_begin><edge_end>Query Expression Root()
Query Search Condition(negated Condition)<edge_begin><edge_end>Table Joined(join Operator)
Merge Operation Specification()<edge_begin><edge_end>Query Merge Statement()
Value Expression Column()<edge_begin><edge_end>Update Assignment Expression()
Value Expression Combined(combined Operator)<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Labeled Duration(labeled Duration Type)
Query Update Statement()<edge_begin><edge_end>Query Search Condition(negated Condition)
Value Expression Case Search Content()<edge_begin><edge_end>SQL Query Object()
Table In Database()<edge_begin><edge_end>Table Expression()
Query Values()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Select Statement()<edge_begin><edge_end>Updatability Expression(updatability Type)
Query Search Condition(negated Condition)<edge_begin><edge_end>Search Condition Nested()
Table Joined(join Operator)<edge_begin><edge_end>Table Reference()
Query Value Expression(unary Operator)<edge_begin><edge_end>Order By Value Expression()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Between(not Between)
Predicate In Value Select()<edge_begin><edge_end>Predicate In(not In)
Value Expression Case Simple Content()<edge_begin><edge_end>SQL Query Object()
Super Group Element Sublist()<edge_begin><edge_end>Super Group Element()
Predicate In Value Select()<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Quantified Value Select(quantified Type, comparison Operator)<edge_begin><edge_end>Query Expression Root()
Query Expression Root()<edge_begin><edge_end>Value Expression Scalar Select()
Cursor Reference()<edge_begin><edge_end>Query Update Statement()
Query Select(distinct)<edge_begin><edge_end>Query Search Condition(negated Condition)
Super Group Element Expression()<edge_begin><edge_end>Grouping Expression()
Super Group Element()<edge_begin><edge_end>Super Group(super Group Type)
Result Column()<edge_begin><edge_end>Query Result Specification()
Value Expression Case Search Content()<edge_begin><edge_end>Value Expression Case Search()
Value Expression Case Search()<edge_begin><edge_end>Value Expression Case()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Cast()
Updatability Expression(updatability Type)<edge_begin><edge_end>Query Select Statement()
With Table Specification()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Insert Statement()<edge_begin><edge_end>Query Expression Root()
Update Assignment Expression()<edge_begin><edge_end>Query Update Statement()
Update Of Column()<edge_begin><edge_end>Updatability Expression(updatability Type)
Value Expression Case Simple Content()<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Basic(comparison Operator)<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Update Statement()<edge_begin><edge_end>Query Change Statement()
Query Search Condition(negated Condition)<edge_begin><edge_end>Query Update Statement()
Query Select Statement()<edge_begin><edge_end>Query Statement()
Query Insert Statement()<edge_begin><edge_end>Values Row()
Value Expression Case Simple Content()<edge_begin><edge_end>Value Expression Case Simple()
Table Correlation()<edge_begin><edge_end>Table Expression()
Query Change Statement()<edge_begin><edge_end>Query Statement()
Query Delete Statement()<edge_begin><edge_end>Cursor Reference()
Query Expression Root()<edge_begin><edge_end>SQL Query Object()
Query Select Statement()<edge_begin><edge_end>Query Expression Root()
Table Expression()<edge_begin><edge_end>Table Correlation()
Value Expression Null Value()<edge_begin><edge_end>Value Expression Atomic()
Predicate Quantified Row Select(quantified Type)<edge_begin><edge_end>Query Expression Root()
Query Update Statement()<edge_begin><edge_end>Cursor Reference()
Grouping Specification()<edge_begin><edge_end>Query Select(distinct)
Query Search Condition(negated Condition)<edge_begin><edge_end>Merge On Condition()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Query Expression Root()
With Table Reference()<edge_begin><edge_end>Table Expression()
Value Expression Variable()<edge_begin><edge_end>Value Expression Atomic()
Query Insert Statement()<edge_begin><edge_end>Query Change Statement()
Merge Insert Specification()<edge_begin><edge_end>Merge Operation Specification()
Values Row()<edge_begin><edge_end>Query Values()
Order By Specification(descending, Ordering Spec Option, Null Ordering Option)<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Grouping Specification()<edge_begin><edge_end>SQL Query Object()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Like(not Like)
Value Expression Case()<edge_begin><edge_end>Value Expression Case Else()
Result Column()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Case Else()
Update Assignment Expression()<edge_begin><edge_end>Update Source()
Value Expression Labeled Duration(labeled Duration Type)<edge_begin><edge_end>Value Expression Atomic()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Basic(comparison Operator)
Integer Column(is Auto Increment)<edge_begin><edge_end>Column(type, is Primary Key, null, default Value, comment)
Enum Item()<edge_begin><edge_end>Enum Set()
Named Element(name)<edge_begin><edge_end>String()
Enum Set()<edge_begin><edge_end>Enum Item()
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>Named Element(name)
Enum Column()<edge_begin><edge_end>Column(type, is Primary Key, null, default Value, comment)
Table()<edge_begin><edge_end>Named Element(name)
Enum Item()<edge_begin><edge_end>Named Element(name)
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>Boolean()
Table()<edge_begin><edge_end>Data Base()
Integer Column(is Auto Increment)<edge_begin><edge_end>Boolean()
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>Table()
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>String()
Table()<edge_begin><edge_end>Column(type, is Primary Key, null, default Value, comment)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>URI()
Name(text)<edge_begin><edge_end>Pn Object(id)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Any Object()
Annotation Graphics()<edge_begin><edge_end>Offset()
Offset()<edge_begin><edge_end>Annotation Graphics()
Page()<edge_begin><edge_end>Node Graphics()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Pn Object(id)
Node Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Page()<edge_begin><edge_end>Petri Net(id, type)
Any Object()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Petri Net(id, type)<edge_begin><edge_end>Page()
Annotation Graphics()<edge_begin><edge_end>Font(align, decoration, family, rotation, size, style, weight)
Arc()<edge_begin><edge_end>Node()
Ref Transition()<edge_begin><edge_end>Transition Node()
Condition()<edge_begin><edge_end>Transition()
Arc Graphics()<edge_begin><edge_end>Arc()
Place()<edge_begin><edge_end>Type()
Place()<edge_begin><edge_end>HL Marking()
Petri Net(id, type)<edge_begin><edge_end>Name(text)
Annotation()<edge_begin><edge_end>Annotation Graphics()
Arc Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Position()<edge_begin><edge_end>Coordinate(x, y)
Type()<edge_begin><edge_end>Place()
Node Graphics()<edge_begin><edge_end>Position()
Transition Node()<edge_begin><edge_end>Node()
Node Graphics()<edge_begin><edge_end>Page()
Place()<edge_begin><edge_end>Place Node()
Declaration()<edge_begin><edge_end>HL Core Annotation(text)
Node Graphics()<edge_begin><edge_end>Node()
Page()<edge_begin><edge_end>Pn Object(id)
Annotation Graphics()<edge_begin><edge_end>Graphics()
Position()<edge_begin><edge_end>Arc Graphics()
Place Node()<edge_begin><edge_end>Node()
Label()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Annotation Graphics()
Node()<edge_begin><edge_end>Arc()
Annotation Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Node Graphics()<edge_begin><edge_end>Graphics()
Name(text)<edge_begin><edge_end>Annotation()
Node Graphics()<edge_begin><edge_end>Dimension()
Font(align, decoration, family, rotation, size, style, weight)<edge_begin><edge_end>Annotation Graphics()
Ref Place()<edge_begin><edge_end>Place Node()
Pn Object(id)<edge_begin><edge_end>Page()
Arc()<edge_begin><edge_end>Pn Object(id)
Transition()<edge_begin><edge_end>Condition()
Dimension()<edge_begin><edge_end>Node Graphics()
Petri Net(id, type)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Transition()<edge_begin><edge_end>Transition Node()
Node Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Declaration()<edge_begin><edge_end>Page()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Annotation Graphics()<edge_begin><edge_end>Annotation()
Arc Graphics()<edge_begin><edge_end>Position()
Page()<edge_begin><edge_end>Declaration()
Arc()<edge_begin><edge_end>Arc Graphics()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Label()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Long String()
Petri Net(id, type)<edge_begin><edge_end>Petri Net Doc(xmlns)
Annotation Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Type()<edge_begin><edge_end>HL Core Annotation(text)
Petri Net(id, type)<edge_begin><edge_end>Declaration()
Transition Node()<edge_begin><edge_end>Ref Transition()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>URI()
HL Marking()<edge_begin><edge_end>Place()
Petri Net Doc(xmlns)<edge_begin><edge_end>Petri Net(id, type)
HL Marking()<edge_begin><edge_end>HL Core Annotation(text)
Line(color, shape, width, style)<edge_begin><edge_end>Node Graphics()
Arc()<edge_begin><edge_end>HL Annotation()
Declaration()<edge_begin><edge_end>Petri Net(id, type)
HL Annotation()<edge_begin><edge_end>HL Core Annotation(text)
Node()<edge_begin><edge_end>Pn Object(id)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Requirement()<edge_begin><edge_end>Requirement()
Referenced Model Elements(agregation Type)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
System Overview(purpose, capabilities)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Variable(type)<edge_begin><edge_end>Identified Element(id, name, description)
Specification(version)<edge_begin><edge_end>Verifiable Element(verified)
Conflict(degree)<edge_begin><edge_end>Ratio()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Stake Holder()
Requirements Group()<edge_begin><edge_end>Specification(version)
System Overview(purpose, capabilities)<edge_begin><edge_end>Variable(type)
Rationale()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Requirement()<edge_begin><edge_end>Abstract Requirement(risk)
Specification(version)<edge_begin><edge_end>Conflict(degree)
Trace Model Element Reference(container)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
Assumption(type)<edge_begin><edge_end>Abstract Requirement(risk)
Conflict(degree)<edge_begin><edge_end>Identified Element(id, name, description)
Abstract Requirement(risk)<edge_begin><edge_end>Variable(type)
Trace()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Stake Holder()<edge_begin><edge_end>Actor(address, email, phone Number)
Abstract Requirement(risk)<edge_begin><edge_end>Verification Activity(verification Method, passed)
Rationale()<edge_begin><edge_end>Identified Element(id, name, description)
Assumption(type)<edge_begin><edge_end>Requirement()
Ref Expression Collected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Verifiable Element(verified)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Identified Element(id, name, description)
Ref Derived Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Ratio()
Specification(version)<edge_begin><edge_end>Verification Activity(verification Method, passed)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Actor(address, email, phone Number)<edge_begin><edge_end>Identified Element(id, name, description)
Verification Activity(verification Method, passed)<edge_begin><edge_end>Identified Element(id, name, description)
Stake Holder()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Goal(priority)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Abstract Requirement(risk)<edge_begin><edge_end>Abstract Requirement(risk)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Date()
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Identified Element(id, name, description)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Rationale()
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Identified Element(id, name, description)
Requirement()<edge_begin><edge_end>Assumption(type)
Abstract Requirement(risk)<edge_begin><edge_end>Verifiable Element(verified)
Specification(version)<edge_begin><edge_end>Requirements Group()
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Ratio()
Actor(address, email, phone Number)<edge_begin><edge_end>Interaction(direction)
Conflict(degree)<edge_begin><edge_end>Goal(priority)
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Positive Factor()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Identified Element(id, name, description)
System Context()<edge_begin><edge_end>Identified Element(id, name, description)
Requirements Group()<edge_begin><edge_end>Abstract Requirement(risk)
Interaction(direction)<edge_begin><edge_end>Identified Element(id, name, description)
Abstract Requirement(risk)<edge_begin><edge_end>Requirements Group()
Requirements Container(type)<edge_begin><edge_end>Requirement()
System Overview(purpose, capabilities)<edge_begin><edge_end>Goal(priority)
Goal(priority)<edge_begin><edge_end>Ratio()
Trace Model Element Reference(container)<edge_begin><edge_end>Requirements Coverage Data(nb Requirements, verification Level)
System Context()<edge_begin><edge_end>Variable(type)
Requirements Container(type)<edge_begin><edge_end>Identified Element(id, name, description)
Verification Activity(verification Method, passed)<edge_begin><edge_end>Abstract Requirement(risk)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Ratio()
Ref User Selected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Password Parameter Definition(default Value)<edge_begin><edge_end>Parameter Definition(name, description)
Test Case(class Name, skipped, status, message, stack Trace)<edge_begin><edge_end>Test Element(label, duration, error Output, output)
Plan Parameter Definition()<edge_begin><edge_end>Parameter Definition(name, description)
Test Case(class Name, skipped, status, message, stack Trace)<edge_begin><edge_end>Test Suite()
Change(message, date, revision)<edge_begin><edge_end>Change Artifact(file, relative Path, prev Revision, revision, dead, edit Type)
Build Element(url, name, operations, element Status, refresh Date)<edge_begin><edge_end>String To String Map(key, value)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build Status()
Change Set(kind)<edge_begin><edge_end>Change(message, date, revision)
Artifact(relative Path)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Build Model()<edge_begin><edge_end>Build Server(location, connector Kind, repository Url)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>User(id, email)
User(id, email)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
File Parameter Definition()<edge_begin><edge_end>Parameter Definition(name, description)
String Parameter Definition(default Value)<edge_begin><edge_end>Parameter Definition(name, description)
Test Suite()<edge_begin><edge_end>Test Result(duration, fail Count, pass Count, ignored Count, error Count)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Health Report(health, description)
Boolean Parameter Definition(default Value)<edge_begin><edge_end>Parameter Definition(name, description)
Build Model()<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
Build Parameter Definition(build Plan Id)<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build Server(location, connector Kind, repository Url)
Build Server(location, connector Kind, repository Url)<edge_begin><edge_end>Repository Location()
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Cause(description)
Change(message, date, revision)<edge_begin><edge_end>User(id, email)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build State()
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Artifact(relative Path)
Test Suite()<edge_begin><edge_end>Test Element(label, duration, error Output, output)
Build Cause(description)<edge_begin><edge_end>User(id, email)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Status()
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Parameter Definition(name, description)
Build Parameter Definition(build Plan Id)<edge_begin><edge_end>Parameter Definition(name, description)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Test Result(duration, fail Count, pass Count, ignored Count, error Count)
Test Result(duration, fail Count, pass Count, ignored Count, error Count)<edge_begin><edge_end>Test Suite()
Change Artifact(file, relative Path, prev Revision, revision, dead, edit Type)<edge_begin><edge_end>Edit Type()
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Build Element(url, name, operations, element Status, refresh Date)<edge_begin><edge_end>I Status()
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Server(location, connector Kind, repository Url)
Test Result(duration, fail Count, pass Count, ignored Count, error Count)<edge_begin><edge_end>Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)
Build Server(location, connector Kind, repository Url)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Model Pattern(attribute Name)<edge_begin><edge_end>Pattern()
Int Parameter(value)<edge_begin><edge_end>Parameter(name)
E Object Parameter()<edge_begin><edge_end>Parameter(name)
Operation Pattern(operation)<edge_begin><edge_end>Parameter(name)
Operation Pattern(operation)<edge_begin><edge_end>Pattern()
Case Style()<edge_begin><edge_end>Segment()
Boolean Parameter(value)<edge_begin><edge_end>Parameter(name)
Segment()<edge_begin><edge_end>Style(applied Fonts, color)
String Parameter(value)<edge_begin><edge_end>Parameter(name)
Styling Model(mode Name)<edge_begin><edge_end>Case Style()
Styling Model(mode Name)<edge_begin><edge_end>Default()
Constant Pattern(value)<edge_begin><edge_end>Pattern()
Styling Predicate()<edge_begin><edge_end>Case Style()
Default()<edge_begin><edge_end>Case Style()
Exit Statement(label Name)<edge_begin><edge_end>Statement()
Parameter Sequence()<edge_begin><edge_end>Parameter Declaration(behavior, data Type)
Function(schema Name, return Type)<edge_begin><edge_end>Name Declaration(name)
Variable Ref Expression()<edge_begin><edge_end>Expression()
Variable Assignment Target()<edge_begin><edge_end>Assignment Target()
Case Statement Else Branch()<edge_begin><edge_end>Statement()
Function(schema Name, return Type)<edge_begin><edge_end>Function Content()
Loop Variable Declaration()<edge_begin><edge_end>Name Declaration(name)
While Loop Statement()<edge_begin><edge_end>Loop Statement(end Label)
Return Statement()<edge_begin><edge_end>Expression()
Fetch Statement Bulk Into Clause()<edge_begin><edge_end>Fetch Statement Into Clause()
Procedure(schema Name)<edge_begin><edge_end>Parameter Sequence()
Continue Statement(label Name)<edge_begin><edge_end>Statement()
Assignment Statement()<edge_begin><edge_end>Expression()
Package(schema Name, end Name)<edge_begin><edge_end>Name Declaration(name)
Function(schema Name, return Type)<edge_begin><edge_end>Compilation Unit()
Boolean Literal Expression(value)<edge_begin><edge_end>Expression()
Return Statement()<edge_begin><edge_end>Statement()
String Literal Expression(value)<edge_begin><edge_end>Expression()
Pragma Restrict References(restrictions)<edge_begin><edge_end>Pragma()
Parameter Declaration(behavior, data Type)<edge_begin><edge_end>Name Declaration(name)
Procedure(schema Name)<edge_begin><edge_end>Procedure Content()
Assignment Statement()<edge_begin><edge_end>Statement()
Procedure(schema Name)<edge_begin><edge_end>Compilation Unit()
Block Statement()<edge_begin><edge_end>Statement()
Procedure Implementation()<edge_begin><edge_end>Procedure Content()
Goto Statement()<edge_begin><edge_end>Statement()
Function Invoker Rights Clause(right)<edge_begin><edge_end>Function Clause()
Fetch Statement Bulk Into Clause()<edge_begin><edge_end>Expression()
Null Literal Expression()<edge_begin><edge_end>Expression()
Procedure Declaration(name)<edge_begin><edge_end>Item()
Close Statement()<edge_begin><edge_end>Variable Ref(is Host Ref)
If Statement()<edge_begin><edge_end>Expression()
Variable Ref(is Host Ref)<edge_begin><edge_end>Qualified Name()
Package(schema Name, end Name)<edge_begin><edge_end>Compilation Unit()
Deterministic Clause()<edge_begin><edge_end>Function Clause()
Qualified Name()<edge_begin><edge_end>Name()
External Procedure Declaration()<edge_begin><edge_end>Procedure Content()
Parameter Value()<edge_begin><edge_end>Expression()
If Statement()<edge_begin><edge_end>Statement()
Name()<edge_begin><edge_end>Name Declaration(name)
Procedure Declaration(name)<edge_begin><edge_end>Parameter Sequence()
Statement Body(end Name)<edge_begin><edge_end>Statement()
For Loop Statement()<edge_begin><edge_end>Loop Variable Declaration()
Package(schema Name, end Name)<edge_begin><edge_end>Item()
Statement()<edge_begin><edge_end>Label(name)
Pipelined Clause()<edge_begin><edge_end>Function Clause()
Procedure Definition()<edge_begin><edge_end>Item()
Procedure(schema Name)<edge_begin><edge_end>Procedure Invoker Rights Clause(right)
Result Cache Clause(data Sources)<edge_begin><edge_end>Function Clause()
For Loop Statement()<edge_begin><edge_end>Loop Statement(end Label)
Function Implementation()<edge_begin><edge_end>Function Content()
Raise Statement(exception Name)<edge_begin><edge_end>Statement()
Assignment Statement()<edge_begin><edge_end>Assignment Target()
Variable Declaration(is Constant, data Type, is Not Null)<edge_begin><edge_end>Variable Value()
Procedure(schema Name)<edge_begin><edge_end>Name Declaration(name)
Function(schema Name, return Type)<edge_begin><edge_end>Function Clause()
Fetch Statement()<edge_begin><edge_end>Variable Ref(is Host Ref)
Null Statement()<edge_begin><edge_end>Statement()
Item Declaration()<edge_begin><edge_end>Item()
Pragma Timestamp(timestamp)<edge_begin><edge_end>Pragma()
If Statement()<edge_begin><edge_end>If Statement Elsif Branch()
Case Statement(end Label)<edge_begin><edge_end>Case Statement Else Branch()
Procedure Implementation()<edge_begin><edge_end>Declare Section()
Fetch Statement Single Into Clause()<edge_begin><edge_end>Fetch Statement Into Clause()
Variable Assignment Target()<edge_begin><edge_end>Variable Ref(is Host Ref)
Case Statement(end Label)<edge_begin><edge_end>Case Statement When Branch()
Variable Value()<edge_begin><edge_end>Expression()
Fetch Statement()<edge_begin><edge_end>Fetch Statement Into Clause()
Exit Statement(label Name)<edge_begin><edge_end>Expression()
Fetch Statement()<edge_begin><edge_end>Statement()
Block Statement()<edge_begin><edge_end>Declare Section()
Function(schema Name, return Type)<edge_begin><edge_end>Parameter Sequence()
Close Statement()<edge_begin><edge_end>Statement()
Case Statement(end Label)<edge_begin><edge_end>Expression()
For Loop Statement()<edge_begin><edge_end>Expression()
Block Statement()<edge_begin><edge_end>Statement Body(end Name)
If Statement Else Branch()<edge_begin><edge_end>Statement()
Variable Declaration(is Constant, data Type, is Not Null)<edge_begin><edge_end>Name Declaration(name)
Fetch Statement Into Clause()<edge_begin><edge_end>Variable Ref(is Host Ref)
Pragma()<edge_begin><edge_end>Item()
Parameter Declaration(behavior, data Type)<edge_begin><edge_end>Parameter Value()
Function Implementation()<edge_begin><edge_end>Statement Body(end Name)
If Statement Elsif Branch()<edge_begin><edge_end>Statement()
Var Reference(key)<edge_begin><edge_end>Expression()
State Machine(name)<edge_begin><edge_end>Transition()
String Lit(value)<edge_begin><edge_end>Literal()
Program()<edge_begin><edge_end>Statement()
Assignation()<edge_begin><edge_end>Var Decl(key)
Wait(miliseconds)<edge_begin><edge_end>Statement()
Bool Lit(value)<edge_begin><edge_end>Literal()
Print()<edge_begin><edge_end>Console Output(input)
Println()<edge_begin><edge_end>Console Output(input)
Loop()<edge_begin><edge_end>Statement()
Integer Lit(value)<edge_begin><edge_end>Literal()
Var Decl(key)<edge_begin><edge_end>Statement()
Relational Constraint()<edge_begin><edge_end>Expression()
Arithmetic Expression(operator)<edge_begin><edge_end>Expression()
Assignation()<edge_begin><edge_end>Statement()
Relational Constraint()<edge_begin><edge_end>Constraint()
Conditional()<edge_begin><edge_end>Expression()
Final State()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>Abstract State(name)
Pseudostate(kind)<edge_begin><edge_end>Abstract State(name)
Transition()<edge_begin><edge_end>Abstract State(name)
Loop()<edge_begin><edge_end>Expression()
Transition()<edge_begin><edge_end>Constraint()
State()<edge_begin><edge_end>Program()
Console Output(input)<edge_begin><edge_end>Statement()
Conditional()<edge_begin><edge_end>Program()
Var Decl(key)<edge_begin><edge_end>Expression()
State Machine(name)<edge_begin><edge_end>Abstract State(name)
Conditional()<edge_begin><edge_end>Statement()
Specification(name)<edge_begin><edge_end>Category(name)
Quality Requirement()<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Requires(name)<edge_begin><edge_end>Dependency()
Requirement(name, identifier, priority, mandatory)<edge_begin><edge_end>Description()
Refines()<edge_begin><edge_end>Simple Dependency(name)
Requirement Term()<edge_begin><edge_end>Term()
Requires(name)<edge_begin><edge_end>Term()
Category(name)<edge_begin><edge_end>Category(name)
Unary Operator(name)<edge_begin><edge_end>Term()
Simple Dependency(name)<edge_begin><edge_end>Requirement Term()
Requirement Term()<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Text Description(text)<edge_begin><edge_end>Description()
Specification(name)<edge_begin><edge_end>Person(first Name, last Name)
Binary Operator()<edge_begin><edge_end>Term()
Not Operator()<edge_begin><edge_end>Unary Operator(name)
Functional Requirement()<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Simple Dependency(name)<edge_begin><edge_end>Dependency()
Binary Operator()<edge_begin><edge_end>Unary Operator(name)
Person(first Name, last Name)<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Person(first Name, last Name)<edge_begin><edge_end>Category(name)
Or Operator()<edge_begin><edge_end>Binary Operator()
File Dep(name)<edge_begin><edge_end>Dependency()
Rule()<edge_begin><edge_end>Shell Line(command, display)
Shell Line(command, display)<edge_begin><edge_end>String()
Makefile(name)<edge_begin><edge_end>String()
Macro(value)<edge_begin><edge_end>Element(name)
Shell Line(command, display)<edge_begin><edge_end>Boolean()
Element(name)<edge_begin><edge_end>String()
Rule()<edge_begin><edge_end>Element(name)
Rule Dep()<edge_begin><edge_end>Dependency()
Makefile(name)<edge_begin><edge_end>Comment(text)
Rule Dep()<edge_begin><edge_end>Rule()
Macro(value)<edge_begin><edge_end>String()
File Dep(name)<edge_begin><edge_end>String()
Makefile(name)<edge_begin><edge_end>Element(name)
Building()<edge_begin><edge_end>Place()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
University()<edge_begin><edge_end>Academic Institution()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Record of attendance()<edge_begin><edge_end>Document(Document ID)
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
One day presenter()<edge_begin><edge_end>Delegate()
Bid()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Modelling()<edge_begin><edge_end>Research()
Proposed Conflict()<edge_begin><edge_end>Thing()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Presenter state()<edge_begin><edge_end>State()
Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
MS Word()<edge_begin><edge_end>Format()
Paper Typologies()<edge_begin><edge_end>Event Setup()
notification()<edge_begin><edge_end>article()
conference setup()<edge_begin><edge_end>URL()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Track()<edge_begin><edge_end>Conference part()
Conference contributor()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Abstract()<edge_begin><edge_end>article()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Chair()<edge_begin><edge_end>Session(room)
Contact Author()<edge_begin><edge_end>Paper Abstract()
Document(Document ID)<edge_begin><edge_end>Thing()
Active Paper()<edge_begin><edge_end>Review Rating()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Contact Author(Alternate Email)
Paper File()<edge_begin><edge_end>Format()
Review()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Event Creation()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Thing()
Preview()<edge_begin><edge_end>Review Form()
Session(room)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Author()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Lecture(has Acronym)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Session(room)<edge_begin><edge_end>String()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Workshop Chair()<edge_begin><edge_end>PC Member()
Format()<edge_begin><edge_end>Value Partition()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Paper Status()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Event Approval()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Contribution File(has Contribution File Status)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Program Comitee Chair()<edge_begin><edge_end>Program Comitee()
Full day tour()<edge_begin><edge_end>Activity after conference()
Portable Reject()<edge_begin><edge_end>Reccommendation()
Review()<edge_begin><edge_end>Document(Document ID)
Result of Advocate()<edge_begin><edge_end>Value Partition()
Program chair()<edge_begin><edge_end>Conference Program()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>Domain Topic()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Extended abstract()<edge_begin><edge_end>Regular contribution()
Session Chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Review()<edge_begin><edge_end>Conference document()
article()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Subject Area()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Pending Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Technic activity()<edge_begin><edge_end>Conference activity()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Overall Value()
Tutorial speaker()<edge_begin><edge_end>Author()
Speaker()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Marginal Tend to Reject()<edge_begin><edge_end>Reccommendation()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Personal Review History()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Volunteer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>String()
Committee Member()<edge_begin><edge_end>Conference Member()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Program Comitee Meeting()<edge_begin><edge_end>Thing()
Associated Chair()<edge_begin><edge_end>Conference Member()
Antennas Topic()<edge_begin><edge_end>Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Speaker()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Contact Author(Alternate Email)<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
CD-ROM()<edge_begin><edge_end>Output Document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Review()
bidding of reviewer()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Conference www(has a URL)<edge_begin><edge_end>Conference document()
conference setup()<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Administrator()<edge_begin><edge_end>Thing()
OC Member()<edge_begin><edge_end>Conference Participant()
Member PC()<edge_begin><edge_end>Topic()
Listener()<edge_begin><edge_end>Delegate()
Criterion(has Weight)<edge_begin><edge_end>Thing()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Source Archive()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Single hotel room()<edge_begin><edge_end>Hotel room()
Programme()<edge_begin><edge_end>Document(Document ID)
Adobe PDF()<edge_begin><edge_end>Format()
Accepted paper(Score)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Renting()<edge_begin><edge_end>Activity before conference()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Session Chair()<edge_begin><edge_end>Conference Participant()
Review()<edge_begin><edge_end>classification()
Textual Review Question()<edge_begin><edge_end>Review Question()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Taxi()<edge_begin><edge_end>Transport vehicle()
Topic()<edge_begin><edge_end>Conference part()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Web site()<edge_begin><edge_end>Electronic proceeding()
Not Much()<edge_begin><edge_end>Overall Value()
Track-workshop chair()<edge_begin><edge_end>Conference part()
Author cd proceedings included()<edge_begin><edge_end>Author()
Steering committee()<edge_begin><edge_end>Committee()
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Sponsor city()<edge_begin><edge_end>City()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Topic()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Money()
Conference Venue Place()<edge_begin><edge_end>Place()
Secondary Reviewer()<edge_begin><edge_end>Committee Member()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Assignment Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Speaker lecture()<edge_begin><edge_end>Session(room)
Conference restaurant()<edge_begin><edge_end>Building()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Administrator()<edge_begin><edge_end>User()
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Session room()<edge_begin><edge_end>Place()
Committee Member()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Clear Accept()<edge_begin><edge_end>Reccommendation()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Participant(early Registration)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Meta-Review()<edge_begin><edge_end>Review()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Account()
Final manuscript()<edge_begin><edge_end>Submission(remark, abstract, contact Email, has Keyword, has Title)
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Numerical Review Question()<edge_begin><edge_end>Review Question()
URL()<edge_begin><edge_end>Thing()
Program Comitee Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Plenary lecture speaker()<edge_begin><edge_end>Author()
Invitation letter()<edge_begin><edge_end>Document(Document ID)
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Other()<edge_begin><edge_end>Overall Value()
Paper Categorization()<edge_begin><edge_end>Review Values()
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Request()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Security Topic()<edge_begin><edge_end>Topic()
Social Event()<edge_begin><edge_end>Non Academic Event()
Author Role()<edge_begin><edge_end>Role()
Notification Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
PC Member()<edge_begin><edge_end>Possible Reviewer()
Communications Topic()<edge_begin><edge_end>Topic()
Topics()<edge_begin><edge_end>Value Partition()
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Cd proceening()<edge_begin><edge_end>Publication()
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>article()
Presentation()<edge_begin><edge_end>Conference activity()
Place()<edge_begin><edge_end>Thing()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
abstract of paper()<edge_begin><edge_end>article()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Integer()
Session(room)<edge_begin><edge_end>Accepted Paper()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Committee Member()
reviewing proces()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Performance Topic()<edge_begin><edge_end>Topic()
Conference days()<edge_begin><edge_end>Time()
Help Request()<edge_begin><edge_end>Request()
Item()<edge_begin><edge_end>Time()
Chair URL()<edge_begin><edge_end>URL()
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Reception()<edge_begin><edge_end>Social Event()
Working event()<edge_begin><edge_end>Topic()
HTML()<edge_begin><edge_end>Format()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Corel Word Perfect()<edge_begin><edge_end>Format()
Co-Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Camera Ready Copy Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Reject Rating()<edge_begin><edge_end>Review Rating()
Registation deadline()<edge_begin><edge_end>Deadline()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Main office()<edge_begin><edge_end>Place()
Conference state()<edge_begin><edge_end>State()
Closing Talk()<edge_begin><edge_end>Talk Event()
Document(Document ID)<edge_begin><edge_end>Item()
Presenter house()<edge_begin><edge_end>Building()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>unsigned Long()
start date of conference()<edge_begin><edge_end>date of conference()
Program Comitee Chair()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
abstract submission date()<edge_begin><edge_end>date()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
PC Chair()<edge_begin><edge_end>Conference Participant()
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Contributed Talk()<edge_begin><edge_end>Document(Document ID)
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Steering Committee()<edge_begin><edge_end>Organizing Committee()
Advocated Paper()<edge_begin><edge_end>Advocate()
Paper Author()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference part()<edge_begin><edge_end>Topic()
Lecturer()<edge_begin><edge_end>Author()
Topic()<edge_begin><edge_end>Thing()
Approval Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Departure tax()<edge_begin><edge_end>Tax()
Committee()<edge_begin><edge_end>Co-chair()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Senior Program Committee member()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Organizer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>Document(Document ID)
chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Committee Member()<edge_begin><edge_end>Organizer()
Confirmed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Bidding And Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Sponzorship()<edge_begin><edge_end>Money()
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Departure()<edge_begin><edge_end>Activity after conference()
OC Chair()<edge_begin><edge_end>OC Member()
Contact Person URL()<edge_begin><edge_end>URL()
External Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Dinner banquet()<edge_begin><edge_end>Social program()
Hotel presenter()<edge_begin><edge_end>Delegate()
Tutorial()<edge_begin><edge_end>Individual Presentation()
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Multi-author Volume()<edge_begin><edge_end>Document(Document ID)
chair()<edge_begin><edge_end>Committee()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Regular contribution()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Bidding Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Evaluation()<edge_begin><edge_end>Document(Document ID)
Item()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Video presentation()<edge_begin><edge_end>Presentation()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>External Reviewer()
Review()<edge_begin><edge_end>article()
Program Comitee Chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Computer Science()<edge_begin><edge_end>Topics()
Committee member()<edge_begin><edge_end>Committee()
Conference Member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Review()<edge_begin><edge_end>Reviewed contribution()
Humour()<edge_begin><edge_end>Topics()
Conference airport()<edge_begin><edge_end>Building()
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Fee()<edge_begin><edge_end>Money()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Organization()
Program Committee()<edge_begin><edge_end>Thing()
Committees()<edge_begin><edge_end>Domain Topic()
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Head Role()<edge_begin><edge_end>Role()
Document(Document ID)<edge_begin><edge_end>User()
Conference Dinner()<edge_begin><edge_end>Meal Event()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Conference Program()<edge_begin><edge_end>Domain Topic()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference document()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
rejection notification email()<edge_begin><edge_end>notification email()
Reviewing event()<edge_begin><edge_end>Administrative event()
Advocate()<edge_begin><edge_end>Advocated Paper()
Programme()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Active conference participant()<edge_begin><edge_end>Presentation()
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Coffee break()<edge_begin><edge_end>Conference activity()
Programming()<edge_begin><edge_end>Topics()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Presenter university()<edge_begin><edge_end>Building()
Chair()<edge_begin><edge_end>Output Document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
article()<edge_begin><edge_end>Abstract()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Topic()
Program Committee Chair()<edge_begin><edge_end>Review()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Author()<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Program Comitee Chair()
Conference announcement()<edge_begin><edge_end>Conference document()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
notification email()<edge_begin><edge_end>article()
Output Document()<edge_begin><edge_end>Chair()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Session()<edge_begin><edge_end>Session(room)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Coffee Break()<edge_begin><edge_end>Break Event()
New Information()<edge_begin><edge_end>Overall Value()
Value added tax()<edge_begin><edge_end>Tax()
Deadline()<edge_begin><edge_end>Time()
Session(room)<edge_begin><edge_end>Slot(ends At, begins At)
Conference contribution()<edge_begin><edge_end>Conference document()
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>Administrator()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
chair()<edge_begin><edge_end>Committee member()
Presenter()<edge_begin><edge_end>Conference Participant()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Reviewed contribution()<edge_begin><edge_end>Review()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Workshop()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Money()<edge_begin><edge_end>Item()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>String()
Conflict Of Interest()<edge_begin><edge_end>Thing()
Introduction()<edge_begin><edge_end>Conference activity()
User()<edge_begin><edge_end>Thing()
Book proceeding()<edge_begin><edge_end>Publication()
Conference Chair()<edge_begin><edge_end>Chairman()
Written contribution()<edge_begin><edge_end>Conference contribution()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Power Point presentation()<edge_begin><edge_end>Presentation()
Deadline()<edge_begin><edge_end>date()
Invitation()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Program()<edge_begin><edge_end>Output Document()
Session(room)<edge_begin><edge_end>Lecture(has Acronym)
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
Proceedings()<edge_begin><edge_end>Output Document()
Item()<edge_begin><edge_end>Item()
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Poster Session()<edge_begin><edge_end>Session(room)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Sponsor company house()<edge_begin><edge_end>Building()
Individual Presentation()<edge_begin><edge_end>Document(Document ID)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Industrial Session()<edge_begin><edge_end>Conference Session()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Registration form()<edge_begin><edge_end>Form()
Item()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Trip()<edge_begin><edge_end>Social event()
article()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Program committee()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Double hotel room()<edge_begin><edge_end>Hotel room()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Integer()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>article()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conflict Rules()<edge_begin><edge_end>Thing()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Committee member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Information()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Conference participant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Contact Author(Alternate Email)<edge_begin><edge_end>String()
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper File()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Valuable Confirmation of Present Knowledge()<edge_begin><edge_end>Overall Value()
end date of conference()<edge_begin><edge_end>date of conference()
Pending Proposed Conflict()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
group email()<edge_begin><edge_end>article()
Meal Event()<edge_begin><edge_end>Meal Menu()
Session chair()<edge_begin><edge_end>Delegate()
Web Site()<edge_begin><edge_end>Document(Document ID)
Student non speaker()<edge_begin><edge_end>Non speaker()
Administrator()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Flyer()<edge_begin><edge_end>Document(Document ID)
Presenter()<edge_begin><edge_end>Author()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
External Reviewers List()<edge_begin><edge_end>Output Document()
Hidden Conflict()<edge_begin><edge_end>Conflict Of Interest()
Double Blind Review()<edge_begin><edge_end>Thing()
Main Author()<edge_begin><edge_end>Author()
Negative Review()<edge_begin><edge_end>Review()
Viza()<edge_begin><edge_end>Document(Document ID)
Academic Institution()<edge_begin><edge_end>Academic Institution()
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Sponsor()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Organizing Committee()<edge_begin><edge_end>Thing()
Committee()<edge_begin><edge_end>User()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>human(e-mail, last name, first name)
Submission Template()<edge_begin><edge_end>Event Setup()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Bidding Without Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Abstract()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>intensity()
Author()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Classic Papers()<edge_begin><edge_end>Topics()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Signal Processing Topic()<edge_begin><edge_end>Topic()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Planed Paper()<edge_begin><edge_end>Conference Program()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Camera Ready event()<edge_begin><edge_end>Administrative event()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>System()
Non speaker()<edge_begin><edge_end>Delegate()
Registration()<edge_begin><edge_end>Conference activity()
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Co-Author()<edge_begin><edge_end>Author()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
External Reviewer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Card()<edge_begin><edge_end>Item()
Abstract()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>Speaker()
Post Script()<edge_begin><edge_end>Format()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Reccommendation()<edge_begin><edge_end>Review Values()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Administrator()
Event URL()<edge_begin><edge_end>URL()
Must Accept()<edge_begin><edge_end>Reccommendation()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Organizing Committee()
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Car()<edge_begin><edge_end>Transport vehicle()
Chairman()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Blocked Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Conference hotel()<edge_begin><edge_end>Building()
Tutorial()<edge_begin><edge_end>Working event()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
review form()<edge_begin><edge_end>article()
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Agency Staff Member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
summary of reviews()<edge_begin><edge_end>article()
Assistance()<edge_begin><edge_end>Help Request()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Abstract And Paper Submission Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Primary Reviewer()<edge_begin><edge_end>Review()
Chair PC()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Conference activity()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Document(Document ID)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
Medicine Topic()<edge_begin><edge_end>Topic()
article()<edge_begin><edge_end>Document(Document ID)
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
human(e-mail, last name, first name)<edge_begin><edge_end>article()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
RFC()<edge_begin><edge_end>Topics()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Accommodation Place()<edge_begin><edge_end>Place()
managing of conference process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Active conference participant()<edge_begin><edge_end>Conference participant()
Place()<edge_begin><edge_end>Item()
Co-chair()<edge_begin><edge_end>Committee member()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Conference Program()<edge_begin><edge_end>Thing()
CAD Topic()<edge_begin><edge_end>Topic()
Conference Hiker()<edge_begin><edge_end>Delegate()
summary of reviews()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Money()<edge_begin><edge_end>Building()
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Conference document()<edge_begin><edge_end>date()
Slide Set()<edge_begin><edge_end>Document(Document ID)
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Track()<edge_begin><edge_end>Scientific Event()
Proceedings()<edge_begin><edge_end>Thing()
Organisation()<edge_begin><edge_end>Thing()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference applicant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Workshop()<edge_begin><edge_end>Academic Event()
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Associated Chair()<edge_begin><edge_end>Chairman()
Social program()<edge_begin><edge_end>Conference activity()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Review()<edge_begin><edge_end>Thing()
Organising Agency()<edge_begin><edge_end>Organisation()
chair()<edge_begin><edge_end>program()
Closed Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Workshop()<edge_begin><edge_end>Conference part()
Paper Question()<edge_begin><edge_end>Question()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Account()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Pending Proposed Conflict()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Computer()<edge_begin><edge_end>Audiovisual equipment()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Advocate()<edge_begin><edge_end>Member(Web address)
Hotel fee()<edge_begin><edge_end>Fee()
Delegate()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Topic()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>String()
Acceptance()<edge_begin><edge_end>Decision()
Welcome Talk()<edge_begin><edge_end>Talk Event()
chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Track-workshop chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Program chair()<edge_begin><edge_end>Member(Web address)
Academia Organization()<edge_begin><edge_end>Organization()
Invited talk()<edge_begin><edge_end>Presentation()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Research Topic()<edge_begin><edge_end>Thing()
Demo Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Evaluation()<edge_begin><edge_end>Review()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Document(Document ID)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>String()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Committee Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference Chair()<edge_begin><edge_end>Conference Member()
Banquet()<edge_begin><edge_end>Social event()
Speaker()<edge_begin><edge_end>Delegate()
Reviewing results event()<edge_begin><edge_end>Administrative event()
Author information form()<edge_begin><edge_end>Form()
Assistant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Computer Networks Topic()<edge_begin><edge_end>Topic()
article()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Dining Place()<edge_begin><edge_end>Place()
Co-chair()<edge_begin><edge_end>Committee()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
camera-ready submission date()<edge_begin><edge_end>date()
Regular()<edge_begin><edge_end>Participant(early Registration)
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Detail()<edge_begin><edge_end>Thing()
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
Conference building()<edge_begin><edge_end>Building()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Location()
List Of Abstracts()<edge_begin><edge_end>Output Document()
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
IASTED non member()<edge_begin><edge_end>Delegate()
Academic Institution()<edge_begin><edge_end>Organisation()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Presenter city()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Paper File()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Technical commitee()<edge_begin><edge_end>Delegate()
Money()<edge_begin><edge_end>Thing()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reccommendation()
acceptance notification email()<edge_begin><edge_end>notification email()
Conference Banquet()<edge_begin><edge_end>Social Event()
Break Event()<edge_begin><edge_end>Non Academic Event()
Evaluated Paper()<edge_begin><edge_end>Review()
Assigned Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
University()<edge_begin><edge_end>Organization()
Free Time Break()<edge_begin><edge_end>Break Event()
article()<edge_begin><edge_end>classification()
Presentation()<edge_begin><edge_end>Active conference participant()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Meta-Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference hall()<edge_begin><edge_end>Place()
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Trip city()<edge_begin><edge_end>City()
Initial manuscipt()<edge_begin><edge_end>Submission(remark, abstract, contact Email, has Keyword, has Title)
Paper Abstract()<edge_begin><edge_end>Contact Author()
Clear Reject()<edge_begin><edge_end>Reccommendation()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
Accepted paper(Score)<edge_begin><edge_end>Thing()
Science Worker()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Presentation()<edge_begin><edge_end>Conference contribution()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Conference document()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Payment document()<edge_begin><edge_end>Document(Document ID)
Topic()<edge_begin><edge_end>Working event()
Networking()<edge_begin><edge_end>Topics()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Bank transfer()<edge_begin><edge_end>Payment document()
Chairman()<edge_begin><edge_end>Conference Member()
Primary Reviewer()<edge_begin><edge_end>Committee Member()
Program Comitee()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Author()<edge_begin><edge_end>User()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Committee()<edge_begin><edge_end>Chair()
Abstract()<edge_begin><edge_end>Document(Document ID)
Camera Ready Copy()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>String()
Audiovisual equipment()<edge_begin><edge_end>Item()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Outside Referee()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Research Topic()
Conference www(has a URL)<edge_begin><edge_end>String()
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Group Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Lecture(has Acronym)<edge_begin><edge_end>String()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Call for participation()<edge_begin><edge_end>Conference document()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
full paper submission date()<edge_begin><edge_end>date()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Paper Status()
Fee for extra trip()<edge_begin><edge_end>Fee()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Important dates()<edge_begin><edge_end>date()
PC Chair()<edge_begin><edge_end>PC Member()
Committe Role()<edge_begin><edge_end>Role()
Publication()<edge_begin><edge_end>Item()
date()<edge_begin><edge_end>Thing()
Activity after conference()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Comitee Chair()
Workshop()<edge_begin><edge_end>Scientific Event()
Self Conflict()<edge_begin><edge_end>Conflict Of Interest()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Document(Document ID)<edge_begin><edge_end>Document(Document ID)
Cheque()<edge_begin><edge_end>Payment document()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Tutorial()<edge_begin><edge_end>Conference part()
Index Of Authors()<edge_begin><edge_end>Output Document()
Meal Menu()<edge_begin><edge_end>Document(Document ID)
Program Comitee Chair()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Session(room)<edge_begin><edge_end>Scientific Event()
conference setup()<edge_begin><edge_end>date()
Tutorial Chair()<edge_begin><edge_end>PC Member()
Demo Session()<edge_begin><edge_end>Session(room)
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Domain Topic()
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Time()
Workshop()<edge_begin><edge_end>Working event()
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Conference Session()<edge_begin><edge_end>Session(room)
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
SC Member()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>PC Member()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Research Topic()
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Contact Author()<edge_begin><edge_end>Author()
TPC Member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Slides()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Abstract()<edge_begin><edge_end>Extended abstract()
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Hotel registration form()<edge_begin><edge_end>Form()
Mailing list()<edge_begin><edge_end>Document(Document ID)
submission process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
Tutorial()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Slot(ends At, begins At)<edge_begin><edge_end>time()
Industry Organization()<edge_begin><edge_end>Organization()
PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Organizer()
Registration fee()<edge_begin><edge_end>Fee()
Text()<edge_begin><edge_end>Format()
Role()<edge_begin><edge_end>Administrator()
Output Document()<edge_begin><edge_end>Thing()
Administrative event()<edge_begin><edge_end>Administrative event()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Co-Author()
Poster()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Transport vehicle()<edge_begin><edge_end>Item()
Government Organization()<edge_begin><edge_end>Organization()
Program Comitee Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Review Question()<edge_begin><edge_end>Question()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Talk Event()<edge_begin><edge_end>Academic Event()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Pending Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Review Form Setup()<edge_begin><edge_end>Review Form()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Inforamtion()
Money()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Review Committee()<edge_begin><edge_end>Committees()
Overall Value()<edge_begin><edge_end>Review Values()
Conference Trip()<edge_begin><edge_end>Social Event()
Template()<edge_begin><edge_end>Document(Document ID)
Call for paper()<edge_begin><edge_end>Conference document()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Conference Program()<edge_begin><edge_end>Program chair()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Administrator()
Review Form()<edge_begin><edge_end>Event Setup()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>User()
Conference Participant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Rated Papers()<edge_begin><edge_end>Active Paper()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Session(room)<edge_begin><edge_end>Chair()
Scholar()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Form()<edge_begin><edge_end>Document(Document ID)
Administrator()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Student()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Author book proceedings included()<edge_begin><edge_end>Author()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Integer()
PC Members List()<edge_begin><edge_end>Output Document()
Rejection Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Research()<edge_begin><edge_end>Activity before conference()
One conference day()<edge_begin><edge_end>Conference days()
paper assignment()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Program Comitee()<edge_begin><edge_end>Thing()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Program Comitee()
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Reviewed Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Topic()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>date Time()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>String()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>String()
City()<edge_begin><edge_end>Thing()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Rejection()<edge_begin><edge_end>Decision()
Cryptography Topic()<edge_begin><edge_end>Topic()
Trip day()<edge_begin><edge_end>Time()
Invitation Of Reviewers Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Attendee()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Table(storage Engine, collation)<edge_begin><edge_end>Primary Key()
Unique()<edge_begin><edge_end>Index()
Primary Key()<edge_begin><edge_end>Index()
Table(storage Engine, collation)<edge_begin><edge_end>Named Element(name)
Table(storage Engine, collation)<edge_begin><edge_end>Index()
Table(storage Engine, collation)<edge_begin><edge_end>Column(type, nullable, default, length, collation)
Table(storage Engine, collation)<edge_begin><edge_end>Unique()
Column(type, nullable, default, length, collation)<edge_begin><edge_end>Named Element(name)
Table(storage Engine, collation)<edge_begin><edge_end>Data Base()
Index()<edge_begin><edge_end>Named Element(name)
P()<edge_begin><edge_end>BODY Element()
TR(valign, align)<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
BIG()<edge_begin><edge_end>BODY Element()
TH()<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
HEAD()<edge_begin><edge_end>HTML()
SPAN(style)<edge_begin><edge_end>BODY Element()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TABLE Element(bgcolor, background)
IFRAME()<edge_begin><edge_end>FRAME(src, name, marginwidth, marginheight, scrolling, noresize)
HTML Element(value)<edge_begin><edge_end>HTML Element(value)
H3()<edge_begin><edge_end>BODY Element()
EMBED(src, width, height, align, vspace, hspace, border)<edge_begin><edge_end>BODY Element()
DIV(align)<edge_begin><edge_end>BODY Element()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TABLE Element(bgcolor, background)
LI(li Value)<edge_begin><edge_end>List Element(type)
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML Element(value)
MAP()<edge_begin><edge_end>BODY Element()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML()
TR(valign, align)<edge_begin><edge_end>TABLE Element(bgcolor, background)
HTML()<edge_begin><edge_end>HEAD()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TR(valign, align)
H1()<edge_begin><edge_end>BODY Element()
HEAD()<edge_begin><edge_end>HEAD Element()
HEAD Element()<edge_begin><edge_end>HTML Element(value)
PRE()<edge_begin><edge_end>BODY Element()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TR(valign, align)
UL()<edge_begin><edge_end>List Element(type)
H2()<edge_begin><edge_end>BODY Element()
LINK(rel, title, ahref, type)<edge_begin><edge_end>HEAD Element()
SUB()<edge_begin><edge_end>BODY Element()
OL(start)<edge_begin><edge_end>List Element(type)
EM()<edge_begin><edge_end>BODY Element()
SMALL()<edge_begin><edge_end>BODY Element()
TR(valign, align)<edge_begin><edge_end>TABLE(border, width, cellspacing, cellpadding)
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>BODY Element()
AREA(shape, coords, ahref)<edge_begin><edge_end>BODY Element()
I()<edge_begin><edge_end>BODY Element()
SUP()<edge_begin><edge_end>BODY Element()
STYLE()<edge_begin><edge_end>BODY Element()
STRIKE()<edge_begin><edge_end>BODY Element()
NOEMBED()<edge_begin><edge_end>BODY Element()
TITLE()<edge_begin><edge_end>HEAD Element()
BODY Element()<edge_begin><edge_end>HTML Element(value)
STRONG()<edge_begin><edge_end>BODY Element()
B()<edge_begin><edge_end>BODY Element()
Non Functionnel Requirement()<edge_begin><edge_end>Use Case()
Role()<edge_begin><edge_end>Use Case()
Goal()<edge_begin><edge_end>Use Case()
Condition()<edge_begin><edge_end>Use Case()
Human Role()<edge_begin><edge_end>Role()
Use Case()<edge_begin><edge_end>Non Functionnel Requirement()
Use Case()<edge_begin><edge_end>Goal()
System Role()<edge_begin><edge_end>Role()
Use Case()<edge_begin><edge_end>Role()
Use Case()<edge_begin><edge_end>Condition()
Scenario Description()<edge_begin><edge_end>Use Case()
Non Functionnel Requirement()<edge_begin><edge_end>Requirement()
Post()<edge_begin><edge_end>Condition()
Functionnel Requirement()<edge_begin><edge_end>Requirement()
Functionnel Requirement()<edge_begin><edge_end>Use Case()
Use Case()<edge_begin><edge_end>Scenario Description()
Manage()<edge_begin><edge_end>Use Case()
Place()<edge_begin><edge_end>Can Change(text)
Place()<edge_begin><edge_end>Activities()
Arc()<edge_begin><edge_end>Keep Anim(text)
Place()<edge_begin><edge_end>Geometry(text)
Arc()<edge_begin><edge_end>Finished(text)
Arc()<edge_begin><edge_end>ident(text)
Transition()<edge_begin><edge_end>Transition()
Place()<edge_begin><edge_end>Place()
Place()<edge_begin><edge_end>Tokens(text)
State(name)<edge_begin><edge_end>Super State()
FSM()<edge_begin><edge_end>Initial State()
Steady State()<edge_begin><edge_end>State(name)
State(name)<edge_begin><edge_end>e Action(exit Label)
Initial State()<edge_begin><edge_end>Super State()
Transition(guard, action)<edge_begin><edge_end>Super State()
State(name)<edge_begin><edge_end>Action(entry Label)
FSM()<edge_begin><edge_end>State(name)
Super State()<edge_begin><edge_end>Transition(guard, action)
Assignment Statement()<edge_begin><edge_end>Expression()
Fetch Statement()<edge_begin><edge_end>Cursor Declaration()
Set Transaction Statement()<edge_begin><edge_end>Modify SQL Statement()
Function Call Parameter()<edge_begin><edge_end>Named Element(name)
Condition Comparison(type)<edge_begin><edge_end>SQL Condition()
Commit Statement()<edge_begin><edge_end>Control SQL Statement()
Property Access(property Name)<edge_begin><edge_end>Expression()
Trigger Block()<edge_begin><edge_end>Block Statement()
Boolean Expression(type)<edge_begin><edge_end>Expression()
Found Expression()<edge_begin><edge_end>Expression()
Var Ref Expression()<edge_begin><edge_end>Expression()
Argument(in, out, default)<edge_begin><edge_end>Typed Element()
Rollback Statement()<edge_begin><edge_end>Control SQL Statement()
Return Statement()<edge_begin><edge_end>Expression()
Indirect Type(identifier, rowtype, type, range)<edge_begin><edge_end>Type()
Function Call Statement()<edge_begin><edge_end>Expression()
Argument(in, out, default)<edge_begin><edge_end>Named Element(name)
Concat String()<edge_begin><edge_end>Expression()
Exception Section(exception Names)<edge_begin><edge_end>Statement()
Open Statement()<edge_begin><edge_end>Cursor Declaration()
Procedure Declaration()<edge_begin><edge_end>Declaration()
Datatype(name, range)<edge_begin><edge_end>Type()
Cursor Declaration()<edge_begin><edge_end>Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)
Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)<edge_begin><edge_end>Modify SQL Statement()
Goto Statement()<edge_begin><edge_end>Named Element(name)
Function Declaration()<edge_begin><edge_end>Argument(in, out, default)
Concat String()<edge_begin><edge_end>String Operation()
Package()<edge_begin><edge_end>Declaration()
Procedure Declaration()<edge_begin><edge_end>Argument(in, out, default)
For Statement()<edge_begin><edge_end>Expression()
Function Call Statement()<edge_begin><edge_end>Statement()
Function Declaration()<edge_begin><edge_end>Declaration()
Not Expression()<edge_begin><edge_end>Expression()
Boolean Expression(type)<edge_begin><edge_end>SQL Condition()
In Range Expression()<edge_begin><edge_end>Expression()
Function Call Statement()<edge_begin><edge_end>Named Element(name)
Package()<edge_begin><edge_end>Statement()
Package()<edge_begin><edge_end>Named Element(name)
Open Statement()<edge_begin><edge_end>Control SQL Statement()
For Statement()<edge_begin><edge_end>Variable Declaration(constant, notnull, default)
Function Declaration()<edge_begin><edge_end>Statement()
Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)<edge_begin><edge_end>SQL Condition()
Block Statement()<edge_begin><edge_end>Declaration()
Return Statement()<edge_begin><edge_end>Statement()
Lock Table Statement()<edge_begin><edge_end>Control SQL Statement()
Function Call Statement()<edge_begin><edge_end>Function Call Parameter()
PLSQL Definition()<edge_begin><edge_end>Trigger Block()
Variable Declaration(constant, notnull, default)<edge_begin><edge_end>Declaration()
Exit Statement()<edge_begin><edge_end>Statement()
Control SQL Statement()<edge_begin><edge_end>SQL Statement()
Not Condition()<edge_begin><edge_end>SQL Condition()
If Statement()<edge_begin><edge_end>If Statement()
Case Statement()<edge_begin><edge_end>Statement()
Delete Statement()<edge_begin><edge_end>Modify SQL Statement()
Fetch Statement()<edge_begin><edge_end>Control SQL Statement()
Update Statement(table)<edge_begin><edge_end>SQL Condition()
Update Statement(table)<edge_begin><edge_end>Update Pair(column)
SQL Variable()<edge_begin><edge_end>Var Ref Expression()
Declaration()<edge_begin><edge_end>Named Element(name)
Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)<edge_begin><edge_end>Expression()
Boolean Condition(type)<edge_begin><edge_end>SQL Condition()
SQL Cursor()<edge_begin><edge_end>Var Ref Expression()
Argument(in, out, default)<edge_begin><edge_end>Expression()
Loop Statement()<edge_begin><edge_end>Statement()
Modify SQL Statement()<edge_begin><edge_end>SQL Statement()
SQL Statement()<edge_begin><edge_end>Statement()
Block Statement()<edge_begin><edge_end>Exception Section(exception Names)
SQL Variable()<edge_begin><edge_end>Variable Declaration(constant, notnull, default)
Goto Statement()<edge_begin><edge_end>Statement()
Raise Statement(exception)<edge_begin><edge_end>Statement()
Function Call Parameter()<edge_begin><edge_end>Expression()
If Statement()<edge_begin><edge_end>Expression()
Assignment Statement()<edge_begin><edge_end>Statement()
Variable Declaration(constant, notnull, default)<edge_begin><edge_end>Expression()
Function Declaration()<edge_begin><edge_end>Typed Element()
Variable Declaration(constant, notnull, default)<edge_begin><edge_end>Typed Element()
Generic Type()<edge_begin><edge_end>Type()
For Statement()<edge_begin><edge_end>Loop Statement()
Open Statement()<edge_begin><edge_end>Expression()
Block Statement()<edge_begin><edge_end>Statement()
Fetch Statement()<edge_begin><edge_end>Var Ref Expression()
Insert Statement(into, columns)<edge_begin><edge_end>Expression()
Procedure Declaration()<edge_begin><edge_end>Statement()
Cursor Declaration()<edge_begin><edge_end>Argument(in, out, default)
String Operation()<edge_begin><edge_end>Expression()
Association State State()<edge_begin><edge_end>State()
Root Folder(name)<edge_begin><edge_end>State Machine()
State()<edge_begin><edge_end>Association State State()
Root Folder(name)<edge_begin><edge_end>String()
Transition()<edge_begin><edge_end>Association State State()
State()<edge_begin><edge_end>State Machine()
Transition()<edge_begin><edge_end>Mga Object(name, position)
State Machine()<edge_begin><edge_end>Root Folder(name)
Transition()<edge_begin><edge_end>State Machine()
Mga Object(name, position)<edge_begin><edge_end>String()
State()<edge_begin><edge_end>Mga Object(name, position)
Root Folder(name)<edge_begin><edge_end>Root Folder(name)
Association State State()<edge_begin><edge_end>Transition()
SQL Simple Type(character Maximum Length, character Octet Length, numeric Precision, numeric Precision Radix, numeric Scale, date Time Precision)<edge_begin><edge_end>Integer()
View(is Read Only, check Option)<edge_begin><edge_end>Named Column Set()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Named Column Set()
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>String()
View(is Read Only, check Option)<edge_begin><edge_end>Boolean()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Check Constraint()
Check Constraint()<edge_begin><edge_end>Table(is Temporary, temporary Scope, is System)
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>Boolean()
SQL Simple Type(character Maximum Length, character Octet Length, numeric Precision, numeric Precision Radix, numeric Scale, date Time Precision)<edge_begin><edge_end>SQL Data Type(type Number)
Named Column Set()<edge_begin><edge_end>Column(precision, scale, is Nullable, length, collection Name, character Set Name)
SQL Distinct Type(length, precision, scale)<edge_begin><edge_end>Integer()
Check Constraint()<edge_begin><edge_end>Column(precision, scale, is Nullable, length, collection Name, character Set Name)
Trigger()<edge_begin><edge_end>Named Column Set()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Boolean()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>SQL Data Type(type Number)
Query Column Set()<edge_begin><edge_end>Column Set()
SQL Simple Type(character Maximum Length, character Octet Length, numeric Precision, numeric Precision Radix, numeric Scale, date Time Precision)<edge_begin><edge_end>SQL Distinct Type(length, precision, scale)
SQL Data Type(type Number)<edge_begin><edge_end>Integer()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Integer()
Column Set()<edge_begin><edge_end>Column(precision, scale, is Nullable, length, collection Name, character Set Name)
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>Check Constraint()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Column Set()
SQL Distinct Type(length, precision, scale)<edge_begin><edge_end>SQL Data Type(type Number)
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>Named Column Set()
Query Expression(expresssion)<edge_begin><edge_end>String()
Named Column Set()<edge_begin><edge_end>Trigger()
Trigger()<edge_begin><edge_end>Named Element(name)
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Trigger()
Train Track Element Changed()<edge_begin><edge_end>Trigger Expression(expression)
Train Current Heading Speed(current Heading Speed)<edge_begin><edge_end>Guard Expression(expression)
State Machine()<edge_begin><edge_end>Guard()
Train Currently Stands On()<edge_begin><edge_end>Guard Expression(expression)
Transition(is Enabled, is Fireable)<edge_begin><edge_end>State(is Initial, is Active)
State Machine Behavioral Model()<edge_begin><edge_end>State Machine()
State Machine()<edge_begin><edge_end>Action()
Change Signal Allowed Speed(new Allowed Speed)<edge_begin><edge_end>Action Expression(expression)
State(is Initial, is Active)<edge_begin><edge_end>Transition(is Enabled, is Fireable)
State Machine()<edge_begin><edge_end>Transition(is Enabled, is Fireable)
Action Expression(expression)<edge_begin><edge_end>Action()
Turnout Current Direction(current Turnout Direction)<edge_begin><edge_end>Guard Expression(expression)
State(is Initial, is Active)<edge_begin><edge_end>Named Element(name)
Trigger Expression(expression)<edge_begin><edge_end>Trigger()
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Action()
Next Track Element Is()<edge_begin><edge_end>Guard Expression(expression)
Change Train Heading Speed(new Heading Speed)<edge_begin><edge_end>Action Expression(expression)
State Machine()<edge_begin><edge_end>State(is Initial, is Active)
State Machine()<edge_begin><edge_end>Trigger()
Turnout Direction Changed(new Turnout Direction)<edge_begin><edge_end>Trigger Expression(expression)
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Named Element(name)
Signal Allowed Speed Changed(new Allowed Speed)<edge_begin><edge_end>Trigger Expression(expression)
Action()<edge_begin><edge_end>Named Element(name)
Guard()<edge_begin><edge_end>Named Element(name)
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Guard()
Turnout Has Desired Direction()<edge_begin><edge_end>Guard Expression(expression)
Guard Expression(expression)<edge_begin><edge_end>Guard()
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Review Note(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paper()<edge_begin><edge_end>Paragraph(content)
Position(description)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Named(name)
Review(date)<edge_begin><edge_end>Labelled(lname)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Paragraph(content)<edge_begin><edge_end>Named(name)
Review(date)<edge_begin><edge_end>Review Note(content)
Position(description)<edge_begin><edge_end>Position(description)
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>URI()
Position()<edge_begin><edge_end>Arc Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Petri Net(id, type)<edge_begin><edge_end>Name(text)
Node Graphics()<edge_begin><edge_end>Dimension()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Long String()
Arc Graphics()<edge_begin><edge_end>Position()
Petri Net Doc(xmlns)<edge_begin><edge_end>Petri Net(id, type)
Name(text)<edge_begin><edge_end>Pn Object(id)
Petri Net(id, type)<edge_begin><edge_end>Petri Net Doc(xmlns)
Arc()<edge_begin><edge_end>Node()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Node Graphics()
Node Graphics()<edge_begin><edge_end>Position()
Attribute()<edge_begin><edge_end>Label()
Ref Place()<edge_begin><edge_end>Place Node()
Node Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Node Graphics()<edge_begin><edge_end>Page()
Node()<edge_begin><edge_end>Pn Object(id)
Annotation Graphics()<edge_begin><edge_end>Annotation()
Pn Object(id)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Dimension()<edge_begin><edge_end>Coordinate(x, y)
Annotation()<edge_begin><edge_end>Label()
Annotation Graphics()<edge_begin><edge_end>Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Node Graphics()
Node()<edge_begin><edge_end>Node Graphics()
Pn Object(id)<edge_begin><edge_end>Page()
Name(text)<edge_begin><edge_end>Petri Net(id, type)
Transition Node()<edge_begin><edge_end>Node()
Any Object()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Pn Object(id)
Petri Net(id, type)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Petri Net(id, type)<edge_begin><edge_end>Page()
Annotation()<edge_begin><edge_end>Annotation Graphics()
Annotation Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Annotation Graphics()
Arc()<edge_begin><edge_end>Pn Object(id)
Page()<edge_begin><edge_end>Petri Net(id, type)
Arc Graphics()<edge_begin><edge_end>Arc()
Node Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Transition()<edge_begin><edge_end>Transition Node()
Arc Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>URI()
Annotation Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Place Node()<edge_begin><edge_end>Node()
Position()<edge_begin><edge_end>Node Graphics()
Position()<edge_begin><edge_end>Coordinate(x, y)
Line(color, shape, width, style)<edge_begin><edge_end>Annotation Graphics()
Node Graphics()<edge_begin><edge_end>Graphics()
Page()<edge_begin><edge_end>Node Graphics()
Annotation Graphics()<edge_begin><edge_end>Offset()
Node Graphics()<edge_begin><edge_end>Node()
Arc Graphics()<edge_begin><edge_end>Graphics()
Offset()<edge_begin><edge_end>Annotation Graphics()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Petri Net(id, type)
Font(align, decoration, family, rotation, size, style, weight)<edge_begin><edge_end>Annotation Graphics()
Name(text)<edge_begin><edge_end>Annotation()
Procedure(name)<edge_begin><edge_end>Ref Procedure()
F Key(name)<edge_begin><edge_end>Ref Table()
Type(name)<edge_begin><edge_end>Ref Type()
Column(name)<edge_begin><edge_end>Ref Column()
Database(name)<edge_begin><edge_end>Ref Database()
Table(name)<edge_begin><edge_end>Ref Column()
Parameter(name)<edge_begin><edge_end>Ref Type()
F Key(name)<edge_begin><edge_end>Column(name)
Database(name)<edge_begin><edge_end>Ref Procedure()
Procedure(name)<edge_begin><edge_end>Ref Parameter()
P Key(name)<edge_begin><edge_end>Column(name)
Table(name)<edge_begin><edge_end>Ref Table()
Parameter(name)<edge_begin><edge_end>Ref Parameter()
Column(name)<edge_begin><edge_end>Ref Type()
P Key(name)<edge_begin><edge_end>Ref P Key()
F Key(name)<edge_begin><edge_end>Ref F Key()
Database()<edge_begin><edge_end>Name Provider(name)
Column(type)<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Column(type)
Indexed Column()<edge_begin><edge_end>Column(type)
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Not Null Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Column(type)<edge_begin><edge_end>Name Provider(name)
Unique Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Check Column Constraint()<edge_begin><edge_end>Expression()
Trigger()<edge_begin><edge_end>Name Provider(name)
Unique Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Column Mapping()<edge_begin><edge_end>String To Column Mapping Entry Map(key)
View()<edge_begin><edge_end>Database()
Database()<edge_begin><edge_end>Index()
Database()<edge_begin><edge_end>Trigger()
Table()<edge_begin><edge_end>Name Provider(name)
Table Mapping()<edge_begin><edge_end>String To Table Mapping Entry Map(key)
Database Version()<edge_begin><edge_end>Database Version()
Database Versions(package Name, file Name)<edge_begin><edge_end>Database Version()
Database Version()<edge_begin><edge_end>Column Mapping()
Database Version()<edge_begin><edge_end>Table Mapping()
Table()<edge_begin><edge_end>Table Constraint(name)
Primary Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Database()<edge_begin><edge_end>View()
Trigger()<edge_begin><edge_end>Database()
Table()<edge_begin><edge_end>Database()
Check Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Column Constraint(name)<edge_begin><edge_end>Column(type)
Foreign Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Check Table Constraint()<edge_begin><edge_end>Expression()
View()<edge_begin><edge_end>Name Provider(name)
Foreign Key Table Constraint()<edge_begin><edge_end>Table()
Foreign Key Table Constraint()<edge_begin><edge_end>Column(type)
Default Value Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Task(name)<edge_begin><edge_end>Participant(age, attitude)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Person(name, organisation)
Participant(age, attitude)<edge_begin><edge_end>Person(name, organisation)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Story(name)
Location(name)<edge_begin><edge_end>Talk(name, abstract, duration, time)
Conference(name)<edge_begin><edge_end>Day(name)
Track(name)<edge_begin><edge_end>Talk(name, abstract, duration, time)
Track(name)<edge_begin><edge_end>Person(name, organisation)
Day(name)<edge_begin><edge_end>Participant(age, attitude)
Conference(name)<edge_begin><edge_end>Person(name, organisation)
Person(name, organisation)<edge_begin><edge_end>Track(name)
Day(name)<edge_begin><edge_end>Task(name)
Story(name)<edge_begin><edge_end>Day(name)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Day(name)
Person(name, organisation)<edge_begin><edge_end>Talk(name, abstract, duration, time)
Conference(name)<edge_begin><edge_end>Location(name)
Function(return Type)<edge_begin><edge_end>Data Parameter(type)
Query()<edge_begin><edge_end>Database Element()
Entity()<edge_begin><edge_end>Database Element()
Named Element(name)<edge_begin><edge_end>Commented Element(comment)
Operation()<edge_begin><edge_end>Parameter()
Primary Property()<edge_begin><edge_end>Attribute(type, max Length)
Entity Parameter()<edge_begin><edge_end>Parameter()
Database Element()<edge_begin><edge_end>Named Element(name)
Query Service()<edge_begin><edge_end>Query()
Form()<edge_begin><edge_end>Client Element()
Database()<edge_begin><edge_end>Named Element(name)
Entity Form(type)<edge_begin><edge_end>Entity()
Operation Service()<edge_begin><edge_end>Service()
Property(is Nullable, default Value)<edge_begin><edge_end>Attribute(type, max Length)
Relationship(type, is Nullable, is Containment)<edge_begin><edge_end>Named Element(name)
Computed Entity()<edge_begin><edge_end>Entity()
Database()<edge_begin><edge_end>Database Element()
Entity Parameter()<edge_begin><edge_end>Entity()
Server()<edge_begin><edge_end>Named Element(name)
Entity Containment Form()<edge_begin><edge_end>Form()
Abstract Entity()<edge_begin><edge_end>Entity()
Entity Form(type)<edge_begin><edge_end>Form()
Client()<edge_begin><edge_end>Named Element(name)
Application()<edge_begin><edge_end>Database()
Server()<edge_begin><edge_end>Server Element()
Service()<edge_begin><edge_end>Server Element()
Entity()<edge_begin><edge_end>Property(is Nullable, default Value)
Custom Form()<edge_begin><edge_end>Form()
Function(return Type)<edge_begin><edge_end>Database Element()
Relationship(type, is Nullable, is Containment)<edge_begin><edge_end>Entity()
Server Element()<edge_begin><edge_end>Named Element(name)
Entity()<edge_begin><edge_end>Entity()
Application()<edge_begin><edge_end>Named Element(name)
Entity Service()<edge_begin><edge_end>Service()
Event()<edge_begin><edge_end>Database Element()
Data Parameter(type)<edge_begin><edge_end>Parameter()
Attribute(type, max Length)<edge_begin><edge_end>Named Element(name)
Application()<edge_begin><edge_end>Server()
Entity()<edge_begin><edge_end>Relationship(type, is Nullable, is Containment)
Persistent Entity()<edge_begin><edge_end>Entity()
Query Service()<edge_begin><edge_end>Service()
Application()<edge_begin><edge_end>Client()
Field()<edge_begin><edge_end>Shape Elt()
Masters Collection()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Icon(value)<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Pages Collection()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Geom()<edge_begin><edge_end>Line To()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Boolean()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shape Elt()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Fonts Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Connects Collection()<edge_begin><edge_end>Page Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
Tab()<edge_begin><edge_end>Tabs Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Colors Table()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Custom Properties Collection()
Arc To()<edge_begin><edge_end>Geom()
Document Sheet()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Custom Properties Collection()<edge_begin><edge_end>Custom Property(name, data Type)
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Boolean()
Tp()<edge_begin><edge_end>Text Elt()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
Icon(value)<edge_begin><edge_end>Master Elt()
X Form()<edge_begin><edge_end>Shape Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Face Names Table()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Email Routing Data(data, size)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Geom()<edge_begin><edge_end>Polyline To()
Page Elt()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Snap Angles Collection()
Style Sheet()<edge_begin><edge_end>Style Sheets Collection()
Color Entry(rgb)<edge_begin><edge_end>I Xrequired Elt(i X)
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Identified Elt(ID)
Colors Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Style Sheets Collection()<edge_begin><edge_end>Style Sheet()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)
Color Entry(rgb)<edge_begin><edge_end>Colors Table()
Page Sheet()<edge_begin><edge_end>Page Elt()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Integer()
XYABCD Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Geom()<edge_begin><edge_end>Ellipse()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Solution XML()
Document Sheet()<edge_begin><edge_end>Page Sheet()
Del Elt(del)<edge_begin><edge_end>Boolean()
Polyline To()<edge_begin><edge_end>Geom()
Char()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
XY Elt()<edge_begin><edge_end>IX Elt(i X)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Colors Table()<edge_begin><edge_end>Color Entry(rgb)
Pp()<edge_begin><edge_end>Text Elt()
Geom()<edge_begin><edge_end>Spline Start()
Field()<edge_begin><edge_end>Del Elt(del)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Custom Property(name, data Type)<edge_begin><edge_end>String()
Infinite Line()<edge_begin><edge_end>XYAB Elt()
Tabs Collection()<edge_begin><edge_end>IX Elt(i X)
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>String()
Face Names Table()<edge_begin><edge_end>Face Name(name, unicode Ranges, char Set, panos, flags)
Page Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Page Sheet()<edge_begin><edge_end>Master Elt()
Tabs Collection()<edge_begin><edge_end>Tab()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shapes Collection()
Connects Collection()<edge_begin><edge_end>Master Elt()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Master Elt()
Identified Elt(ID)<edge_begin><edge_end>Integer()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Boolean()
Char()<edge_begin><edge_end>Del Elt(del)
Geom()<edge_begin><edge_end>Arc To()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
Geom()<edge_begin><edge_end>Move To()
Fonts Table()<edge_begin><edge_end>Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Geom()<edge_begin><edge_end>Del Elt(del)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Header Footer()
Para()<edge_begin><edge_end>Shape Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Integer()
Snap Angle(angle Value)<edge_begin><edge_end>Double()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Email Routing Data(data, size)
Para()<edge_begin><edge_end>IX Elt(i X)
Cp()<edge_begin><edge_end>I Xrequired Elt(i X)
X Form()<edge_begin><edge_end>Del Elt(del)
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Sheet()
Spline Knot()<edge_begin><edge_end>XYA Elt()
IX Elt(i X)<edge_begin><edge_end>Integer()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
Geom()<edge_begin><edge_end>Infinite Line()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Event List()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>String()
Pages Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Text Elt()<edge_begin><edge_end>Text()
Custom Property(name, data Type)<edge_begin><edge_end>Custom Properties Collection()
Snap Angles Collection()<edge_begin><edge_end>Snap Angle(angle Value)
Header Footer()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Print Setup()
Document Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Identified Elt(ID)
Masters Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Tab()<edge_begin><edge_end>IX Elt(i X)
String Elt(value)<edge_begin><edge_end>Text Elt()
XY Elt()<edge_begin><edge_end>Del Elt(del)
Color Entry(rgb)<edge_begin><edge_end>String()
Shapes Collection()<edge_begin><edge_end>Page Elt()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Boolean()
Spline Knot()<edge_begin><edge_end>Geom()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Char()<edge_begin><edge_end>IX Elt(i X)
Geom()<edge_begin><edge_end>NURBS To()
XYABCD Elt()<edge_begin><edge_end>XYAB Elt()
Geom()<edge_begin><edge_end>Elliptical Arc To()
Elliptical Arc To()<edge_begin><edge_end>Geom()
Email Routing Data(data, size)<edge_begin><edge_end>Integer()
Snap Angles Collection()<edge_begin><edge_end>Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)
XYA Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Page Elt()
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Windows Info()
Elliptical Arc To()<edge_begin><edge_end>XYABCD Elt()
Style Sheets Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
NURBS To()<edge_begin><edge_end>Geom()
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>VB Project Data(data)
Named Elt(name, name U)<edge_begin><edge_end>String()
Print Setup()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Cp()<edge_begin><edge_end>Text Elt()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Integer()
Char()<edge_begin><edge_end>Shape Elt()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
VB Project Data(data)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
I Xrequired Elt(i X)<edge_begin><edge_end>Integer()
Email Routing Data(data, size)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Masters Collection()
XYAB Elt()<edge_begin><edge_end>XYA Elt()
Style Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Icon(value)<edge_begin><edge_end>String()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Style Sheet()
Polyline To()<edge_begin><edge_end>XYA Elt()
NURBS To()<edge_begin><edge_end>XYABCDE Elt()
Ellipse()<edge_begin><edge_end>Geom()
Cell Type(unit, formula, err, value)<edge_begin><edge_end>String()
Line To()<edge_begin><edge_end>XY Elt()
Windows Info()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Shapes Collection()<edge_begin><edge_end>Master Elt()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Integer()
Line To()<edge_begin><edge_end>Geom()
X Form()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Fonts Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Double()
Para()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>String()
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Text()<edge_begin><edge_end>Text Elt()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Geom()<edge_begin><edge_end>Shape Elt()
Snap Angle(angle Value)<edge_begin><edge_end>Snap Angles Collection()
VB Project Data(data)<edge_begin><edge_end>String()
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Face Names Table()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Pages Collection()
Event List()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Tabs Collection()<edge_begin><edge_end>Shape Elt()
Arc To()<edge_begin><edge_end>XYA Elt()
Abstract Transition()<edge_begin><edge_end>State Change()
Final State()<edge_begin><edge_end>Abstract State()
Attribute Condition()<edge_begin><edge_end>Abstract Condition(is Not Condition)
Conditional Transition()<edge_begin><edge_end>Abstract Transition()
Initial State()<edge_begin><edge_end>Abstract State()
Abstract Condition(is Not Condition)<edge_begin><edge_end>State Value(type, value)
State Change()<edge_begin><edge_end>State Attribute(type, value)
Abstract State()<edge_begin><edge_end>Abstract Transition()
Field Condition(field Name)<edge_begin><edge_end>Abstract Condition(is Not Condition)
State Attribute(type, value)<edge_begin><edge_end>State Attribute(type, value)
Abstract Transition()<edge_begin><edge_end>Named(name)
Attribute Condition()<edge_begin><edge_end>State Attribute(type, value)
State(state Color)<edge_begin><edge_end>Abstract State()
Statemachine(associated Tree, associated Attribute)<edge_begin><edge_end>Abstract State()
Abstract Transition()<edge_begin><edge_end>Abstract State()
Transition()<edge_begin><edge_end>Abstract Transition()
Statemachine(associated Tree, associated Attribute)<edge_begin><edge_end>Named(name)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Output SAP Function Parameter Table()
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Queries Connection()
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)
Ebcdic Connection(Mid File, Data File)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>List()
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)<edge_begin><edge_end>SAP Function Parameter Table()
Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)<edge_begin><edge_end>Map()
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>List()
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>SAP Test Input Parameter Table()
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Input SAP Function Parameter Table()
HL7Connection(Start Char, End Char)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Episode()<edge_begin><edge_end>Event()
Parameter()<edge_begin><edge_end>Stimilus()
Service()<edge_begin><edge_end>Goal()
Context()<edge_begin><edge_end>Pre Condition()
Goal()<edge_begin><edge_end>Actor()
Responce()<edge_begin><edge_end>Event()
Actor()<edge_begin><edge_end>Use Case()
Use Case()<edge_begin><edge_end>Service()
Use Case()<edge_begin><edge_end>Context()
Parameter()<edge_begin><edge_end>Responce()
Stimilus()<edge_begin><edge_end>Parameter()
Use Case()<edge_begin><edge_end>User()
Actor()<edge_begin><edge_end>User()
Pre Condition()<edge_begin><edge_end>Context()
Action()<edge_begin><edge_end>Event()
Stimilus()<edge_begin><edge_end>Event()
Actor()<edge_begin><edge_end>Goal()
User()<edge_begin><edge_end>Actor()
Use Case()<edge_begin><edge_end>Actor()
Post Condition()<edge_begin><edge_end>Context()
User()<edge_begin><edge_end>Use Case()
Context()<edge_begin><edge_end>Use Case()
Service()<edge_begin><edge_end>Task()
Goal()<edge_begin><edge_end>Service()
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Input SAP Function Parameter Table()
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>WSDL Parameter(Element, source, Column, Expression, Parameter Info, Parameter Info Parent)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
BRMS Connection(xml Field, url Name, tac Webapp Name, class Name, module Used, package)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Test Input Parameter Table()
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>HL7File Node(File Path, Order, Attribute, Default Value, Related Column, Repeatable)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Td Table()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Header Footer Connection(is Header, imports, main Code, libraries)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Inner Join Map(key, value)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Schema(xsd File Path)
EDIFACT Column(EDI Column Name, EDI Xpath)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
EDIFACT Connection(Xml Name, File Name, Xml Path)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Salesforce Module Unit(module Name)
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Connection(version, Context Mode, Context Id, context Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>List()
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>List()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Subscriber Table(system)<edge_begin><edge_end>Td Table()
Td Xml Content()<edge_begin><edge_end>Td Xml Element Type(java Type)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
FTP Connection(Host, Port, Username, Password, Mode, Ecoding, SFTP, FTPS, Method, Keystore File, Keystore Password, Usesocks, Proxyhost, Proxyport, Proxyuser, Proxypassword, Custom Encode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Content()
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)<edge_begin><edge_end>Map()
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>Td Table()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Event Definition(direction, type)<edge_begin><edge_end>Event Derivation()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Transition Statement()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>Def Root()
Root()<edge_begin><edge_end>Def Root()
Primitive Value Expression(value)<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Statechart Definition()
Time Event Spec(value, unit)<edge_begin><edge_end>Event Spec()
Transition Reaction()<edge_begin><edge_end>Transition Statement()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
State Root()<edge_begin><edge_end>State Declaration()
Event Raising()<edge_begin><edge_end>Expression()
Expression()<edge_begin><edge_end>Statement()
Assignment(operator)<edge_begin><edge_end>Statement()
Event Derivation()<edge_begin><edge_end>Expression()
Reaction Priority(priority)<edge_begin><edge_end>Reaction Property()
Event Raising()<edge_begin><edge_end>Statement()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Logical Or Expression()<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Logical Not Expression()<edge_begin><edge_end>Expression()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Conditional Expression()<edge_begin><edge_end>Expression()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Operation Call()<edge_begin><edge_end>Operation(param Types, type)
Statechart Root()<edge_begin><edge_end>Def Root()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Transition Root()<edge_begin><edge_end>Def Root()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Index Ref(is Primkey, clustered)<edge_begin><edge_end>Index(kuko, name, unique)
Struct Share()<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Pdb(name, lock Schema, table Partitioning)
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Struct Share()
Index Ref(is Primkey, clustered)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Ltype()
Db Model(name, mtype, kuda Type, kobe Type, version, do All)<edge_begin><edge_end>Import(imported Namespace)
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Struct Override(altname)
Duplicate()<edge_begin><edge_end>Class Or Duplicate(name, abbrev, reps)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Index(kuko, name, unique)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Subject(name)
Db Model(name, mtype, kuda Type, kobe Type, version, do All)<edge_begin><edge_end>Duplicate()
Db Model(name, mtype, kuda Type, kobe Type, version, do All)<edge_begin><edge_end>Subject(name)
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Class Or Duplicate(name, abbrev, reps)
Duplicate()<edge_begin><edge_end>Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)
Primkey()<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Arc PT(inscription)<edge_begin><edge_end>Place(name, token)
Arc TP(inscription)<edge_begin><edge_end>Transition(name)
Place(name, token)<edge_begin><edge_end>Arc TP(inscription)
Petri Net(name)<edge_begin><edge_end>Transition(name)
Place(name, token)<edge_begin><edge_end>Arc PT(inscription)
Transition(name)<edge_begin><edge_end>Arc TP(inscription)
Transition(name)<edge_begin><edge_end>Arc PT(inscription)
Petri Net(name)<edge_begin><edge_end>Arc TP(inscription)
Arc PT(inscription)<edge_begin><edge_end>Transition(name)
Petri Net(name)<edge_begin><edge_end>Arc PT(inscription)
Transition(kind)<edge_begin><edge_end>Vertex()
Trigger()<edge_begin><edge_end>Named Element(name, id)
Vertex()<edge_begin><edge_end>Named Element(name, id)
Trigger()<edge_begin><edge_end>Event(body)
State Machine()<edge_begin><edge_end>Region()
State(is Simple, is Composite)<edge_begin><edge_end>Named Element(name, id)
State Machine()<edge_begin><edge_end>Named Element(name, id)
Region()<edge_begin><edge_end>Transition(kind)
State(is Simple, is Composite)<edge_begin><edge_end>Vertex()
Transition(kind)<edge_begin><edge_end>Behaviour(body, language)
Constraint()<edge_begin><edge_end>Opaque Expression(body)
Vertex()<edge_begin><edge_end>Transition(kind)
State(is Simple, is Composite)<edge_begin><edge_end>Region()
Region()<edge_begin><edge_end>Named Element(name, id)
Transition(kind)<edge_begin><edge_end>Constraint()
Region()<edge_begin><edge_end>State(is Simple, is Composite)
Transition(kind)<edge_begin><edge_end>Named Element(name, id)
State(is Simple, is Composite)<edge_begin><edge_end>Trigger()
Final State()<edge_begin><edge_end>State(is Simple, is Composite)
Region()<edge_begin><edge_end>Vertex()
Create Cell Tool()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Cell Updater(can Edit)<edge_begin><edge_end>Label Edit Tool()
D Cell(label)<edge_begin><edge_end>D Table Element()
Create Tool()<edge_begin><edge_end>Table Tool()
Delete Tool()<edge_begin><edge_end>Table Tool()
Background Conditional Style(predicate Expression)<edge_begin><edge_end>Background Style Description()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
D Cell(label)<edge_begin><edge_end>D Cell Style()
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Table Mapping(semantic Elements)
D Cell Style()<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style, foreground Color, background Color)
Line Container()<edge_begin><edge_end>D Line(label, visible, collapsed)
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Style Updater()
Create Cell Tool()<edge_begin><edge_end>Table Tool()
D Feature Column(feature Name)<edge_begin><edge_end>D Column(label, visible, width)
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Create Line Tool()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Create Column Tool()
D Column(label, visible, width)<edge_begin><edge_end>D Table(header Column Width)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Delete Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
D Cell(label)<edge_begin><edge_end>Cell Updater(can Edit)
D Column(label, visible, width)<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style, foreground Color, background Color)
Cross Table Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Cell Updater(can Edit)
Edition Table Description()<edge_begin><edge_end>Feature Column Mapping(feature Name, label Expression, feature Parent Expression)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Table Mapping(semantic Elements)
Create Line Tool()<edge_begin><edge_end>Create Tool()
D Target Column()<edge_begin><edge_end>D Column(label, visible, width)
D Table(header Column Width)<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
D Column(label, visible, width)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
D Cell(label)<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Foreground Conditional Style(predicate Expression)<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
Table Tool()<edge_begin><edge_end>Table Variable(documentation)
D Table(header Column Width)<edge_begin><edge_end>D Column(label, visible, width)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Style Updater()
Delete Line Tool()<edge_begin><edge_end>Delete Tool()
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Cross Table Description()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Delete Column Tool()
Create Column Tool()<edge_begin><edge_end>Create Tool()
Create Line Tool()<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
D Column(label, visible, width)<edge_begin><edge_end>D Table Element()
D Cell(label)<edge_begin><edge_end>D Line(label, visible, collapsed)
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element()
Table Navigation Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Delete Line Tool()
Style Updater()<edge_begin><edge_end>Foreground Conditional Style(predicate Expression)
Style Updater()<edge_begin><edge_end>Background Style Description()
Create Cross Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Edition Table Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
D Column(label, visible, width)<edge_begin><edge_end>D Cell(label)
Style Updater()<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
D Cell Style()<edge_begin><edge_end>Table Mapping(semantic Elements)
Style Updater()<edge_begin><edge_end>Background Conditional Style(predicate Expression)
D Line(label, visible, collapsed)<edge_begin><edge_end>Line Container()
Cross Table Description()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Create Cross Column Tool()<edge_begin><edge_end>Create Tool()
D Line(label, visible, collapsed)<edge_begin><edge_end>D Cell(label)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Create Cell Tool()
Cross Table Description()<edge_begin><edge_end>Create Cross Column Tool()
Extend()<edge_begin><edge_end>Use Case()
Transformation Actor()<edge_begin><edge_end>Actor()
Use Case()<edge_begin><edge_end>Include()
Include()<edge_begin><edge_end>Use Case()
Packable Element()<edge_begin><edge_end>Named Element(name)
Has Inheritance()<edge_begin><edge_end>Packable Element()
Generalization()<edge_begin><edge_end>Packable Element()
Actor()<edge_begin><edge_end>Has Inheritance()
Use Case()<edge_begin><edge_end>Extend()
Include()<edge_begin><edge_end>Packable Element()
Extend()<edge_begin><edge_end>Packable Element()
Package()<edge_begin><edge_end>Packable Element()
Requirement Use Case()<edge_begin><edge_end>Use Case()
Constraint Comment()<edge_begin><edge_end>Comment()
Has Inheritance()<edge_begin><edge_end>Generalization()
Package()<edge_begin><edge_end>Named Element(name)
Generalization()<edge_begin><edge_end>Has Inheritance()
Use Case()<edge_begin><edge_end>Has Inheritance()
Insert Stmt(table Name)<edge_begin><edge_end>Statement()
Query Stmt()<edge_begin><edge_end>Table(alias)
Integer Value Exp(a Value)<edge_begin><edge_end>Integer()
Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
And Exp()<edge_begin><edge_end>Binary Exp(op Name)
Query Stmt All Col()<edge_begin><edge_end>Query Stmt()
Integer Value Exp(a Value)<edge_begin><edge_end>Value Exp()
List Exp()<edge_begin><edge_end>Predicate()
In Exp(column Name)<edge_begin><edge_end>String()
Query Stmt Col()<edge_begin><edge_end>Query Stmt()
Like Exp(column Name)<edge_begin><edge_end>Expression()
Value Exp()<edge_begin><edge_end>Predicate()
Where Clause()<edge_begin><edge_end>Expression()
Query Predicate()<edge_begin><edge_end>Query Stmt()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
Like Exp(column Name)<edge_begin><edge_end>String Value Exp(a Value)
SQL Root()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Function Exp(name)<edge_begin><edge_end>String()
Not Exp(op Name)<edge_begin><edge_end>Expression()
Operation Exp(opt Name)<edge_begin><edge_end>String()
Function Exp(name)<edge_begin><edge_end>Expression()
Data Type()<edge_begin><edge_end>Named Element(name)
SQL Root()<edge_begin><edge_end>Statement()
View Statement(name)<edge_begin><edge_end>String()
Column Exp(alias)<edge_begin><edge_end>Predicate()
Like Exp(column Name)<edge_begin><edge_end>String()
Insert Stmt(table Name)<edge_begin><edge_end>String()
Column Exp(alias)<edge_begin><edge_end>Data Type()
Query Stmt Col()<edge_begin><edge_end>Expression()
Where Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Named Element(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Query Stmt()<edge_begin><edge_end>Statement()
Column Exp(alias)<edge_begin><edge_end>Named Element(name)
Column Exp(alias)<edge_begin><edge_end>String()
Query Stmt()<edge_begin><edge_end>Where Clause()
Query Predicate()<edge_begin><edge_end>Expression()
Binary Exp(op Name)<edge_begin><edge_end>Expression()
Named Element(name)<edge_begin><edge_end>String()
In Exp(column Name)<edge_begin><edge_end>Expression()
String Value Exp(a Value)<edge_begin><edge_end>Value Exp()
Value Exp()<edge_begin><edge_end>Data Type()
View Statement(name)<edge_begin><edge_end>Column Exp(alias)
Statement()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Table(alias)<edge_begin><edge_end>String()
Or Exp()<edge_begin><edge_end>Binary Exp(op Name)
Not Exp(op Name)<edge_begin><edge_end>String()
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(word)
Transition(guard Label, guard Expression)<edge_begin><edge_end>Action(action Label, action Statement)
Publication Status(label)<edge_begin><edge_end>State(id, kind, name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
State(id, kind, name)<edge_begin><edge_end>State Machine Object(label)
Paper()<edge_begin><edge_end>State(id, kind, name)
Publication System()<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Publication System()<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Position(description)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Review(date)<edge_begin><edge_end>Review Note(content)
State(id, kind, name)<edge_begin><edge_end>Transition(guard Label, guard Expression)
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Paper()<edge_begin><edge_end>Paper()
Transition(guard Label, guard Expression)<edge_begin><edge_end>State Machine Object(label)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Action(action Label, action Statement)<edge_begin><edge_end>Action(action Label, action Statement)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Review Note(content)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Named(name)
Keyword(word)<edge_begin><edge_end>Named(name)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Collaboration(ratio)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Publication Structure()<edge_begin><edge_end>Paper()
Paper()<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Structure()
Position(description)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Paper()<edge_begin><edge_end>Paper Keyword(weight)
Knowledge Manager()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Progress(percent)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Publication Status(label)<edge_begin><edge_end>State Machine Variable()
Use Case()<edge_begin><edge_end>Urml Model Element()
Variation Point(multiplicity)<edge_begin><edge_end>Variation Point Instance()
Application Domain Use Case()<edge_begin><edge_end>Goal(soft, type)
Non Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Goal Reference(weight)<edge_begin><edge_end>Goal(soft, type)
Service()<edge_begin><edge_end>Requirement(terminal)
Product()<edge_begin><edge_end>Urml Model Element()
Variation Point Instance()<edge_begin><edge_end>Abstract Feature()
Abstract Feature()<edge_begin><edge_end>Urml Model Element()
Abstract Feature()<edge_begin><edge_end>Non Functional Requirement()
Actor()<edge_begin><edge_end>Use Case()
Stakeholder()<edge_begin><edge_end>Goal(soft, type)
Abstract Feature()<edge_begin><edge_end>Functional Requirement()
Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Use Case()<edge_begin><edge_end>Actor()
Variation Point Instance()<edge_begin><edge_end>Urml Model Element()
Application Domain Use Case()<edge_begin><edge_end>Use Case()
Asset()<edge_begin><edge_end>Danger()
Actor()<edge_begin><edge_end>Asset()
Goal(soft, type)<edge_begin><edge_end>Urml Model Element()
Goal Reference(weight)<edge_begin><edge_end>Urml Model Element()
Requirement(terminal)<edge_begin><edge_end>Service()
Variation Point Instance()<edge_begin><edge_end>Variation Point(multiplicity)
Feature()<edge_begin><edge_end>Product()
Stakeholder()<edge_begin><edge_end>Urml Model Element()
Non Functional Requirement()<edge_begin><edge_end>Abstract Feature()
Abstract Feature()<edge_begin><edge_end>Abstract Feature()
Solution Domain Use Case()<edge_begin><edge_end>Use Case()
Abstract Feature()<edge_begin><edge_end>Variation Point Instance()
Functional Requirement()<edge_begin><edge_end>Abstract Feature()
Danger()<edge_begin><edge_end>Urml Model Element()
Product()<edge_begin><edge_end>Variation Point Instance()
Danger()<edge_begin><edge_end>Mitigation()
Goal(soft, type)<edge_begin><edge_end>Abstract Feature()
Mitigation()<edge_begin><edge_end>Urml Model Element()
Goal(soft, type)<edge_begin><edge_end>Application Domain Use Case()
Goal(soft, type)<edge_begin><edge_end>Goal(soft, type)
Procedural Mitigation(mitigation Procedure)<edge_begin><edge_end>Mitigation()
Variation Point(multiplicity)<edge_begin><edge_end>Abstract Feature()
Mitigation()<edge_begin><edge_end>Danger()
Feature()<edge_begin><edge_end>Abstract Feature()
Goal(soft, type)<edge_begin><edge_end>Goal Reference(weight)
Asset()<edge_begin><edge_end>Urml Model Element()
Abstract Feature()<edge_begin><edge_end>Goal(soft, type)
Service()<edge_begin><edge_end>Asset()
Internal Execution Model(context)<edge_begin><edge_end>State Machine(priority, context)
Event Token()<edge_begin><edge_end>State(label)
Trap State()<edge_begin><edge_end>State(label)
Time Constraint(type)<edge_begin><edge_end>Time Constraint Specification(id, expected Length, start Timestamp, stop Timestamp)
Transition()<edge_begin><edge_end>State(label)
Init State()<edge_begin><edge_end>State(label)
State(label)<edge_begin><edge_end>Time Constraint(type)
State(label)<edge_begin><edge_end>Event Token()
State Machine(priority, context)<edge_begin><edge_end>State(label)
State(label)<edge_begin><edge_end>Transition()
Final State()<edge_begin><edge_end>State(label)
Expression(operator, name)<edge_begin><edge_end>Expression Element()
Transition()<edge_begin><edge_end>Expression(operator, name)
Data()<edge_begin><edge_end>Expression Element()
Variable Reference( name)<edge_begin><edge_end>Expression Element()
Assignment( name)<edge_begin><edge_end>Expression Element()
State Machine()<edge_begin><edge_end>Variable(name)
Operation()<edge_begin><edge_end>Assignment( name)
State Machine()<edge_begin><edge_end>Transition()
Initial State()<edge_begin><edge_end>State(name, is Active)
Boolean Data(value)<edge_begin><edge_end>Data()
Integer Data(value)<edge_begin><edge_end>Data()
Composite State()<edge_begin><edge_end>State(name, is Active)
State Machine()<edge_begin><edge_end>Composite State()
Variable Reference( name)<edge_begin><edge_end>Variable(name)
Integer Variable()<edge_begin><edge_end>Variable(name)
State(name, is Active)<edge_begin><edge_end>Operation()
State Machine()<edge_begin><edge_end>Event(name)
Variable(name)<edge_begin><edge_end>Data()
Composite State()<edge_begin><edge_end>Initial State()
Boolean Variable()<edge_begin><edge_end>Variable(name)
Document Root(mixed)<edge_begin><edge_end>Sql Properties()
Sql Query(query String)<edge_begin><edge_end>Sql(id, hql Query)
Sql(id, hql Query)<edge_begin><edge_end>Sql Parameter(index, name, type)
Sql Group(id, description)<edge_begin><edge_end>Non Empty No Spaces()
Sql(id, hql Query)<edge_begin><edge_end>Non Empty No Spaces()
Sql Properties()<edge_begin><edge_end>Sql Group(id, description)
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Property(key, value)
Database Properties List Type()<edge_begin><edge_end>Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Server Address()
Database Alias(alias, id)<edge_begin><edge_end>Non Empty No Spaces()
Sql Group(id, description)<edge_begin><edge_end>Specific DBMS Properties(d BMS)
Specific DBMS Properties(d BMS)<edge_begin><edge_end>Sql Query(query String)
Sql Group(id, description)<edge_begin><edge_end>Sql Query(query String)
Sql File(file Path)<edge_begin><edge_end>Sql(id, hql Query)
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Java Name()
Property(key, value)<edge_begin><edge_end>Non Empty No Spaces()
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Sql Properties()
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Non Empty No Spaces()
Boolean Array Expression(values)<edge_begin><edge_end>Array Expression()
Double Array Expression(values)<edge_begin><edge_end>Array Expression()
Or Where Entry()<edge_begin><edge_end>Where Entry()
Single Expression Where Entry(operator)<edge_begin><edge_end>Expression()
Date Expression(value)<edge_begin><edge_end>Expression()
Double Expression(value)<edge_begin><edge_end>Expression()
Model(attrs)<edge_begin><edge_end>Where Entry()
Replacable Value(value)<edge_begin><edge_end>Expression()
And Where Entry()<edge_begin><edge_end>Where Entry()
Expression Where Entry(name)<edge_begin><edge_end>Where Entry()
Long Expression(value)<edge_begin><edge_end>Expression()
Null Expression(value)<edge_begin><edge_end>Expression()
Null Array Expression(values)<edge_begin><edge_end>Array Expression()
String Array Expression(values)<edge_begin><edge_end>Array Expression()
Multi Expression Where Entry(operator)<edge_begin><edge_end>Expression Where Entry(name)
Single Expression Where Entry(operator)<edge_begin><edge_end>Expression Where Entry(name)
Long Array Expression(values)<edge_begin><edge_end>Array Expression()
String Expression(value)<edge_begin><edge_end>Expression()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Meta-Review()<edge_begin><edge_end>Review()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Associated Chair()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Review()<edge_begin><edge_end>Document()
Person(email)<edge_begin><edge_end>Document()
External Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>User()
Conference Chair()<edge_begin><edge_end>Chairman()
Associated Chair()<edge_begin><edge_end>Chairman()
Reviewer()<edge_begin><edge_end>Review()
Co-author()<edge_begin><edge_end>Author()
Conference Member()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Administrator()<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Administrator()
Administrator()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Author()<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
User()<edge_begin><edge_end>Person(email)
Person(email)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Conference Chair()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Chairman()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email)
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Author Not Reviewer()<edge_begin><edge_end>Author()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Paper(paper ID, title)<edge_begin><edge_end>String()
Review()<edge_begin><edge_end>Reviewer()
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Chairman()<edge_begin><edge_end>Conference Member()
Acceptance()<edge_begin><edge_end>Decision()
Chairman()<edge_begin><edge_end>Person(email)
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Author()<edge_begin><edge_end>Paper(paper ID, title)
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>User()
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Reviewer()<edge_begin><edge_end>External Reviewer()
Variable(type, value)<edge_begin><edge_end>Thing(id)
Thing(id)<edge_begin><edge_end>Named Element(name)
State(label, type, activity)<edge_begin><edge_end>Named Element(name)
State(label, type, activity)<edge_begin><edge_end>State(label, type, activity)
State(label, type, activity)<edge_begin><edge_end>Transition(expression)
State(label, type, activity)<edge_begin><edge_end>Variable(type, value)
Transition(expression)<edge_begin><edge_end>Named Element(name)
Related To(since)<edge_begin><edge_end>Named Element(name)
Thing(id)<edge_begin><edge_end>Related To(since)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Header Type()
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Style Name Type()
Hide Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Event Listener Type(action, actuate, direction, effect, event Name, href, show, speed, start Scale, type, verb)
Notes Type(shape, page Layout Name, style Name, use Date Time Name, use Footer Name, use Header Name)<edge_begin><edge_end>Style Name Type()
Show Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Dim Type(color, shape Id)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Footer Type()
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Settings Type(animations, endless, force Manual, full Screen, mouse As Pen, mouse Visible, pause, show1, show End Of Presentation Slide, show Logo, start Page, start With Navigator, stay On Top, transition On Click)
Animations Type1(group, presentation Animation Elements Group)<edge_begin><edge_end>Animation Group Type(presentation Animation Elements Group)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Dim Type(color, shape Id)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Animation Group Type(presentation Animation Elements Group)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Notes Type(shape, page Layout Name, style Name, use Date Time Name, use Footer Name, use Header Name)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Hide Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Footer Decl Type(mixed, name)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Date Time Type()
Event Listener Type(action, actuate, direction, effect, event Name, href, show, speed, start Scale, type, verb)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Date Time Decl Type(mixed, data Style Name, name, source)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Hide Shape Type(delay, direction, effect, path Id, shape Id, speed, start Scale)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Placeholder Type(height, object, width, x, y)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Show Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Animations Type1(group, presentation Animation Elements Group)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Header Decl Type(mixed, name)
Show Shape Type(delay, direction, effect, path Id, shape Id, speed, start Scale)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
conference()<edge_begin><edge_end>Thing()
Conference Member()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Organizer()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Reviewer()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>User()
start date of conference()<edge_begin><edge_end>date of conference()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Conference document()
Scholar()<edge_begin><edge_end>University()
date()<edge_begin><edge_end>Thing()
author()<edge_begin><edge_end>article()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Presentation()<edge_begin><edge_end>Conference contribution()
abstract()<edge_begin><edge_end>article()
Email Template()<edge_begin><edge_end>Event Setup()
Event(starts on, ends on)<edge_begin><edge_end>Thing()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
Active conference participant()<edge_begin><edge_end>Conference contributor()
Template()<edge_begin><edge_end>Document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Passive conference participant()<edge_begin><edge_end>Conference participant()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Conference document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Acceptance()<edge_begin><edge_end>Decision()
Workshop()<edge_begin><edge_end>Conference part()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Administrator()<edge_begin><edge_end>Role()
Reviewer Role()<edge_begin><edge_end>Role()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
summary of reviews()<edge_begin><edge_end>article()
Conference volume(has a location)<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Reception()<edge_begin><edge_end>Social event()
Event(starts on, ends on)<edge_begin><edge_end>Administrator()
Conference part()<edge_begin><edge_end>Track-workshop chair()
program()<edge_begin><edge_end>chair()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Administrative event()<edge_begin><edge_end>Administrative event()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Paper(paper ID, title)<edge_begin><edge_end>String()
Account()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Administrator()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Review preference(has a degree)<edge_begin><edge_end>Thing()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Event URL()<edge_begin><edge_end>Event(starts on, ends on)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Organization()
Camera Ready event()<edge_begin><edge_end>Administrative event()
camera-ready submission date()<edge_begin><edge_end>date()
Reviewer()<edge_begin><edge_end>User()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Chair URL()<edge_begin><edge_end>URL()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Committee member()
Working event()<edge_begin><edge_end>Event(starts on, ends on)
review()<edge_begin><edge_end>activity()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Member PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
conference()<edge_begin><edge_end>event(has startdate, has enddate)
Assistance()<edge_begin><edge_end>Help Request()
Activity()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
review()<edge_begin><edge_end>article()
Approval Email()<edge_begin><edge_end>Email()
Conference document()<edge_begin><edge_end>date()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Organizing committee()<edge_begin><edge_end>Committee()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Committee member()<edge_begin><edge_end>Committee()
Review()<edge_begin><edge_end>Reviewed contribution()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Workshop()<edge_begin><edge_end>Working event()
Submission event()<edge_begin><edge_end>Administrative event()
Invited talk()<edge_begin><edge_end>Presentation()
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Administrator()<edge_begin><edge_end>Event(starts on, ends on)
Review preference(has a degree)<edge_begin><edge_end>Integer()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Working event()<edge_begin><edge_end>Topic()
Conference volume(has a location)<edge_begin><edge_end>String()
article()<edge_begin><edge_end>classification()
Working event()<edge_begin><edge_end>Administrative event()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Regular author()<edge_begin><edge_end>Conference contributor()
Call for participation()<edge_begin><edge_end>Conference document()
University()<edge_begin><edge_end>Organization()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>activity()
Rejected Paper()<edge_begin><edge_end>paper(full paper size)
Administrator()<edge_begin><edge_end>Reviewer()
Submission()<edge_begin><edge_end>Document()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Email()<edge_begin><edge_end>Document()
Contribution co-author()<edge_begin><edge_end>Regular author()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
Administrator()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
article()<edge_begin><edge_end>reviewer()
Chair PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Social event()<edge_begin><edge_end>Event(starts on, ends on)
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Notification Email()<edge_begin><edge_end>Email()
Presentation()<edge_begin><edge_end>Active conference participant()
author()<edge_begin><edge_end>person()
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Event(starts on, ends on)<edge_begin><edge_end>Event Tracks()
reviewer()<edge_begin><edge_end>person()
Committee()<edge_begin><edge_end>User()
Track()<edge_begin><edge_end>Conference part()
Paper(paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
abstract submission date()<edge_begin><edge_end>date()
participant()<edge_begin><edge_end>conference()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
bidding of reviewer()<edge_begin><edge_end>activity()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Program committee()<edge_begin><edge_end>Committee()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewing event()<edge_begin><edge_end>Administrative event()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
Workshop()<edge_begin><edge_end>Event(starts on, ends on)
group email()<edge_begin><edge_end>article()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Event Tracks()<edge_begin><edge_end>Event Setup()
Event URL()<edge_begin><edge_end>URL()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Conference participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Meta-Review()<edge_begin><edge_end>Review()
review()<edge_begin><edge_end>reviewer()
Document()<edge_begin><edge_end>User()
Senior Program Committee member()<edge_begin><edge_end>activity()
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Review()<edge_begin><edge_end>Document()
submission process()<edge_begin><edge_end>activity()
Member PC()<edge_begin><edge_end>Topic()
Event Approval()<edge_begin><edge_end>Activity()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Document()
paper assignment()<edge_begin><edge_end>Program Committee member()
conference setup()<edge_begin><edge_end>date()
end date of conference()<edge_begin><edge_end>date of conference()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
activity()<edge_begin><edge_end>intensity()
program()<edge_begin><edge_end>session()
article()<edge_begin><edge_end>abstract()
Steering committee()<edge_begin><edge_end>Committee()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Company()<edge_begin><edge_end>Organization()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewing results event()<edge_begin><edge_end>Administrative event()
Active conference participant()<edge_begin><edge_end>Conference participant()
Conference part()<edge_begin><edge_end>Topic()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
conference()<edge_begin><edge_end>program()
Event(starts on, ends on)<edge_begin><edge_end>String()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
Trip()<edge_begin><edge_end>Social event()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
paper(full paper size)<edge_begin><edge_end>Integer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Conference announcement()<edge_begin><edge_end>Conference document()
activity()<edge_begin><edge_end>article()
Committe Role()<edge_begin><edge_end>Role()
URL()<edge_begin><edge_end>Thing()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Research Topic()<edge_begin><edge_end>Event Setup()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Volunteer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Written contribution()<edge_begin><edge_end>Conference contribution()
Paper(paper ID, title)<edge_begin><edge_end>Bid()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
Associated Chair()<edge_begin><edge_end>Conference Member()
Paper(paper ID, title)<edge_begin><edge_end>Regular contribution()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Event(starts on, ends on)
conference setup()<edge_begin><edge_end>topic()
Registration of participants event()<edge_begin><edge_end>Administrative event()
notification email()<edge_begin><edge_end>article()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Group Email()<edge_begin><edge_end>Email()
Corresponding Author()<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
chair()<edge_begin><edge_end>reviewer()
abstract of paper()<edge_begin><edge_end>article()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Role()<edge_begin><edge_end>Thing()
Undecided Paper()<edge_begin><edge_end>paper(full paper size)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Conference www(has a URL)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>activity()
review form()<edge_begin><edge_end>article()
Track-workshop chair()<edge_begin><edge_end>Conference part()
paper assignment()<edge_begin><edge_end>activity()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Conference contribution()<edge_begin><edge_end>Conference document()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
review()<edge_begin><edge_end>document()
article()<edge_begin><edge_end>document()
Reviewer()<edge_begin><edge_end>Thing()
Review Form()<edge_begin><edge_end>Event Setup()
Topic()<edge_begin><edge_end>Conference part()
Committee()<edge_begin><edge_end>Co-chair()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Bid()<edge_begin><edge_end>Reviewer()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Chairman()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Chair()<edge_begin><edge_end>Committee()
Banquet()<edge_begin><edge_end>Social event()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Misc()<edge_begin><edge_end>Help Request()
Submission Template()<edge_begin><edge_end>Event Setup()
date of conference()<edge_begin><edge_end>date()
Author Not Reviewer()<edge_begin><edge_end>Author()
Abstract()<edge_begin><edge_end>Extended abstract()
Regular Reviewer URL()<edge_begin><edge_end>URL()
External Reviewer()<edge_begin><edge_end>Reviewer()
Co-chair()<edge_begin><edge_end>Committee member()
Tutorial()<edge_begin><edge_end>Working event()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Chairman()<edge_begin><edge_end>Conference Member()
Rejection()<edge_begin><edge_end>Decision()
Member()<edge_begin><edge_end>Participant(early Registration)
User()<edge_begin><edge_end>Document()
Important dates()<edge_begin><edge_end>date()
participant()<edge_begin><edge_end>person()
Admin Role()<edge_begin><edge_end>Role()
Paper(paper ID, title)<edge_begin><edge_end>Author()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>String()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Information for participants()<edge_begin><edge_end>Conference document()
paper(full paper size)<edge_begin><edge_end>human(e-mail, last name, first name)
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on)
Author()<edge_begin><edge_end>Conference Member()
User()<edge_begin><edge_end>Thing()
Associated Chair()<edge_begin><edge_end>Chairman()
session()<edge_begin><edge_end>event(has startdate, has enddate)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Account()
Reviewer()<edge_begin><edge_end>Bid()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Committee()<edge_begin><edge_end>Chair()
Call for paper()<edge_begin><edge_end>Conference document()
pc meeting()<edge_begin><edge_end>event(has startdate, has enddate)
chair()<edge_begin><edge_end>program()
article()<edge_begin><edge_end>author()
Abstract()<edge_begin><edge_end>Thing()
Event Creation()<edge_begin><edge_end>Activity()
Author()<edge_begin><edge_end>Paper(paper ID, title)
Tutorial()<edge_begin><edge_end>Conference part()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
notification()<edge_begin><edge_end>article()
Conference applicant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Activity()<edge_begin><edge_end>Thing()
Participant(early Registration)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Accepted Paper()<edge_begin><edge_end>paper(full paper size)
Chair()<edge_begin><edge_end>Committee member()
Event(starts on, ends on)<edge_begin><edge_end>Event Setup()
Document()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>activity()
date of notification()<edge_begin><edge_end>date()
Reviewer()<edge_begin><edge_end>Review()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
acceptance notification email()<edge_begin><edge_end>notification email()
summary of reviews()<edge_begin><edge_end>activity()
conference()<edge_begin><edge_end>phase of conference()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Role()<edge_begin><edge_end>Administrator()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Co-chair()<edge_begin><edge_end>Committee()
Active conference participant()<edge_begin><edge_end>Presentation()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
notification()<edge_begin><edge_end>activity()
review()<edge_begin><edge_end>classification()
State(name)<edge_begin><edge_end>Trans()
State Machine(name, package)<edge_begin><edge_end>Document Field(name)
State Machine(name, package)<edge_begin><edge_end>Event(name)
Trans()<edge_begin><edge_end>State(name)
State Machine(name, package)<edge_begin><edge_end>Role(name)
State Machine(name, package)<edge_begin><edge_end>State(name)
State(name)<edge_begin><edge_end>Trans Set()
Field State(state)<edge_begin><edge_end>Document Field(name)
Trans Set()<edge_begin><edge_end>Trans()
State(name)<edge_begin><edge_end>Field State(state)
Arc(weight, name)<edge_begin><edge_end>String()
Petri Net()<edge_begin><edge_end>Element(name)
Petri Net()<edge_begin><edge_end>Arc(weight, name)
Arc(weight, name)<edge_begin><edge_end>Integer()
Transition To Place()<edge_begin><edge_end>Transition()
Element(name)<edge_begin><edge_end>String()
Place To Transition()<edge_begin><edge_end>Transition()
Transition To Place()<edge_begin><edge_end>Arc(weight, name)
Place To Transition()<edge_begin><edge_end>Place()
Transition()<edge_begin><edge_end>Element(name)
Transition To Place()<edge_begin><edge_end>Place()
SQL Script()<edge_begin><edge_end>Statement()
Timestamp Literal(value)<edge_begin><edge_end>Timestamp Type(precision, with Time Zone)
Time Type(precision, with Time Zone)<edge_begin><edge_end>Unsigned Integer()
Table Definition(label, scope)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Column(name)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
National Character String Type(kind, length)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
SQL Schema Definition Statement()<edge_begin><edge_end>SQL Schema Statement()
Default Option()<edge_begin><edge_end>Column(name)
Column Constraint()<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Column(name)<edge_begin><edge_end>Column Constraint()
Table Contents Source()<edge_begin><edge_end>Table Definition(label, scope)
Datetime Type()<edge_begin><edge_end>Predefined Type()
Large Object Length(value, multiplier, units)<edge_begin><edge_end>Unsigned Integer()
Column(name)<edge_begin><edge_end>Default Option()
Comment(value)<edge_begin><edge_end>Separator()
Character String Literal()<edge_begin><edge_end>National Character String Literal(values)
Character String Literal()<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Approximate Numeric Type(kind, precision)<edge_begin><edge_end>Numeric Type()
Exact Numeric Type(kind, precision, scale)<edge_begin><edge_end>Unsigned Integer()
Timestamp Type(precision, with Time Zone)<edge_begin><edge_end>Unsigned Integer()
National Character String Literal(values)<edge_begin><edge_end>General Literal()
National Character String Literal(values)<edge_begin><edge_end>Separator()
SQL Schema Statement()<edge_begin><edge_end>Direct SQL Statement()
Referential Constraint()<edge_begin><edge_end>Table Reference(catalog Name, schema Name)
Boolean Literal(value)<edge_begin><edge_end>General Literal()
Timestamp Type(precision, with Time Zone)<edge_begin><edge_end>Datetime Type()
Table Constraint()<edge_begin><edge_end>Table Element()
Table Element()<edge_begin><edge_end>Table Element List()
Column(name)<edge_begin><edge_end>Table Element()
Datetime Value Function(kind, precision)<edge_begin><edge_end>Unsigned Integer()
Direct SQL Statement()<edge_begin><edge_end>Statement()
Datetime Value Function Default Option()<edge_begin><edge_end>Datetime Value Function(kind, precision)
Referential Table Constraint()<edge_begin><edge_end>Table Columns Constraint()
Predefined Type()<edge_begin><edge_end>Data Type()
Numeric Type()<edge_begin><edge_end>Predefined Type()
Column(name)<edge_begin><edge_end>Data Type()
Literal Default Option()<edge_begin><edge_end>Default Option()
Boolean Type()<edge_begin><edge_end>Predefined Type()
Referential Constraint()<edge_begin><edge_end>Column(name)
Approximate Numeric Type(kind, precision)<edge_begin><edge_end>Unsigned Integer()
Numeric Literal()<edge_begin><edge_end>Literal()
National Character String Type(kind, length)<edge_begin><edge_end>Predefined Type()
Character String Type(kind, length)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Simple Comment()<edge_begin><edge_end>Comment(value)
Separator()<edge_begin><edge_end>Statement()
Column Constraint()<edge_begin><edge_end>Column(name)
Exact Numeric Type(kind, precision, scale)<edge_begin><edge_end>Numeric Type()
Table Element List()<edge_begin><edge_end>Table Contents Source()
Unique Table Constraint()<edge_begin><edge_end>Table Columns Constraint()
Datetime Value Function Default Option()<edge_begin><edge_end>Default Option()
Character String Type(kind, length)<edge_begin><edge_end>Predefined Type()
Date Literal(value)<edge_begin><edge_end>Datetime Literal()
Table Reference(catalog Name, schema Name)<edge_begin><edge_end>Table Definition(label, scope)
Null Specification()<edge_begin><edge_end>Implicitly Typed Value Specification()
Time Literal(value)<edge_begin><edge_end>Datetime Literal()
Table Definition(label, scope)<edge_begin><edge_end>Table Contents Source()
Timestamp Literal(value)<edge_begin><edge_end>Datetime Literal()
Table Element List()<edge_begin><edge_end>Table Element()
General Literal()<edge_begin><edge_end>Literal()
Time Type(precision, with Time Zone)<edge_begin><edge_end>Datetime Type()
Binary Large Object String Type(kind)<edge_begin><edge_end>Predefined Type()
Unique Column Constraint()<edge_begin><edge_end>Unique Constraint(kind)
Literal Default Option()<edge_begin><edge_end>Literal()
Character String Type(kind, length)<edge_begin><edge_end>Unsigned Integer()
Unique Column Constraint()<edge_begin><edge_end>Column Constraint()
Approximate Numeric Literal(value)<edge_begin><edge_end>Numeric Literal()
Exact Numeric Literal(value)<edge_begin><edge_end>Numeric Literal()
Not Null Column Constraint()<edge_begin><edge_end>Column Constraint()
Transaction(name)<edge_begin><edge_end>Put Statement(count)
Petri Net()<edge_begin><edge_end>Transaction(name)
Assure Statement(count)<edge_begin><edge_end>Resource(name)
Place(name)<edge_begin><edge_end>Storage(count, capacity)
Take Statement(count)<edge_begin><edge_end>Resource(name)
Transaction(name)<edge_begin><edge_end>Take Statement(count)
Petri Net()<edge_begin><edge_end>Resource(name)
Storage(count, capacity)<edge_begin><edge_end>Resource(name)
Take Statement(count)<edge_begin><edge_end>Place(name)
Put Statement(count)<edge_begin><edge_end>Resource(name)
Petri Net()<edge_begin><edge_end>Place(name)
Transaction(name)<edge_begin><edge_end>Assure Statement(count)
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Footer()<edge_begin><edge_end>Page Setup()
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
String Value(value)<edge_begin><edge_end>Value Type()
Comment(author, show Always)<edge_begin><edge_end>String()
Page Setup()<edge_begin><edge_end>Footer()
Table Element(index)<edge_begin><edge_end>Styled Element()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>String()
Error Value()<edge_begin><edge_end>Value Type()
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>Page Setup()
Data()<edge_begin><edge_end>Value Type()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)
Header Or Footer Elt(margin, data)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Value Type()<edge_begin><edge_end>Data()
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Number Value(value)<edge_begin><edge_end>Double()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Boolean()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Boolean()
String Value(value)<edge_begin><edge_end>String()
Footer()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Header Or Footer Elt(margin, data)<edge_begin><edge_end>Double()
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Workbook()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Integer()
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>String()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Page Setup()
Data()<edge_begin><edge_end>Comment(author, show Always)
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Integer()
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Comment(author, show Always)<edge_begin><edge_end>Data()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Table Element(index)<edge_begin><edge_end>Integer()
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Header()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>String()
Workbook()<edge_begin><edge_end>Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)
Date Time Type Value()<edge_begin><edge_end>Value Type()
Page Setup()<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Page Setup()<edge_begin><edge_end>Page Margins Info(left, right, top, bottom)
Custom Document Property(name)<edge_begin><edge_end>String()
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Page Setup()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Header()<edge_begin><edge_end>Page Setup()
Workbook()<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Integer()
Req Document()<edge_begin><edge_end>Req Root(name, title, issues)
Goal()<edge_begin><edge_end>Contractual Element(name, title, target Description, dropped, drop Rationale, issues)
System Requirement Set()<edge_begin><edge_end>Requirement Set()
Stakeholder Goals(component Category)<edge_begin><edge_end>Goal()
System Requirement Set()<edge_begin><edge_end>Include Global Requirement(component Category, self)
Req Root(name, title, issues)<edge_begin><edge_end>External Document(doc Reference, doc Fragment)
Value Predicate()<edge_begin><edge_end>Req Predicate()
Requirement(exception Text, component Category, connections)<edge_begin><edge_end>Req Predicate()
Informal Predicate(description)<edge_begin><edge_end>Req Predicate()
Goal()<edge_begin><edge_end>Goal()
Requirement Set()<edge_begin><edge_end>Req Root(name, title, issues)
Requirement Set()<edge_begin><edge_end>Requirement(exception Text, component Category, connections)
Requirement(exception Text, component Category, connections)<edge_begin><edge_end>Requirement(exception Text, component Category, connections)
Stakeholder Goals(component Category)<edge_begin><edge_end>Global Constants(name)
Predicate()<edge_begin><edge_end>Req Predicate()
Requirement(exception Text, component Category, connections)<edge_begin><edge_end>Contractual Element(name, title, target Description, dropped, drop Rationale, issues)
Contractual Element(name, title, target Description, dropped, drop Rationale, issues)<edge_begin><edge_end>When Condition()
Requirement Set()<edge_begin><edge_end>Global Constants(name)
Contractual Element(name, title, target Description, dropped, drop Rationale, issues)<edge_begin><edge_end>External Document(doc Reference, doc Fragment)
Global Requirement Set()<edge_begin><edge_end>Requirement Set()
Tutorial speaker()<edge_begin><edge_end>Author()
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
Session(room)<edge_begin><edge_end>Thing()
Meal Menu()<edge_begin><edge_end>Meal Event()
Neutral Review()<edge_begin><edge_end>Review()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Integer()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Author()<edge_begin><edge_end>Thing()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Location()
NGO()<edge_begin><edge_end>Organization()
Presenter state()<edge_begin><edge_end>State()
Adobe PDF()<edge_begin><edge_end>Format()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Inforamtion()
Programme()<edge_begin><edge_end>Document()
Session(room)<edge_begin><edge_end>String()
Presenter()<edge_begin><edge_end>Conference Participant()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Conference activity()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Review()<edge_begin><edge_end>Possible Reviewer()
article()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Hotel room()<edge_begin><edge_end>Place()
Review()<edge_begin><edge_end>Evaluation()
Item()<edge_begin><edge_end>Thing()
Student registration fee()<edge_begin><edge_end>Registration fee()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Session(room)<edge_begin><edge_end>Lecture(has Acronym)
Web Site()<edge_begin><edge_end>Document()
Personal Review History()<edge_begin><edge_end>Personal History()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Money()
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Organizing Committee()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
External Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Template()<edge_begin><edge_end>Document()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Proceedings()<edge_begin><edge_end>Thing()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Committee()<edge_begin><edge_end>User()
Conference Chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
IASTED non member()<edge_begin><edge_end>Delegate()
Chair()<edge_begin><edge_end>Committee member()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>intensity()
Author()<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Fee for extra trip()<edge_begin><edge_end>Fee()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper File()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Paper Status()
Program chair()<edge_begin><edge_end>Conference Program()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Integer()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Review()<edge_begin><edge_end>Conference document()
Invited Speaker()<edge_begin><edge_end>Presenter()
Role()<edge_begin><edge_end>Administrator()
Review Form()<edge_begin><edge_end>Event Setup()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Workshop()<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
start date of conference()<edge_begin><edge_end>date of conference()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Meal Break()<edge_begin><edge_end>Break Event()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Research Topic()<edge_begin><edge_end>Thing()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Senior Program Committee member()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Program Committee Chair()<edge_begin><edge_end>Review()
Topic()<edge_begin><edge_end>Working event()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Time()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Computer()<edge_begin><edge_end>Audiovisual equipment()
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Cd proceening()<edge_begin><edge_end>Publication()
PC Chair()<edge_begin><edge_end>PC Member()
Index Of Authors()<edge_begin><edge_end>Output Document()
Speaker()<edge_begin><edge_end>Delegate()
Lecture(has Acronym)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Document()<edge_begin><edge_end>Document()
External Reviewers List()<edge_begin><edge_end>Output Document()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper Review(Comments for Author, Comments for Program Committee)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>String()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
Reccommendation()<edge_begin><edge_end>Review Values()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>String()
Meal Event()<edge_begin><edge_end>Meal Menu()
Presenter university()<edge_begin><edge_end>Building()
Submission event()<edge_begin><edge_end>Administrative event()
Conference Hiker()<edge_begin><edge_end>Delegate()
Lecturer()<edge_begin><edge_end>Author()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Slide Set()<edge_begin><edge_end>Document()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
Trip()<edge_begin><edge_end>Social event()
Item()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Government Organization()<edge_begin><edge_end>Organization()
Trip city()<edge_begin><edge_end>City()
Personal Publication History()<edge_begin><edge_end>Personal History()
Chair URL()<edge_begin><edge_end>URL()
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Academia Organization()<edge_begin><edge_end>Organization()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Conference state()<edge_begin><edge_end>State()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
Acceptance()<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>article()
Text()<edge_begin><edge_end>Format()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Item()
Social program()<edge_begin><edge_end>Conference activity()
Paper File()<edge_begin><edge_end>Format()
Review()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Slot(ends At, begins At)<edge_begin><edge_end>Thing()
Classic Papers()<edge_begin><edge_end>Topics()
Session Chair()<edge_begin><edge_end>Conference Participant()
Rejection()<edge_begin><edge_end>Decision()
Author()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
Individual Presentation()<edge_begin><edge_end>Document()
Item()<edge_begin><edge_end>Time()
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Cryptography Topic()<edge_begin><edge_end>Topic()
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Review()<edge_begin><edge_end>Document()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference days()<edge_begin><edge_end>Time()
Senior Reviewer URL()<edge_begin><edge_end>URL()
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
abstract submission date()<edge_begin><edge_end>date()
Bank transfer()<edge_begin><edge_end>Payment document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Paper Abstract()
Record of attendance()<edge_begin><edge_end>Document()
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Workshop Session()<edge_begin><edge_end>Session(room)
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Flyer()<edge_begin><edge_end>Document()
Multi-author Volume()<edge_begin><edge_end>Document()
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Boolean()
Reviewing event()<edge_begin><edge_end>Administrative event()
Money()<edge_begin><edge_end>Thing()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Call for paper()<edge_begin><edge_end>Conference document()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Meal Event()<edge_begin><edge_end>Non Academic Event()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Co-author()<edge_begin><edge_end>Author()
Active Paper()<edge_begin><edge_end>Review Rating()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Committee()<edge_begin><edge_end>Co-chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Evaluated Paper()<edge_begin><edge_end>Review()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Subject Area()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Organizer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Published Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Member PC()<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Short Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Student()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Post Script()<edge_begin><edge_end>Format()
Meta-Review()<edge_begin><edge_end>Review()
Conference Banquet()<edge_begin><edge_end>Social Event()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Car()<edge_begin><edge_end>Transport vehicle()
Contact Author()<edge_begin><edge_end>Author()
Attendee()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
acceptance notification email()<edge_begin><edge_end>notification email()
Written contribution()<edge_begin><edge_end>Conference contribution()
Track()<edge_begin><edge_end>Scientific Event()
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference document()<edge_begin><edge_end>date()
Committee Member()<edge_begin><edge_end>Organizer()
Regular()<edge_begin><edge_end>Participant(early Registration)
full paper submission date()<edge_begin><edge_end>date()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>String()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Research Topic()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Author()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Hotel fee()<edge_begin><edge_end>Fee()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Regular contribution()
Session(room)<edge_begin><edge_end>Chair()
article()<edge_begin><edge_end>Author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Advocate()<edge_begin><edge_end>Member(Web address)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Research Topic()
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Conference Program()<edge_begin><edge_end>Thing()
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Introduction()<edge_begin><edge_end>Conference activity()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Author()<edge_begin><edge_end>Speaker()
Double hotel room()<edge_begin><edge_end>Hotel room()
Evaluation()<edge_begin><edge_end>Review()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Review Question()<edge_begin><edge_end>Question()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Conference contributor()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Chair()<edge_begin><edge_end>Thing()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Track()<edge_begin><edge_end>Conference part()
Conference hall()<edge_begin><edge_end>Place()
Advocate()<edge_begin><edge_end>Advocated Paper()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Workshop()<edge_begin><edge_end>Academic Event()
Van()<edge_begin><edge_end>Transport vehicle()
Member(Web address)<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Balanced Theory and Practice()<edge_begin><edge_end>Paper Categorization()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Author Not Reviewer()<edge_begin><edge_end>Author()
Workshop Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Science Worker()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Medicine Topic()<edge_begin><edge_end>Topic()
Email()<edge_begin><edge_end>Document()
Account()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Paper Author()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
University()<edge_begin><edge_end>Academic Institution()
Reviewer Role()<edge_begin><edge_end>Role()
Co-chair()<edge_begin><edge_end>Committee member()
Conference volume(has a location)<edge_begin><edge_end>Track()
Paper Categorization()<edge_begin><edge_end>Review Values()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
review form()<edge_begin><edge_end>article()
Registration form()<edge_begin><edge_end>Form()
Activity after conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Viza()<edge_begin><edge_end>Document()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Admin Role()<edge_begin><edge_end>Role()
Working event()<edge_begin><edge_end>Administrative event()
summary of reviews()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Chair()<edge_begin><edge_end>program()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
One day presenter()<edge_begin><edge_end>Delegate()
Negative Review()<edge_begin><edge_end>Review()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Information for participants()<edge_begin><edge_end>Conference document()
Chairman()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Presenter city()
Program Committee()<edge_begin><edge_end>Thing()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Author()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
External Reviewer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
User()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Reject Rating()<edge_begin><edge_end>Review Rating()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Domain Topic()
Contact Author(Alternate Email)<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Activity before conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Speaker()
Assistance()<edge_begin><edge_end>Help Request()
Contact Author(Alternate Email)<edge_begin><edge_end>String()
Session Chair()<edge_begin><edge_end>PC Member()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
MS Word()<edge_begin><edge_end>Format()
Corel Word Perfect()<edge_begin><edge_end>Format()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Organizing Committee()<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Administrator()
Building()<edge_begin><edge_end>Place()
Advocated Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Administrator()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Paper Abstract()<edge_begin><edge_end>Contact Author()
Preview()<edge_begin><edge_end>Review Form()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Chair PC()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Student lecturer()<edge_begin><edge_end>Lecturer()
Agency Staff Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Co-author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
PC Members List()<edge_begin><edge_end>Output Document()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
Event Creation()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Listener()<edge_begin><edge_end>Delegate()
Result of Advocate()<edge_begin><edge_end>Value Partition()
Power Point presentation()<edge_begin><edge_end>Presentation()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
paper assignment()<edge_begin><edge_end>Program Committee member()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Criterion(has Weight)<edge_begin><edge_end>Thing()
Clear Reject()<edge_begin><edge_end>Reccommendation()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Presenter()<edge_begin><edge_end>Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Boolean()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Contact Author(Alternate Email)
Chair()<edge_begin><edge_end>Committee()
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Participant(early Registration)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
TPC Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Document()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
SC Member()<edge_begin><edge_end>PC Member()
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Review Committee()<edge_begin><edge_end>Committees()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Payment document()<edge_begin><edge_end>Document()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Author()<edge_begin><edge_end>article()
conference setup()<edge_begin><edge_end>date()
Money()<edge_begin><edge_end>Item()
article()<edge_begin><edge_end>Abstract()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Topics()<edge_begin><edge_end>Value Partition()
Dinner banquet()<edge_begin><edge_end>Social program()
Cheque()<edge_begin><edge_end>Payment document()
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Form()<edge_begin><edge_end>Document()
Organizer()<edge_begin><edge_end>Thing()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Contact Author()<edge_begin><edge_end>Paper Abstract()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Double Blind Review()
PC Chair()<edge_begin><edge_end>Conference Participant()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Committee()<edge_begin><edge_end>Chair()
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Associated Chair()<edge_begin><edge_end>Conference Member()
Conference participant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Approval Email()<edge_begin><edge_end>Email()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Tutorial Chair()<edge_begin><edge_end>PC Member()
Chair()<edge_begin><edge_end>Session(room)
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
paper assignment()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Slot(ends At, begins At)<edge_begin><edge_end>Session(room)
Modelling()<edge_begin><edge_end>Research()
Slot(ends At, begins At)<edge_begin><edge_end>time()
Conference part()<edge_begin><edge_end>Topic()
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Publication()<edge_begin><edge_end>Item()
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Administrator()<edge_begin><edge_end>Thing()
Submission()<edge_begin><edge_end>Document()
Conference www(has a URL)<edge_begin><edge_end>String()
Conference announcement()<edge_begin><edge_end>Conference document()
Overall Value()<edge_begin><edge_end>Review Values()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Dining Place()<edge_begin><edge_end>Place()
end date of conference()<edge_begin><edge_end>date of conference()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Simulating()<edge_begin><edge_end>Research()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Place()<edge_begin><edge_end>Thing()
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Student non speaker()<edge_begin><edge_end>Non speaker()
Reviewer Famliliarity()<edge_begin><edge_end>Review Values()
Paper Question()<edge_begin><edge_end>Question()
Steering committee()<edge_begin><edge_end>Committee()
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Full day tour()<edge_begin><edge_end>Activity after conference()
Plenary lecture speaker()<edge_begin><edge_end>Author()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Reviewed contribution()<edge_begin><edge_end>Review()
Author()<edge_begin><edge_end>Conference Member()
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Role()<edge_begin><edge_end>Thing()
Tends Towards Practical()<edge_begin><edge_end>Paper Categorization()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Departure tax()<edge_begin><edge_end>Tax()
Outside Referee()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Departure()<edge_begin><edge_end>Activity after conference()
Active conference participant()<edge_begin><edge_end>Presentation()
notification email()<edge_begin><edge_end>article()
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Abstract()<edge_begin><edge_end>Document()
Conference Program()<edge_begin><edge_end>Planed Paper()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Associated Chair()<edge_begin><edge_end>Chairman()
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Conference applicant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Deadline()<edge_begin><edge_end>date()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Presentation()<edge_begin><edge_end>Conference contribution()
Event Tracks()<edge_begin><edge_end>Event Setup()
Regular Session()<edge_begin><edge_end>Session(room)
Conference Trip()<edge_begin><edge_end>Social Event()
Humour()<edge_begin><edge_end>Topics()
Organisation()<edge_begin><edge_end>Thing()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Scholar()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Clear Accept()<edge_begin><edge_end>Reccommendation()
Call for participation()<edge_begin><edge_end>Conference document()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Misc()<edge_begin><edge_end>Help Request()
HTML()<edge_begin><edge_end>Format()
Conference hotel()<edge_begin><edge_end>Building()
Delegate()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Long bool()<edge_begin><edge_end>Value Partition()
Closing Talk()<edge_begin><edge_end>Talk Event()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Abstract()<edge_begin><edge_end>article()
Active conference participant()<edge_begin><edge_end>Conference participant()
Administrator()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Review()
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Not Much()<edge_begin><edge_end>Overall Value()
Company()<edge_begin><edge_end>Organization()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Money()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>User()
Output Document()<edge_begin><edge_end>Chair()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
OC Member()<edge_begin><edge_end>Conference Participant()
Submissions deadline()<edge_begin><edge_end>Deadline()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Rejection Email()<edge_begin><edge_end>Email()
Abstract()<edge_begin><edge_end>Thing()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Reception()<edge_begin><edge_end>Social Event()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Committe Role()<edge_begin><edge_end>Role()
Technical commitee()<edge_begin><edge_end>Delegate()
article()<edge_begin><edge_end>classification()
Track-workshop chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Accept Rating()<edge_begin><edge_end>Review Rating()
Author Role()<edge_begin><edge_end>Role()
Sponzorship()<edge_begin><edge_end>Money()
Multimedia Topic()<edge_begin><edge_end>Topic()
Workshop Chair()<edge_begin><edge_end>PC Member()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Notification Email()<edge_begin><edge_end>Email()
Session chair()<edge_begin><edge_end>Delegate()
Conference Dinner()<edge_begin><edge_end>Meal Event()
Must Accept()<edge_begin><edge_end>Reccommendation()
Tutorial()<edge_begin><edge_end>Conference part()
PC Member()<edge_begin><edge_end>Possible Reviewer()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Time()
Sponsor company house()<edge_begin><edge_end>Building()
Tutorial()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Head Role()<edge_begin><edge_end>Role()
Sponsor city()<edge_begin><edge_end>City()
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Other()<edge_begin><edge_end>Overall Value()
Banquet()<edge_begin><edge_end>Social event()
Double Blind Review()<edge_begin><edge_end>Thing()
submission process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
CD-ROM()<edge_begin><edge_end>Output Document()
Submission Template()<edge_begin><edge_end>Event Setup()
Tutorial()<edge_begin><edge_end>Working event()
Presenter house()<edge_begin><edge_end>Building()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Place()<edge_begin><edge_end>Item()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference document()
Conference airport()<edge_begin><edge_end>Building()
Registration()<edge_begin><edge_end>Conference activity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Thing()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Test Only Topic()<edge_begin><edge_end>Topic()
Introduction of speaker()<edge_begin><edge_end>Introduction()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference contribution()<edge_begin><edge_end>Conference document()
Valuable Confirmation of Present Knowledge()<edge_begin><edge_end>Overall Value()
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Committee Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
rejection notification email()<edge_begin><edge_end>notification email()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Document()
IASTED member()<edge_begin><edge_end>Delegate()
Organising Agency()<edge_begin><edge_end>Organisation()
date of conference()<edge_begin><edge_end>date()
Document()<edge_begin><edge_end>Thing()
Conference Program()<edge_begin><edge_end>Domain Topic()
Transparency()<edge_begin><edge_end>Document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Final manuscript()<edge_begin><edge_end>Submission()
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Evaluation()<edge_begin><edge_end>Document()
Tutorial()<edge_begin><edge_end>Individual Presentation()
Research Institute()<edge_begin><edge_end>Academic Institution()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Workshop()<edge_begin><edge_end>Conference part()
Tax()<edge_begin><edge_end>Money()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Thing()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Bid()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Assistant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Topic()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Session()<edge_begin><edge_end>Session(room)
Member(Web address)<edge_begin><edge_end>String()
Working event()<edge_begin><edge_end>Topic()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Video presentation()<edge_begin><edge_end>Presentation()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
Review()<edge_begin><edge_end>article()
Conference Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Administrator()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
User()<edge_begin><edge_end>Thing()
Social Event()<edge_begin><edge_end>Non Academic Event()
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Money()<edge_begin><edge_end>Money()
New Information()<edge_begin><edge_end>Overall Value()
Invitation letter()<edge_begin><edge_end>Document()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
OC Chair()<edge_begin><edge_end>OC Member()
article()<edge_begin><edge_end>Document()
abstract of paper()<edge_begin><edge_end>article()
Feature Request()<edge_begin><edge_end>Help Request()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>unsigned Long()
Poster Session()<edge_begin><edge_end>Session(room)
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Account()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Transport vehicle()<edge_begin><edge_end>Item()
Speaker lecture()<edge_begin><edge_end>Session(room)
Possible Reviewer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
conference setup()<edge_begin><edge_end>URL()
High()<edge_begin><edge_end>Reviewer Famliliarity()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
managing of conference process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Paper Abstract()<edge_begin><edge_end>Document()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference building()<edge_begin><edge_end>Building()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Administrator()<edge_begin><edge_end>Role()
Committee member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>date Time()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
RTF()<edge_begin><edge_end>Format()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Programme Brochure()<edge_begin><edge_end>Document()
Item()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Mailing list()<edge_begin><edge_end>Document()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Email Template()<edge_begin><edge_end>Event Setup()
Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Work Shop()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Deadline()<edge_begin><edge_end>Time()
Regular contribution()<edge_begin><edge_end>Written contribution()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Security Topic()<edge_begin><edge_end>Topic()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Event URL()<edge_begin><edge_end>URL()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Chair()
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Organizer()
Presentation()<edge_begin><edge_end>Active conference participant()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Tip()<edge_begin><edge_end>Money()
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Demo Session()<edge_begin><edge_end>Session(room)
Planed Paper()<edge_begin><edge_end>Conference Program()
Author book proceedings included()<edge_begin><edge_end>Author()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Hotel presenter()<edge_begin><edge_end>Delegate()
Welcome address()<edge_begin><edge_end>Conference activity()
participant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Extended abstract()<edge_begin><edge_end>Regular contribution()
Demo Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Co-chair()<edge_begin><edge_end>Committee()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
List Of Abstracts()<edge_begin><edge_end>Output Document()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Double Blind Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Item()<edge_begin><edge_end>Item()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Document()
Marginal Tend to Reject()<edge_begin><edge_end>Reccommendation()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Integer()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
Detail()<edge_begin><edge_end>Thing()
Session(room)<edge_begin><edge_end>Accepted Paper()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Academic Institution()<edge_begin><edge_end>Organisation()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Session Chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Coffee Break()<edge_begin><edge_end>Break Event()
Group Email()<edge_begin><edge_end>Email()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reccommendation()
Program Committee Chair()<edge_begin><edge_end>Chairman()
City()<edge_begin><edge_end>Thing()
Accepted Paper()<edge_begin><edge_end>Session(room)
Help Request()<edge_begin><edge_end>Request()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Long bool()
Performance Topic()<edge_begin><edge_end>Topic()
Sponsor()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Review preference(has a degree)<edge_begin><edge_end>Integer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Personal Review History()
Contributed Talk()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>classification()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Break Event()<edge_begin><edge_end>Non Academic Event()
URL()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Textual Review Question()<edge_begin><edge_end>Review Question()
User()<edge_begin><edge_end>Document()
Research()<edge_begin><edge_end>Activity before conference()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>External Reviewer()
PT Arc()<edge_begin><edge_end>Place()
Transition()<edge_begin><edge_end>TP Arc()
Transition()<edge_begin><edge_end>Net()
Place()<edge_begin><edge_end>TP Arc()
Net()<edge_begin><edge_end>Place()
Transition()<edge_begin><edge_end>PT Arc()
TP Arc()<edge_begin><edge_end>Arc(weight)
PT Arc()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Arc(weight)
TP Arc()<edge_begin><edge_end>Place()
Place()<edge_begin><edge_end>PT Arc()
Net()<edge_begin><edge_end>Transition()
Composite State()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Event()
State Machine()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State Machine()
Dependency()<edge_begin><edge_end>State Machine()
State Machine()<edge_begin><edge_end>Class()
Transition()<edge_begin><edge_end>State Vertex()
Dependency()<edge_begin><edge_end>Class()
Class()<edge_begin><edge_end>Dependency()
Class()<edge_begin><edge_end>Generalization()
State()<edge_begin><edge_end>Transition()
Dependency()<edge_begin><edge_end>Stereotype(base Class)
State()<edge_begin><edge_end>State Vertex()
Pseudo State()<edge_begin><edge_end>State Vertex()
State Vertex()<edge_begin><edge_end>Composite State()
Stereotype(base Class)<edge_begin><edge_end>String()
TP Arc()<edge_begin><edge_end>Arc(weight)
Place(name, relevance)<edge_begin><edge_end>Generic PT(label)
Transition(name, relevance)<edge_begin><edge_end>Petri Net(name)
Place(name, relevance)<edge_begin><edge_end>Petri Net(name)
Place(name, relevance)<edge_begin><edge_end>TP Arc()
PT Arc()<edge_begin><edge_end>Arc(weight)
Petri Net(name)<edge_begin><edge_end>Petri Net Model Element()
Arc(weight)<edge_begin><edge_end>Petri Net Model Element()
Petri Net Model()<edge_begin><edge_end>Petri Net Model Element()
Transition(name, relevance)<edge_begin><edge_end>PT Arc()
PT Arc()<edge_begin><edge_end>Transition(name, relevance)
PT Arc()<edge_begin><edge_end>Place(name, relevance)
Petri Net Model Element()<edge_begin><edge_end>Petri Net Model()
Transition(name, relevance)<edge_begin><edge_end>TP Arc()
Petri Net(name)<edge_begin><edge_end>Place(name, relevance)
Place(name, relevance)<edge_begin><edge_end>PT Arc()
Petri Net(name)<edge_begin><edge_end>Transition(name, relevance)
TP Arc()<edge_begin><edge_end>Place(name, relevance)
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)
Filter Group()<edge_begin><edge_end>I Filter()
Requirement()<edge_begin><edge_end>I Required Capability(namespace, name, range, filter)
Resulting Path Group()<edge_begin><edge_end>I Action Result()
I Resolution()<edge_begin><edge_end>I Capability(namespace, name, version)
I Build Context()<edge_begin><edge_end>I Unit Request(name, name Space, range)
Version Advice(version)<edge_begin><edge_end>I Advise()
I Capability(namespace, name, version)<edge_begin><edge_end>Version()
Meta Data Translator Factory Extension()<edge_begin><edge_end>I Meta Data Translator Factory()
to Lower()<edge_begin><edge_end>I Function()
I Resolver(fail On Error, filter)<edge_begin><edge_end>I Expr()
Invoke Command(action)<edge_begin><edge_end>Name()
Build Unit Command()<edge_begin><edge_end>I Advise()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Name Space()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>Part Capability()
Simple Pattern F Ilter()<edge_begin><edge_end>Single Property Filter(property)
Resolver Extension()<edge_begin><edge_end>I Human Selectable(label, type Name)
To Upper()<edge_begin><edge_end>I Function()
Part Capability()<edge_begin><edge_end>I Capability(namespace, name, version)
I Action Part()<edge_begin><edge_end>I Action Result()
Property Advice()<edge_begin><edge_end>Property Scope(unset Properties)
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>Alias()
P2Resolver()<edge_begin><edge_end>I Resolver(fail On Error, filter)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>Property Scope(unset Properties)
I Action Part()<edge_begin><edge_end>I Up To Date Policy()
I Unit Request(name, name Space, range)<edge_begin><edge_end>Name Space()
I Build Part(name)<edge_begin><edge_end>Name()
Resolution Options(source, mutable, branch Tag Path, timestamp, revision, resolver Filter, filter Groups, overlay Path, include Parts, exclude Parts, prune)<edge_begin><edge_end>Filter String()
Build Runtime()<edge_begin><edge_end>Meta Data Translator Factory Extension()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Version Range()
I Function()<edge_begin><edge_end>I Expr()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Capability(namespace, name, version)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Generic Unit()
Build Runtime()<edge_begin><edge_end>Materializer Extension()
New Instance Advice(clazz)<edge_begin><edge_end>Advice Group()
Materializer Extension()<edge_begin><edge_end>I Materializer()
I Unit Request(name, name Space, range)<edge_begin><edge_end>Name()
Filter Advice(filter Op)<edge_begin><edge_end>I Filter()
I Produced Part()<edge_begin><edge_end>I Path Group(base Path, paths)
Part Requirement()<edge_begin><edge_end>I Build Part(name)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Required Capability(namespace, name, range, filter)
P2Materializer()<edge_begin><edge_end>I Materializer()
I Part Group()<edge_begin><edge_end>I Closure Part()
Build Runtime()<edge_begin><edge_end>Up To Date Extension()
Resolver Extension()<edge_begin><edge_end>I Resolver(fail On Error, filter)
Requirement()<edge_begin><edge_end>I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Build Unit(filter, circularity Allowed, instance Location)
OS Gi Based Filter()<edge_begin><edge_end>I Filter()
Format(format String)<edge_begin><edge_end>I Function()
Best Choice()<edge_begin><edge_end>Resolver Group()
Or Filter()<edge_begin><edge_end>Filter Group()
I Action Part()<edge_begin><edge_end>I Closure Part()
I Closure(execute Once)<edge_begin><edge_end>I Advise()
I Capability(namespace, name, version)<edge_begin><edge_end>Name Space()
Worspace Resolver()<edge_begin><edge_end>EFS Resolver()
Filter Advice(filter Op)<edge_begin><edge_end>I Advise()
Meta Data Translator Factory Extension()<edge_begin><edge_end>I Extension()
I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)<edge_begin><edge_end>Pattern()
Workspace Materializer()<edge_begin><edge_end>I Materializer()
I Artifacts Part()<edge_begin><edge_end>I Build Part(name)
Up To Date Extension()<edge_begin><edge_end>I Up To Date Policy()
Property Scope(unset Properties)<edge_begin><edge_end>String Properties(key, value, immutable)
I Closure Part()<edge_begin><edge_end>I Closure(execute Once)
I Build Context()<edge_begin><edge_end>I Resolver(fail On Error, filter)
Split(pattern, style, limit)<edge_begin><edge_end>Pattern()
Advice Group()<edge_begin><edge_end>I Advise()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Name()
Version Range Advice(version Range)<edge_begin><edge_end>Version Range()
Resolution Options(source, mutable, branch Tag Path, timestamp, revision, resolver Filter, filter Groups, overlay Path, include Parts, exclude Parts, prune)<edge_begin><edge_end>Path()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>URI()
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>Path()
I Resolution()<edge_begin><edge_end>I Resolution()
I Resolution()<edge_begin><edge_end>I Required Capability(namespace, name, range, filter)
Part Capability()<edge_begin><edge_end>I Build Part(name)
I Capability(namespace, name, version)<edge_begin><edge_end>Name()
Up To Date Extension()<edge_begin><edge_end>I Human Selectable(label, type Name)
Version Range Advice(version Range)<edge_begin><edge_end>I Advise()
I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)<edge_begin><edge_end>Alias()
I Build Context()<edge_begin><edge_end>I Advise()
I Resolver(fail On Error, filter)<edge_begin><edge_end>Filter()
Boolean Advice(value)<edge_begin><edge_end>I Advise()
I Generic Unit()<edge_begin><edge_end>I Path Group(base Path, paths)
I Human Selectable(label, type Name)<edge_begin><edge_end>I Extension()
Property Advice()<edge_begin><edge_end>I Advise()
Resolver Group()<edge_begin><edge_end>I Resolver(fail On Error, filter)
Split(pattern, style, limit)<edge_begin><edge_end>I Function()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>Filter String()
I Unit Request(name, name Space, range)<edge_begin><edge_end>Resolution Options(source, mutable, branch Tag Path, timestamp, revision, resolver Filter, filter Groups, overlay Path, include Parts, exclude Parts, prune)
I Produced Part()<edge_begin><edge_end>I Closure Part()
And Filter()<edge_begin><edge_end>Filter Group()
replace()<edge_begin><edge_end>Match(pattern, replacement, quote Pattern)
I Closure(execute Once)<edge_begin><edge_end>I Prerequisites(alias, rebase Path)
I Artifacts Part()<edge_begin><edge_end>I Path Group(base Path, paths)
Build Runtime()<edge_begin><edge_end>Resolver Extension()
Single Property Filter(property)<edge_begin><edge_end>I Filter()
Property Ref()<edge_begin><edge_end>I Function()
I Advise()<edge_begin><edge_end>Context Node Selector()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Filter String()
Import Options(location, conflict Resolution, resource Path, unpack, expand, suffix)<edge_begin><edge_end>Path()
I Closure(execute Once)<edge_begin><edge_end>Property Scope(unset Properties)
String Advice(value)<edge_begin><edge_end>I Advise()
I Build Context()<edge_begin><edge_end>I Build Unit(filter, circularity Allowed, instance Location)
First Choice()<edge_begin><edge_end>Resolver Group()
Import Options(location, conflict Resolution, resource Path, unpack, expand, suffix)<edge_begin><edge_end>I Materializer()
File System Materializer()<edge_begin><edge_end>I Materializer()
Build Unit Command()<edge_begin><edge_end>I Unit Request(name, name Space, range)
Default Resolver()<edge_begin><edge_end>I Resolver(fail On Error, filter)
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>I Build Part(name)
Build Unit Command()<edge_begin><edge_end>I Resolver(fail On Error, filter)
Invoke Command(action)<edge_begin><edge_end>Build Unit Command()
Proceedings(month, number, volume, address, series)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Employee()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Research Group()<edge_begin><edge_end>Employee()
University()<edge_begin><edge_end>Student()
Academic Staff()<edge_begin><edge_end>Ph D Student()
Research Project()<edge_begin><edge_end>Project(name)
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Meeting(title)<edge_begin><edge_end>Event(name, date, event Title, location)
Research Topic()<edge_begin><edge_end>Academic Staff()
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>String()
Article(journal, month, number, pages, volume)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Software Component(has Price)<edge_begin><edge_end>Product(name)
Research Topic()<edge_begin><edge_end>Topic(name)
Graduate()<edge_begin><edge_end>Student()
Manual(month, address, edition)<edge_begin><edge_end>Organization(location, name)
Technical Staff()<edge_begin><edge_end>Employee()
Project Report()<edge_begin><edge_end>Report()
Event(name, date, event Title, location)<edge_begin><edge_end>String()
Thesis(month, address, type)<edge_begin><edge_end>University()
Article(journal, month, number, pages, volume)<edge_begin><edge_end>Integer()
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>Organization(location, name)
Software Component(has Price)<edge_begin><edge_end>Integer()
Meeting(title)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Academic Staff()<edge_begin><edge_end>Research Group()
Lecturer()<edge_begin><edge_end>Academic Staff()
Master Thesis()<edge_begin><edge_end>Thesis(month, address, type)
Software Project()<edge_begin><edge_end>Project(name)
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Association()<edge_begin><edge_end>Organization(location, name)
Meeting(title)<edge_begin><edge_end>String()
Research Group()<edge_begin><edge_end>Academic Staff()
Employee()<edge_begin><edge_end>Organization(location, name)
Product(name)<edge_begin><edge_end>Organization(location, name)
Ph D Student()<edge_begin><edge_end>Project(name)
Technical Report(series)<edge_begin><edge_end>Report()
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Manager()<edge_begin><edge_end>Employee()
Bibliography()<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Department()<edge_begin><edge_end>Institute()
Academic Staff()<edge_begin><edge_end>Research Topic()
University()<edge_begin><edge_end>Department()
Organization(location, name)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Department()<edge_begin><edge_end>Organization(location, name)
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Organization(location, name)<edge_begin><edge_end>String()
Booklet(month, address, edition, howpublished)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Undergraduate()<edge_begin><edge_end>Student()
Thesis(month, address, type)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Manual(month, address, edition)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Institute()<edge_begin><edge_end>Organization(location, name)
Project(name)<edge_begin><edge_end>Organization(location, name)
Manual(month, address, edition)<edge_begin><edge_end>String()
Assistant Professor()<edge_begin><edge_end>Faculty Member()
Development Project()<edge_begin><edge_end>Project(name)
Thesis(month, address, type)<edge_begin><edge_end>String()
University()<edge_begin><edge_end>Organization(location, name)
Proceedings(month, number, volume, address, series)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Organization(location, name)<edge_begin><edge_end>Project(name)
Unpublished(month)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Misc(month, howpublished)<edge_begin><edge_end>String()
Report()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Institute()<edge_begin><edge_end>Institute()
Organization(location, name)<edge_begin><edge_end>Employee()
Academic Staff()<edge_begin><edge_end>Event(name, date, event Title, location)
Thesis(month, address, type)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Organization(location, name)<edge_begin><edge_end>Technical Report(series)
Event(name, date, event Title, location)<edge_begin><edge_end>Event(name, date, event Title, location)
Publication(title, abstract, keywords, note, year)<edge_begin><edge_end>String()
Project(name)<edge_begin><edge_end>Project Report()
Faculty Member()<edge_begin><edge_end>Academic Staff()
Workshop(series)<edge_begin><edge_end>Event(name, date, event Title, location)
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>String()
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>String()
Exhibition()<edge_begin><edge_end>Event(name, date, event Title, location)
Project(name)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Academic Staff()<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Ph D Student()<edge_begin><edge_end>Academic Staff()
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>Organization(location, name)
Project(name)<edge_begin><edge_end>String()
Project(name)<edge_begin><edge_end>Academic Staff()
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Organization(location, name)
Software Project()<edge_begin><edge_end>Product(name)
Full Professor()<edge_begin><edge_end>Faculty Member()
Ph D Thesis()<edge_begin><edge_end>Thesis(month, address, type)
Project Meeting()<edge_begin><edge_end>Meeting(title)
Student()<edge_begin><edge_end>University()
Booklet(month, address, edition, howpublished)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Misc(month, howpublished)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Product(name)<edge_begin><edge_end>String()
Publication(title, abstract, keywords, note, year)<edge_begin><edge_end>Integer()
Project(name)<edge_begin><edge_end>Research Topic()
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Integer()
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>Integer()
Student()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Proceedings(month, number, volume, address, series)<edge_begin><edge_end>Organization(location, name)
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Associate Professor()<edge_begin><edge_end>Faculty Member()
Ph D Student()<edge_begin><edge_end>Graduate()
Technical Report(series)<edge_begin><edge_end>Organization(location, name)
Report()<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Person(address, name, email, fax, homepage, phone, photo)<edge_begin><edge_end>String()
Conference(series)<edge_begin><edge_end>String()
Unpublished(month)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Academic Staff()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Lecture()<edge_begin><edge_end>Event(name, date, event Title, location)
Object Flow State()<edge_begin><edge_end>Model Element(name)
Transition()<edge_begin><edge_end>State Vertex()
State Vertex()<edge_begin><edge_end>Transition()
Object Flow State()<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>Transition()
Activity Graph()<edge_begin><edge_end>State Machine()
Partition()<edge_begin><edge_end>Model Element(name)
Guard()<edge_begin><edge_end>Model Element(name)
State Machine()<edge_begin><edge_end>Model Element(name)
Activity Graph()<edge_begin><edge_end>Partition()
State()<edge_begin><edge_end>State Vertex()
Action State(is Dynamic)<edge_begin><edge_end>State()
State Vertex()<edge_begin><edge_end>Model Element(name)
Composite State()<edge_begin><edge_end>State()
Final State()<edge_begin><edge_end>State()
Guard()<edge_begin><edge_end>Boolean Expression(language, body)
Transition()<edge_begin><edge_end>Guard()
Contribution(label)<edge_begin><edge_end>Enabled Status Provider(enabled)
I Provided Capability(name, namespace, version)<edge_begin><edge_end>Version()
I Artifact Key(classifier, id, version)<edge_begin><edge_end>Version()
Contact(name, email)<edge_begin><edge_end>Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Status Provider()
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Enabled Status Provider(enabled)
Metadata Repository()<edge_begin><edge_end>Repository Reference(location, type, options, nickname)
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Instruction Map(key)<edge_begin><edge_end>Touchpoint Instruction()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Category()<edge_begin><edge_end>Features()
Mapped Unit()<edge_begin><edge_end>Installable Unit Reference()
Mapped Unit()<edge_begin><edge_end>Enabled Status Provider(enabled)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Category()
Product()<edge_begin><edge_end>Features()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Description Provider(description)
Category()<edge_begin><edge_end>Fragments()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Status Provider()
Valid Configurations Rule()<edge_begin><edge_end>Map Rule()
Required Capability()<edge_begin><edge_end>I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)
Provided Capability Wrapper()<edge_begin><edge_end>Provided Capability()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Custom Category(identifier, label, description)
Fragment()<edge_begin><edge_end>Bundle()
Installable Unit Fragment()<edge_begin><edge_end>Installable Unit()
License()<edge_begin><edge_end>I License(location, body, digest)
IU Details()<edge_begin><edge_end>I License(location, body, digest)
Metadata Repository()<edge_begin><edge_end>Property(key, value)
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>URI()
Category()<edge_begin><edge_end>Bundles()
Installable Units()<edge_begin><edge_end>Miscellaneous()
Required Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Installable Units()<edge_begin><edge_end>Categories()
Category()<edge_begin><edge_end>IU Details()
Touchpoint Instruction()<edge_begin><edge_end>I Touchpoint Instruction(body, import Attribute)
Contribution(label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Map Rule()<edge_begin><edge_end>Description Provider(description)
Category()<edge_begin><edge_end>Products()
I License(location, body, digest)<edge_begin><edge_end>URI()
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I License(location, body, digest)
I Metadata Repository()<edge_begin><edge_end>I Repository(location, name, type, version, description, provider, modifiable)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Touchpoint Type(id, version)
Installable Unit Fragment()<edge_begin><edge_end>Required Capability()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Contribution(label)<edge_begin><edge_end>Mapped Repository(mirror Artifacts, category Prefix)
Installable Unit Fragment()<edge_begin><edge_end>I Installable Unit Fragment()
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Properties()
Required Capability Wrapper()<edge_begin><edge_end>Required Capability()
IU Details()<edge_begin><edge_end>Required Capabilities()
Installable Unit()<edge_begin><edge_end>Artifact Key()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Bundle()
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>I Adaptable()
Miscellaneous()<edge_begin><edge_end>Other IU()
Feature()<edge_begin><edge_end>Features()
Required Capability Wrapper()<edge_begin><edge_end>I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Feature()
Installable Unit()<edge_begin><edge_end>Provided Capability()
Touchpoints()<edge_begin><edge_end>I Touchpoint Type(id, version)
Artifact Key()<edge_begin><edge_end>I Artifact Key(classifier, id, version)
Installable Units()<edge_begin><edge_end>Fragments()
Touchpoint Type()<edge_begin><edge_end>I Touchpoint Type(id, version)
Contribution(label)<edge_begin><edge_end>Status Provider()
Custom Category(identifier, label, description)<edge_begin><edge_end>Status Provider()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contact(name, email)
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Installable Units()
Feature()<edge_begin><edge_end>Fragments()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Properties()<edge_begin><edge_end>Property(key, value)
Fragments()<edge_begin><edge_end>Fragment()
I Touchpoint Type(id, version)<edge_begin><edge_end>Version()
Configuration(operating System, window System, architecture)<edge_begin><edge_end>Enabled Status Provider(enabled)
Repository Reference(location, type, options, nickname)<edge_begin><edge_end>URI()
IU Details()<edge_begin><edge_end>Provided Capabilities()
Copyright()<edge_begin><edge_end>I Copyright(location, body)
IU Details()<edge_begin><edge_end>Touchpoints()
I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)<edge_begin><edge_end>Version Range()
Mapped Unit()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Status Provider()
Contribution(label)<edge_begin><edge_end>Contact(name, email)
Touchpoint Data()<edge_begin><edge_end>I Touchpoint Data()
Feature()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Copyright(location, body)
Provided Capabilities()<edge_begin><edge_end>Provided Capability Wrapper()
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Metadata Repository()
Installable Units()<edge_begin><edge_end>Features()
Feature()<edge_begin><edge_end>Bundles()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Product()
I Update Descriptor(id, range, description, severity)<edge_begin><edge_end>Version Range()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Installable Unit()<edge_begin><edge_end>Required Capability()
Touchpoint Data()<edge_begin><edge_end>Instruction Map(key)
Custom Category(identifier, label, description)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Installable Unit Reference()<edge_begin><edge_end>Installable Unit()
Bundles()<edge_begin><edge_end>Bundle()
Product()<edge_begin><edge_end>Fragments()
Installable Unit()<edge_begin><edge_end>Property(key, value)
Status Provider()<edge_begin><edge_end>Status(code, message)
Map Rule()<edge_begin><edge_end>Installable Unit Reference()
Custom Category(identifier, label, description)<edge_begin><edge_end>Feature()
Required Capabilities()<edge_begin><edge_end>Required Capability Wrapper()
I Metadata Repository()<edge_begin><edge_end>I Queryable()
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type)
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Details()
Installable Unit()<edge_begin><edge_end>Touchpoint Data()
I Copyright(location, body)<edge_begin><edge_end>URI()
Contribution(label)<edge_begin><edge_end>Description Provider(description)
Products()<edge_begin><edge_end>Product()
Valid Configurations Rule()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Categories()<edge_begin><edge_end>Category()
Provided Capability()<edge_begin><edge_end>I Provided Capability(name, namespace, version)
IU Details()<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
Product()<edge_begin><edge_end>Bundles()
IU Presentation(id, version, name, label, description, type)<edge_begin><edge_end>Version()
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contribution(label)
Provided Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Textual Value(value)<edge_begin><edge_end>Paragraph Value()
Informal Table Value()<edge_begin><edge_end>Informal Table Value Group(cols)
Itemized List Value()<edge_begin><edge_end>Itemized List Value Item()
Informal Table Value()<edge_begin><edge_end>Paragraph Value()
Paragraph()<edge_begin><edge_end>Paragraph Value()
X Ref Value()<edge_begin><edge_end>Section(title)
Book(title)<edge_begin><edge_end>Section(title)
Itemized List Value Item()<edge_begin><edge_end>Paragraph()
Informal Table Value Body()<edge_begin><edge_end>Informal Table Value Row()
Section(title)<edge_begin><edge_end>Paragraph()
Section(title)<edge_begin><edge_end>Section(title)
Informal Table Value Group(cols)<edge_begin><edge_end>Informal Table Value Body()
Informal Table Value Head()<edge_begin><edge_end>Informal Table Value Row()
Informal Table Value Row()<edge_begin><edge_end>Informal Table Value Entry(value)
Itemized List Value()<edge_begin><edge_end>Paragraph Value()
R Model Element(kind, name)<edge_begin><edge_end>String()
Column(type)<edge_begin><edge_end>String()
Foreign Key()<edge_begin><edge_end>Column(type)
Table()<edge_begin><edge_end>Column(type)
Schema()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>Key()
Schema()<edge_begin><edge_end>R Model Element(kind, name)
Column(type)<edge_begin><edge_end>Key()
Foreign Key()<edge_begin><edge_end>R Model Element(kind, name)
Key()<edge_begin><edge_end>Column(type)
Key()<edge_begin><edge_end>Foreign Key()
Column(type)<edge_begin><edge_end>Foreign Key()
Key()<edge_begin><edge_end>R Model Element(kind, name)
Key()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>R Model Element(kind, name)
Foreign Key()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Foreign Key()
Title()<edge_begin><edge_end>Valued Element(value)
Figure()<edge_begin><edge_end>Path()
Document()<edge_begin><edge_end>Title()
Heading()<edge_begin><edge_end>Organisation()
Heading()<edge_begin><edge_end>E Mail()
Organisation()<edge_begin><edge_end>Heading()
Value()<edge_begin><edge_end>Corps()
Organisation()<edge_begin><edge_end>Name()
Fax()<edge_begin><edge_end>Valued Element(value)
Author()<edge_begin><edge_end>Name()
Citation()<edge_begin><edge_end>Author()
Item()<edge_begin><edge_end>Enumerate()
Document()<edge_begin><edge_end>Document Body()
Adress()<edge_begin><edge_end>Valued Element(value)
Citation()<edge_begin><edge_end>Label()
Figure()<edge_begin><edge_end>Title()
Abstract()<edge_begin><edge_end>Valued Element(value)
Document()<edge_begin><edge_end>Keywords()
Section Body()<edge_begin><edge_end>Section()
Value()<edge_begin><edge_end>Valued Element(value)
Document Body()<edge_begin><edge_end>Document()
Figure()<edge_begin><edge_end>Corps()
Enumerate()<edge_begin><edge_end>Item()
Date()<edge_begin><edge_end>Valued Element(value)
Name()<edge_begin><edge_end>Valued Element(value)
Type()<edge_begin><edge_end>Valued Element(value)
Section()<edge_begin><edge_end>Corps()
Keywords()<edge_begin><edge_end>Valued Element(value)
Label()<edge_begin><edge_end>Valued Element(value)
Valued Element(value)<edge_begin><edge_end>String()
Citation()<edge_begin><edge_end>Bibliography()
Items()<edge_begin><edge_end>Corps()
Document Body()<edge_begin><edge_end>Bibliography()
Organisation()<edge_begin><edge_end>Adress()
Heading()<edge_begin><edge_end>Phone()
Description()<edge_begin><edge_end>Valued Element(value)
Name()<edge_begin><edge_end>Author()
Name()<edge_begin><edge_end>Organisation()
Document()<edge_begin><edge_end>Author()
Document Body()<edge_begin><edge_end>Section()
Description()<edge_begin><edge_end>Date()
Document()<edge_begin><edge_end>Type()
Document()<edge_begin><edge_end>Date()
Bibliography()<edge_begin><edge_end>Citation()
Items()<edge_begin><edge_end>Item()
Corps()<edge_begin><edge_end>Section Body()
Cite()<edge_begin><edge_end>Valued Element(value)
Phone()<edge_begin><edge_end>Valued Element(value)
Item()<edge_begin><edge_end>Items()
Document()<edge_begin><edge_end>Heading()
Section()<edge_begin><edge_end>Title()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Path Element(path, location)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>Set()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Property File(file)<edge_begin><edge_end>String()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Mkdir(dir)<edge_begin><edge_end>String()
Project(name, basedir, description)<edge_begin><edge_end>Path(id, refid)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Format Tstamp(property, pattern, offset, unit, locale)<edge_begin><edge_end>String()
New Task()<edge_begin><edge_end>Task()
Filters File(file)<edge_begin><edge_end>Basic()
Attribut(name, value)<edge_begin><edge_end>String()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
In Excludes(name, if Condition, unless)<edge_begin><edge_end>String()
Property File(file)<edge_begin><edge_end>Property()
Echo(message, file, append)<edge_begin><edge_end>String()
Property Name(name)<edge_begin><edge_end>Property()
File List(dir, files)<edge_begin><edge_end>Basic()
Project(name, basedir, description)<edge_begin><edge_end>Property()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
New Task()<edge_begin><edge_end>Attribut(name, value)
Property Location(location)<edge_begin><edge_end>Property Name(name)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
File Set(dir)<edge_begin><edge_end>Excludes()
Filters File(file)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Task()
Property Env(environment)<edge_begin><edge_end>String()
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Project(name, basedir, description)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Filter(token, value)<edge_begin><edge_end>Basic()
Target(name, description, unless, if Condition)<edge_begin><edge_end>String()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Mkdir(dir)<edge_begin><edge_end>File Task()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>String()
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Project(name, basedir, description)<edge_begin><edge_end>Task Def(name, classname)
Property Value(value)<edge_begin><edge_end>String()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Class Path(refid)<edge_begin><edge_end>Set()
New Task()<edge_begin><edge_end>Task Def(name, classname)
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
Pattern Set()<edge_begin><edge_end>Set()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Task Def(name, classname)<edge_begin><edge_end>String()
Set()<edge_begin><edge_end>Pattern()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
File Set(dir)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Set()
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Path Element(path, location)<edge_begin><edge_end>Basic()
Property Value(value)<edge_begin><edge_end>Property Name(name)
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Basic()<edge_begin><edge_end>Pattern()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File List(dir, files)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
Or Expression()<edge_begin><edge_end>Expression()
Select Constructor Expression(name)<edge_begin><edge_end>Select Expression()
Expression Term()<edge_begin><edge_end>Expression()
Select Statement()<edge_begin><edge_end>Expression Term()
From Clause()<edge_begin><edge_end>From Entry()
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Like Expression(is Not, pattern)<edge_begin><edge_end>Expression()
In Expression(is Not)<edge_begin><edge_end>Expression()
Select Statement()<edge_begin><edge_end>Select From Clause()
All Expression()<edge_begin><edge_end>Select Statement()
From Entry()<edge_begin><edge_end>Variable Declaration(name)
Any Expression()<edge_begin><edge_end>Select Statement()
From Class()<edge_begin><edge_end>From Join(is Fetch)
From Join(is Fetch)<edge_begin><edge_end>Variable Declaration(name)
Empty Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Update Statement()<edge_begin><edge_end>Update Clause()
Exists Expression(is Not)<edge_begin><edge_end>Select Statement()
From Collection()<edge_begin><edge_end>From Entry()
Collection Expression(is Not)<edge_begin><edge_end>Expression()
Query Module()<edge_begin><edge_end>Query()
Exists Expression(is Not)<edge_begin><edge_end>Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable Declaration(name)
From Collection()<edge_begin><edge_end>Alias Attribute Expression(attributes)
Function(name)<edge_begin><edge_end>Variable()
Variable()<edge_begin><edge_end>Expression Term()
In Seq Expression()<edge_begin><edge_end>In Expression(is Not)
Null Expression(value)<edge_begin><edge_end>Value()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable()
Parameter Expression(name)<edge_begin><edge_end>Variable()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Select Expression()
In Expression(is Not)<edge_begin><edge_end>Variable()
Update Item()<edge_begin><edge_end>Alias Attribute Expression(attributes)
Empty Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Between Expression(is Not)<edge_begin><edge_end>Value()
From Class()<edge_begin><edge_end>From Entry()
Operator Expression(operator)<edge_begin><edge_end>Variable()
Between Expression(is Not)<edge_begin><edge_end>Variable()
Order Clause(is Asc, is Desc)<edge_begin><edge_end>Order Item(feature)
Collection Expression(is Not)<edge_begin><edge_end>Variable()
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Select From Clause()<edge_begin><edge_end>From Clause()
String Expression(value)<edge_begin><edge_end>Value()
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Order Item(feature)<edge_begin><edge_end>From Entry()
Query()<edge_begin><edge_end>Where Clause()
Like Expression(is Not, pattern)<edge_begin><edge_end>Variable()
Delete Statement()<edge_begin><edge_end>Query()
Select Statement()<edge_begin><edge_end>Query()
In Query Expression()<edge_begin><edge_end>In Expression(is Not)
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Where Clause()<edge_begin><edge_end>Expression()
Integer Expression(value)<edge_begin><edge_end>Value()
And Expression()<edge_begin><edge_end>Expression()
Null Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Set Clause()<edge_begin><edge_end>Update Item()
Delete Clause()<edge_begin><edge_end>From Clause()
In Query Expression()<edge_begin><edge_end>Select Statement()
Select Statement()<edge_begin><edge_end>Order Clause(is Asc, is Desc)
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
Having Clause()<edge_begin><edge_end>Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Select Expression()
Count Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Operator Expression(operator)<edge_begin><edge_end>Expression Term()
All Expression()<edge_begin><edge_end>Expression()
Update Statement()<edge_begin><edge_end>Query()
Between Expression(is Not)<edge_begin><edge_end>Expression()
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Delete Statement()<edge_begin><edge_end>Delete Clause()
Some Expression()<edge_begin><edge_end>Expression()
Null Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Unique Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Expr Equal(op)<edge_begin><edge_end>Expression()
Expr Bit(op)<edge_begin><edge_end>Expression()
Null Literal(literal)<edge_begin><edge_end>Literal Value()
Expr Add(op)<edge_begin><edge_end>Expression()
Drop Trigger Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Create View Statement(temporary)<edge_begin><edge_end>Select Statement()
Old Column()<edge_begin><edge_end>Column Source(name)
Create Table Statement(temporary)<edge_begin><edge_end>Table Definition(name)
Drop Trigger Statement(if Exists)<edge_begin><edge_end>Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)
Unique Table Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Select Core(op)<edge_begin><edge_end>Select Core Expression()
Insert Statement(conflict Resolution)<edge_begin><edge_end>DML Statement()
Alter Table Rename Statement()<edge_begin><edge_end>Table Definition(name)
Drop View Statement(if Exists)<edge_begin><edge_end>Create View Statement(temporary)
Literal()<edge_begin><edge_end>Literal Value()
Update Statement(conflict Resolution)<edge_begin><edge_end>Expression()
Unique Constraint()<edge_begin><edge_end>Column Constraint()
Function Argument()<edge_begin><edge_end>Function Arg(type, name)
Result Column()<edge_begin><edge_end>Expression()
Column Def(type)<edge_begin><edge_end>Column Source(name)
Default Constraint()<edge_begin><edge_end>Default Value()
Check Constraint()<edge_begin><edge_end>Expression()
Numeric Literal(number)<edge_begin><edge_end>Literal Value()
Function(all)<edge_begin><edge_end>DML Statement()
Expression Default Value()<edge_begin><edge_end>Default Value()
Single Source Join()<edge_begin><edge_end>Single Source()
Action Statement()<edge_begin><edge_end>Configuration Statement(name)
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Single Source()
String Literal(literal)<edge_begin><edge_end>Literal Value()
Check Constraint()<edge_begin><edge_end>Column Constraint()
Create Index Statement(unique, name)<edge_begin><edge_end>Table Definition(name)
Primary Constraint()<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DML Statement()
Create Table Statement(temporary)<edge_begin><edge_end>Column Source(name)
Having Expressions()<edge_begin><edge_end>Expression()
Current Time Stamp Literal(literal)<edge_begin><edge_end>Literal Value()
Expr Or(op)<edge_begin><edge_end>Expression()
Drop Index Statement(if Exists)<edge_begin><edge_end>Create Index Statement(unique, name)
Update Column Expression()<edge_begin><edge_end>Column Def(type)
Create View Statement(temporary)<edge_begin><edge_end>Table Definition(name)
Not Null()<edge_begin><edge_end>Expression()
Drop View Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Join Source()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>Expression()
Not Null Constraint()<edge_begin><edge_end>Column Constraint()
Function(all)<edge_begin><edge_end>Function Arg(type, name)
Expr And(op)<edge_begin><edge_end>Expression()
Select Statement()<edge_begin><edge_end>DML Statement()
Ordering Term(asc, desc)<edge_begin><edge_end>Expression()
Single Source Table()<edge_begin><edge_end>Table Definition(name)
Column Source Ref(all)<edge_begin><edge_end>Column Source(name)
Alter Table Add Column Statement()<edge_begin><edge_end>Column Source(name)
Select Statement Expression(not, exists)<edge_begin><edge_end>Expression()
Primary Key Column Constraint(asc, desc, autoincrement)<edge_begin><edge_end>Column Constraint()
Group By Expressions()<edge_begin><edge_end>Expression()
Select Statement Expression(not, exists)<edge_begin><edge_end>Select Statement()
Case Expression()<edge_begin><edge_end>Case()
Delete Statement()<edge_begin><edge_end>DML Statement()
Expr Concat(op)<edge_begin><edge_end>Expression()
Unique Table Constraint()<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Having Expressions()
Drop Table Statement(if Exists)<edge_begin><edge_end>Table Definition(name)
Ordering Term List()<edge_begin><edge_end>Ordering Term(asc, desc)
Is Null()<edge_begin><edge_end>Expression()
Database Block(name)<edge_begin><edge_end>Migration Block()
Expr Mult(op)<edge_begin><edge_end>Expression()
Insert Statement(conflict Resolution)<edge_begin><edge_end>Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Where Expressions()
Init Block()<edge_begin><edge_end>DDL Statement()
Cast Expression(type)<edge_begin><edge_end>Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Group By Expressions()
Literal Default Value()<edge_begin><edge_end>Literal Value()
Join Source()<edge_begin><edge_end>Single Source()
Old Column()<edge_begin><edge_end>Expression()
Null Check Expression()<edge_begin><edge_end>Expression()
Column Def(type)<edge_begin><edge_end>Column Constraint()
Where Expressions()<edge_begin><edge_end>Expression()
Column Source Ref(all)<edge_begin><edge_end>Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select Core Expression()
Content Uri(type)<edge_begin><edge_end>Content Uri Segment(name)
Default Constraint()<edge_begin><edge_end>Column Constraint()
Database Block(name)<edge_begin><edge_end>Init Block()
Literal()<edge_begin><edge_end>Expression()
Create Table Statement(temporary)<edge_begin><edge_end>Table Constraint(name)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Column Def(type)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Select Statement()
Nested Expression()<edge_begin><edge_end>Expression()
Single Source Join()<edge_begin><edge_end>Join Source()
New Column()<edge_begin><edge_end>Expression()
Alter Table Add Column Statement()<edge_begin><edge_end>DDL Statement()
Update Statement(conflict Resolution)<edge_begin><edge_end>DML Statement()
Expr Relate(op)<edge_begin><edge_end>Expression()
Function(all)<edge_begin><edge_end>Configuration Statement(name)
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DDL Statement()
Migration Block()<edge_begin><edge_end>DDL Statement()
Function Argument()<edge_begin><edge_end>Expression()
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Select Source(name)<edge_begin><edge_end>Single Source()
Indexed Column(collation Name, asc, desc)<edge_begin><edge_end>Column Def(type)
Update Statement(conflict Resolution)<edge_begin><edge_end>Update Column Expression()
Current Time Literal(literal)<edge_begin><edge_end>Literal Value()
Literal Default Value()<edge_begin><edge_end>Default Value()
Join Source()<edge_begin><edge_end>Join Statement(natural, left, outer, inner, cross)
Single Source Select Statement()<edge_begin><edge_end>Select Source(name)
Drop Index Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Alter Table Add Column Statement()<edge_begin><edge_end>Table Definition(name)
Database Block(name)<edge_begin><edge_end>Config Block()
Primary Constraint()<edge_begin><edge_end>Table Constraint(name)
Primary Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Current Date Literal(literal)<edge_begin><edge_end>Literal Value()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select List()
Not Null Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Result Column()<edge_begin><edge_end>Column Source(name)
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Expression()
Review(date)<edge_begin><edge_end>Labelled(lname)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Keyword(word)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Paper()
Review(date)<edge_begin><edge_end>Review Note(content)
Paper()<edge_begin><edge_end>Paragraph(content)
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Transition Root()<edge_begin><edge_end>Def Root()
Reaction Trigger()<edge_begin><edge_end>Guard()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
Import Scope()<edge_begin><edge_end>Import(imported Namespace)
State Root()<edge_begin><edge_end>State Specification()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Statechart Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>Def Root()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Root()<edge_begin><edge_end>Def Root()
Out Arc()<edge_begin><edge_end>Arc(weight)
In Arc()<edge_begin><edge_end>Place(token)
Petri Net()<edge_begin><edge_end>Place(token)
Out Arc()<edge_begin><edge_end>Place(token)
Transition()<edge_begin><edge_end>In Arc()
In Arc()<edge_begin><edge_end>Arc(weight)
Transition()<edge_begin><edge_end>Out Arc()
Petri Net()<edge_begin><edge_end>Transition()
Address Field()<edge_begin><edge_end>String Value(value)
Bibliography()<edge_begin><edge_end>Entry()
In Proceedings Entry()<edge_begin><edge_end>Editor Field()
Book Title Field()<edge_begin><edge_end>String Value(value)
Note Field()<edge_begin><edge_end>Field()
Organization Field()<edge_begin><edge_end>Field()
Article Entry()<edge_begin><edge_end>Number Field()
Entry()<edge_begin><edge_end>Keyword Field()
Article Entry()<edge_begin><edge_end>Eid Field()
Entry()<edge_begin><edge_end>Abstract Field()
Author()<edge_begin><edge_end>Person(first Name, second Name, last Name)
In Proceedings Entry()<edge_begin><edge_end>Address Field()
Title Field()<edge_begin><edge_end>Field()
Note Field()<edge_begin><edge_end>String Value(value)
In Proceedings Entry()<edge_begin><edge_end>Author Field()
Article Entry()<edge_begin><edge_end>Author Field()
Article Entry()<edge_begin><edge_end>Page Field()
Abstract Field()<edge_begin><edge_end>Field()
Publisher Field()<edge_begin><edge_end>String Value(value)
Volume Field()<edge_begin><edge_end>Field()
Review Field()<edge_begin><edge_end>String Value(value)
Page Field()<edge_begin><edge_end>Page()
Year Field()<edge_begin><edge_end>Field()
Review Field()<edge_begin><edge_end>Field()
Volume Field()<edge_begin><edge_end>Int Value(value)
Year Field()<edge_begin><edge_end>Year Value(value)
Keyword Field()<edge_begin><edge_end>Field()
Publisher Field()<edge_begin><edge_end>Field()
In Proceedings Entry()<edge_begin><edge_end>Year Field()
In Proceedings Entry()<edge_begin><edge_end>Book Title Field()
In Proceedings Entry()<edge_begin><edge_end>Volume Field()
Title Field()<edge_begin><edge_end>String Value(value)
Url Field()<edge_begin><edge_end>String Value(value)
Series Field()<edge_begin><edge_end>Field()
In Proceedings Entry()<edge_begin><edge_end>Publisher Field()
Article Entry()<edge_begin><edge_end>Part Field()
In Proceedings Entry()<edge_begin><edge_end>Entry()
In Proceedings Entry()<edge_begin><edge_end>Organization Field()
Page Field()<edge_begin><edge_end>Field()
Article Entry()<edge_begin><edge_end>Month Field()
Editor Field()<edge_begin><edge_end>Editor()
Author Field()<edge_begin><edge_end>Field()
Page()<edge_begin><edge_end>Int Value(value)
Journal Field()<edge_begin><edge_end>String Value(value)
Keyword()<edge_begin><edge_end>String Value(value)
Article Entry()<edge_begin><edge_end>Journal Field()
Number Field()<edge_begin><edge_end>Int Value(value)
In Proceedings Entry()<edge_begin><edge_end>Note Field()
Article Entry()<edge_begin><edge_end>Volume Field()
Part Field()<edge_begin><edge_end>Field()
In Proceedings Entry()<edge_begin><edge_end>Month Field()
Entry()<edge_begin><edge_end>Bibtex Key Field()
Part Field()<edge_begin><edge_end>Int Value(value)
Address Field()<edge_begin><edge_end>Field()
In Proceedings Entry()<edge_begin><edge_end>Series Field()
Abstract Field()<edge_begin><edge_end>String Value(value)
Entry()<edge_begin><edge_end>Url Field()
Eid Field()<edge_begin><edge_end>String Value(value)
Article Entry()<edge_begin><edge_end>Title Field()
Article Entry()<edge_begin><edge_end>Entry()
Series Field()<edge_begin><edge_end>String Value(value)
Author Field()<edge_begin><edge_end>Author()
Month Field()<edge_begin><edge_end>String Value(value)
In Proceedings Entry()<edge_begin><edge_end>Page Field()
Number Field()<edge_begin><edge_end>Field()
Database Model()<edge_begin><edge_end>Tag(name, documentation)
Database Model()<edge_begin><edge_end>Configuration()
Database Model()<edge_begin><edge_end>Named Element(name, documentation)
Named Element(name, documentation)<edge_begin><edge_end>Taggable()
Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)<edge_begin><edge_end>Named Element(name, documentation)
Taggable()<edge_begin><edge_end>Tag(name, documentation)
Table()<edge_begin><edge_end>Named Element(name, documentation)
Column(nullable, primary Key, size, scale, array Dimensions, unique)<edge_begin><edge_end>Data Type()
Table()<edge_begin><edge_end>Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)
Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)<edge_begin><edge_end>Column(nullable, primary Key, size, scale, array Dimensions, unique)
Data Type()<edge_begin><edge_end>Named Element(name, documentation)
Column(nullable, primary Key, size, scale, array Dimensions, unique)<edge_begin><edge_end>Named Element(name, documentation)
Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)<edge_begin><edge_end>Table()
Reaction()<edge_begin><edge_end>Trigger()
Transition()<edge_begin><edge_end>Reaction()
Statechart(domain ID)<edge_begin><edge_end>Composite Element()
Transition()<edge_begin><edge_end>Specification Element(specification)
Transition()<edge_begin><edge_end>Vertex()
Composite Element()<edge_begin><edge_end>Region()
Region()<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Regular State()
Statechart(domain ID)<edge_begin><edge_end>Reactive Element()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Region()<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart(domain ID)
Reaction()<edge_begin><edge_end>Reaction Property()
Pseudostate()<edge_begin><edge_end>Vertex()
Reactive Element()<edge_begin><edge_end>Reaction()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
Exit()<edge_begin><edge_end>Pseudostate()
Vertex()<edge_begin><edge_end>Region()
Vertex()<edge_begin><edge_end>Transition()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
Reaction()<edge_begin><edge_end>Effect()
State(type, is Initial, is Final)<edge_begin><edge_end>Transition(priority, type, is History)
Scope(id, label, interface Declaration)<edge_begin><edge_end>Action(delay, is Immediate, label)
Emission()<edge_begin><edge_end>Effect()
Assignment()<edge_begin><edge_end>Effect()
Scope(id, label, interface Declaration)<edge_begin><edge_end>Substitution(formal, actual)
State(type, is Initial, is Final)<edge_begin><edge_end>Scope(id, label, interface Declaration)
State(type, is Initial, is Final)<edge_begin><edge_end>Region()
Scope(id, label, interface Declaration)<edge_begin><edge_end>Parsable()
Action(delay, is Immediate, label)<edge_begin><edge_end>Effect()
Transition(priority, type, is History)<edge_begin><edge_end>State(type, is Initial, is Final)
Transition(priority, type, is History)<edge_begin><edge_end>Action(delay, is Immediate, label)
Text Effect()<edge_begin><edge_end>Effect()
Schema()<edge_begin><edge_end>Character Set(repertoire, default Collation, encoding)
Query Expression Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
Comment(description)<edge_begin><edge_end>SQL Object(description, label)
SQL Data Statement()<edge_begin><edge_end>SQL Statement()
User Defined Type Ordering(ordering Form, ordering Category)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Schema()<edge_begin><edge_end>Authorization Identifier()
Dependency(dependency Type)<edge_begin><edge_end>SQL Object(description, label)
SQL Statement Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>SQL Statement()
Authorization Identifier()<edge_begin><edge_end>Database(vendor, version)
Distinct User Defined Type()<edge_begin><edge_end>User Defined Type()
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>Source(body)
Search Condition Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
SQL Object(description, label)<edge_begin><edge_end>Comment(description)
Exact Numeric Data Type(scale)<edge_begin><edge_end>Numerical Data Type(precision)
Schema()<edge_begin><edge_end>User Defined Type()
SQL Statement Default(SQL)<edge_begin><edge_end>SQL Statement()
Derived Table()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Event(for, condition, action, enabled)<edge_begin><edge_end>SQL Object(description, label)
Unique Constraint(clustered)<edge_begin><edge_end>Foreign Key(match, on Update, on Delete)
Authorization Identifier()<edge_begin><edge_end>SQL Object(description, label)
Typed Element()<edge_begin><edge_end>User Defined Type()
User()<edge_begin><edge_end>Authorization Identifier()
Schema()<edge_begin><edge_end>Database(vendor, version)
Sequence()<edge_begin><edge_end>Schema()
Data Type()<edge_begin><edge_end>SQL Object(description, label)
Sequence()<edge_begin><edge_end>Identity Specifier(generation Type, start Value, increment, minimum, maximum, cycle Option)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>SQL Object(description, label)
Schema()<edge_begin><edge_end>Assertion()
User Defined Type()<edge_begin><edge_end>User Defined Type Ordering(ordering Form, ordering Category)
Base Table()<edge_begin><edge_end>Foreign Key(match, on Update, on Delete)
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Reference Constraint()<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Database(vendor, version)<edge_begin><edge_end>Schema()
Search Condition Default(SQL)<edge_begin><edge_end>Search Condition()
Element Type()<edge_begin><edge_end>Collection Data Type()
Table Constraint()<edge_begin><edge_end>Constraint(deferrable, initially Deferred, enforced)
Function(null Call, static, transform Group, type Preserving, mutator)<edge_begin><edge_end>Routine Result Table()
Catalog()<edge_begin><edge_end>Schema()
Object Extension()<edge_begin><edge_end>SQL Object(description, label)
Assertion()<edge_begin><edge_end>Search Condition()
SQL Session Statement()<edge_begin><edge_end>SQL Statement()
Database(vendor, version)<edge_begin><edge_end>Authorization Identifier()
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>Parameter(mode, locator)
Array Data Type(max Cardinality)<edge_begin><edge_end>Collection Data Type()
Schema()<edge_begin><edge_end>Index(clustered, fill Factor, unique, system Generated)
Group()<edge_begin><edge_end>Authorization Identifier()
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Value Expression()
Method(overriding, constructor)<edge_begin><edge_end>Function(null Call, static, transform Group, type Preserving, mutator)
Collection Data Type()<edge_begin><edge_end>Element Type()
Built In Function()<edge_begin><edge_end>Function(null Call, static, transform Group, type Preserving, mutator)
Derived Table()<edge_begin><edge_end>Query Expression()
Predefined Data Type(primitive Type)<edge_begin><edge_end>SQL Data Type()
Table Constraint()<edge_begin><edge_end>Base Table()
Numerical Data Type(precision)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Date Data Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)
Distinct User Defined Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Base Table()
SQL Transaction Statement()<edge_begin><edge_end>SQL Statement()
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Interval Data Type(leading Qualifier, trailing Qualifier, leading Field Precision, trailing Field Precision, fractional Seconds Precision)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>Schema()
Schema()<edge_begin><edge_end>Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)
Schema()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
SQL Connection Statement()<edge_begin><edge_end>SQL Statement()
Procedure(max Result Sets, old Save Point)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Collection Data Type()<edge_begin><edge_end>Constructed Data Type()
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>SQL Object(description, label)
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Date()
Event(for, condition, action, enabled)<edge_begin><edge_end>Database(vendor, version)
SQL Data Change Statement()<edge_begin><edge_end>SQL Data Statement()
Integer Data Type()<edge_begin><edge_end>Exact Numeric Data Type(scale)
Domain(default Value)<edge_begin><edge_end>Distinct User Defined Type()
Attribute Definition(scope Check, scope Checked, default Value)<edge_begin><edge_end>Typed Element()
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Index(clustered, fill Factor, unique, system Generated)
Privilege(grantable, action, with Hierarchy)<edge_begin><edge_end>SQL Object(description, label)
User Defined Function()<edge_begin><edge_end>Function(null Call, static, transform Group, type Preserving, mutator)
Query Expression Default(SQL)<edge_begin><edge_end>Query Expression()
Reference Data Type()<edge_begin><edge_end>Constructed Data Type()
Element Type()<edge_begin><edge_end>Typed Element()
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Schema()
Assertion()<edge_begin><edge_end>Base Table()
Group()<edge_begin><edge_end>User()
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Typed Element()
SQL Object(description, label)<edge_begin><edge_end>Dependency(dependency Type)
Check Constraint()<edge_begin><edge_end>Table Constraint()
Base Table()<edge_begin><edge_end>Table Constraint()
Schema()<edge_begin><edge_end>SQL Object(description, label)
Role Authorization(grantable)<edge_begin><edge_end>Role()
User Defined Type()<edge_begin><edge_end>Schema()
Boolean Data Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Value Expression Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
Structured User Defined Type(instantiable, final)<edge_begin><edge_end>User Defined Type()
Index Member(increment Type)<edge_begin><edge_end>Index Expression(sql)
Reference Data Type()<edge_begin><edge_end>Structured User Defined Type(instantiable, final)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Index(clustered, fill Factor, unique, system Generated)
Field(scope Check, scope Checked)<edge_begin><edge_end>Typed Element()
Value Expression Default(SQL)<edge_begin><edge_end>Value Expression()
Assertion()<edge_begin><edge_end>Constraint(deferrable, initially Deferred, enforced)
Privilege(grantable, action, with Hierarchy)<edge_begin><edge_end>Authorization Identifier()
SQL Schema Statement()<edge_begin><edge_end>SQL Statement()
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>SQL Object(description, label)
Function(null Call, static, transform Group, type Preserving, mutator)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Assertion()<edge_begin><edge_end>Schema()
Identity Specifier(generation Type, start Value, increment, minimum, maximum, cycle Option)<edge_begin><edge_end>SQL Object(description, label)
Index Expression(sql)<edge_begin><edge_end>SQL Object(description, label)
Parameter(mode, locator)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
SQL Dynamic Statement()<edge_begin><edge_end>SQL Statement()
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Search Condition()
Schema()<edge_begin><edge_end>Sequence()
Character String Data Type(length, coercibility, fixed Length, collation Name)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>Index Member(increment Type)
Character String Data Type(length, coercibility, fixed Length, collation Name)<edge_begin><edge_end>Character Set(repertoire, default Collation, encoding)
Primary Key()<edge_begin><edge_end>Unique Constraint(clustered)
Constructed Data Type()<edge_begin><edge_end>Data Type()
XML Data Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Base Table()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Binary String Data Type(length)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Role()<edge_begin><edge_end>Role Authorization(grantable)
Fixed Precision Data Type()<edge_begin><edge_end>Exact Numeric Data Type(scale)
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Identity Specifier(generation Type, start Value, increment, minimum, maximum, cycle Option)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Structured User Defined Type(instantiable, final)
Role()<edge_begin><edge_end>Authorization Identifier()
Database(vendor, version)<edge_begin><edge_end>Catalog()
User Defined Type()<edge_begin><edge_end>Data Type()
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>Schema()
Authorization Identifier()<edge_begin><edge_end>Privilege(grantable, action, with Hierarchy)
Source(body)<edge_begin><edge_end>SQL Object(description, label)
Schema()<edge_begin><edge_end>Catalog()
Structured User Defined Type(instantiable, final)<edge_begin><edge_end>Method(overriding, constructor)
Typed Element()<edge_begin><edge_end>SQL Object(description, label)
Database(vendor, version)<edge_begin><edge_end>Event(for, condition, action, enabled)
View Table(check Type)<edge_begin><edge_end>Derived Table()
Procedure(max Result Sets, old Save Point)<edge_begin><edge_end>Routine Result Table()
Persistent Table()<edge_begin><edge_end>Base Table()
Approximate Numeric Data Type()<edge_begin><edge_end>Numerical Data Type(precision)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Constraint(deferrable, initially Deferred, enforced)<edge_begin><edge_end>SQL Object(description, label)
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Reference Constraint()
Multiset Data Type()<edge_begin><edge_end>Collection Data Type()
Role Authorization(grantable)<edge_begin><edge_end>SQL Object(description, label)
SQL Object(description, label)<edge_begin><edge_end>Privilege(grantable, action, with Hierarchy)
Unique Constraint(clustered)<edge_begin><edge_end>Reference Constraint()
Domain(default Value)<edge_begin><edge_end>Check Constraint()
SQL Diagnostics Statement()<edge_begin><edge_end>SQL Statement()
Statemachine Owner()<edge_begin><edge_end>Statemachine(self Name, translation)
State(active)<edge_begin><edge_end>Statemachine Owner()
Abstract Node()<edge_begin><edge_end>Transition(operations)
State(active)<edge_begin><edge_end>State(active)
Junction()<edge_begin><edge_end>Abstract Node()
State(active)<edge_begin><edge_end>Abstract Node()
Statemachine(self Name, translation)<edge_begin><edge_end>Statemachine(self Name, translation)
Statemachine(self Name, translation)<edge_begin><edge_end>Transition(operations)
Initial()<edge_begin><edge_end>Abstract Node()
Transition(operations)<edge_begin><edge_end>Abstract Node()
Fork()<edge_begin><edge_end>Abstract Node()
Final()<edge_begin><edge_end>Abstract Node()
State(name)<edge_begin><edge_end>Self Event()
Guard Call(parameters)<edge_begin><edge_end>Guard(name)
Transition()<edge_begin><edge_end>Event(name)
Self Event()<edge_begin><edge_end>Guard Call(parameters)
State(name)<edge_begin><edge_end>State(name)
Self Event()<edge_begin><edge_end>Event(name)
Statemachine()<edge_begin><edge_end>Guard(name)
Transition()<edge_begin><edge_end>Guard Call(parameters)
State(name)<edge_begin><edge_end>Transition()
Guard(name)<edge_begin><edge_end>Parameter(name, type)
Statemachine()<edge_begin><edge_end>State(name)
State(name)<edge_begin><edge_end>Command(name)
Statemachine()<edge_begin><edge_end>Event(name)
Statemachine()<edge_begin><edge_end>Command(name)
Table(name)<edge_begin><edge_end>Schema(name)
Key(name)<edge_begin><edge_end>Column(name, type)
Table(name)<edge_begin><edge_end>Column(name, type)
Key(name)<edge_begin><edge_end>Table(name)
Foreign Key(name)<edge_begin><edge_end>Schema(name)
Schema(name)<edge_begin><edge_end>Foreign Key(name)
Foreign Key(name)<edge_begin><edge_end>Key(name)
Column(name, type)<edge_begin><edge_end>Key(name)
Foreign Key(name)<edge_begin><edge_end>Column(name, type)
Table(name)<edge_begin><edge_end>Key(name)
Schema(name)<edge_begin><edge_end>Table(name)
Key(name)<edge_begin><edge_end>Foreign Key(name)
Column(name, type)<edge_begin><edge_end>Table(name)
Foreign Key(name)<edge_begin><edge_end>Model Element(comment)
Database(name, url)<edge_begin><edge_end>Model Element(comment)
Schema(name)<edge_begin><edge_end>Database(name, url)
Table(name)<edge_begin><edge_end>Column(name, type, is Primary Key, is Unique)
Schema(name)<edge_begin><edge_end>Table(name)
Schema(name)<edge_begin><edge_end>Model Element(comment)
Table(name)<edge_begin><edge_end>Foreign Key(name)
Column(name, type, is Primary Key, is Unique)<edge_begin><edge_end>Table(name)
Table(name)<edge_begin><edge_end>Model Element(comment)
Database(name, url)<edge_begin><edge_end>Schema(name)
Column(name, type, is Primary Key, is Unique)<edge_begin><edge_end>Model Element(comment)
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Root()<edge_begin><edge_end>Def Root()
Reaction Trigger()<edge_begin><edge_end>Expression()
Real Literal(value)<edge_begin><edge_end>Literal()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Hex Literal(value)<edge_begin><edge_end>Literal()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Reaction Effect()<edge_begin><edge_end>Expression()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Def Root()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Logical And Expression()<edge_begin><edge_end>Expression()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Transition Root()<edge_begin><edge_end>Transition Specification()
Event Raising Expression()<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Foreign Key(name)<edge_begin><edge_end>Key(name)
Column(name, type)<edge_begin><edge_end>Table(name)
Foreign Key(name)<edge_begin><edge_end>Column(name, type)
Schema(name)<edge_begin><edge_end>Table(name)
Key(name)<edge_begin><edge_end>Table(name)
Key(name)<edge_begin><edge_end>Foreign Key(name)
Schema(name)<edge_begin><edge_end>Foreign Key(name)
Table(name)<edge_begin><edge_end>Column(name, type)
dummy()<edge_begin><edge_end>Schema(name)
Table(name)<edge_begin><edge_end>Key(name)
Table(name)<edge_begin><edge_end>Foreign Key(name)
Column(name, type)<edge_begin><edge_end>Key(name)
Column(name, type)<edge_begin><edge_end>Foreign Key(name)
Table(name)<edge_begin><edge_end>Schema(name)
Model Pattern(attribute Name)<edge_begin><edge_end>Pattern()
Segment()<edge_begin><edge_end>Style(applied Fonts, color)
Styling()<edge_begin><edge_end>Styling Model(mode Name)
Case Style()<edge_begin><edge_end>Icon(image)
Basic()<edge_begin><edge_end>Case Style()
String Parameter(value)<edge_begin><edge_end>Parameter(name)
Operation Pattern(operation)<edge_begin><edge_end>Pattern()
Operation Pattern(operation)<edge_begin><edge_end>Parameter(name)
Case Style()<edge_begin><edge_end>Segment()
Styling Model(mode Name)<edge_begin><edge_end>Basic()
Default()<edge_begin><edge_end>Case Style()
Styling Model(mode Name)<edge_begin><edge_end>Case Style()
E Object Parameter()<edge_begin><edge_end>Parameter(name)
Styling Predicate()<edge_begin><edge_end>Case Style()
Segment()<edge_begin><edge_end>Pattern()
Styling Model(mode Name)<edge_begin><edge_end>Default()
Book Article(section)<edge_begin><edge_end>Book(i SBN, volume, edition, series)
Biblio Reference()<edge_begin><edge_end>Content(body)
Journal Article()<edge_begin><edge_end>Journal Issue(volume, issue, issue Supplement)
Book Article(section)<edge_begin><edge_end>Article(first Page, last Page)
Web Resource(u RL)<edge_begin><edge_end>Biblio Reference()
Journal Issue(volume, issue, issue Supplement)<edge_begin><edge_end>Journal Article()
Book(i SBN, volume, edition, series)<edge_begin><edge_end>Book Article(section)
Journal Issue(volume, issue, issue Supplement)<edge_begin><edge_end>Journal(i SSN)
Thesis()<edge_begin><edge_end>Biblio Reference()
Biblio Reference()<edge_begin><edge_end>Indexing(keywords)
Biblio Reference Set()<edge_begin><edge_end>Simple Citation(author List, date, source)
Technical Report()<edge_begin><edge_end>Biblio Reference()
Biblio Reference()<edge_begin><edge_end>Simple Citation(author List, date, source)
Article(first Page, last Page)<edge_begin><edge_end>Biblio Reference()
Protocol()<edge_begin><edge_end>Biblio Reference()
Indexing(keywords)<edge_begin><edge_end>Biblio Reference()
Journal(i SSN)<edge_begin><edge_end>Biblio Reference()
Book(i SBN, volume, edition, series)<edge_begin><edge_end>Biblio Reference()
Variable()<edge_begin><edge_end>Declaration()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
Scope()<edge_begin><edge_end>Variable()
Statechart()<edge_begin><edge_end>Specification Element(specification)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
Entry(kind)<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
Choice(kind)<edge_begin><edge_end>Pseudostate()
Vertex()<edge_begin><edge_end>Transition()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Final State()<edge_begin><edge_end>Regular State()
Composite Element()<edge_begin><edge_end>Region()
Scope()<edge_begin><edge_end>Declaration()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
Transition()<edge_begin><edge_end>Reaction()
Transition()<edge_begin><edge_end>Vertex()
Region()<edge_begin><edge_end>Vertex()
Statechart()<edge_begin><edge_end>Reactive Element()
Synchronization()<edge_begin><edge_end>Pseudostate()
Exit()<edge_begin><edge_end>Pseudostate()
Scope()<edge_begin><edge_end>Event()
Regular State()<edge_begin><edge_end>Vertex()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Statechart()<edge_begin><edge_end>Composite Element()
Event()<edge_begin><edge_end>Declaration()
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Reaction Property()
Guard()<edge_begin><edge_end>Abstract Guard()
Transition()<edge_begin><edge_end>Abstract Action()
Transition()<edge_begin><edge_end>State()
Integer Assignement()<edge_begin><edge_end>Abstract Action()
State Machine Definition()<edge_begin><edge_end>Declaration Block()
State Machine Definition()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Abstract Guard()
Transition()<edge_begin><edge_end>Abstract Trigger()
Float Value(value)<edge_begin><edge_end>Value Type()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
H Link Elt()<edge_begin><edge_end>Para Content Elt()
Styles Elt()<edge_begin><edge_end>Word Document()
Pg Num()<edge_begin><edge_end>Run Content Elt()
Sect Pr Elt()<edge_begin><edge_end>Body Elt()
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Row Elt()<edge_begin><edge_end>Row Content Elt()
Table Elt()<edge_begin><edge_end>Table Grid Elt()
Table Pr Elt()<edge_begin><edge_end>Table Elt()
Table Content Elt()<edge_begin><edge_end>Run Level Elt()
Version Type(n, nn)<edge_begin><edge_end>Integer()
Break Elt(type)<edge_begin><edge_end>Run Content Elt()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Word Document()
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Cr()<edge_begin><edge_end>Run Content Elt()
Lists Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Block Level Elt()
Word Document()<edge_begin><edge_end>Smart Tags Collection()
Boolean Value(value)<edge_begin><edge_end>Value Type()
Symbol()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>String Property()
Tab()<edge_begin><edge_end>Tab Elt()
Custom Document Property(name)<edge_begin><edge_end>String()
Cf Chunk()<edge_begin><edge_end>Block Level Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
String Type(val)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Word Document()<edge_begin><edge_end>Doc Pr Elt()
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Table Cell Elt()<edge_begin><edge_end>Table Cell Pr Elt()
Para Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Table Cell Pr Elt()<edge_begin><edge_end>Table Cell Elt()
Del Text()<edge_begin><edge_end>String Type(val)
Boolean Value(value)<edge_begin><edge_end>Boolean()
Run Content Elt()<edge_begin><edge_end>Run Elt()
Row Content Elt()<edge_begin><edge_end>Row Elt()
Table Elt()<edge_begin><edge_end>Table Content Elt()
Symbol()<edge_begin><edge_end>Sym Elt()
Tab()<edge_begin><edge_end>Run Content Elt()
Table Cell Elt()<edge_begin><edge_end>Block Level Elt()
Smart Tags Collection()<edge_begin><edge_end>Word Document()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Row Elt()<edge_begin><edge_end>Table Row Pr Elt()
Run Elt()<edge_begin><edge_end>Run Pr Elt()
Endnote()<edge_begin><edge_end>Run Content Elt()
Fld Char()<edge_begin><edge_end>Run Content Elt()
Run Level Elt()<edge_begin><edge_end>Table Content Elt()
Para Pr Elt()<edge_begin><edge_end>Para Elt()
Sub Doc Elt()<edge_begin><edge_end>Para Content Elt()
Table Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Word Document()<edge_begin><edge_end>Custom Document Properties Collection()
Del Instr Text()<edge_begin><edge_end>Run Content Elt()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Text()<edge_begin><edge_end>String Type(val)
String Property()<edge_begin><edge_end>String Type(val)
Table Elt()<edge_begin><edge_end>Table Pr Elt()
Block Level Elt()<edge_begin><edge_end>Body Elt()
Row Elt()<edge_begin><edge_end>Table Pr Ex Elt()
Para Content Elt()<edge_begin><edge_end>Para Elt()
Table Cell Elt()<edge_begin><edge_end>Row Content Elt()
Table Row Pr Elt()<edge_begin><edge_end>Row Elt()
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Fonts List Elt()<edge_begin><edge_end>Word Document()
Word Document()<edge_begin><edge_end>Fonts List Elt()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
No Break Hyphen()<edge_begin><edge_end>Run Content Elt()
Run Elt()<edge_begin><edge_end>Run Content Elt()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Float Value(value)<edge_begin><edge_end>Double()
Del Text()<edge_begin><edge_end>Run Content Elt()
Table Pr Ex Elt()<edge_begin><edge_end>Row Elt()
Text()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Run Content Elt()
Annotation Ref()<edge_begin><edge_end>Run Content Elt()
Body Elt()<edge_begin><edge_end>Word Document()
Endnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Run Level Elt()<edge_begin><edge_end>Row Content Elt()
Para Elt()<edge_begin><edge_end>Para Pr Elt()
Para Elt()<edge_begin><edge_end>Para Content Elt()
Run Level Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Doc Pr Elt()<edge_begin><edge_end>Word Document()
Footnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Instr Text()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>Body Elt()
Note Elt(type, suppress Ref)<edge_begin><edge_end>Block Level Elt()
Body Elt()<edge_begin><edge_end>Sect Pr Elt()
Table Content Elt()<edge_begin><edge_end>Row Elt()
Block Level Elt()<edge_begin><edge_end>Table Cell Elt()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Endnote Ref()<edge_begin><edge_end>Run Content Elt()
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Word Document()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Abstract()<edge_begin><edge_end>Document()
Not Much()<edge_begin><edge_end>Overall Value()
Industrial Session()<edge_begin><edge_end>Conference Session()
Hotel fee()<edge_begin><edge_end>Fee()
conference setup()<edge_begin><edge_end>Thing()
Fee for extra trip()<edge_begin><edge_end>Fee()
Book proceeding()<edge_begin><edge_end>Publication()
Committee member()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Advocated Paper()<edge_begin><edge_end>Advocate()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Document()
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Text()<edge_begin><edge_end>Format()
Tax()<edge_begin><edge_end>Money()
Conference restaurant()<edge_begin><edge_end>Building()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Conference hall()<edge_begin><edge_end>Place()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
Presenter state()<edge_begin><edge_end>State()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Program Comitee Chair()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Committee()<edge_begin><edge_end>Chair()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Proceedings()<edge_begin><edge_end>Output Document()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Highly Practical()<edge_begin><edge_end>Paper Categorization()
Conflict Rules()<edge_begin><edge_end>Thing()
Closed Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Banquet()<edge_begin><edge_end>Social event()
Session Chair()<edge_begin><edge_end>PC Member()
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Conference Program()<edge_begin><edge_end>Domain Topic()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Closing Talk()<edge_begin><edge_end>Talk Event()
Member PC()<edge_begin><edge_end>Topic()
Departure()<edge_begin><edge_end>Activity after conference()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Lecture(has Acronym)<edge_begin><edge_end>String()
Coctail reception()<edge_begin><edge_end>Conference activity()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Proposed Conflict()<edge_begin><edge_end>Thing()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
IASTED non member()<edge_begin><edge_end>Delegate()
Value added tax()<edge_begin><edge_end>Tax()
Portable Reject()<edge_begin><edge_end>Reccommendation()
Positive Review()<edge_begin><edge_end>Review()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Co-Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
PC Member()<edge_begin><edge_end>Possible Reviewer()
Invited speaker()<edge_begin><edge_end>Conference contributor()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Item()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Advocated Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Non speaker()<edge_begin><edge_end>Delegate()
Approval Email()<edge_begin><edge_end>Email()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Deadline()<edge_begin><edge_end>date()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Long bool()
rejection notification email()<edge_begin><edge_end>notification email()
Conference Proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Senior Reviewer URL()<edge_begin><edge_end>URL()
Paper File()<edge_begin><edge_end>Domain Topic()
Program Comitee()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Program Committee()<edge_begin><edge_end>Committees()
Welcome address()<edge_begin><edge_end>Conference activity()
Negative Review()<edge_begin><edge_end>Review()
IASTED member()<edge_begin><edge_end>Delegate()
Power Point presentation()<edge_begin><edge_end>Presentation()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference part()<edge_begin><edge_end>Track-workshop chair()
Tutorial()<edge_begin><edge_end>Conference part()
managing of conference process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Reviewer Role()<edge_begin><edge_end>Role()
Document()<edge_begin><edge_end>Thing()
HTML()<edge_begin><edge_end>Format()
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Chair()<edge_begin><edge_end>Output Document()
Programme Brochure()<edge_begin><edge_end>Document()
Pending Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Reviewer Famliliarity()<edge_begin><edge_end>Review Values()
Security Topic()<edge_begin><edge_end>Topic()
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Submission event()<edge_begin><edge_end>Administrative event()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Accommodation Place()<edge_begin><edge_end>Place()
Submissions deadline()<edge_begin><edge_end>Deadline()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Administrator()
Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Review Committee()<edge_begin><edge_end>Committees()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Introduction of speaker()<edge_begin><edge_end>Introduction()
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Communications Topic()<edge_begin><edge_end>Topic()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Author information form()<edge_begin><edge_end>Form()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Advocate()<edge_begin><edge_end>Member(Web address)
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Sponsor company house()<edge_begin><edge_end>Building()
PC Members List()<edge_begin><edge_end>Output Document()
Meta-Review()<edge_begin><edge_end>Review()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Email Template()<edge_begin><edge_end>Event Setup()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Presentation()<edge_begin><edge_end>Active conference participant()
start date of conference()<edge_begin><edge_end>date of conference()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Web Site()<edge_begin><edge_end>Document()
Program chair()<edge_begin><edge_end>Conference Program()
Review()<edge_begin><edge_end>Thing()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Co-chair()<edge_begin><edge_end>Committee()
Planed Paper()<edge_begin><edge_end>Conference Program()
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Blocked Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Document()
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Deadline()<edge_begin><edge_end>Time()
Item()<edge_begin><edge_end>Time()
Review Form()<edge_begin><edge_end>Event Setup()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
paper assignment()<edge_begin><edge_end>Program Committee member()
Organizer()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Steering committee()<edge_begin><edge_end>Committee()
Program Comitee Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Call for paper()<edge_begin><edge_end>Conference document()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Conference hotel()<edge_begin><edge_end>Building()
Article()<edge_begin><edge_end>Abstract()
Meta-Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Conference part()<edge_begin><edge_end>Topic()
Textual Review Question()<edge_begin><edge_end>Review Question()
Introduction()<edge_begin><edge_end>Conference activity()
Feature Request()<edge_begin><edge_end>Help Request()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>unsigned Long()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Social Event()<edge_begin><edge_end>Non Academic Event()
Brief introduction for Session chair()<edge_begin><edge_end>Document()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
City()<edge_begin><edge_end>Thing()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Multimedia Topic()<edge_begin><edge_end>Topic()
Conference volume(has a location)<edge_begin><edge_end>Track()
Author Not Reviewer()<edge_begin><edge_end>Author()
Topic()<edge_begin><edge_end>Working event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Clear Reject()<edge_begin><edge_end>Reccommendation()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Review Values()<edge_begin><edge_end>Value Partition()
Chair()<edge_begin><edge_end>Thing()
SC Member()<edge_begin><edge_end>PC Member()
Cd proceening()<edge_begin><edge_end>Publication()
Meal Break()<edge_begin><edge_end>Break Event()
Chair URL()<edge_begin><edge_end>URL()
Session(room)<edge_begin><edge_end>Chair()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Camera Ready event()<edge_begin><edge_end>Administrative event()
acceptance notification email()<edge_begin><edge_end>notification email()
Conference Trip()<edge_begin><edge_end>Social Event()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
Speaker()<edge_begin><edge_end>Delegate()
Conference Participant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Company()<edge_begin><edge_end>Organization()
Workshop()<edge_begin><edge_end>Academic Event()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference volume(has a location)<edge_begin><edge_end>Committee()
Associated Chair()<edge_begin><edge_end>Chairman()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Member(Web address)<edge_begin><edge_end>String()
Conference www(has a URL)<edge_begin><edge_end>String()
Submission()<edge_begin><edge_end>Document()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Workshop()<edge_begin><edge_end>Scientific Event()
Multi-author Volume()<edge_begin><edge_end>Document()
Author Role()<edge_begin><edge_end>Role()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Evaluated Paper()<edge_begin><edge_end>Review()
Test Only Topic()<edge_begin><edge_end>Topic()
Pending Proposed Conflict()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Activity before conference()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Invited talk()<edge_begin><edge_end>Presentation()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Taxi()<edge_begin><edge_end>Transport vehicle()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
Regular Session()<edge_begin><edge_end>Session(room)
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Call for participation()<edge_begin><edge_end>Conference document()
Role()<edge_begin><edge_end>Thing()
Author book proceedings included()<edge_begin><edge_end>Author()
Corel Word Perfect()<edge_begin><edge_end>Format()
Invitation letter()<edge_begin><edge_end>Document()
Item()<edge_begin><edge_end>Thing()
Reception()<edge_begin><edge_end>Social Event()
Dinner banquet()<edge_begin><edge_end>Social program()
Chairman()<edge_begin><edge_end>Conference Member()
Co-Author()<edge_begin><edge_end>Author()
Delegate()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Committee Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Notification Email()<edge_begin><edge_end>Email()
summary of reviews()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Personal Publication History()<edge_begin><edge_end>Personal History()
User()<edge_begin><edge_end>Thing()
Research Topic()<edge_begin><edge_end>Thing()
Paper File()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>human(e-mail, last name, first name)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Program Comitee Meeting()<edge_begin><edge_end>Thing()
Help Request()<edge_begin><edge_end>Request()
Presentation()<edge_begin><edge_end>Conference activity()
PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Item()
Conference Chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
RTF()<edge_begin><edge_end>Format()
Possible Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Personal Review History()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>User()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Paper Author()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Worker lecturer()<edge_begin><edge_end>Lecturer()
Research()<edge_begin><edge_end>Activity before conference()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Publication()<edge_begin><edge_end>Item()
Performance Topic()<edge_begin><edge_end>Topic()
Departure tax()<edge_begin><edge_end>Tax()
Session(room)<edge_begin><edge_end>Thing()
Conference applicant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Active conference participant()<edge_begin><edge_end>Conference participant()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Program Comitee Chair()
Program Committee Chair()<edge_begin><edge_end>Review()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Time()
date of conference()<edge_begin><edge_end>date()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Chair()<edge_begin><edge_end>Committee member()
E-mail PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Paper Abstract()
Event URL()<edge_begin><edge_end>URL()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Co-Author()
Presenter()<edge_begin><edge_end>Author()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
Medicine Topic()<edge_begin><edge_end>Topic()
Long bool()<edge_begin><edge_end>Value Partition()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Time()
Hidden Conflict()<edge_begin><edge_end>Conflict Of Interest()
OC Member()<edge_begin><edge_end>Conference Participant()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Networking()<edge_begin><edge_end>Topics()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Contact Author(Alternate Email)
Administrator()<edge_begin><edge_end>User()
Topic()<edge_begin><edge_end>Thing()
Record of attendance()<edge_begin><edge_end>Document()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Overall Value()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Inforamtion()
Form()<edge_begin><edge_end>Document()
Session(room)<edge_begin><edge_end>Lecture(has Acronym)
Outside Referee()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Organizing Committee()<edge_begin><edge_end>Thing()
Hotel presenter()<edge_begin><edge_end>Delegate()
human(e-mail, last name, first name)<edge_begin><edge_end>Article()
Session(room)<edge_begin><edge_end>Slot(ends At, begins At)
Detail()<edge_begin><edge_end>Thing()
Track()<edge_begin><edge_end>Conference part()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Money()<edge_begin><edge_end>Item()
Rejection()<edge_begin><edge_end>Decision()
Contact Person URL()<edge_begin><edge_end>URL()
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Credit card()<edge_begin><edge_end>Card()
Associated Chair()<edge_begin><edge_end>Conference Member()
Government Organization()<edge_begin><edge_end>Organization()
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
program()<edge_begin><edge_end>Session(room)
end date of conference()<edge_begin><edge_end>date of conference()
Sponsor()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Event Approval()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Article()
Student lecturer()<edge_begin><edge_end>Lecturer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper Review(Comments for Author, Comments for Program Committee)
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Computer()<edge_begin><edge_end>Audiovisual equipment()
Item()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Antennas Topic()<edge_begin><edge_end>Topic()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
Flyer()<edge_begin><edge_end>Document()
Head Role()<edge_begin><edge_end>Role()
Author()<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Topic()
Coffee Break()<edge_begin><edge_end>Break Event()
Presentation()<edge_begin><edge_end>Conference contribution()
Member PC()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Author()<edge_begin><edge_end>Article()
Committee()<edge_begin><edge_end>Co-chair()
Paper File()<edge_begin><edge_end>Format()
Building()<edge_begin><edge_end>Place()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Money()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Accepted Paper()<edge_begin><edge_end>Session(room)
Program Committee()<edge_begin><edge_end>Thing()
Program()<edge_begin><edge_end>Output Document()
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
Output Document()<edge_begin><edge_end>Chair()
Must Accept()<edge_begin><edge_end>Reccommendation()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Academic Institution()<edge_begin><edge_end>Academic Institution()
Session(room)<edge_begin><edge_end>Scientific Event()
Final manuscript()<edge_begin><edge_end>Submission()
Accept Rating()<edge_begin><edge_end>Review Rating()
Listener()<edge_begin><edge_end>Delegate()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Research Topic()
Conference activity()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Chair()<edge_begin><edge_end>Committee()
Agency Staff Member()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Article()<edge_begin><edge_end>Document()
External Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Document()<edge_begin><edge_end>Document()
Tutorial()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Conference participant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Technic activity()<edge_begin><edge_end>Conference activity()
Talk Event()<edge_begin><edge_end>Academic Event()
Working event()<edge_begin><edge_end>Administrative event()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Program Committee Chair()<edge_begin><edge_end>Chairman()
notification()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Workshop()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Subject Area()
Programme()<edge_begin><edge_end>Document()
Paper Abstract()<edge_begin><edge_end>Contact Author()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
paper assignment()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Lecture(has Acronym)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Document()<edge_begin><edge_end>User()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Committe Role()<edge_begin><edge_end>Role()
Full day tour()<edge_begin><edge_end>Activity after conference()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Neutral Review()<edge_begin><edge_end>Review()
Camera Ready Copy()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Bidding And Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
Double hotel room()<edge_begin><edge_end>Hotel room()
Admin Role()<edge_begin><edge_end>Role()
Misc()<edge_begin><edge_end>Help Request()
Article()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Review preference(has a degree)<edge_begin><edge_end>Thing()
Conference contribution()<edge_begin><edge_end>Conference document()
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>String()
Email()<edge_begin><edge_end>Document()
Trip day()<edge_begin><edge_end>Time()
Academic Institution()<edge_begin><edge_end>Organisation()
Review()<edge_begin><edge_end>Evaluation()
Conference Dinner()<edge_begin><edge_end>Meal Event()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Pending Proposed Conflict()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Presenter house()<edge_begin><edge_end>Building()
Hotel room()<edge_begin><edge_end>Place()
Worker non speaker()<edge_begin><edge_end>Non speaker()
University()<edge_begin><edge_end>Academic Institution()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Money()<edge_begin><edge_end>Building()
Audiovisual equipment()<edge_begin><edge_end>Item()
Abstract()<edge_begin><edge_end>Article()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Integer()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
summary of reviews()<edge_begin><edge_end>Article()
Published Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Index Of Authors()<edge_begin><edge_end>Output Document()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Preview()<edge_begin><edge_end>Review Form()
Template()<edge_begin><edge_end>Document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Review()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>intensity()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Member PC()<edge_begin><edge_end>Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Topic()<edge_begin><edge_end>Conference part()
Slides()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Conference days()<edge_begin><edge_end>Time()
Abstract And Paper Submission Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Extended abstract()<edge_begin><edge_end>Regular contribution()
Reviewing results event()<edge_begin><edge_end>Administrative event()
Car()<edge_begin><edge_end>Transport vehicle()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Money()<edge_begin><edge_end>Thing()
Demo Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Rejection Email()<edge_begin><edge_end>Email()
bidding of reviewer()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
submission process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Presenter()<edge_begin><edge_end>Conference Participant()
Committee()<edge_begin><edge_end>User()
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
NGO()<edge_begin><edge_end>Organization()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>String()
Individual Presentation()<edge_begin><edge_end>Document()
Double Blind Review()<edge_begin><edge_end>Thing()
Registration()<edge_begin><edge_end>Conference activity()
Program Comitee Chair()<edge_begin><edge_end>Program Comitee()
Meal Menu()<edge_begin><edge_end>Document()
Organizing committee()<edge_begin><edge_end>Committee()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Dining Place()<edge_begin><edge_end>Place()
Contribution 1th-Author()<edge_begin><edge_end>Regular author()
Conference building()<edge_begin><edge_end>Building()
Bidding Without Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
date()<edge_begin><edge_end>Thing()
Sponzorship()<edge_begin><edge_end>Money()
Reviewed contribution()<edge_begin><edge_end>Review()
review form()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Presenter city()<edge_begin><edge_end>City()
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Paper Typologies()<edge_begin><edge_end>Event Setup()
Conference airport()<edge_begin><edge_end>Building()
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Workshop()<edge_begin><edge_end>Working event()
Program Comitee()<edge_begin><edge_end>Thing()
Organizer()<edge_begin><edge_end>Thing()
Reviewing event()<edge_begin><edge_end>Administrative event()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Domain Topic()
Session chair()<edge_begin><edge_end>Delegate()
Conference Proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Proceedings()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reccommendation()
Registration fee()<edge_begin><edge_end>Fee()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Review Form Setup()<edge_begin><edge_end>Review Form()
group email()<edge_begin><edge_end>Article()
Coffee break()<edge_begin><edge_end>Conference activity()
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Research Institute()<edge_begin><edge_end>Academic Institution()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Double Blind Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Session room()<edge_begin><edge_end>Place()
Working event()<edge_begin><edge_end>Topic()
Author()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference Session()<edge_begin><edge_end>Session(room)
Track()<edge_begin><edge_end>Scientific Event()
List Of Abstracts()<edge_begin><edge_end>Output Document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Paper Status()
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Place()<edge_begin><edge_end>Thing()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Session(room)<edge_begin><edge_end>Accepted Paper()
Academia Organization()<edge_begin><edge_end>Organization()
Session(room)<edge_begin><edge_end>String()
notification()<edge_begin><edge_end>Article()
Overall Value()<edge_begin><edge_end>Review Values()
Committees()<edge_begin><edge_end>Domain Topic()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
Assistant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Poster Session()<edge_begin><edge_end>Session(room)
Proceedings()<edge_begin><edge_end>Multi-author Volume()
RFC()<edge_begin><edge_end>Topics()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Boolean()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Slot(ends At, begins At)<edge_begin><edge_end>Thing()
MS Word()<edge_begin><edge_end>Format()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Review()
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Science Worker()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Assistance()<edge_begin><edge_end>Help Request()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Criterion(has Weight)<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Track-workshop chair()<edge_begin><edge_end>Conference part()
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
Slide Set()<edge_begin><edge_end>Document()
Meal Event()<edge_begin><edge_end>Non Academic Event()
PC Chair()<edge_begin><edge_end>PC Member()
Conference Program()<edge_begin><edge_end>Planed Paper()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
Topics()<edge_begin><edge_end>Value Partition()
Student registration fee()<edge_begin><edge_end>Registration fee()
Review()<edge_begin><edge_end>Reviewed contribution()
Account()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Source Archive()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Active conference participant()<edge_begin><edge_end>Presentation()
Tip()<edge_begin><edge_end>Money()
Paper Question()<edge_begin><edge_end>Question()
program()<edge_begin><edge_end>Chair()
Workshop Chair()<edge_begin><edge_end>PC Member()
Abstract()<edge_begin><edge_end>Thing()
Student()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Administrator()<edge_begin><edge_end>Thing()
Payment document()<edge_begin><edge_end>Document()
Article()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
High()<edge_begin><edge_end>Reviewer Famliliarity()
Author()<edge_begin><edge_end>Speaker()
Conference Proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Criterion(has Weight)<edge_begin><edge_end>double()
Lecturer()<edge_begin><edge_end>Author()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Conference document()
Administrator()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Technical commitee()<edge_begin><edge_end>Delegate()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
Event Creation()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Conference Banquet()<edge_begin><edge_end>Social Event()
Conference volume(has a location)<edge_begin><edge_end>String()
Speaker()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Review preference(has a degree)<edge_begin><edge_end>Integer()
Break Event()<edge_begin><edge_end>Non Academic Event()
Poster()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Administrative event()<edge_begin><edge_end>Administrative event()
conference setup()<edge_begin><edge_end>URL()
Meal Menu()<edge_begin><edge_end>Meal Event()
Article()<edge_begin><edge_end>human(e-mail, last name, first name)
Written contribution()<edge_begin><edge_end>Conference contribution()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
Document()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Registration form()<edge_begin><edge_end>Form()
review form()<edge_begin><edge_end>Article()
Reviewed Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Co-chair()<edge_begin><edge_end>Committee member()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Double Blind Review()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Organizing Committee()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Initial manuscipt()<edge_begin><edge_end>Submission()
Advocate()<edge_begin><edge_end>Advocated Paper()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
full paper submission date()<edge_begin><edge_end>date()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Social program()<edge_begin><edge_end>Conference activity()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Invitation Of Reviewers Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Sponsor state()<edge_begin><edge_end>State()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Program Comitee()
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Money()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Session(room)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Meeting Room Place()<edge_begin><edge_end>Place()
Free Time Break()<edge_begin><edge_end>Break Event()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Card()<edge_begin><edge_end>Item()
Short Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Abstract()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Information for participants()<edge_begin><edge_end>Conference document()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
Research Topic()<edge_begin><edge_end>Thing()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Article()
Transparency()<edge_begin><edge_end>Document()
Conference contributor()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Post Script()<edge_begin><edge_end>Format()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Activity after conference()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Conference document()<edge_begin><edge_end>date()
Rated Papers()<edge_begin><edge_end>Active Paper()
Chair PC()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Chair()
Student non speaker()<edge_begin><edge_end>Non speaker()
Chairman()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Demo Chair()<edge_begin><edge_end>Conference Participant()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Assigned Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Acceptance()<edge_begin><edge_end>Decision()
Paper Abstract()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Chair()<edge_begin><edge_end>program()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Conference Hiker()<edge_begin><edge_end>Delegate()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Committee Member()<edge_begin><edge_end>Organizer()
Deleted Conflict()<edge_begin><edge_end>Conflict Of Interest()
Member(Web address)<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Main office()<edge_begin><edge_end>Place()
Program Comitee Chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Cheque()<edge_begin><edge_end>Payment document()
Senior Program Committee member()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Contribution co-Author()<edge_begin><edge_end>Regular author()
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Organising Agency()<edge_begin><edge_end>Organisation()
Invited Speaker()<edge_begin><edge_end>Presenter()
Author cd proceedings included()<edge_begin><edge_end>Author()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
Speaker lecture()<edge_begin><edge_end>Session(room)
Workshop()<edge_begin><edge_end>Conference part()
Contributed Talk()<edge_begin><edge_end>Document()
Classic Papers()<edge_begin><edge_end>Topics()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Video presentation()<edge_begin><edge_end>Presentation()
Conference Venue Place()<edge_begin><edge_end>Place()
camera-ready submission date()<edge_begin><edge_end>date()
Scholar()<edge_begin><edge_end>University()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Request()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Transport vehicle()<edge_begin><edge_end>Item()
Author()<edge_begin><edge_end>Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)
Output Document()<edge_begin><edge_end>Thing()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conflict Of Interest()<edge_begin><edge_end>Thing()
University()<edge_begin><edge_end>Organization()
Workshop Session()<edge_begin><edge_end>Session(room)
conference setup()<edge_begin><edge_end>date()
Program Comitee Chair()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Evaluation()<edge_begin><edge_end>Review()
abstract submission date()<edge_begin><edge_end>date()
Paper Presentation()<edge_begin><edge_end>Academic Event()
User()<edge_begin><edge_end>Document()
Contact Author()<edge_begin><edge_end>Author()
Tutorial Chair()<edge_begin><edge_end>PC Member()
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
date of notification()<edge_begin><edge_end>date()
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Mailing list()<edge_begin><edge_end>Document()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Marginal Tend to Reject()<edge_begin><edge_end>Reccommendation()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Presenter city()
Simulating()<edge_begin><edge_end>Research()
Sponsor city()<edge_begin><edge_end>City()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Format()<edge_begin><edge_end>Value Partition()
Plenary lecture speaker()<edge_begin><edge_end>Author()
Humour()<edge_begin><edge_end>Topics()
Proceedings()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Article()
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Chair()<edge_begin><edge_end>Session(room)
Adobe PDF()<edge_begin><edge_end>Format()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Computer Science()<edge_begin><edge_end>Topics()
notification email()<edge_begin><edge_end>Article()
conference setup()<edge_begin><edge_end>Topic()
Viza()<edge_begin><edge_end>Document()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper File()
Tutorial Abstract()<edge_begin><edge_end>Abstract()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Important dates()<edge_begin><edge_end>date()
Assignment Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Bidding Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Review()<edge_begin><edge_end>Conference document()
Html()<edge_begin><edge_end>URI()
Tr()<edge_begin><edge_end>Attrs()
Select(multiple, disabled)<edge_begin><edge_end>Boolean()
Dfn()<edge_begin><edge_end>Attrs()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Number()
Style Sheet()<edge_begin><edge_end>CDATA()
Script(defer, xml:space)<edge_begin><edge_end>Content Type()
Span()<edge_begin><edge_end>Attrs()
Fontstyle()<edge_begin><edge_end>Pre Content()
Th(scope)<edge_begin><edge_end>IDREFS()
Body()<edge_begin><edge_end>Attrs()
Var()<edge_begin><edge_end>Phrase()
Dfn()<edge_begin><edge_end>Inline()
Div()<edge_begin><edge_end>Button Content()
Core Attrs()<edge_begin><edge_end>Style Sheet()
Script(defer, xml:space)<edge_begin><edge_end>Head Misc()
Option(selected, disabled)<edge_begin><edge_end>Attrs()
Title()<edge_begin><edge_end>ID()
P()<edge_begin><edge_end>Attrs()
Small()<edge_begin><edge_end>Inline()
P()<edge_begin><edge_end>Inline()
Head()<edge_begin><edge_end>I18n(dir)
Var()<edge_begin><edge_end>Inline()
Address()<edge_begin><edge_end>Inline()
Link()<edge_begin><edge_end>Content Type()
Ins()<edge_begin><edge_end>Datetime()
Title Base Head Element()<edge_begin><edge_end>Title()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>URI()
P()<edge_begin><edge_end>Button Content()
Col()<edge_begin><edge_end>Cellhalign(align)
Th(scope)<edge_begin><edge_end>Attrs()
H2()<edge_begin><edge_end>Attrs()
Label()<edge_begin><edge_end>Character()
Select(multiple, disabled)<edge_begin><edge_end>Number()
Big()<edge_begin><edge_end>Inline()
Code()<edge_begin><edge_end>Phrase()
B()<edge_begin><edge_end>Fontstyle()
Button(type, disabled)<edge_begin><edge_end>Inlineforms()
Inlineforms()<edge_begin><edge_end>Pre Content()
Optgroup(disabled)<edge_begin><edge_end>Option(selected, disabled)
Form(method)<edge_begin><edge_end>Attrs()
Dl()<edge_begin><edge_end>Attrs()
Form(method)<edge_begin><edge_end>Object Element()
Form(method)<edge_begin><edge_end>Content Types()
Cite()<edge_begin><edge_end>Inline()
Core Attrs()<edge_begin><edge_end>Text()
Img(ismap)<edge_begin><edge_end>EMPTY()
Cellhalign(align)<edge_begin><edge_end>Length()
Sup()<edge_begin><edge_end>Attrs()
Style(xml:space)<edge_begin><edge_end>PCDATA()
Map()<edge_begin><edge_end>CDATA()
Fieldset Element()<edge_begin><edge_end>PCDATA()
ID()<edge_begin><edge_end>Valued Element(value)
block()<edge_begin><edge_end>Fieldset Element()
IDREF()<edge_begin><edge_end>Valued Element(value)
Col()<edge_begin><edge_end>Number()
H1()<edge_begin><edge_end>Heading()
Phrase()<edge_begin><edge_end>A Content()
Blockquote()<edge_begin><edge_end>Attrs()
Small()<edge_begin><edge_end>Fontstyle()
H6()<edge_begin><edge_end>Inline()
Col()<edge_begin><edge_end>Multi Length()
Abbr()<edge_begin><edge_end>Phrase()
Text()<edge_begin><edge_end>CDATA()
Acronym()<edge_begin><edge_end>Phrase()
Label()<edge_begin><edge_end>Inlineforms()
Uri List()<edge_begin><edge_end>URI()
H4()<edge_begin><edge_end>Heading()
Fontstyle()<edge_begin><edge_end>Button Content()
Object(declare)<edge_begin><edge_end>NMTOKEN()
Valued Element(value)<edge_begin><edge_end>String()
Div()<edge_begin><edge_end>Flow()
Focus()<edge_begin><edge_end>Script Expression()
Meta()<edge_begin><edge_end>EMPTY()
Script(defer, xml:space)<edge_begin><edge_end>Miscinline()
Tfoot()<edge_begin><edge_end>Tr()
Misc()<edge_begin><edge_end>Button Content()
Kbd()<edge_begin><edge_end>Attrs()
Table(frame, rules)<edge_begin><edge_end>block()
NMTOKEN()<edge_begin><edge_end>Valued Element(value)
Blockquote()<edge_begin><edge_end>Blocktext()
Map()<edge_begin><edge_end>Map Content()
Param(valuetype)<edge_begin><edge_end>Object Element()
inline()<edge_begin><edge_end>Inline()
Table(frame, rules)<edge_begin><edge_end>Button Content()
Label()<edge_begin><edge_end>Script Expression()
Ol()<edge_begin><edge_end>Lists()
Img(ismap)<edge_begin><edge_end>Text()
Area(shape, nohref)<edge_begin><edge_end>Map Element()
Heading()<edge_begin><edge_end>Button Content()
Optgroup(disabled)<edge_begin><edge_end>Attrs()
Col Element()<edge_begin><edge_end>Colgroup()
Col()<edge_begin><edge_end>EMPTY()
Form(method)<edge_begin><edge_end>Charsets()
block()<edge_begin><edge_end>Flow()
Table Element()<edge_begin><edge_end>Tbody()
H1()<edge_begin><edge_end>Inline()
Table(frame, rules)<edge_begin><edge_end>Length()
Q()<edge_begin><edge_end>Attrs()
Map()<edge_begin><edge_end>Style Sheet()
Table(frame, rules)<edge_begin><edge_end>Caption()
Base()<edge_begin><edge_end>EMPTY()
Form(method)<edge_begin><edge_end>Form Content()
Body()<edge_begin><edge_end>Block()
A(shape)<edge_begin><edge_end>Focus()
Core Attrs()<edge_begin><edge_end>ID()
Table(frame, rules)<edge_begin><edge_end>Table Element()
Textarea(disabled, readonly)<edge_begin><edge_end>Script Expression()
Select(multiple, disabled)<edge_begin><edge_end>CDATA()
Body()<edge_begin><edge_end>Script Expression()
Object(declare)<edge_begin><edge_end>Number()
Colgroup()<edge_begin><edge_end>Attrs()
Link()<edge_begin><edge_end>URI()
Base()<edge_begin><edge_end>URI()
Img(ismap)<edge_begin><edge_end>Attrs()
Thead()<edge_begin><edge_end>Cellhalign(align)
Optgroup(disabled)<edge_begin><edge_end>Select Element()
H3()<edge_begin><edge_end>Heading()
Inline()<edge_begin><edge_end>Flow()
Param(valuetype)<edge_begin><edge_end>CDATA()
Option(selected, disabled)<edge_begin><edge_end>CDATA()
Tr()<edge_begin><edge_end>Cellvalign(valign)
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Inlineforms()
Script(defer, xml:space)<edge_begin><edge_end>String()
Coords()<edge_begin><edge_end>Length()
H2()<edge_begin><edge_end>Inline()
Span()<edge_begin><edge_end>Specialpre()
Base Head Element()<edge_begin><edge_end>Title Base Head Element()
Del()<edge_begin><edge_end>Datetime()
H3()<edge_begin><edge_end>Inline()
Strong()<edge_begin><edge_end>Attrs()
Th(scope)<edge_begin><edge_end>CDATA()
Area(shape, nohref)<edge_begin><edge_end>Focus()
block()<edge_begin><edge_end>Object Element()
Flow()<edge_begin><edge_end>PCDATA()
Ul()<edge_begin><edge_end>Lists()
Th(scope)<edge_begin><edge_end>Tr Element()
Big()<edge_begin><edge_end>Attrs()
Fontstyle()<edge_begin><edge_end>inline()
URI()<edge_begin><edge_end>CDATA()
Select(multiple, disabled)<edge_begin><edge_end>Script Expression()
Area(shape, nohref)<edge_begin><edge_end>Text()
Td(scope)<edge_begin><edge_end>Cellvalign(valign)
Lists()<edge_begin><edge_end>block()
Ins()<edge_begin><edge_end>Miscinline()
Bdo(dir)<edge_begin><edge_end>Inline()
Map()<edge_begin><edge_end>ID()
Legend()<edge_begin><edge_end>Fieldset Element()
A(shape)<edge_begin><edge_end>NMTOKEN()
Dd()<edge_begin><edge_end>Dl Element()
Abbr()<edge_begin><edge_end>Attrs()
Textarea(disabled, readonly)<edge_begin><edge_end>Focus()
Style(xml:space)<edge_begin><edge_end>Text()
P()<edge_begin><edge_end>block()
Em()<edge_begin><edge_end>Inline()
Form(method)<edge_begin><edge_end>Fieldset Element()
Object(declare)<edge_begin><edge_end>URI()
Style(xml:space)<edge_begin><edge_end>I18n(dir)
Thead()<edge_begin><edge_end>Attrs()
Tbody()<edge_begin><edge_end>Cellhalign(align)
Sub()<edge_begin><edge_end>Phrase()
Style(xml:space)<edge_begin><edge_end>Media Desc()
Label()<edge_begin><edge_end>IDREF()
Legend()<edge_begin><edge_end>Inline()
Tfoot()<edge_begin><edge_end>Attrs()
Li()<edge_begin><edge_end>Attrs()
Special()<edge_begin><edge_end>inline()
Colgroup()<edge_begin><edge_end>Col()
B()<edge_begin><edge_end>Attrs()
Tfoot()<edge_begin><edge_end>Cellvalign(valign)
Misc()<edge_begin><edge_end>Flow()
Thead()<edge_begin><edge_end>Cellvalign(valign)
Misc()<edge_begin><edge_end>Block()
Specialpre()<edge_begin><edge_end>Special()
Pre(xml:space)<edge_begin><edge_end>Attrs()
Dt()<edge_begin><edge_end>Inline()
Map()<edge_begin><edge_end>Specialpre()
A(shape)<edge_begin><edge_end>A Content()
Link Types()<edge_begin><edge_end>CDATA()
Script(defer, xml:space)<edge_begin><edge_end>PCDATA()
Object(declare)<edge_begin><edge_end>Uri List()
Ol()<edge_begin><edge_end>Li()
Title()<edge_begin><edge_end>I18n(dir)
Select(multiple, disabled)<edge_begin><edge_end>Select Element()
I()<edge_begin><edge_end>Inline()
Special()<edge_begin><edge_end>Button Content()
Map()<edge_begin><edge_end>NMTOKEN()
Head()<edge_begin><edge_end>ID()
Small()<edge_begin><edge_end>Attrs()
PCDATA()<edge_begin><edge_end>Valued Element(value)
A(shape)<edge_begin><edge_end>Link Types()
Ul()<edge_begin><edge_end>Li()
IDREFS()<edge_begin><edge_end>IDREF()
Cite()<edge_begin><edge_end>Attrs()
Object(declare)<edge_begin><edge_end>Length()
Content Type()<edge_begin><edge_end>CDATA()
Em()<edge_begin><edge_end>Attrs()
Inlineforms()<edge_begin><edge_end>inline()
Blockquote()<edge_begin><edge_end>Block()
Button(type, disabled)<edge_begin><edge_end>Attrs()
Focus()<edge_begin><edge_end>Character()
Hr()<edge_begin><edge_end>EMPTY()
Dt()<edge_begin><edge_end>Dl Element()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Focus()
A(shape)<edge_begin><edge_end>Coords()
Map()<edge_begin><edge_end>I18n(dir)
Colgroup()<edge_begin><edge_end>Cellvalign(valign)
Head()<edge_begin><edge_end>Head Element()
Button(type, disabled)<edge_begin><edge_end>Button Content()
Ul()<edge_begin><edge_end>Attrs()
A Content()<edge_begin><edge_end>PCDATA()
Textarea(disabled, readonly)<edge_begin><edge_end>Inlineforms()
Hr()<edge_begin><edge_end>Blocktext()
Td(scope)<edge_begin><edge_end>CDATA()
Miscinline()<edge_begin><edge_end>A Content()
Area(shape, nohref)<edge_begin><edge_end>EMPTY()
Br()<edge_begin><edge_end>Core Attrs()
Form(method)<edge_begin><edge_end>URI()
Div()<edge_begin><edge_end>Attrs()
Content Types()<edge_begin><edge_end>Content Type()
Label()<edge_begin><edge_end>Attrs()
H1()<edge_begin><edge_end>Attrs()
Param(valuetype)<edge_begin><edge_end>EMPTY()
Ins()<edge_begin><edge_end>Attrs()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Script Expression()
Object(declare)<edge_begin><edge_end>Content Type()
Map()<edge_begin><edge_end>Text()
A(shape)<edge_begin><edge_end>Content Type()
Button(type, disabled)<edge_begin><edge_end>Focus()
Link()<edge_begin><edge_end>Language Code()
Object(declare)<edge_begin><edge_end>Boolean()
Attrs()<edge_begin><edge_end>I18n(dir)
Abbr()<edge_begin><edge_end>Inline()
H4()<edge_begin><edge_end>Attrs()
Colgroup()<edge_begin><edge_end>Multi Length()
Form(method)<edge_begin><edge_end>Block()
A(shape)<edge_begin><edge_end>inline()
Param(valuetype)<edge_begin><edge_end>ID()
Em()<edge_begin><edge_end>Phrase()
Table(frame, rules)<edge_begin><edge_end>Col Element()
Option(selected, disabled)<edge_begin><edge_end>Text()
Fieldset()<edge_begin><edge_end>Fieldset Element()
Span()<edge_begin><edge_end>Inline()
Form(method)<edge_begin><edge_end>Script Expression()
Code()<edge_begin><edge_end>Inline()
Title Head Element()<edge_begin><edge_end>Title()
Col()<edge_begin><edge_end>Attrs()
Li()<edge_begin><edge_end>Flow()
Link()<edge_begin><edge_end>Media Desc()
Sub()<edge_begin><edge_end>Attrs()
Misc()<edge_begin><edge_end>Fieldset Element()
Th(scope)<edge_begin><edge_end>Text()
Del()<edge_begin><edge_end>Attrs()
Inline()<edge_begin><edge_end>Object Element()
Param(valuetype)<edge_begin><edge_end>Content Type()
Title Base Head Element()<edge_begin><edge_end>Head Misc()
Tfoot()<edge_begin><edge_end>Cellhalign(align)
Select(multiple, disabled)<edge_begin><edge_end>Inlineforms()
Inline()<edge_begin><edge_end>Fieldset Element()
Colgroup()<edge_begin><edge_end>Number()
Bdo(dir)<edge_begin><edge_end>Core Attrs()
Script(defer, xml:space)<edge_begin><edge_end>Charset()
Core Attrs()<edge_begin><edge_end>CDATA()
Attrs()<edge_begin><edge_end>Core Attrs()
Td(scope)<edge_begin><edge_end>Tr Element()
Meta()<edge_begin><edge_end>I18n(dir)
Img(ismap)<edge_begin><edge_end>URI()
Blocktext()<edge_begin><edge_end>Button Content()
H4()<edge_begin><edge_end>Inline()
Del()<edge_begin><edge_end>Flow()
Pre Content()<edge_begin><edge_end>PCDATA()
block()<edge_begin><edge_end>Form Content()
Address()<edge_begin><edge_end>Attrs()
Charsets()<edge_begin><edge_end>Charset()
Multi Length()<edge_begin><edge_end>CDATA()
Cite()<edge_begin><edge_end>Phrase()
Object(declare)<edge_begin><edge_end>Text()
Meta()<edge_begin><edge_end>CDATA()
Legend()<edge_begin><edge_end>Character()
Br()<edge_begin><edge_end>EMPTY()
Object(declare)<edge_begin><edge_end>Head Misc()
Sup()<edge_begin><edge_end>Phrase()
Link()<edge_begin><edge_end>EMPTY()
H5()<edge_begin><edge_end>Inline()
A(shape)<edge_begin><edge_end>Language Code()
Link()<edge_begin><edge_end>Head Misc()
Miscinline()<edge_begin><edge_end>Inline()
Script(defer, xml:space)<edge_begin><edge_end>URI()
Th(scope)<edge_begin><edge_end>Cellhalign(align)
Td(scope)<edge_begin><edge_end>Cellhalign(align)
Character()<edge_begin><edge_end>CDATA()
Strong()<edge_begin><edge_end>Inline()
Miscinline()<edge_begin><edge_end>Misc()
Script Expression()<edge_begin><edge_end>CDATA()
Button(type, disabled)<edge_begin><edge_end>Boolean()
Pixels()<edge_begin><edge_end>CDATA()
Area(shape, nohref)<edge_begin><edge_end>Boolean()
Style(xml:space)<edge_begin><edge_end>ID()
Thead()<edge_begin><edge_end>Tr()
Area(shape, nohref)<edge_begin><edge_end>Attrs()
Optgroup(disabled)<edge_begin><edge_end>Text()
Tr()<edge_begin><edge_end>Cellhalign(align)
Q()<edge_begin><edge_end>URI()
I()<edge_begin><edge_end>Attrs()
Br()<edge_begin><edge_end>Specialpre()
Title Head Element()<edge_begin><edge_end>Base Title Head Element()
Label()<edge_begin><edge_end>Inline()
Col Element()<edge_begin><edge_end>Col()
Dd()<edge_begin><edge_end>Flow()
Title Head Element()<edge_begin><edge_end>Head Element()
Inline()<edge_begin><edge_end>PCDATA()
block()<edge_begin><edge_end>Block()
Textarea(disabled, readonly)<edge_begin><edge_end>PCDATA()
Events()<edge_begin><edge_end>Script Expression()
Misc()<edge_begin><edge_end>Map Element Content()
Link()<edge_begin><edge_end>Charset()
Table Element()<edge_begin><edge_end>Tr()
Heading()<edge_begin><edge_end>block()
Bdo(dir)<edge_begin><edge_end>Specialpre()
Tbody()<edge_begin><edge_end>Cellvalign(valign)
H3()<edge_begin><edge_end>Attrs()
Media Desc()<edge_begin><edge_end>CDATA()
Select(multiple, disabled)<edge_begin><edge_end>Attrs()
Strong()<edge_begin><edge_end>Phrase()
Noscript()<edge_begin><edge_end>Attrs()
Del()<edge_begin><edge_end>URI()
Misc()<edge_begin><edge_end>Object Element()
Del()<edge_begin><edge_end>Miscinline()
Pre(xml:space)<edge_begin><edge_end>Pre Content()
Link()<edge_begin><edge_end>Attrs()
Meta()<edge_begin><edge_end>ID()
Legend()<edge_begin><edge_end>Attrs()
Phrase()<edge_begin><edge_end>inline()
Option(selected, disabled)<edge_begin><edge_end>Select Element()
Acronym()<edge_begin><edge_end>Inline()
Table(frame, rules)<edge_begin><edge_end>Tfoot()
Datetime()<edge_begin><edge_end>CDATA()
Blocktext()<edge_begin><edge_end>block()
Number()<edge_begin><edge_end>CDATA()
Ol()<edge_begin><edge_end>Attrs()
Tbody()<edge_begin><edge_end>Tr()
Specialpre()<edge_begin><edge_end>Pre Content()
Table(frame, rules)<edge_begin><edge_end>Attrs()
Pre(xml:space)<edge_begin><edge_end>String()
Tr()<edge_begin><edge_end>Tr Element()
Td(scope)<edge_begin><edge_end>Flow()
Base Head Element()<edge_begin><edge_end>Base()
Phrase()<edge_begin><edge_end>Pre Content()
Samp()<edge_begin><edge_end>Attrs()
Area(shape, nohref)<edge_begin><edge_end>URI()
Code()<edge_begin><edge_end>Attrs()
block()<edge_begin><edge_end>Map Element Content()
Button Content()<edge_begin><edge_end>PCDATA()
Style(xml:space)<edge_begin><edge_end>String()
Textarea(disabled, readonly)<edge_begin><edge_end>Boolean()
Misc()<edge_begin><edge_end>Form Content()
Textarea(disabled, readonly)<edge_begin><edge_end>CDATA()
Big()<edge_begin><edge_end>Fontstyle()
Td(scope)<edge_begin><edge_end>Number()
Caption()<edge_begin><edge_end>Attrs()
Button(type, disabled)<edge_begin><edge_end>CDATA()
Th(scope)<edge_begin><edge_end>Flow()
Object(declare)<edge_begin><edge_end>Special()
Base Head Element()<edge_begin><edge_end>Head Element()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>EMPTY()
Option(selected, disabled)<edge_begin><edge_end>Boolean()
Dl()<edge_begin><edge_end>Lists()
Dl()<edge_begin><edge_end>Dl Element()
Phrase()<edge_begin><edge_end>Button Content()
Ins()<edge_begin><edge_end>Flow()
Div()<edge_begin><edge_end>block()
Head()<edge_begin><edge_end>Head Misc()
Table(frame, rules)<edge_begin><edge_end>Pixels()
H5()<edge_begin><edge_end>Attrs()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>CDATA()
Object Element()<edge_begin><edge_end>PCDATA()
Authored Entry()<edge_begin><edge_end>Entries()
Article(journal, volume, number, pages, note)<edge_begin><edge_end>Month Entry(month)
Bibtex()<edge_begin><edge_end>Entries()
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Month Entry(month)
Dated Entry(year)<edge_begin><edge_end>Entries()
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Authored Entry()
Month Entry(month)<edge_begin><edge_end>Entries()
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Entries()
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Dated Entry(year)
Article(journal, volume, number, pages, note)<edge_begin><edge_end>Dated Entry(year)
Article(journal, volume, number, pages, note)<edge_begin><edge_end>Entries()
Table Element(index)<edge_begin><edge_end>Integer()
Boolean Value(value)<edge_begin><edge_end>Boolean()
String Value(value)<edge_begin><edge_end>Value Type()
Table()<edge_begin><edge_end>Worksheet(name)
Error Value()<edge_begin><edge_end>Value Type()
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Table()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
String Value(value)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Workbook()<edge_begin><edge_end>Worksheet(name)
Number Value(value)<edge_begin><edge_end>Value Type()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Worksheet(name)<edge_begin><edge_end>Table()
Data()<edge_begin><edge_end>Value Type()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Table()<edge_begin><edge_end>Row(auto Fit Height, height)
Number Value(value)<edge_begin><edge_end>Double()
Worksheet(name)<edge_begin><edge_end>Workbook()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Table()<edge_begin><edge_end>Column(auto Fit Width, width)
Value Type()<edge_begin><edge_end>Data()
Describe Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Fetch Statement(cursor Name, position, relative Position)<edge_begin><edge_end>Multiple Row Fetch Clause(into, rows Number, using Descriptor, descriptor)
Prepare Statement(from, statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)
Rename Statement(new Name, system, target)<edge_begin><edge_end>Definition Statement()
Extended Query Select()<edge_begin><edge_end>Extended Query Expression Body(optimize Records Number)
Get Diagnostics Statement()<edge_begin><edge_end>Binding Statement()
Create Alias Statement()<edge_begin><edge_end>Definition Statement()
Set Connection Statement(database Name)<edge_begin><edge_end>Definition Statement()
Lock Table Statement(allow Read, share Mode)<edge_begin><edge_end>Definition Statement()
Set Transaction Statement(isolation Level, rw Operation)<edge_begin><edge_end>Binding Statement()
Name Helper()<edge_begin><edge_end>SQL Object Name Helper()
Get Descriptor Statement(descriptor Name, descriptor Scope, value)<edge_begin><edge_end>Binding Statement()
Binding Parse Result()<edge_begin><edge_end>Binding Parse Error()
Binding Parser()<edge_begin><edge_end>Statement Parser()
Execute Immediate Statement(variable)<edge_begin><edge_end>Binding Statement()
Call Statement(parms)<edge_begin><edge_end>Definition Statement()
Execute Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Prepare Statement(from, statement Name)<edge_begin><edge_end>Binding Statement()
Declare Cursor Statement(cursor Name, cursor Type, for Query, for Statement Name, hold)<edge_begin><edge_end>Binding Statement()
Definition Writer()<edge_begin><edge_end>Statement Writer()
Set Option Statement()<edge_begin><edge_end>Option(name, value)
Get Diagnostics Statement()<edge_begin><edge_end>Condition Info Clause(condition)
Release Statement(server Name)<edge_begin><edge_end>Definition Statement()
Set Descriptor Statement(descriptor Name, value)<edge_begin><edge_end>Binding Statement()
Allocate Descriptor Statement(descriptor Name, descriptor Scope, with Max)<edge_begin><edge_end>Binding Statement()
Definition Parser()<edge_begin><edge_end>Statement Parser()
Definition Parse Result()<edge_begin><edge_end>Definition Parse Error()
Create View Statement(fields, query)<edge_begin><edge_end>Definition Statement()
Describe Statement(statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)
Deallocate Descriptor Statement(descriptor Name, descriptor Scope)<edge_begin><edge_end>Binding Statement()
Fetch Statement(cursor Name, position, relative Position)<edge_begin><edge_end>Single Row Fetch Clause(into, using Descriptor)
Get Descriptor Statement(descriptor Name, descriptor Scope, value)<edge_begin><edge_end>Option(name, value)
Set Descriptor Statement(descriptor Name, value)<edge_begin><edge_end>Option(name, value)
Open Statement(cursor, using, using Type)<edge_begin><edge_end>Binding Statement()
Rollback Statement(hold)<edge_begin><edge_end>Definition Statement()
Drop Statement(range, target)<edge_begin><edge_end>Definition Statement()
Condition Info Clause(condition)<edge_begin><edge_end>Option(name, value)
Query Writer()<edge_begin><edge_end>Statement Writer()
Set Option Statement()<edge_begin><edge_end>Binding Statement()
Query Parser()<edge_begin><edge_end>Statement Parser()