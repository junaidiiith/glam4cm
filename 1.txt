Pseudostate()<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Named Element(name)
Vertex()<edge_begin><edge_end>Region(priority)
Vertex()<edge_begin><edge_end>Transition(priority)
Region(priority)<edge_begin><edge_end>Named Element(name)
Region(priority)<edge_begin><edge_end>Vertex()
Transition(priority)<edge_begin><edge_end>Expression Element(expression)
Transition(priority)<edge_begin><edge_end>Reaction()
Transition(priority)<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Vertex()
Variable()<edge_begin><edge_end>Declaration()
Junction()<edge_begin><edge_end>Pseudostate()
Event()<edge_begin><edge_end>Declaration()
Choice()<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Named Element(name)
Statechart()<edge_begin><edge_end>Expression Element(expression)
Statechart()<edge_begin><edge_end>Reactive Element()
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Statechart()<edge_begin><edge_end>Region(priority)
Entry(kind)<edge_begin><edge_end>Pseudostate()
Declaration()<edge_begin><edge_end>Named Element(name)
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Effect()
Reactive Element()<edge_begin><edge_end>Reaction()
Exit()<edge_begin><edge_end>Pseudostate()
Scope()<edge_begin><edge_end>Declaration()
Scope()<edge_begin><edge_end>Event()
Scope()<edge_begin><edge_end>Variable()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Vertex()
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Expression Element(expression)
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Region(priority)
State(orthogonal, submachine, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Query Module()<edge_begin><edge_end>Import(import URI)
Query Module()<edge_begin><edge_end>M Query()
Query Module()<edge_begin><edge_end>Named Query(name)
Named Query(name)<edge_begin><edge_end>M Query()
M Query()<edge_begin><edge_end>Where Clause()
Select Statement()<edge_begin><edge_end>M Query()
Select Statement()<edge_begin><edge_end>Expression Term()
Select Statement()<edge_begin><edge_end>Select From Clause()
Select Statement()<edge_begin><edge_end>Having Clause()
Select Statement()<edge_begin><edge_end>Order Clause(is Asc, is Desc)
Having Clause()<edge_begin><edge_end>Expression()
Order Clause(is Asc, is Desc)<edge_begin><edge_end>Order Item(feature)
Order Item(feature)<edge_begin><edge_end>From Entry()
Update Statement()<edge_begin><edge_end>M Query()
Update Statement()<edge_begin><edge_end>Update Clause()
Update Statement()<edge_begin><edge_end>Set Clause()
Update Clause()<edge_begin><edge_end>From Entry()
Set Clause()<edge_begin><edge_end>Update Item()
Update Item()<edge_begin><edge_end>Alias Attribute Expression(attributes)
Update Item()<edge_begin><edge_end>Value()
Delete Statement()<edge_begin><edge_end>M Query()
Delete Statement()<edge_begin><edge_end>Delete Clause()
Delete Clause()<edge_begin><edge_end>From Clause()
Select From Clause()<edge_begin><edge_end>Select Clause(is Distinct)
Select From Clause()<edge_begin><edge_end>From Clause()
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Max Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Min Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Count Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Select Constructor Expression(name)<edge_begin><edge_end>Select Expression()
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Clause()<edge_begin><edge_end>From Entry()
From Entry()<edge_begin><edge_end>Variable Declaration(name)
From Class(type)<edge_begin><edge_end>From Entry()
From Class(type)<edge_begin><edge_end>From Join(is Fetch)
From Collection()<edge_begin><edge_end>From Entry()
From Collection()<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Join(is Fetch)<edge_begin><edge_end>Variable Declaration(name)
Join()<edge_begin><edge_end>From Join(is Fetch)
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Where Clause()<edge_begin><edge_end>Expression()
Operator Expression(operator)<edge_begin><edge_end>Expression()
Operator Expression(operator)<edge_begin><edge_end>Variable()
Operator Expression(operator)<edge_begin><edge_end>Expression Term()
Exists Expression(is Not)<edge_begin><edge_end>Expression()
Exists Expression(is Not)<edge_begin><edge_end>Select Statement()
All Expression()<edge_begin><edge_end>Expression()
All Expression()<edge_begin><edge_end>Select Statement()
Any Expression()<edge_begin><edge_end>Expression()
Any Expression()<edge_begin><edge_end>Select Statement()
Some Expression()<edge_begin><edge_end>Expression()
Some Expression()<edge_begin><edge_end>Select Statement()
Collection Expression(is Not)<edge_begin><edge_end>Expression()
Collection Expression(is Not)<edge_begin><edge_end>Variable()
Collection Expression(is Not)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Null Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Null Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Like Expression(is Not, pattern)<edge_begin><edge_end>Expression()
Like Expression(is Not, pattern)<edge_begin><edge_end>Variable()
In Expression(is Not)<edge_begin><edge_end>Expression()
In Expression(is Not)<edge_begin><edge_end>Variable()
In Seq Expression()<edge_begin><edge_end>In Expression(is Not)
In Seq Expression()<edge_begin><edge_end>Variable()
In Query Expression()<edge_begin><edge_end>In Expression(is Not)
In Query Expression()<edge_begin><edge_end>Select Statement()
Between Expression(is Not)<edge_begin><edge_end>Expression()
Between Expression(is Not)<edge_begin><edge_end>Variable()
Between Expression(is Not)<edge_begin><edge_end>Value()
Variable()<edge_begin><edge_end>Expression Term()
Expression Term()<edge_begin><edge_end>Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Select Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable Declaration(name)
Parameter Expression(name)<edge_begin><edge_end>Variable()
Function(name)<edge_begin><edge_end>Variable()
Value()<edge_begin><edge_end>Variable()
Integer Expression(value)<edge_begin><edge_end>Value()
String Expression(value)<edge_begin><edge_end>Value()
Null Expression(value)<edge_begin><edge_end>Value()
Boolean Expression(value)<edge_begin><edge_end>Value()
Date Time Expression(value)<edge_begin><edge_end>Value()
Or Expression()<edge_begin><edge_end>Expression()
And Expression()<edge_begin><edge_end>Expression()
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Specification()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Regular Event Spec()<edge_begin><edge_end>Expression()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
Time Event Spec(type, unit)<edge_begin><edge_end>Expression()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Bool Literal(value)<edge_begin><edge_end>Literal()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
String Literal(value)<edge_begin><edge_end>Literal()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Reaction Effect()<edge_begin><edge_end>Expression()
Event Raising Expression()<edge_begin><edge_end>Expression()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Element Reference Expression(operation Call)<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Parenthesized Expression()<edge_begin><edge_end>Expression()
Documentation(title)<edge_begin><edge_end>Section()
Documentation(title)<edge_begin><edge_end>Term Entry(description)
Section()<edge_begin><edge_end>Text Fragment Container()
Section()<edge_begin><edge_end>Named Element(id, name)
Subsection()<edge_begin><edge_end>Text Fragment Container()
Subsection()<edge_begin><edge_end>Fragment()
Subsection()<edge_begin><edge_end>Named Element(id, name)
Subsubsection()<edge_begin><edge_end>Text Fragment Container()
Subsubsection()<edge_begin><edge_end>Fragment()
Subsubsection()<edge_begin><edge_end>Named Element(id, name)
Text Fragment Container()<edge_begin><edge_end>Fragment()
Paragraph()<edge_begin><edge_end>Text Fragment Container()
Paragraph()<edge_begin><edge_end>Fragment()
Line(text)<edge_begin><edge_end>Fragment()
List()<edge_begin><edge_end>Fragment()
List()<edge_begin><edge_end>List Item(text)
List Item(text)<edge_begin><edge_end>Text Fragment Container()
Table()<edge_begin><edge_end>Fragment()
Table()<edge_begin><edge_end>Table Header(header Cells)
Table()<edge_begin><edge_end>Table Row(row Cells)
Image(width, original Source)<edge_begin><edge_end>Fragment()
Image(width, original Source)<edge_begin><edge_end>Named Element(id, name)
Term Entry(description)<edge_begin><edge_end>Named Element(id, name)
XML(context Class Name, resource)<edge_begin><edge_end>Fragment()
XML(context Class Name, resource)<edge_begin><edge_end>Named Element(id, name)
Place()<edge_begin><edge_end>Net()
Place()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>TP Arc()
Place()<edge_begin><edge_end>Token()
Transition()<edge_begin><edge_end>Net()
Transition()<edge_begin><edge_end>PT Arc()
Transition()<edge_begin><edge_end>TP Arc()
Net()<edge_begin><edge_end>Place()
Net()<edge_begin><edge_end>Transition()
Arc(weight)<edge_begin><edge_end>Integer()
PT Arc()<edge_begin><edge_end>Arc(weight)
PT Arc()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Place()
TP Arc()<edge_begin><edge_end>Arc(weight)
TP Arc()<edge_begin><edge_end>Transition()
TP Arc()<edge_begin><edge_end>Place()
Token()<edge_begin><edge_end>Place()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
Value Type()<edge_begin><edge_end>Data()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Number Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Error Value()<edge_begin><edge_end>Value Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Smart Tags Collection()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Workbook()<edge_begin><edge_end>Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)
Workbook()<edge_begin><edge_end>Styles Collection()
Workbook()<edge_begin><edge_end>Names Type()
Workbook()<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Workbook()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>String()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Boolean()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Styled Element()<edge_begin><edge_end>Style Type(id, name)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Table Element(index)<edge_begin><edge_end>Styled Element()
Table Element(index)<edge_begin><edge_end>Integer()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Comment(author, show Always)
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Comment(author, show Always)<edge_begin><edge_end>Data()
Comment(author, show Always)<edge_begin><edge_end>String()
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Data()<edge_begin><edge_end>Comment(author, show Always)
Data()<edge_begin><edge_end>Value Type()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Integer()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Boolean()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Double()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>String()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Boolean()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>String()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Integer()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Page Setup()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)
Page Setup()<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Page Setup()<edge_begin><edge_end>Layout(orientation, center Horizontal, center Vertical, start Page Number)
Page Setup()<edge_begin><edge_end>Header()
Page Setup()<edge_begin><edge_end>Footer()
Page Setup()<edge_begin><edge_end>Page Margins Info(left, right, top, bottom)
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>Page Setup()
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>Boolean()
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>String()
Header Or Footer Elt(margin, data)<edge_begin><edge_end>Double()
Header Or Footer Elt(margin, data)<edge_begin><edge_end>String()
Header()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Header()<edge_begin><edge_end>Page Setup()
Footer()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Footer()<edge_begin><edge_end>Page Setup()
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Page Setup()
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Double()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Integer()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Boolean()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>String()
Styles Collection()<edge_begin><edge_end>Workbook()
Styles Collection()<edge_begin><edge_end>Style Type(id, name)
Style Type(id, name)<edge_begin><edge_end>Styles Collection()
Style Type(id, name)<edge_begin><edge_end>Styled Element()
Style Type(id, name)<edge_begin><edge_end>String()
Style Type(id, name)<edge_begin><edge_end>Style Type(id, name)
Style Type(id, name)<edge_begin><edge_end>Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)
Style Type(id, name)<edge_begin><edge_end>Borders Type()
Style Type(id, name)<edge_begin><edge_end>Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)
Style Type(id, name)<edge_begin><edge_end>Interior Type(color, pattern, pattern Color)
Style Type(id, name)<edge_begin><edge_end>Number Format Type(format)
Style Type(id, name)<edge_begin><edge_end>Protection Type(protected)
Protection Type(protected)<edge_begin><edge_end>Style Type(id, name)
Protection Type(protected)<edge_begin><edge_end>Boolean()
Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)<edge_begin><edge_end>Style Type(id, name)
Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)<edge_begin><edge_end>Double()
Alignment Type(horizontal, reading Order, indent, rotate, shrink To Fit, vertical, vertical Text, wrap Text)<edge_begin><edge_end>Boolean()
Borders Type()<edge_begin><edge_end>Style Type(id, name)
Borders Type()<edge_begin><edge_end>Border Type(position, color, line Style, weight)
Border Type(position, color, line Style, weight)<edge_begin><edge_end>Borders Type()
Border Type(position, color, line Style, weight)<edge_begin><edge_end>String()
Border Type(position, color, line Style, weight)<edge_begin><edge_end>Double()
Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)<edge_begin><edge_end>Style Type(id, name)
Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)<edge_begin><edge_end>Boolean()
Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)<edge_begin><edge_end>String()
Font Type(bold, color, font Name, italic, outline, shadow, size, strike Through, underline, vertical Align)<edge_begin><edge_end>Double()
Interior Type(color, pattern, pattern Color)<edge_begin><edge_end>Style Type(id, name)
Interior Type(color, pattern, pattern Color)<edge_begin><edge_end>String()
Number Format Type(format)<edge_begin><edge_end>Style Type(id, name)
Names Type()<edge_begin><edge_end>Workbook()
Names Type()<edge_begin><edge_end>Named Range(name, refers To, hidden)
Named Range(name, refers To, hidden)<edge_begin><edge_end>Names Type()
Named Range(name, refers To, hidden)<edge_begin><edge_end>String()
Named Range(name, refers To, hidden)<edge_begin><edge_end>Boolean()
Query Module()<edge_begin><edge_end>Import(import URI)
Query Module()<edge_begin><edge_end>JPQL Query()
Query Module()<edge_begin><edge_end>Named Query(name)
Named Query(name)<edge_begin><edge_end>JPQL Query()
JPQL Query()<edge_begin><edge_end>Where Clause()
Select Statement()<edge_begin><edge_end>JPQL Query()
Select Statement()<edge_begin><edge_end>Expression Term()
Select Statement()<edge_begin><edge_end>Select From Clause()
Select Statement()<edge_begin><edge_end>Having Clause()
Select Statement()<edge_begin><edge_end>Order Clause(is Asc, is Desc)
Having Clause()<edge_begin><edge_end>Expression()
Order Clause(is Asc, is Desc)<edge_begin><edge_end>Order Item(feature)
Order Item(feature)<edge_begin><edge_end>From Entry()
Update Statement()<edge_begin><edge_end>JPQL Query()
Update Statement()<edge_begin><edge_end>Update Clause()
Update Statement()<edge_begin><edge_end>Set Clause()
Update Clause()<edge_begin><edge_end>From Entry()
Set Clause()<edge_begin><edge_end>Update Item()
Update Item()<edge_begin><edge_end>Alias Attribute Expression(attributes)
Update Item()<edge_begin><edge_end>Value()
Delete Statement()<edge_begin><edge_end>JPQL Query()
Delete Statement()<edge_begin><edge_end>Delete Clause()
Delete Clause()<edge_begin><edge_end>From Clause()
Select From Clause()<edge_begin><edge_end>Select Clause(is Distinct)
Select From Clause()<edge_begin><edge_end>From Clause()
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Max Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Min Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Count Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Select Constructor Expression(name)<edge_begin><edge_end>Select Expression()
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Clause()<edge_begin><edge_end>From Entry()
From Entry()<edge_begin><edge_end>Variable Declaration(name)
From Class(type)<edge_begin><edge_end>From Entry()
From Class(type)<edge_begin><edge_end>From Join(is Fetch)
From Collection()<edge_begin><edge_end>From Entry()
From Collection()<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Join(is Fetch)<edge_begin><edge_end>Variable Declaration(name)
Join()<edge_begin><edge_end>From Join(is Fetch)
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Where Clause()<edge_begin><edge_end>Expression()
Operator Expression(operator)<edge_begin><edge_end>Expression()
Operator Expression(operator)<edge_begin><edge_end>Variable()
Operator Expression(operator)<edge_begin><edge_end>Expression Term()
Exists Expression(is Not)<edge_begin><edge_end>Expression()
Exists Expression(is Not)<edge_begin><edge_end>Select Statement()
All Expression()<edge_begin><edge_end>Expression()
All Expression()<edge_begin><edge_end>Select Statement()
Any Expression()<edge_begin><edge_end>Expression()
Any Expression()<edge_begin><edge_end>Select Statement()
Some Expression()<edge_begin><edge_end>Expression()
Some Expression()<edge_begin><edge_end>Select Statement()
Collection Expression(is Not)<edge_begin><edge_end>Expression()
Collection Expression(is Not)<edge_begin><edge_end>Variable()
Collection Expression(is Not)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Null Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Null Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Like Expression(is Not, pattern)<edge_begin><edge_end>Expression()
Like Expression(is Not, pattern)<edge_begin><edge_end>Variable()
In Expression(is Not)<edge_begin><edge_end>Expression()
In Expression(is Not)<edge_begin><edge_end>Variable()
In Seq Expression()<edge_begin><edge_end>In Expression(is Not)
In Seq Expression()<edge_begin><edge_end>Variable()
In Query Expression()<edge_begin><edge_end>In Expression(is Not)
In Query Expression()<edge_begin><edge_end>Select Statement()
Between Expression(is Not)<edge_begin><edge_end>Expression()
Between Expression(is Not)<edge_begin><edge_end>Variable()
Between Expression(is Not)<edge_begin><edge_end>Value()
Variable()<edge_begin><edge_end>Expression Term()
Expression Term()<edge_begin><edge_end>Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Select Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable Declaration(name)
Parameter Expression(name)<edge_begin><edge_end>Variable()
Function(name)<edge_begin><edge_end>Variable()
Value()<edge_begin><edge_end>Variable()
Integer Expression(value)<edge_begin><edge_end>Value()
String Expression(value)<edge_begin><edge_end>Value()
Null Expression(value)<edge_begin><edge_end>Value()
Boolean Expression(value)<edge_begin><edge_end>Value()
Date Time Expression(value)<edge_begin><edge_end>Value()
Or Expression()<edge_begin><edge_end>Expression()
And Expression()<edge_begin><edge_end>Expression()
Meta Index()<edge_begin><edge_end>Index(name, u RI, old UR Is)
Index(name, u RI, old UR Is)<edge_begin><edge_end>URI()
Eclipse(version)<edge_begin><edge_end>Configurable Item()
Eclipse(version)<edge_begin><edge_end>Configuration()
Configurable Item()<edge_begin><edge_end>Scope Root()
Project(name, label)<edge_begin><edge_end>Configurable Item()
Project(name, label)<edge_begin><edge_end>Configuration()
Project(name, label)<edge_begin><edge_end>Branch(name)
Project(name, label)<edge_begin><edge_end>Eclipse(version)
Branch(name)<edge_begin><edge_end>Configurable Item()
Branch(name)<edge_begin><edge_end>Project(name, label)
Branch(name)<edge_begin><edge_end>Eclipse(version)
Preferences(install Folder, accepted Licenses)<edge_begin><edge_end>Scope Root()
Preferences(install Folder, accepted Licenses)<edge_begin><edge_end>License Info()
Setup()<edge_begin><edge_end>Branch(name)
Setup()<edge_begin><edge_end>Eclipse(version)
Setup Task(disabled, scope, excluded Triggers, documentation)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Setup Task(disabled, scope, excluded Triggers, documentation)<edge_begin><edge_end>Configurable Item()
Setup Task(disabled, scope, excluded Triggers, documentation)<edge_begin><edge_end>Trigger Set()
Setup Task Container()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Scope Root()<edge_begin><edge_end>Setup Task Container()
Compound Setup Task(name)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Compound Setup Task(name)<edge_begin><edge_end>Setup Task Container()
Context Variable Task(type, name, value, string Substitution, label)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Context Variable Task(type, name, value, string Substitution, label)<edge_begin><edge_end>Variable Choice(value, label)
Redirection Task(source URL, target URL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Eclipse Ini Task(option, value, vm)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Link Location Task(path, name)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
P2Task(license Confirmation Disabled, merge Disabled)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
P2Task(license Confirmation Disabled, merge Disabled)<edge_begin><edge_end>Installable Unit(i D, version Range)
P2Task(license Confirmation Disabled, merge Disabled)<edge_begin><edge_end>P2Repository(u RL)
Installable Unit(i D, version Range)<edge_begin><edge_end>Version Range()
Git Clone Task(location, remote Name, remote URI, push URI, user ID, checkout Branch)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Basic Materialization Task(target Platform, bundle Pool)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Buckminster Import Task(mspec)<edge_begin><edge_end>Basic Materialization Task(target Platform, bundle Pool)
Materialization Task()<edge_begin><edge_end>Basic Materialization Task(target Platform, bundle Pool)
Materialization Task()<edge_begin><edge_end>Component(name, type, version Range)
Materialization Task()<edge_begin><edge_end>Source Locator()
Materialization Task()<edge_begin><edge_end>P2Repository(u RL)
Component(name, type, version Range)<edge_begin><edge_end>Version Range()
Manual Source Locator(location, component Name Pattern, component Types)<edge_begin><edge_end>Source Locator()
Automatic Source Locator(root Folder, locate Nested Projects)<edge_begin><edge_end>Source Locator()
Component Extension()<edge_begin><edge_end>Installable Unit(i D, version Range)
Component Definition(i D, version)<edge_begin><edge_end>Component Extension()
Component Definition(i D, version)<edge_begin><edge_end>Version()
Maven Import Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Maven Import Task()<edge_begin><edge_end>Automatic Source Locator(root Folder, locate Nested Projects)
Targlet Import Task(targlet URI)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Targlet Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Targlet Task()<edge_begin><edge_end>Targlet Data(name, active Repository List, include Sources, include All Platforms)
Targlet()<edge_begin><edge_end>Targlet Data(name, active Repository List, include Sources, include All Platforms)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>Installable Unit(i D, version Range)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>Automatic Source Locator(root Folder, locate Nested Projects)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>Repository List(name)
Targlet Data(name, active Repository List, include Sources, include All Platforms)<edge_begin><edge_end>P2Repository(u RL)
Repository List(name)<edge_begin><edge_end>P2Repository(u RL)
Projects Import Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Projects Import Task()<edge_begin><edge_end>Automatic Source Locator(root Folder, locate Nested Projects)
Project Set Import Task(u RL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Target Platform Task(name)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Api Baseline Task(version, container Folder, zip Location)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Eclipse Preference Task(key, value)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
File Association Task(file Pattern, default Editor ID)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
File Association Task(file Pattern, default Editor ID)<edge_begin><edge_end>File Editor(i D)
File Associations Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
File Associations Task()<edge_begin><edge_end>File Mapping(file Pattern, default Editor ID)
File Mapping(file Pattern, default Editor ID)<edge_begin><edge_end>File Editor(i D)
Working Set Task()<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Resource Copy Task(source URL, target URL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Resource Creation Task(content, target URL, encoding)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Text Modify Task(u RL, encoding)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Text Modify Task(u RL, encoding)<edge_begin><edge_end>Text Modification(pattern, substitutions)
Key Binding Task(scheme, platform, locale, keys, command)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Key Binding Task(scheme, platform, locale, keys, command)<edge_begin><edge_end>Key Binding Context(i D)
Key Binding Task(scheme, platform, locale, keys, command)<edge_begin><edge_end>Command Parameter(i D, value)
Mylyn Query Task(connector Kind, summary, repository URL, relative URL)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Mylyn Queries Task(connector Kind, repository URL, user ID, password)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Mylyn Queries Task(connector Kind, repository URL, user ID, password)<edge_begin><edge_end>Query(summary, u RL)
Query(summary, u RL)<edge_begin><edge_end>Mylyn Queries Task(connector Kind, repository URL, user ID, password)
Query(summary, u RL)<edge_begin><edge_end>Query Attribute(key, value)
Mylyn Builds Task(connector Kind, server URL, user ID, password)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Mylyn Builds Task(connector Kind, server URL, user ID, password)<edge_begin><edge_end>Build Plan(name)
JRE Task(version, location)<edge_begin><edge_end>Setup Task(disabled, scope, excluded Triggers, documentation)
Researcher(name, for Name)<edge_begin><edge_end>Paper(name)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(name, description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper(name)<edge_begin><edge_end>Paragraph(name, id, content)
Paper(name)<edge_begin><edge_end>Researcher(name, for Name)
Paper(name)<edge_begin><edge_end>Paper(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper(name)
Publication Structure()<edge_begin><edge_end>Position(name, description)
Position(name, description)<edge_begin><edge_end>Position(name, description)
Collaboration(ratio)<edge_begin><edge_end>Paper(name)
Use Case Model()<edge_begin><edge_end>Use Case(name, description)
Use Case Model()<edge_begin><edge_end>Actor()
Use Case Model()<edge_begin><edge_end>Subject()
Use Case(name, description)<edge_begin><edge_end>Alternative Flow()
Use Case(name, description)<edge_begin><edge_end>Basic Flow()
Use Case(name, description)<edge_begin><edge_end>Actor()
Use Case(name, description)<edge_begin><edge_end>Condition(expression)
Use Case(name, description)<edge_begin><edge_end>Use Case Model()
Use Case(name, description)<edge_begin><edge_end>Include()
Alternative Flow()<edge_begin><edge_end>Flow Of Events(name)
Alternative Flow()<edge_begin><edge_end>Step(name)
Alternative Flow()<edge_begin><edge_end>Condition(expression)
Alternative Flow()<edge_begin><edge_end>Use Case(name, description)
Flow Of Events(name)<edge_begin><edge_end>Step(name)
Step(name)<edge_begin><edge_end>Alternative Flow()
Step(name)<edge_begin><edge_end>Statement()
Step(name)<edge_begin><edge_end>Flow Of Events(name)
Agent(name)<edge_begin><edge_end>Action(description)
Statement()<edge_begin><edge_end>Step(name)
Statement()<edge_begin><edge_end>Condition(expression)
Basic Flow()<edge_begin><edge_end>Flow Of Events(name)
Basic Flow()<edge_begin><edge_end>Use Case(name, description)
Actor()<edge_begin><edge_end>Agent(name)
Actor()<edge_begin><edge_end>Use Case Model()
Actor()<edge_begin><edge_end>Use Case(name, description)
Subject()<edge_begin><edge_end>Agent(name)
Subject()<edge_begin><edge_end>Use Case Model()
Action(description)<edge_begin><edge_end>Step(name)
Action(description)<edge_begin><edge_end>Agent(name)
Conditional Statement()<edge_begin><edge_end>Statement()
Loop Statement()<edge_begin><edge_end>Statement()
Include()<edge_begin><edge_end>Step(name)
Include()<edge_begin><edge_end>Use Case(name, description)
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Speaker()
Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>Personal Review History()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Reviewer()<edge_begin><edge_end>External Reviewer()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Thing()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Inforamtion()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Document()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Account()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Conference document()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>String()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Organization()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Item()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Presenter city()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Money()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)<edge_begin><edge_end>Time()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Meta-Review()<edge_begin><edge_end>Review()
Account()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity(is dated on)
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity(is dated on)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity(is dated on)
Registration()<edge_begin><edge_end>Conference activity()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Research Topic()<edge_begin><edge_end>Thing()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Committee member()<edge_begin><edge_end>Committee()
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Abstract()<edge_begin><edge_end>Document()
Abstract()<edge_begin><edge_end>article()
Abstract()<edge_begin><edge_end>Thing()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Session()
Tutorial()<edge_begin><edge_end>Individual Presentation()
Tutorial()<edge_begin><edge_end>Working event()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>Activity(is dated on)
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>Activity(is dated on)
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(is dated on)
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>Activity(is dated on)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>Activity(is dated on)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>Activity(is dated on)
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>Activity(is dated on)
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>Activity(is dated on)
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>Activity(is dated on)
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>Activity(is dated on)
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
University()<edge_begin><edge_end>Organization()
University()<edge_begin><edge_end>Academic Institution()
Scholar()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Workshop()<edge_begin><edge_end>Academic Event()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Workshop()<edge_begin><edge_end>Scientific Event()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member()<edge_begin><edge_end>Participant(early Registration)
Participant(early Registration)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Student()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Science Worker()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Assistant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Volunteer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Regular()<edge_begin><edge_end>Participant(early Registration)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
chair()<edge_begin><edge_end>Reviewer()
chair()<edge_begin><edge_end>program()
article()<edge_begin><edge_end>Document()
article()<edge_begin><edge_end>Activity(is dated on)
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
article()<edge_begin><edge_end>Author()
article()<edge_begin><edge_end>Reviewer()
article()<edge_begin><edge_end>Abstract()
participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
program()<edge_begin><edge_end>chair()
program()<edge_begin><edge_end>session()
Slide Set()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document()
Meal Menu()<edge_begin><edge_end>Meal Event()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Topic()<edge_begin><edge_end>Working event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Dining Place()<edge_begin><edge_end>Place()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Withdrawn Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Rejected Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Accepted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Published Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Attendee()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
TPC Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer()
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Evaluated Paper()<edge_begin><edge_end>Review()
Camera Ready Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Positive Review()<edge_begin><edge_end>Review()
Workshop Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Industrial Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>article()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Regular contribution()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Document()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Co-author()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Bid()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Decision()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Reviewer()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Subject Area()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>unsigned Long()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>String()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Author()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Administrator()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Meta-Reviewer()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Integer()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Review()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Possible Reviewer()
Conference Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Industrial Session()<edge_begin><edge_end>Conference Session()
Conference Session()<edge_begin><edge_end>Session()
Regular Session()<edge_begin><edge_end>Session()
Poster Session()<edge_begin><edge_end>Session()
Demo Session()<edge_begin><edge_end>Session()
Paper Author()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Conference Trip()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference Participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Submitted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Assigned Paper()<edge_begin><edge_end>Submitted Paper()
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Negative Review()<edge_begin><edge_end>Review()
Neutral Review()<edge_begin><edge_end>Review()
Organising Agency()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Organisation()<edge_begin><edge_end>Thing()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Poster Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Regular Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Demo Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Research Institute()<edge_begin><edge_end>Academic Institution()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Agency Staff Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Workshop Session()<edge_begin><edge_end>Session()
Track()<edge_begin><edge_end>Scientific Event()
Track()<edge_begin><edge_end>Conference part()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Document()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>PC Member()
PC Chair()<edge_begin><edge_end>Conference Participant()
PC Chair()<edge_begin><edge_end>PC Member()
PC Member()<edge_begin><edge_end>Possible Reviewer()
OC Member()<edge_begin><edge_end>Conference Participant()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Programme Brochure()<edge_begin><edge_end>Document()
Flyer()<edge_begin><edge_end>Document()
Web Site()<edge_begin><edge_end>Document()
Multi-author Volume()<edge_begin><edge_end>Document()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Individual Presentation()<edge_begin><edge_end>Document()
OC Chair()<edge_begin><edge_end>OC Member()
Conference Banquet()<edge_begin><edge_end>Social Event()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Workshop Chair()<edge_begin><edge_end>PC Member()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Session Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Possible Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Possible Reviewer()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Invited Speaker()<edge_begin><edge_end>Presenter()
Presenter()<edge_begin><edge_end>Conference Participant()
Presenter()<edge_begin><edge_end>Author()
SC Member()<edge_begin><edge_end>PC Member()
Presenter house()<edge_begin><edge_end>Building()
Building()<edge_begin><edge_end>Place()
Presenter state()<edge_begin><edge_end>State()
Delegate()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Presenter city()<edge_begin><edge_end>City()
Hotel registration form()<edge_begin><edge_end>Form()
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
Form()<edge_begin><edge_end>Document()
Car()<edge_begin><edge_end>Transport vehicle()
Transport vehicle()<edge_begin><edge_end>Item()
Mailing list()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>Item()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Document()<edge_begin><edge_end>Document()
Renting()<edge_begin><edge_end>Activity before conference()
Activity before conference()<edge_begin><edge_end>Activity(is dated on)
Dinner banquet()<edge_begin><edge_end>Social program()
One day presenter()<edge_begin><edge_end>Delegate()
Social program()<edge_begin><edge_end>Conference activity()
Activity(is dated on)<edge_begin><edge_end>Thing()
Activity(is dated on)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Activity(is dated on)<edge_begin><edge_end>Activity(is dated on)
Activity(is dated on)<edge_begin><edge_end>human(e-mail, last name, first name)
Activity(is dated on)<edge_begin><edge_end>intensity()
Activity(is dated on)<edge_begin><edge_end>article()
Activity(is dated on)<edge_begin><edge_end>Time()
Activity(is dated on)<edge_begin><edge_end>Trip day()
Activity(is dated on)<edge_begin><edge_end>date Time()
Power Point presentation()<edge_begin><edge_end>Presentation()
Presentation()<edge_begin><edge_end>Conference activity()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Conference restaurant()<edge_begin><edge_end>Building()
Conference city()<edge_begin><edge_end>City()
Conference state()<edge_begin><edge_end>State()
Submissions deadline()<edge_begin><edge_end>Deadline()
Deadline()<edge_begin><edge_end>Time()
Deadline()<edge_begin><edge_end>date()
Simulating()<edge_begin><edge_end>Research()
Research()<edge_begin><edge_end>Activity before conference()
Technic activity()<edge_begin><edge_end>Conference activity()
Conference activity()<edge_begin><edge_end>Activity(is dated on)
Technical commitee()<edge_begin><edge_end>Delegate()
Place()<edge_begin><edge_end>Thing()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Place()<edge_begin><edge_end>Item()
Author cd proceedings included()<edge_begin><edge_end>Author()
Author()<edge_begin><edge_end>Speaker()
Author()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Author()<edge_begin><edge_end>article()
Cd proceening()<edge_begin><edge_end>Publication()
Trip day()<edge_begin><edge_end>Time()
Record of attendance()<edge_begin><edge_end>Document()
Listener()<edge_begin><edge_end>Delegate()
Session room()<edge_begin><edge_end>Place()
Brief introduction for Session chair()<edge_begin><edge_end>Document()
Session chair()<edge_begin><edge_end>Delegate()
Invitation letter()<edge_begin><edge_end>Document()
Registration form()<edge_begin><edge_end>Form()
Viza()<edge_begin><edge_end>Document()
Conference days()<edge_begin><edge_end>Time()
Conference building()<edge_begin><edge_end>Building()
Registration fee()<edge_begin><edge_end>Fee()
Departure()<edge_begin><edge_end>Activity after conference()
Activity after conference()<edge_begin><edge_end>Activity(is dated on)
Conference airport()<edge_begin><edge_end>Building()
Worker lecturer()<edge_begin><edge_end>Lecturer()
Lecturer()<edge_begin><edge_end>Author()
Transparency()<edge_begin><edge_end>Document()
Speaker()<edge_begin><edge_end>Delegate()
City()<edge_begin><edge_end>Thing()
Card()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Activity(is dated on)
Item()<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Item()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Time()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Book proceeding()<edge_begin><edge_end>Publication()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Audiovisual equipment()<edge_begin><edge_end>Item()
Video presentation()<edge_begin><edge_end>Presentation()
Hotel room()<edge_begin><edge_end>Place()
Hotel presenter()<edge_begin><edge_end>Delegate()
Conference hotel()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Item()
Money()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Money()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Thing()
Money()<edge_begin><edge_end>Money()
Introduction()<edge_begin><edge_end>Conference activity()
Welcome address()<edge_begin><edge_end>Conference activity()
Value added tax()<edge_begin><edge_end>Tax()
Tax()<edge_begin><edge_end>Money()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Final manuscript()<edge_begin><edge_end>Submission()
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Sponsor city()<edge_begin><edge_end>City()
Sponsor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, email)
Introduction of speaker()<edge_begin><edge_end>Introduction()
Conference hall()<edge_begin><edge_end>Place()
Plenary lecture()<edge_begin><edge_end>Lecture()
Lecture()<edge_begin><edge_end>Conference activity()
Plenary lecture speaker()<edge_begin><edge_end>Author()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Tutorial speaker()<edge_begin><edge_end>Author()
Session()<edge_begin><edge_end>Lecture()
Session()<edge_begin><edge_end>Scientific Event()
Registation deadline()<edge_begin><edge_end>Deadline()
Single hotel room()<edge_begin><edge_end>Hotel room()
Non speaker()<edge_begin><edge_end>Delegate()
Author information form()<edge_begin><edge_end>Form()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
IASTED non member()<edge_begin><edge_end>Delegate()
Hotel fee()<edge_begin><edge_end>Fee()
Fee()<edge_begin><edge_end>Money()
Publication()<edge_begin><edge_end>Item()
Taxi()<edge_begin><edge_end>Transport vehicle()
Sponsor state()<edge_begin><edge_end>State()
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer()
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>Activity(is dated on)
Review()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Review()<edge_begin><edge_end>Possible Reviewer()
Modelling()<edge_begin><edge_end>Research()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Payment document()<edge_begin><edge_end>Document()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
One conference day()<edge_begin><edge_end>Conference days()
Fee for extra trip()<edge_begin><edge_end>Fee()
Full day tour()<edge_begin><edge_end>Activity after conference()
Conference Hiker()<edge_begin><edge_end>Delegate()
Computer()<edge_begin><edge_end>Audiovisual equipment()
IASTED member()<edge_begin><edge_end>Delegate()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Author book proceedings included()<edge_begin><edge_end>Author()
Sponsor company house()<edge_begin><edge_end>Building()
Sponzorship()<edge_begin><edge_end>Money()
Student lecturer()<edge_begin><edge_end>Lecturer()
Trip city()<edge_begin><edge_end>City()
Cheque()<edge_begin><edge_end>Payment document()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Student non speaker()<edge_begin><edge_end>Non speaker()
Student registration fee()<edge_begin><edge_end>Registration fee()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Tip()<edge_begin><edge_end>Money()
Credit card()<edge_begin><edge_end>Card()
Van()<edge_begin><edge_end>Transport vehicle()
Main office()<edge_begin><edge_end>Place()
Presenter university()<edge_begin><edge_end>Building()
Departure tax()<edge_begin><edge_end>Tax()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Double hotel room()<edge_begin><edge_end>Hotel room()
Initial manuscipt()<edge_begin><edge_end>Submission()
Coffee break()<edge_begin><edge_end>Conference activity()
Bank transfer()<edge_begin><edge_end>Payment document()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Speaker lecture()<edge_begin><edge_end>Session()
Coctail reception()<edge_begin><edge_end>Conference activity()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
Bibtex()<edge_begin><edge_end>Entry(key)
Entry(key)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Entry(key)<edge_begin><edge_end>String()
Entry(key)<edge_begin><edge_end>Field(value)
Article()<edge_begin><edge_end>Entry(key)
Book()<edge_begin><edge_end>Entry(key)
Inbook()<edge_begin><edge_end>Entry(key)
Booklet()<edge_begin><edge_end>Entry(key)
Inproceedings()<edge_begin><edge_end>Entry(key)
Proceedings()<edge_begin><edge_end>Entry(key)
Incollection()<edge_begin><edge_end>Entry(key)
Techreport()<edge_begin><edge_end>Entry(key)
Phd Thesis()<edge_begin><edge_end>Entry(key)
Masters Thesis()<edge_begin><edge_end>Entry(key)
Manual()<edge_begin><edge_end>Entry(key)
Misc()<edge_begin><edge_end>Entry(key)
Field(value)<edge_begin><edge_end>String()
Authors()<edge_begin><edge_end>Field(value)
Author Urls()<edge_begin><edge_end>Field(value)
Title()<edge_begin><edge_end>Field(value)
Journal()<edge_begin><edge_end>Field(value)
Book Title()<edge_begin><edge_end>Field(value)
Institution()<edge_begin><edge_end>Field(value)
Organization()<edge_begin><edge_end>Field(value)
Type()<edge_begin><edge_end>Field(value)
Day()<edge_begin><edge_end>Field(value)
Number()<edge_begin><edge_end>Field(value)
Chapter()<edge_begin><edge_end>Field(value)
Volume()<edge_begin><edge_end>Field(value)
Series()<edge_begin><edge_end>Field(value)
Pages()<edge_begin><edge_end>Field(value)
Publisher()<edge_begin><edge_end>Field(value)
Howpublished()<edge_begin><edge_end>Field(value)
School()<edge_begin><edge_end>Field(value)
Editor()<edge_begin><edge_end>Field(value)
Edition()<edge_begin><edge_end>Field(value)
Address()<edge_begin><edge_end>Field(value)
Year()<edge_begin><edge_end>Field(value)
Month()<edge_begin><edge_end>Field(value)
Note()<edge_begin><edge_end>Field(value)
Text()<edge_begin><edge_end>Field(value)
Abstract Field()<edge_begin><edge_end>Field(value)
Isbn()<edge_begin><edge_end>Field(value)
Issn()<edge_begin><edge_end>Field(value)
Url()<edge_begin><edge_end>Field(value)
Doi()<edge_begin><edge_end>Field(value)
Researcher(name, for Name)<edge_begin><edge_end>Paper(name)
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(name, description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper(name)<edge_begin><edge_end>Paragraph(name, id, content)
Paper(name)<edge_begin><edge_end>Researcher(name, for Name)
Paper(name)<edge_begin><edge_end>Paper(name)
Paper(name)<edge_begin><edge_end>Paper Keywords(weight)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper(name)
Publication Structure()<edge_begin><edge_end>Position(name, description)
Publication Structure()<edge_begin><edge_end>Knowledge Manager(name)
Position(name, description)<edge_begin><edge_end>Position(name, description)
Collaboration(ratio)<edge_begin><edge_end>Paper(name)
Keyword(key, description)<edge_begin><edge_end>Paper(name)
Paper Keywords(weight)<edge_begin><edge_end>Keyword(key, description)
Knowledge Manager(name)<edge_begin><edge_end>Keyword(key, description)
Instance()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Instance()<edge_begin><edge_end>Instance()
Instance()<edge_begin><edge_end>Link End()
Instance()<edge_begin><edge_end>Classifier()
Instance()<edge_begin><edge_end>Component Instance()
Instance()<edge_begin><edge_end>Attribute Link()
Instance()<edge_begin><edge_end>Link()
Attribute Link()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Attribute Link()<edge_begin><edge_end>Instance()
Attribute Link()<edge_begin><edge_end>Link End()
Attribute Link()<edge_begin><edge_end>Attribute()
Link()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Link()<edge_begin><edge_end>Association()
Link()<edge_begin><edge_end>Link End()
Link End()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Link End()<edge_begin><edge_end>Link()
Link End()<edge_begin><edge_end>Attribute Link()
Link End()<edge_begin><edge_end>Instance()
Link End()<edge_begin><edge_end>Association End(is Navigable, ordering, aggregation, target Scope, changeability)
Component Instance()<edge_begin><edge_end>Instance()
Component Instance()<edge_begin><edge_end>Node Instance()
Node Instance()<edge_begin><edge_end>Instance()
Node Instance()<edge_begin><edge_end>Component Instance()
Use Case()<edge_begin><edge_end>Classifier()
Use Case()<edge_begin><edge_end>Include()
Use Case()<edge_begin><edge_end>Extend()
Use Case()<edge_begin><edge_end>Extension Point(location)
Actor()<edge_begin><edge_end>Classifier()
Use Case Instance()<edge_begin><edge_end>Instance()
Extend()<edge_begin><edge_end>Relationship()
Extend()<edge_begin><edge_end>Extension Point(location)
Extend()<edge_begin><edge_end>Use Case()
Extend()<edge_begin><edge_end>Boolean Expression()
Include()<edge_begin><edge_end>Relationship()
Include()<edge_begin><edge_end>Use Case()
Extension Point(location)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Extension Point(location)<edge_begin><edge_end>Use Case()
Extension Point(location)<edge_begin><edge_end>String()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Element()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Namespace()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>String()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Boolean()
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Generalization(discriminator)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Boolean()
Namespace()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Classifier()<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Classifier()<edge_begin><edge_end>Namespace()
Classifier()<edge_begin><edge_end>Generalization(discriminator)
Classifier()<edge_begin><edge_end>Feature(owner Scope)
Feature(owner Scope)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Feature(owner Scope)<edge_begin><edge_end>Classifier()
Structural Feature(changeability, target Scope, ordering)<edge_begin><edge_end>Feature(owner Scope)
Structural Feature(changeability, target Scope, ordering)<edge_begin><edge_end>Classifier()
Structural Feature(changeability, target Scope, ordering)<edge_begin><edge_end>Multiplicity()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Association()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Classifier()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Attribute()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Boolean()
Association End(is Navigable, ordering, aggregation, target Scope, changeability)<edge_begin><edge_end>Multiplicity()
Relationship()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Association()<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Association()<edge_begin><edge_end>Relationship()
Association()<edge_begin><edge_end>Association End(is Navigable, ordering, aggregation, target Scope, changeability)
Attribute()<edge_begin><edge_end>Structural Feature(changeability, target Scope, ordering)
Attribute()<edge_begin><edge_end>Association End(is Navigable, ordering, aggregation, target Scope, changeability)
Attribute()<edge_begin><edge_end>Expression(language, body)
Generalization(discriminator)<edge_begin><edge_end>Relationship()
Generalization(discriminator)<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Generalization(discriminator)<edge_begin><edge_end>Classifier()
Generalization(discriminator)<edge_begin><edge_end>String()
Multiplicity()<edge_begin><edge_end>Multiplicity Range(lower, upper)
Multiplicity Range(lower, upper)<edge_begin><edge_end>Multiplicity()
Multiplicity Range(lower, upper)<edge_begin><edge_end>Integer()
Expression(language, body)<edge_begin><edge_end>String()
Boolean Expression()<edge_begin><edge_end>Expression(language, body)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Platform(file, location, deltapack)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Config(os, ws, arch, archive Format)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Map(root, repo, tag)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Category(name, label, description)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Contribution(label)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Product()
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Compiler(args, source Version, target Version, verbose, fail On Error, debug Info)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Promotion(upload Directory, download Directory, incubating, base URL, build Alias)
Build(type, build Root, fetch Tag, label, date, time, launch VM, builder URL, sendmail)<edge_begin><edge_end>Contact(name, email)
Platform(file, location, deltapack)<edge_begin><edge_end>Config(os, ws, arch, archive Format)
Category(name, label, description)<edge_begin><edge_end>Feature(in Product)
Contribution(label)<edge_begin><edge_end>Contact(name, email)
Contribution(label)<edge_begin><edge_end>Feature(in Product)
Contribution(label)<edge_begin><edge_end>Repository(location, label)
Contribution(label)<edge_begin><edge_end>Bundle()
Contribution(label)<edge_begin><edge_end>Product()
Feature(in Product)<edge_begin><edge_end>Installation Unit(id, version)
Feature(in Product)<edge_begin><edge_end>Category(name, label, description)
Bundle()<edge_begin><edge_end>Installation Unit(id, version)
Installation Unit(id, version)<edge_begin><edge_end>Repository(location, label)
Product()<edge_begin><edge_end>Installation Unit(id, version)
Node(name)<edge_begin><edge_end>State()
State()<edge_begin><edge_end>Node(name)
State()<edge_begin><edge_end>Transition(priority number)
State()<edge_begin><edge_end>Function(sourcecode)
Connector(public)<edge_begin><edge_end>Node(name)
Connector(public)<edge_begin><edge_end>History(depth, hot)
Transition(priority number)<edge_begin><edge_end>State()
Transition(priority number)<edge_begin><edge_end>Node(name)
Transition(priority number)<edge_begin><edge_end>Event(eventliteral)
Transition(priority number)<edge_begin><edge_end>Function(sourcecode)
Event(eventliteral)<edge_begin><edge_end>Transition(priority number)
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>String()
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Mailing List(name, subscribe, unsubscribe, post, archive, other Archives)
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Person(name, email, url, organization, organization Url, roles, timezone, properties)
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Build(default Goal, source Directory, unit Test Source Directory)
Project(id, group Id, artifact Id, name, description)<edge_begin><edge_end>Project(id, group Id, artifact Id, name, description)
Build(default Goal, source Directory, unit Test Source Directory)<edge_begin><edge_end>String()
Build(default Goal, source Directory, unit Test Source Directory)<edge_begin><edge_end>Resource(target Path, filtering, directory, includes, excludes)
Resource(target Path, filtering, directory, includes, excludes)<edge_begin><edge_end>String()
Mailing List(name, subscribe, unsubscribe, post, archive, other Archives)<edge_begin><edge_end>String()
Person(name, email, url, organization, organization Url, roles, timezone, properties)<edge_begin><edge_end>String()
Developer(id)<edge_begin><edge_end>Person(name, email, url, organization, organization Url, roles, timezone, properties)
Developer(id)<edge_begin><edge_end>String()
Contributor()<edge_begin><edge_end>Person(name, email, url, organization, organization Url, roles, timezone, properties)
Automaton(name)<edge_begin><edge_end>State(acceptor, id)
Automaton(name)<edge_begin><edge_end>Token()
Automaton(name)<edge_begin><edge_end>Symbolic Parameter(name)
Automaton(name)<edge_begin><edge_end>Symbolic Timer(name)
Token Parameter Binding()<edge_begin><edge_end>Binding()
Token Parameter Binding()<edge_begin><edge_end>Symbolic Token Parameter()
Reset Timer Action()<edge_begin><edge_end>Timer Action()
Symbolic Input Event(name)<edge_begin><edge_end>Symbolic Event()
Symbolic Timer(name)<edge_begin><edge_end>Symbolic Timeout Event()
Symbolic Token Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Complex Event Processor()<edge_begin><edge_end>Automaton(name)
Complex Event Processor()<edge_begin><edge_end>Symbolic Input Event(name)
Symbolic Event()<edge_begin><edge_end>Symbolic Parameter(name)
Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
State(acceptor, id)<edge_begin><edge_end>Token()
State(acceptor, id)<edge_begin><edge_end>Abstract Transition()
Constant Binding()<edge_begin><edge_end>Binding()
Constant Binding()<edge_begin><edge_end>Fix Parameter(value)
Symbolic Event Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Free Parameter(excluded Values)<edge_begin><edge_end>Parameter()
Set Timer Action(to Value)<edge_begin><edge_end>Timer Action()
Symbolic Timeout Event()<edge_begin><edge_end>Symbolic Event()
Symbolic Timeout Event()<edge_begin><edge_end>Symbolic Timer(name)
Binding()<edge_begin><edge_end>Symbolic Event Parameter()
Fix Parameter(value)<edge_begin><edge_end>Parameter()
Timer Action()<edge_begin><edge_end>Action()
Timer Action()<edge_begin><edge_end>Symbolic Timer(name)
Epsilon Transition()<edge_begin><edge_end>Abstract Transition()
Event()<edge_begin><edge_end>Symbolic Event()
Event()<edge_begin><edge_end>Fix Parameter(value)
Token()<edge_begin><edge_end>State(acceptor, id)
Token()<edge_begin><edge_end>Parameter()
Transition()<edge_begin><edge_end>Abstract Transition()
Transition()<edge_begin><edge_end>Event Guard()
Event Guard()<edge_begin><edge_end>Binding()
Event Guard()<edge_begin><edge_end>Symbolic Event()
Abstract Transition()<edge_begin><edge_end>State(acceptor, id)
Abstract Transition()<edge_begin><edge_end>Action()
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Keyword(description)
Paper()<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Progress(percent)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Publication System()<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Publication Structure()
Publication System()<edge_begin><edge_end>Position(description)
Position(description)<edge_begin><edge_end>Named(name)
Position(description)<edge_begin><edge_end>Position(description)
Keyword(description)<edge_begin><edge_end>Named(name)
Keyword(description)<edge_begin><edge_end>Paper()
Knowledge Manager()<edge_begin><edge_end>Named(name)
Knowledge Manager()<edge_begin><edge_end>Keyword(description)
Region(priority)<edge_begin><edge_end>Node(name, id)
Transition(priority, expression, id)<edge_begin><edge_end>Node(name, id)
State(entry, do, exit)<edge_begin><edge_end>Node(name, id)
State(entry, do, exit)<edge_begin><edge_end>Region(priority)
Pseudostate(pseudo Type)<edge_begin><edge_end>Node(name, id)
Variable(data Type)<edge_begin><edge_end>Data Element(name, io Type, port)
Event(trigger)<edge_begin><edge_end>Data Element(name, io Type, port)
Statechart(name, UUID)<edge_begin><edge_end>Data Element(name, io Type, port)
Statechart(name, UUID)<edge_begin><edge_end>Region(priority)
Statechart(name, UUID)<edge_begin><edge_end>Transition(priority, expression, id)
Final State()<edge_begin><edge_end>State(entry, do, exit)
Signal()<edge_begin><edge_end>Classifier()
Action(is Asynchronous)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Action(is Asynchronous)<edge_begin><edge_end>Argument()
Action(is Asynchronous)<edge_begin><edge_end>Action Sequence()
Action(is Asynchronous)<edge_begin><edge_end>Iteration Expression()
Action(is Asynchronous)<edge_begin><edge_end>Object Set Expression()
Action(is Asynchronous)<edge_begin><edge_end>Boolean()
Action(is Asynchronous)<edge_begin><edge_end>Action Expression()
Create Action()<edge_begin><edge_end>Action(is Asynchronous)
Create Action()<edge_begin><edge_end>Classifier()
Destroy Action()<edge_begin><edge_end>Action(is Asynchronous)
Uninterpreted Action()<edge_begin><edge_end>Action(is Asynchronous)
Call Action()<edge_begin><edge_end>Action(is Asynchronous)
Call Action()<edge_begin><edge_end>Operation(concurrency, is Root, is Leaf, is Abstract, specification)
Send Action()<edge_begin><edge_end>Action(is Asynchronous)
Send Action()<edge_begin><edge_end>Signal()
Action Sequence()<edge_begin><edge_end>Action(is Asynchronous)
Argument()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Argument()<edge_begin><edge_end>Action(is Asynchronous)
Argument()<edge_begin><edge_end>Expression(language, body)
Reception(specification, is Root, is Leaf, is Abstract)<edge_begin><edge_end>Behavioral Feature(is Query)
Reception(specification, is Root, is Leaf, is Abstract)<edge_begin><edge_end>Signal()
Reception(specification, is Root, is Leaf, is Abstract)<edge_begin><edge_end>String()
Reception(specification, is Root, is Leaf, is Abstract)<edge_begin><edge_end>Boolean()
Return Action()<edge_begin><edge_end>Action(is Asynchronous)
Terminate Action()<edge_begin><edge_end>Action(is Asynchronous)
Exception()<edge_begin><edge_end>Signal()
Expression(language, body)<edge_begin><edge_end>String()
Boolean Expression()<edge_begin><edge_end>Expression(language, body)
Object Set Expression()<edge_begin><edge_end>Expression(language, body)
Action Expression()<edge_begin><edge_end>Expression(language, body)
Iteration Expression()<edge_begin><edge_end>Expression(language, body)
Time Expression()<edge_begin><edge_end>Expression(language, body)
State Machine()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
State Machine()<edge_begin><edge_end>Submachine State()
State Machine()<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>Transition()
Event()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Event()<edge_begin><edge_end>Parameter(kind)
State Vertex()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
State Vertex()<edge_begin><edge_end>Composite State(is Concurrent)
State Vertex()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>State Vertex()
State()<edge_begin><edge_end>Event()
State()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Action(is Asynchronous)
State()<edge_begin><edge_end>State Machine()
Time Event()<edge_begin><edge_end>Event()
Time Event()<edge_begin><edge_end>Time Expression()
Call Event()<edge_begin><edge_end>Event()
Call Event()<edge_begin><edge_end>Operation(concurrency, is Root, is Leaf, is Abstract, specification)
Signal Event()<edge_begin><edge_end>Event()
Signal Event()<edge_begin><edge_end>Signal()
Transition()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Transition()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Event()
Transition()<edge_begin><edge_end>State Machine()
Transition()<edge_begin><edge_end>Action(is Asynchronous)
Transition()<edge_begin><edge_end>Guard()
Composite State(is Concurrent)<edge_begin><edge_end>State()
Composite State(is Concurrent)<edge_begin><edge_end>State Vertex()
Composite State(is Concurrent)<edge_begin><edge_end>Boolean()
Change Event()<edge_begin><edge_end>Event()
Change Event()<edge_begin><edge_end>Boolean Expression()
Guard()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Guard()<edge_begin><edge_end>Transition()
Guard()<edge_begin><edge_end>Boolean Expression()
Pseudostate(kind)<edge_begin><edge_end>State Vertex()
Simple State()<edge_begin><edge_end>State()
Submachine State()<edge_begin><edge_end>Composite State(is Concurrent)
Submachine State()<edge_begin><edge_end>State Machine()
Synch State(bound)<edge_begin><edge_end>State Vertex()
Synch State(bound)<edge_begin><edge_end>Integer()
Stub State(reference State)<edge_begin><edge_end>State Vertex()
Stub State(reference State)<edge_begin><edge_end>String()
Final State()<edge_begin><edge_end>State()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Element()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Namespace()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>String()
Model Element(name, visibility, is Specification)<edge_begin><edge_end>Boolean()
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Generalization(discriminator)
Generalizable Element(is Root, is Leaf, is Abstract)<edge_begin><edge_end>Boolean()
Namespace()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Classifier()<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Classifier()<edge_begin><edge_end>Namespace()
Classifier()<edge_begin><edge_end>Generalization(discriminator)
Classifier()<edge_begin><edge_end>Feature(owner Scope)
Feature(owner Scope)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Feature(owner Scope)<edge_begin><edge_end>Classifier()
Relationship()<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Behavioral Feature(is Query)<edge_begin><edge_end>Feature(owner Scope)
Behavioral Feature(is Query)<edge_begin><edge_end>Parameter(kind)
Behavioral Feature(is Query)<edge_begin><edge_end>Boolean()
Operation(concurrency, is Root, is Leaf, is Abstract, specification)<edge_begin><edge_end>Behavioral Feature(is Query)
Operation(concurrency, is Root, is Leaf, is Abstract, specification)<edge_begin><edge_end>Boolean()
Operation(concurrency, is Root, is Leaf, is Abstract, specification)<edge_begin><edge_end>String()
Parameter(kind)<edge_begin><edge_end>Model Element(name, visibility, is Specification)
Parameter(kind)<edge_begin><edge_end>Classifier()
Parameter(kind)<edge_begin><edge_end>Behavioral Feature(is Query)
Parameter(kind)<edge_begin><edge_end>Expression(language, body)
Generalization(discriminator)<edge_begin><edge_end>Relationship()
Generalization(discriminator)<edge_begin><edge_end>Generalizable Element(is Root, is Leaf, is Abstract)
Generalization(discriminator)<edge_begin><edge_end>Classifier()
Generalization(discriminator)<edge_begin><edge_end>String()
Bib Te X File()<edge_begin><edge_end>Bib Te X Entry(id)
Author(author)<edge_begin><edge_end>String()
Bib Te X Entry(id)<edge_begin><edge_end>String()
Authored Entry()<edge_begin><edge_end>Bib Te X Entry(id)
Authored Entry()<edge_begin><edge_end>Author(author)
Dated Entry(year)<edge_begin><edge_end>Bib Te X Entry(id)
Dated Entry(year)<edge_begin><edge_end>String()
Titled Entry(title)<edge_begin><edge_end>Bib Te X Entry(id)
Titled Entry(title)<edge_begin><edge_end>String()
Book Titled Entry(booktitle)<edge_begin><edge_end>Bib Te X Entry(id)
Book Titled Entry(booktitle)<edge_begin><edge_end>String()
Article(journal)<edge_begin><edge_end>Authored Entry()
Article(journal)<edge_begin><edge_end>Dated Entry(year)
Article(journal)<edge_begin><edge_end>Titled Entry(title)
Article(journal)<edge_begin><edge_end>String()
Tech Report()<edge_begin><edge_end>Authored Entry()
Tech Report()<edge_begin><edge_end>Dated Entry(year)
Tech Report()<edge_begin><edge_end>Titled Entry(title)
Unpublished(note)<edge_begin><edge_end>Authored Entry()
Unpublished(note)<edge_begin><edge_end>Titled Entry(title)
Unpublished(note)<edge_begin><edge_end>String()
Manual()<edge_begin><edge_end>Titled Entry(title)
Proceedings()<edge_begin><edge_end>Dated Entry(year)
Proceedings()<edge_begin><edge_end>Titled Entry(title)
In Proceedings()<edge_begin><edge_end>Proceedings()
In Proceedings()<edge_begin><edge_end>Authored Entry()
In Proceedings()<edge_begin><edge_end>Book Titled Entry(booktitle)
Booklet()<edge_begin><edge_end>Dated Entry(year)
Book(publisher)<edge_begin><edge_end>Authored Entry()
Book(publisher)<edge_begin><edge_end>Dated Entry(year)
Book(publisher)<edge_begin><edge_end>Titled Entry(title)
Book(publisher)<edge_begin><edge_end>String()
In Collection()<edge_begin><edge_end>Book(publisher)
In Collection()<edge_begin><edge_end>Book Titled Entry(booktitle)
In Book(chapter)<edge_begin><edge_end>Book(publisher)
In Book(chapter)<edge_begin><edge_end>Integer()
Misc()<edge_begin><edge_end>Bib Te X Entry(id)
Thesis Entry(school)<edge_begin><edge_end>Authored Entry()
Thesis Entry(school)<edge_begin><edge_end>Dated Entry(year)
Thesis Entry(school)<edge_begin><edge_end>Titled Entry(title)
Thesis Entry(school)<edge_begin><edge_end>String()
Ph D Thesis()<edge_begin><edge_end>Thesis Entry(school)
Master Thesis()<edge_begin><edge_end>Thesis Entry(school)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
Value Type()<edge_begin><edge_end>Data()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Number Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Error Value()<edge_begin><edge_end>Value Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Smart Tags Collection()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Workbook()<edge_begin><edge_end>Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)
Workbook()<edge_begin><edge_end>Worksheet(name)
Worksheet(name)<edge_begin><edge_end>Workbook()
Worksheet(name)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Worksheet(name)<edge_begin><edge_end>String()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Table Element(index)<edge_begin><edge_end>Styled Element()
Table Element(index)<edge_begin><edge_end>Integer()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Comment(author, show Always)
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Comment(author, show Always)<edge_begin><edge_end>Data()
Comment(author, show Always)<edge_begin><edge_end>String()
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Data()<edge_begin><edge_end>Comment(author, show Always)
Data()<edge_begin><edge_end>Value Type()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Integer()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Boolean()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Double()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>String()
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Description Provider(description)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Status Provider()
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Validation Set(abstract, extension, label)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Custom Category(identifier, label, description)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contact(name, email)
Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Available Versions Header()<edge_begin><edge_end>Available Version(version Match, version, filter, available From)
Available Versions Header()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Bundle()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Category()<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type, filter)
Category()<edge_begin><edge_end>Categories()
Category()<edge_begin><edge_end>Features()
Category()<edge_begin><edge_end>Products()
Category()<edge_begin><edge_end>Bundles()
Category()<edge_begin><edge_end>Fragments()
Category()<edge_begin><edge_end>IU Details()
Configuration(operating System, window System, architecture)<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Contact(name, email)<edge_begin><edge_end>Aggregation(label, build Root, packed Strategy, sendmail, type, maven Result)
Contribution(label)<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Contribution(label)<edge_begin><edge_end>Description Provider(description)
Contribution(label)<edge_begin><edge_end>Status Provider()
Contribution(label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Contribution(label)<edge_begin><edge_end>Identification Provider()
Contribution(label)<edge_begin><edge_end>Mapped Repository(mirror Artifacts, category Prefix)
Contribution(label)<edge_begin><edge_end>Contact(name, email)
Contribution(label)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Feature()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Feature()<edge_begin><edge_end>Features()
Feature()<edge_begin><edge_end>Bundles()
Feature()<edge_begin><edge_end>Fragments()
Custom Category(identifier, label, description)<edge_begin><edge_end>Status Provider()
Custom Category(identifier, label, description)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Custom Category(identifier, label, description)<edge_begin><edge_end>Feature()
Exclusion Rule()<edge_begin><edge_end>Map Rule()
Installable Unit Request(name, version Range)<edge_begin><edge_end>Status Provider()
Installable Unit Request(name, version Range)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Description Provider(description)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Available Versions Header()
Installable Unit Request(name, version Range)<edge_begin><edge_end>Available Version(version Match, version, filter, available From)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Description Provider(description)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Identification Provider()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Product()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Bundle()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Feature()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Category()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Map Rule()
Mapped Unit()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Mapped Unit()<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Mapped Unit()<edge_begin><edge_end>Identification Provider()
Mapped Unit()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Map Rule()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Map Rule()<edge_begin><edge_end>Description Provider(description)
Map Rule()<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Status Provider()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Status Provider()
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Product()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Product()<edge_begin><edge_end>Features()
Product()<edge_begin><edge_end>Bundles()
Product()<edge_begin><edge_end>Fragments()
Status Provider()<edge_begin><edge_end>Status(code, message)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Enabled Status Provider(branch Enabled, enabled)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Description Provider(description)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Status Provider()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Identification Provider()
Validation Set(abstract, extension, label)<edge_begin><edge_end>Contribution(label)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Validation Set(abstract, extension, label)<edge_begin><edge_end>Validation Set(abstract, extension, label)
Valid Configurations Rule()<edge_begin><edge_end>Map Rule()
Valid Configurations Rule()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Bundles()<edge_begin><edge_end>Bundle()
Categories()<edge_begin><edge_end>Category()
Features()<edge_begin><edge_end>Feature()
Fragment()<edge_begin><edge_end>Bundle()
Fragments()<edge_begin><edge_end>Fragment()
Installable Units()<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type, filter)
Installable Units()<edge_begin><edge_end>Categories()
Installable Units()<edge_begin><edge_end>Features()
Installable Units()<edge_begin><edge_end>Products()
Installable Units()<edge_begin><edge_end>Bundles()
Installable Units()<edge_begin><edge_end>Fragments()
Installable Units()<edge_begin><edge_end>Miscellaneous()
IU Details()<edge_begin><edge_end>Requirements()
IU Details()<edge_begin><edge_end>Provided Capabilities()
IU Details()<edge_begin><edge_end>Properties()
IU Details()<edge_begin><edge_end>Touchpoints()
IU Details()<edge_begin><edge_end>Licenses()
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type, filter)
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Details()
Repository Browser(loading)<edge_begin><edge_end>Metadata Repository Structured View(name, loaded, location)
Metadata Repository Structured View(name, loaded, location)<edge_begin><edge_end>Installable Units()
Metadata Repository Structured View(name, loaded, location)<edge_begin><edge_end>Properties()
Metadata Repository Structured View(name, loaded, location)<edge_begin><edge_end>Repository References()
Miscellaneous()<edge_begin><edge_end>Other IU()
Other IU()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Products()<edge_begin><edge_end>Product()
Properties()<edge_begin><edge_end>Property(key, value)
Provided Capabilities()<edge_begin><edge_end>Provided Capability Wrapper()
Provided Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Requirements()<edge_begin><edge_end>Requirement Wrapper()
Requirement Wrapper()<edge_begin><edge_end>Label Provider(label)
Internal Model()<edge_begin><edge_end>Automaton(event Pattern Id)
Internal Model()<edge_begin><edge_end>Event Token()
Automaton(event Pattern Id)<edge_begin><edge_end>State(label)
Automaton(event Pattern Id)<edge_begin><edge_end>Event Token()
Automaton(event Pattern Id)<edge_begin><edge_end>Timed Zone(time)
Automaton(event Pattern Id)<edge_begin><edge_end>Init State()
Automaton(event Pattern Id)<edge_begin><edge_end>Final State()
Automaton(event Pattern Id)<edge_begin><edge_end>Trap State()
Event Token()<edge_begin><edge_end>State(label)
Event Token()<edge_begin><edge_end>Timed Zone(time)
Event Token()<edge_begin><edge_end>Parameter Table()
State(label)<edge_begin><edge_end>Transition()
State(label)<edge_begin><edge_end>Event Token()
State(label)<edge_begin><edge_end>Timed Zone(time)
Init State()<edge_begin><edge_end>State(label)
Final State()<edge_begin><edge_end>State(label)
Trap State()<edge_begin><edge_end>State(label)
Transition()<edge_begin><edge_end>State(label)
Typed Transition()<edge_begin><edge_end>Transition()
Typed Transition()<edge_begin><edge_end>Guard()
Typed Transition()<edge_begin><edge_end>Parameter(position, symbolic Name)
Negative Transition()<edge_begin><edge_end>Typed Transition()
Epsilon Transition()<edge_begin><edge_end>Transition()
Guard()<edge_begin><edge_end>Typed Transition()
Timed Zone(time)<edge_begin><edge_end>State(label)
Within()<edge_begin><edge_end>Timed Zone(time)
Holds For()<edge_begin><edge_end>Timed Zone(time)
Parameter(position, symbolic Name)<edge_begin><edge_end>Typed Transition()
Parameter Table()<edge_begin><edge_end>Parameter Binding(symbolic Name, value)
Parameter Table()<edge_begin><edge_end>Event Token()
Parameter Binding(symbolic Name, value)<edge_begin><edge_end>Parameter Table()
Documentation(title)<edge_begin><edge_end>Section()
Documentation(title)<edge_begin><edge_end>Term Entry(description)
Section()<edge_begin><edge_end>Fragment Container()
Section()<edge_begin><edge_end>Named Element(id, name, label)
Subsection()<edge_begin><edge_end>Fragment Container()
Subsection()<edge_begin><edge_end>Fragment()
Subsection()<edge_begin><edge_end>Named Element(id, name, label)
Subsubsection()<edge_begin><edge_end>Fragment Container()
Subsubsection()<edge_begin><edge_end>Fragment()
Subsubsection()<edge_begin><edge_end>Named Element(id, name, label)
Paragraph()<edge_begin><edge_end>Fragment()
Paragraph()<edge_begin><edge_end>Text Container()
Line()<edge_begin><edge_end>Text(text)
List()<edge_begin><edge_end>Fragment()
List()<edge_begin><edge_end>List Item(text)
Table()<edge_begin><edge_end>Fragment()
Table()<edge_begin><edge_end>Table Header()
Table()<edge_begin><edge_end>Table Row()
Table Header()<edge_begin><edge_end>Table Cell(content, span)
Table Row()<edge_begin><edge_end>Table Cell(content, span)
Image(original Source, resource, context Class Name)<edge_begin><edge_end>Fragment()
Image(original Source, resource, context Class Name)<edge_begin><edge_end>Named Element(id, name, label)
Image(original Source, resource, context Class Name)<edge_begin><edge_end>Width(width, unit)
Term Entry(description)<edge_begin><edge_end>Named Element(id, name, label)
XML(context Class Name, resource, content)<edge_begin><edge_end>Fragment()
XML(context Class Name, resource, content)<edge_begin><edge_end>Named Element(id, name, label)
Page Break()<edge_begin><edge_end>Fragment()
Listing()<edge_begin><edge_end>Fragment()
Listing()<edge_begin><edge_end>Text Container()
Code()<edge_begin><edge_end>Text(text)
Link(uri)<edge_begin><edge_end>Fragment()
Link(uri)<edge_begin><edge_end>Named Element(id, name, label)
Reference(referred Label)<edge_begin><edge_end>Text(text)
Reference(referred Label)<edge_begin><edge_end>Named Element(id, name, label)
Html Code()<edge_begin><edge_end>Text(text)
Fragment Container()<edge_begin><edge_end>Text Container()
Fragment Container()<edge_begin><edge_end>Fragment()
Text Container()<edge_begin><edge_end>Text(text)
Text(text)<edge_begin><edge_end>Fragment()
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Connection(version, Context Mode, Context Id, context Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Connection(version, Context Mode, Context Id, context Name)<edge_begin><edge_end>Queries Connection()
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)<edge_begin><edge_end>Map()
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Additional Properties(key, value)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Ebcdic Connection(Mid File, Data File, Code Page, Source File Start, Source File End)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context, server Url)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context, server Url)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Additional Properties(key, value)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name, as Xml Schema)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>Additional Connection Property(property Name, Value)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAPBW Table(model Type, active, source System Name, info Area Name, inner IO Type)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Input SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAP Function Unit(Output Type, Output Table Name, as Xml Schema)<edge_begin><edge_end>SAP Function Param Data()
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name, as Xml Schema)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name, as Xml Schema)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List, generation Mode)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List, generation Mode)<edge_begin><edge_end>List()
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>List()
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>WSDL Parameter(Element, source, Column, Expression, Parameter Info, Parameter Info Parent)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out, web Service Url Text For O Auth, consume Key, consume Secret, callback Host, callback Port, salesforce Version, token, login Type)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out, web Service Url Text For O Auth, consume Key, consume Secret, callback Host, callback Port, salesforce Version, token, login Type)<edge_begin><edge_end>Salesforce Module Unit(module Name)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Td Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name, as Xml Schema)
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>Td Table()
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>HL7File Node(File Path, Order, Attribute, Default Value, Related Column, Repeatable)
Header Footer Connection(is Header, imports, main Code, libraries)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
FTP Connection(Host, Port, Username, Password, Mode, Ecoding, SFTP, FTPS, Method, Privatekey, Passphrase, Keystore File, Keystore Password, Usesocks, Proxyhost, Proxyport, Proxyuser, Proxypassword, Custom Encode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
BRMS Connection(xml Field, url Name, tac Webapp Name, class Name, module Used, package)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
BRMS Connection(xml Field, url Name, tac Webapp Name, class Name, module Used, package)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Condition Type(input Column, function, operator, value)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Inner Join Map(key, value)
EDIFACT Connection(Xml Name, File Name, Xml Path)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
EDIFACT Column(EDI Column Name, EDI Xpath)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out, web Service Url Text For O Auth, consume Key, consume Secret, callback Host, callback Port, salesforce Version, token, login Type)
SAP Table(table Search Type)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Table Field(business Name, ref Table)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
SAP Function Parameter(name, type, description, length, changing, test Value, table Reside In Tables)<edge_begin><edge_end>SAP Function Parameter(name, type, description, length, changing, test Value, table Reside In Tables)
SAP Function Param Data()<edge_begin><edge_end>SAP Function Parameter(name, type, description, length, changing, test Value, table Reside In Tables)
SAPBW Table(model Type, active, source System Name, info Area Name, inner IO Type)<edge_begin><edge_end>SAP Table(table Search Type)
SAPBW Table Field(logical Name)<edge_begin><edge_end>SAP Table Field(business Name, ref Table)
Td Table()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Td View()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Td Column()<edge_begin><edge_end>Td Sql Data Type(java Data Type, nullable, unsigned Attribute, case Sensitive, auto Increment, local Type Name, searchable)
Td Expression(version, modification Date, name, expression Variable Map)<edge_begin><edge_end>java Hash Map()
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Schema(xsd File Path)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Content()
Td Xml Content()<edge_begin><edge_end>Td Xml Element Type(java Type)
Statemachine()<edge_begin><edge_end>State(initial, final, id, name)
Statemachine()<edge_begin><edge_end>Transition()
State(initial, final, id, name)<edge_begin><edge_end>Command()
Transition()<edge_begin><edge_end>State(initial, final, id, name)
Transition()<edge_begin><edge_end>Expression()
Set Command(signal)<edge_begin><edge_end>Command()
Set Command(signal)<edge_begin><edge_end>Expression()
Execute Command(operation)<edge_begin><edge_end>Command()
Execute Command(operation)<edge_begin><edge_end>Expression()
Print Command()<edge_begin><edge_end>Command()
Print Command()<edge_begin><edge_end>Expression()
Verbatim Expression(code)<edge_begin><edge_end>Expression()
State Property Expression(property)<edge_begin><edge_end>Expression()
State Property Expression(property)<edge_begin><edge_end>State(initial, final, id, name)
Use Cases Model()<edge_begin><edge_end>Namespace Import()
Use Cases Model()<edge_begin><edge_end>Package Declaration(name, description)
Namespace Import()<edge_begin><edge_end>Package Declaration(name, description)
Package Declaration(name, description)<edge_begin><edge_end>Namespace Import()
Package Declaration(name, description)<edge_begin><edge_end>Actor(name, type, description)
Package Declaration(name, description)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Actor(name, type, description)<edge_begin><edge_end>Actor(name, type, description)
Use Case(name, uc Name, goals)<edge_begin><edge_end>Actor(name, type, description)
Use Case(name, uc Name, goals)<edge_begin><edge_end>Page Ref()
Use Case(name, uc Name, goals)<edge_begin><edge_end>Precondition(name)
Use Case(name, uc Name, goals)<edge_begin><edge_end>Basic Flow()
Use Case(name, uc Name, goals)<edge_begin><edge_end>Alternative Flow()
Use Case(name, uc Name, goals)<edge_begin><edge_end>Exception Flow(condition)
Precondition(name)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Flow(final State)<edge_begin><edge_end>Step(name, label, description)
Named Flow(name)<edge_begin><edge_end>Flow(final State)
Basic Flow()<edge_begin><edge_end>Flow(final State)
Alternative Flow()<edge_begin><edge_end>Named Flow(name)
Exception Flow(condition)<edge_begin><edge_end>Named Flow(name)
Step(name, label, description)<edge_begin><edge_end>Actor(name, type, description)
Step(name, label, description)<edge_begin><edge_end>Entity Ref()
Step(name, label, description)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Step(name, label, description)<edge_begin><edge_end>Step Alternative(finalize Flow, final State)
Step Alternative(finalize Flow, final State)<edge_begin><edge_end>Step(name, label, description)
Condition(condition)<edge_begin><edge_end>Step Alternative(finalize Flow, final State)
Local Alternative(description)<edge_begin><edge_end>Step Alternative(finalize Flow, final State)
Local Alternative(description)<edge_begin><edge_end>Condition(condition)
Local Alternative(description)<edge_begin><edge_end>Use Case(name, uc Name, goals)
Alternative Flow Alternative()<edge_begin><edge_end>Step Alternative(finalize Flow, final State)
Alternative Flow Alternative()<edge_begin><edge_end>Condition(condition)
Alternative Flow Alternative()<edge_begin><edge_end>Named Flow(name)
Key Space(name, replication Factor, replica Placement Strategy)<edge_begin><edge_end>Column Family(name)
Column Family(name)<edge_begin><edge_end>Key Space(name, replication Factor, replica Placement Strategy)
Column Family(name)<edge_begin><edge_end>Column(name)
Column(name)<edge_begin><edge_end>Type()
Dynamic Column Family()<edge_begin><edge_end>Column Family(name)
Dynamic Column Family()<edge_begin><edge_end>Column(name)
Static Column Family()<edge_begin><edge_end>Column Family(name)
Primitive Type(kind)<edge_begin><edge_end>Type()
Data Structure Type()<edge_begin><edge_end>Type()
Map Type(key Type, base Type)<edge_begin><edge_end>Data Structure Type()
Collection Type(kind, key Type)<edge_begin><edge_end>Data Structure Type()
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Specification(namespace)
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Specification()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Event Derivation()<edge_begin><edge_end>Expression()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Assignment(operator)<edge_begin><edge_end>Expression()
Event Raising()<edge_begin><edge_end>Expression()
Element Reference Expression()<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
Event Definition(direction)<edge_begin><edge_end>Event Derivation()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Operation Call()<edge_begin><edge_end>Expression()
Operation Call()<edge_begin><edge_end>Operation()
Arc()<edge_begin><edge_end>HL Arc Addin(kind)
Arc()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Page()
HL Arc Addin(kind)<edge_begin><edge_end>HL Annotation()
Has Label()<edge_begin><edge_end>Label()
Has Name()<edge_begin><edge_end>Name()
Instance(sub Page ID)<edge_begin><edge_end>Node()
Label()<edge_begin><edge_end>Has Label()
Name()<edge_begin><edge_end>HL Annotation()
Node()<edge_begin><edge_end>Object()
Node()<edge_begin><edge_end>Arc()
Node()<edge_begin><edge_end>Pragmatic(name)
Object()<edge_begin><edge_end>Has Label()
Object()<edge_begin><edge_end>Has Name()
Object()<edge_begin><edge_end>Page()
Page()<edge_begin><edge_end>Has Name()
Page()<edge_begin><edge_end>Has Label()
Page()<edge_begin><edge_end>Petri Net(kind, time Type)
Page()<edge_begin><edge_end>Object()
Page()<edge_begin><edge_end>Arc()
Petri Net(kind, time Type)<edge_begin><edge_end>Has Label()
Petri Net(kind, time Type)<edge_begin><edge_end>Has Name()
Petri Net(kind, time Type)<edge_begin><edge_end>Page()
Place()<edge_begin><edge_end>Place Node()
Place()<edge_begin><edge_end>Ref Place()
Place Node()<edge_begin><edge_end>Node()
Ref Place()<edge_begin><edge_end>Place Node()
Ref Place()<edge_begin><edge_end>Place()
Ref Trans()<edge_begin><edge_end>Transition Node()
Transition()<edge_begin><edge_end>Transition Node()
Transition Node()<edge_begin><edge_end>Node()
Pragmatic(name)<edge_begin><edge_end>Placement Constraints()
Derived()<edge_begin><edge_end>Pragmatic(name)
Derived()<edge_begin><edge_end>PN Pattern()
Explicit()<edge_begin><edge_end>Pragmatic(name)
Custom Derived Pragmatics()<edge_begin><edge_end>Derived()
Custom Derived Pragmatics()<edge_begin><edge_end>Custom Pragmatics()
Custom Explicit Pragmatics()<edge_begin><edge_end>Explicit()
Custom Explicit Pragmatics()<edge_begin><edge_end>Custom Pragmatics()
Custom Pragmatics()<edge_begin><edge_end>Pragmatic(name)
Abstract Template Tree()<edge_begin><edge_end>Principal()
Principal()<edge_begin><edge_end>Instance(sub Page ID)
Principal()<edge_begin><edge_end>Service()
Service()<edge_begin><edge_end>Instance(sub Page ID)
Service()<edge_begin><edge_end>Block()
Block()<edge_begin><edge_end>Place Node()
Atomic()<edge_begin><edge_end>Block()
Atomic()<edge_begin><edge_end>Transition()
Container()<edge_begin><edge_end>Block()
Binding(template)<edge_begin><edge_end>Pragmatic(name)
Bindings()<edge_begin><edge_end>Binding(template)
Loop()<edge_begin><edge_end>Container()
Conditional()<edge_begin><edge_end>Container()
Conditinoal()<edge_begin><edge_end>Container()
Bibtex File()<edge_begin><edge_end>Entry(id, abstract)
Author(name)<edge_begin><edge_end>String()
Entry(id, abstract)<edge_begin><edge_end>String()
Authored Entry()<edge_begin><edge_end>Entry(id, abstract)
Authored Entry()<edge_begin><edge_end>Author(name)
Book Titled Entry(booktitle)<edge_begin><edge_end>Entry(id, abstract)
Book Titled Entry(booktitle)<edge_begin><edge_end>String()
Institution Entry(institution)<edge_begin><edge_end>Entry(id, abstract)
Institution Entry(institution)<edge_begin><edge_end>String()
Editored Entry(editor)<edge_begin><edge_end>Entry(id, abstract)
Editored Entry(editor)<edge_begin><edge_end>String()
Dated Entry(year, month)<edge_begin><edge_end>Entry(id, abstract)
Dated Entry(year, month)<edge_begin><edge_end>String()
Journal Entry(journal)<edge_begin><edge_end>Entry(id, abstract)
Journal Entry(journal)<edge_begin><edge_end>String()
Titled Entry(title)<edge_begin><edge_end>Entry(id, abstract)
Titled Entry(title)<edge_begin><edge_end>String()
Noted Entry(note)<edge_begin><edge_end>Entry(id, abstract)
Noted Entry(note)<edge_begin><edge_end>String()
Publishered Entry(publisher)<edge_begin><edge_end>Entry(id, abstract)
Publishered Entry(publisher)<edge_begin><edge_end>String()
School Entry(school)<edge_begin><edge_end>Entry(id, abstract)
School Entry(school)<edge_begin><edge_end>String()
Article(volume, number, pages, note)<edge_begin><edge_end>Authored Entry()
Article(volume, number, pages, note)<edge_begin><edge_end>Dated Entry(year, month)
Article(volume, number, pages, note)<edge_begin><edge_end>Titled Entry(title)
Article(volume, number, pages, note)<edge_begin><edge_end>Journal Entry(journal)
Article(volume, number, pages, note)<edge_begin><edge_end>String()
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Authored Entry()
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Editored Entry(editor)
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Publishered Entry(publisher)
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Dated Entry(year, month)
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>Titled Entry(title)
Book(volume, number, series, address, edition, note)<edge_begin><edge_end>String()
Booklet(howpublished, address, note)<edge_begin><edge_end>Dated Entry(year, month)
Booklet(howpublished, address, note)<edge_begin><edge_end>Titled Entry(title)
Booklet(howpublished, address, note)<edge_begin><edge_end>Author(name)
Booklet(howpublished, address, note)<edge_begin><edge_end>String()
In Book(chapter, type)<edge_begin><edge_end>Book(volume, number, series, address, edition, note)
In Book(chapter, type)<edge_begin><edge_end>String()
In Collection(chapter, type)<edge_begin><edge_end>Book(volume, number, series, address, edition, note)
In Collection(chapter, type)<edge_begin><edge_end>Book Titled Entry(booktitle)
In Collection(chapter, type)<edge_begin><edge_end>String()
Manual(organization, address, edition, note)<edge_begin><edge_end>Titled Entry(title)
Manual(organization, address, edition, note)<edge_begin><edge_end>Authored Entry()
Manual(organization, address, edition, note)<edge_begin><edge_end>Dated Entry(year, month)
Manual(organization, address, edition, note)<edge_begin><edge_end>String()
Tech Report(type, number, address, note)<edge_begin><edge_end>Authored Entry()
Tech Report(type, number, address, note)<edge_begin><edge_end>Institution Entry(institution)
Tech Report(type, number, address, note)<edge_begin><edge_end>Dated Entry(year, month)
Tech Report(type, number, address, note)<edge_begin><edge_end>Titled Entry(title)
Tech Report(type, number, address, note)<edge_begin><edge_end>String()
Thesis Entry(type, address, note)<edge_begin><edge_end>Authored Entry()
Thesis Entry(type, address, note)<edge_begin><edge_end>Dated Entry(year, month)
Thesis Entry(type, address, note)<edge_begin><edge_end>Titled Entry(title)
Thesis Entry(type, address, note)<edge_begin><edge_end>School Entry(school)
Thesis Entry(type, address, note)<edge_begin><edge_end>String()
Phd Thesis()<edge_begin><edge_end>Thesis Entry(type, address, note)
Masters Thesis()<edge_begin><edge_end>Thesis Entry(type, address, note)
Proceedings(editor, volume, number, series, address, organization, publisher, note)<edge_begin><edge_end>Dated Entry(year, month)
Proceedings(editor, volume, number, series, address, organization, publisher, note)<edge_begin><edge_end>Titled Entry(title)
Proceedings(editor, volume, number, series, address, organization, publisher, note)<edge_begin><edge_end>String()
In Proceedings(pages)<edge_begin><edge_end>Authored Entry()
In Proceedings(pages)<edge_begin><edge_end>Book Titled Entry(booktitle)
In Proceedings(pages)<edge_begin><edge_end>Proceedings(editor, volume, number, series, address, organization, publisher, note)
In Proceedings(pages)<edge_begin><edge_end>String()
Conference()<edge_begin><edge_end>In Proceedings(pages)
Unpublished()<edge_begin><edge_end>Authored Entry()
Unpublished()<edge_begin><edge_end>Titled Entry(title)
Unpublished()<edge_begin><edge_end>Noted Entry(note)
Unpublished()<edge_begin><edge_end>Dated Entry(year, month)
Misc(title, howpublished, month, year, note)<edge_begin><edge_end>Entry(id, abstract)
Misc(title, howpublished, month, year, note)<edge_begin><edge_end>Author(name)
Misc(title, howpublished, month, year, note)<edge_begin><edge_end>String()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Cell Type(unit, formula, err, value)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Integer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Boolean()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Settings Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Colors Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Print Setup()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Fonts Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Face Names Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Style Sheets Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Sheet()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Masters Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Pages Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Windows Info()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Event List()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Header Footer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>VB Project Data(data)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Email Routing Data(data, size)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Solution XML()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Custom Properties Collection()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Properties Collection()<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Custom Properties Collection()<edge_begin><edge_end>Custom Property(name, data Type)
Custom Property(name, data Type)<edge_begin><edge_end>Custom Properties Collection()
Custom Property(name, data Type)<edge_begin><edge_end>String()
Colors Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Colors Table()<edge_begin><edge_end>Color Entry(rgb)
Color Entry(rgb)<edge_begin><edge_end>I Xrequired Elt(i X)
Color Entry(rgb)<edge_begin><edge_end>Colors Table()
Color Entry(rgb)<edge_begin><edge_end>String()
Fonts Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Fonts Table()<edge_begin><edge_end>Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Identified Elt(ID)
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Fonts Table()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>String()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Integer()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Boolean()
Face Names Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Face Names Table()<edge_begin><edge_end>Face Name(name, unicode Ranges, char Set, panos, flags)
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Identified Elt(ID)
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Face Names Table()
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>String()
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Integer()
VB Project Data(data)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
VB Project Data(data)<edge_begin><edge_end>String()
Email Routing Data(data, size)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Email Routing Data(data, size)<edge_begin><edge_end>String()
Email Routing Data(data, size)<edge_begin><edge_end>Integer()
Style Sheets Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Style Sheets Collection()<edge_begin><edge_end>Style Sheet()
Style Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Style Sheet()<edge_begin><edge_end>Identified Elt(ID)
Style Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Style Sheet()<edge_begin><edge_end>Style Sheets Collection()
Document Sheet()<edge_begin><edge_end>Page Sheet()
Document Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Document Sheet()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Page Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Page Sheet()<edge_begin><edge_end>Unique Id Elt(Unique ID)
Page Sheet()<edge_begin><edge_end>Master Elt()
Page Sheet()<edge_begin><edge_end>Page Elt()
Named Elt(name, name U)<edge_begin><edge_end>String()
Identified Elt(ID)<edge_begin><edge_end>Integer()
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shapes Collection()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shape Elt()
Shape Elt()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
IX Elt(i X)<edge_begin><edge_end>Integer()
Del Elt(del)<edge_begin><edge_end>Boolean()
Geom()<edge_begin><edge_end>Shape Elt()
Geom()<edge_begin><edge_end>IX Elt(i X)
Geom()<edge_begin><edge_end>Del Elt(del)
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Geom()<edge_begin><edge_end>Line To()
Geom()<edge_begin><edge_end>Move To()
Geom()<edge_begin><edge_end>Arc To()
Geom()<edge_begin><edge_end>Spline Knot()
Geom()<edge_begin><edge_end>Polyline To()
Geom()<edge_begin><edge_end>Infinite Line()
Geom()<edge_begin><edge_end>Ellipse()
Geom()<edge_begin><edge_end>Elliptical Arc To()
Geom()<edge_begin><edge_end>Spline Start()
Geom()<edge_begin><edge_end>NURBS To()
XY Elt()<edge_begin><edge_end>IX Elt(i X)
XY Elt()<edge_begin><edge_end>Del Elt(del)
XY Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Line To()<edge_begin><edge_end>XY Elt()
Line To()<edge_begin><edge_end>Geom()
Move To()<edge_begin><edge_end>XY Elt()
Move To()<edge_begin><edge_end>Geom()
XYA Elt()<edge_begin><edge_end>XY Elt()
XYA Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Arc To()<edge_begin><edge_end>XYA Elt()
Arc To()<edge_begin><edge_end>Geom()
Spline Knot()<edge_begin><edge_end>XYA Elt()
Spline Knot()<edge_begin><edge_end>Geom()
Polyline To()<edge_begin><edge_end>XYA Elt()
Polyline To()<edge_begin><edge_end>Geom()
XYAB Elt()<edge_begin><edge_end>XYA Elt()
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Infinite Line()<edge_begin><edge_end>XYAB Elt()
Infinite Line()<edge_begin><edge_end>Geom()
XYABCD Elt()<edge_begin><edge_end>XYAB Elt()
XYABCD Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Ellipse()<edge_begin><edge_end>XYABCD Elt()
Ellipse()<edge_begin><edge_end>Geom()
Elliptical Arc To()<edge_begin><edge_end>XYABCD Elt()
Elliptical Arc To()<edge_begin><edge_end>Geom()
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Spline Start()<edge_begin><edge_end>Geom()
XYABCDE Elt()<edge_begin><edge_end>XYABCD Elt()
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
NURBS To()<edge_begin><edge_end>XYABCDE Elt()
NURBS To()<edge_begin><edge_end>Geom()
Text()<edge_begin><edge_end>Shape Elt()
Text()<edge_begin><edge_end>Text Elt()
Text Elt()<edge_begin><edge_end>Text()
I Xrequired Elt(i X)<edge_begin><edge_end>Integer()
Cp()<edge_begin><edge_end>I Xrequired Elt(i X)
Cp()<edge_begin><edge_end>Text Elt()
Pp()<edge_begin><edge_end>I Xrequired Elt(i X)
Pp()<edge_begin><edge_end>Text Elt()
Tp()<edge_begin><edge_end>I Xrequired Elt(i X)
Tp()<edge_begin><edge_end>Text Elt()
Fld()<edge_begin><edge_end>I Xrequired Elt(i X)
Fld()<edge_begin><edge_end>Text Elt()
String Elt(value)<edge_begin><edge_end>Text Elt()
String Elt(value)<edge_begin><edge_end>String()
Char()<edge_begin><edge_end>Shape Elt()
Char()<edge_begin><edge_end>IX Elt(i X)
Char()<edge_begin><edge_end>Del Elt(del)
Char()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Para()<edge_begin><edge_end>Shape Elt()
Para()<edge_begin><edge_end>IX Elt(i X)
Para()<edge_begin><edge_end>Del Elt(del)
Para()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Tabs Collection()<edge_begin><edge_end>Shape Elt()
Tabs Collection()<edge_begin><edge_end>IX Elt(i X)
Tabs Collection()<edge_begin><edge_end>Del Elt(del)
Tabs Collection()<edge_begin><edge_end>Tab()
Tab()<edge_begin><edge_end>IX Elt(i X)
Tab()<edge_begin><edge_end>Tabs Collection()
Tab()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Field()<edge_begin><edge_end>Shape Elt()
Field()<edge_begin><edge_end>IX Elt(i X)
Field()<edge_begin><edge_end>Del Elt(del)
Field()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Masters Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Masters Collection()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Masters Collection()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
Icon(value)<edge_begin><edge_end>Master Elt()
Icon(value)<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Icon(value)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Page Elt()
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Connects Collection()<edge_begin><edge_end>Master Elt()
Connects Collection()<edge_begin><edge_end>Page Elt()
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Integer()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>String()
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Pages Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Pages Collection()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Identified Elt(ID)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Pages Collection()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Boolean()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Integer()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Double()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Page Elt()
Page Elt()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Document Settings Elt()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Print Setup()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Windows Info()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Event List()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Header Footer()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Solution XML()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Identified Element(name, id, description)<edge_begin><edge_end>User Property(name, value)
Element Refinement(sub Element Ref Entries, refined Element Entries)<edge_begin><edge_end>Identified Element(name, id, description)
Element Refinement(sub Element Ref Entries, refined Element Entries)<edge_begin><edge_end>Refineable Element()
Element Refinement(sub Element Ref Entries, refined Element Entries)<edge_begin><edge_end>Sub Element Reference(weight, referenced Element Entries)
Requirement Refinement()<edge_begin><edge_end>Element Refinement(sub Element Ref Entries, refined Element Entries)
Requirement Refinement()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Requirement Refinement()<edge_begin><edge_end>Verifiable Element(verified)
Requirement Refinement()<edge_begin><edge_end>Sub Requirement Reference()
Requirement Refinement()<edge_begin><edge_end>Abstract Requirement(risk)
Goal Refinement()<edge_begin><edge_end>Element Refinement(sub Element Ref Entries, refined Element Entries)
Goal Refinement()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Goal Refinement()<edge_begin><edge_end>Sub Goal Reference()
Goal Refinement()<edge_begin><edge_end>Abstract Goal()
Traceable To Design Elements Element()<edge_begin><edge_end>Identified Element(name, id, description)
Traceable To Design Elements Element()<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Traceable To Design Elements Element()<edge_begin><edge_end>Specification(version)
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Traceable To Design Elements Element()
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Stakeholder()
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Rationale()
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Contact Information(address, email, phone Number, country)
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Date()
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Abstract Contractual Element(origin Date, schedule Date, sources, dropped)<edge_begin><edge_end>Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)
Contact Information(address, email, phone Number, country)<edge_begin><edge_end>Identified Element(name, id, description)
Stakeholder()<edge_begin><edge_end>Identified Element(name, id, description)
Stakeholder()<edge_begin><edge_end>Contact Information(address, email, phone Number, country)
Rationale()<edge_begin><edge_end>Identified Element(name, id, description)
Rationale()<edge_begin><edge_end>Stakeholder()
Textual Contractual Element(priority)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Textual Contractual Element(priority)<edge_begin><edge_end>Textual Contractual Element(priority)
Textual Contractual Element(priority)<edge_begin><edge_end>Normalized Ratio()
Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Identified Element(name, id, description)
Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Normalized Ratio()
Uncertainty(volatility, costs Impact, schedule Impact, time Criticality, familiarity, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Positive Factor()
Satisfiable Element(satisfaction Level)<edge_begin><edge_end>Normalized Ratio()
Specification(version)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Specification(version)<edge_begin><edge_end>Verifiable Element(verified)
Specification(version)<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Specification(version)<edge_begin><edge_end>Rdal Org Package(contractual Element Entries, refinement Entries)
Specification(version)<edge_begin><edge_end>Contact Information(address, email, phone Number, country)
Specification(version)<edge_begin><edge_end>Conflict(degree)
Specification(version)<edge_begin><edge_end>System Overview(purpose)
Specification(version)<edge_begin><edge_end>Actor Reference()
Specification(version)<edge_begin><edge_end>Non Functional Property()
Specification(version)<edge_begin><edge_end>Stakeholder()
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Identified Element(name, id, description)
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Specification(version)
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Rdal Org Package(contractual Element Entries, refinement Entries)
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Element Refinement(sub Element Ref Entries, refined Element Entries)
Rdal Org Package(contractual Element Entries, refinement Entries)<edge_begin><edge_end>Textual Contractual Element(priority)
Requirements Package()<edge_begin><edge_end>Rdal Org Package(contractual Element Entries, refinement Entries)
Requirements Package()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Requirements Package()<edge_begin><edge_end>Verifiable Element(verified)
Requirements Package()<edge_begin><edge_end>Abstract Requirement(risk)
Requirements Package()<edge_begin><edge_end>Requirement Refinement()
Goals Package()<edge_begin><edge_end>Rdal Org Package(contractual Element Entries, refinement Entries)
Goals Package()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Goals Package()<edge_begin><edge_end>Abstract Goal()
Goals Package()<edge_begin><edge_end>Goal Refinement()
System Overview(purpose)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
System Overview(purpose)<edge_begin><edge_end>Capability()
System Overview(purpose)<edge_begin><edge_end>System Context()
System Overview(purpose)<edge_begin><edge_end>Interaction Variable(type, neglected)
Capability()<edge_begin><edge_end>Identified Element(name, id, description)
System Context()<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
System Context()<edge_begin><edge_end>Interaction Variable(type, neglected)
System Context()<edge_begin><edge_end>Actor Reference()
System Context()<edge_begin><edge_end>System Overview(purpose)
Variable()<edge_begin><edge_end>Identified Element(name, id, description)
Interaction Variable(type, neglected)<edge_begin><edge_end>Variable()
Actor Reference()<edge_begin><edge_end>Identified Element(name, id, description)
Abstract Requirement(risk)<edge_begin><edge_end>Textual Contractual Element(priority)
Abstract Requirement(risk)<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Abstract Requirement(risk)<edge_begin><edge_end>Verifiable Element(verified)
Abstract Requirement(risk)<edge_begin><edge_end>Verification Activity(passed)
Abstract Requirement(risk)<edge_begin><edge_end>Normalized Ratio()
Abstract Requirement(risk)<edge_begin><edge_end>Requirements Package()
Verification Activity(passed)<edge_begin><edge_end>Identified Element(name, id, description)
Verification Activity(passed)<edge_begin><edge_end>Abstract Requirement(risk)
Requirement()<edge_begin><edge_end>Abstract Requirement(risk)
Requirement()<edge_begin><edge_end>Refineable Element()
Requirement()<edge_begin><edge_end>Assumption()
Assumption()<edge_begin><edge_end>Abstract Requirement(risk)
Assumption()<edge_begin><edge_end>Requirement()
Assumption()<edge_begin><edge_end>Assumption()
Abstract Goal()<edge_begin><edge_end>Textual Contractual Element(priority)
Abstract Goal()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Abstract Goal()<edge_begin><edge_end>Refineable Element()
Abstract Goal()<edge_begin><edge_end>Conflict(degree)
Abstract Goal()<edge_begin><edge_end>Goals Package()
System Function Goal()<edge_begin><edge_end>Abstract Goal()
Non Functional Goal()<edge_begin><edge_end>Abstract Goal()
Quality Objective(modality, bound)<edge_begin><edge_end>Non Functional Goal()
Quality Objective(modality, bound)<edge_begin><edge_end>Non Functional Property()
Quality Objective(modality, bound)<edge_begin><edge_end>Sensitivity()
Conflict(degree)<edge_begin><edge_end>Identified Element(name, id, description)
Conflict(degree)<edge_begin><edge_end>Abstract Goal()
Conflict(degree)<edge_begin><edge_end>Abstract Contractual Element(origin Date, schedule Date, sources, dropped)
Conflict(degree)<edge_begin><edge_end>Normalized Ratio()
Referenced Design Elements(agregation Type)<edge_begin><edge_end>Identified Element(name, id, description)
Referenced Design Elements(agregation Type)<edge_begin><edge_end>Design Element Reference(evaluation Result)
Design Element Reference(evaluation Result)<edge_begin><edge_end>Identified Element(name, id, description)
Design Element Reference(evaluation Result)<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Design Element Reference(evaluation Result)<edge_begin><edge_end>Traceable To Design Elements Element()
Verifiable Design Element Ref()<edge_begin><edge_end>Design Element Reference(evaluation Result)
Verifiable Design Element Ref()<edge_begin><edge_end>Verifiable Element(verified)
Satisfiable Design Element Ref()<edge_begin><edge_end>Design Element Reference(evaluation Result)
Satisfiable Design Element Ref()<edge_begin><edge_end>Satisfiable Element(satisfaction Level)
Prioritized Sat Design Element Ref(priority, weight)<edge_begin><edge_end>Satisfiable Design Element Ref()
Prioritized Sat Design Element Ref(priority, weight)<edge_begin><edge_end>Positive Integer()
Prioritized Sat Design Element Ref(priority, weight)<edge_begin><edge_end>Normalized Ratio()
Syst Overview Design Elem Ref()<edge_begin><edge_end>Design Element Reference(evaluation Result)
Syst Context Design Elem Ref()<edge_begin><edge_end>Design Element Reference(evaluation Result)
Ref Manually Selected Design Elements()<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Ref Query Collected Design Elements()<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Trace Design Element Ref(container)<edge_begin><edge_end>Design Element Reference(evaluation Result)
Trace Design Element Ref(container)<edge_begin><edge_end>Requirements Coverage Data(nb Requirements, verification Level)
Trace Design Element Ref(container)<edge_begin><edge_end>Verifiable Element(verified)
Trace()<edge_begin><edge_end>Referenced Design Elements(agregation Type)
Trace()<edge_begin><edge_end>Specification(version)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Identified Element(name, id, description)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Normalized Ratio()
Non Functional Property()<edge_begin><edge_end>Identified Element(name, id, description)
Sensitivity()<edge_begin><edge_end>Traceable To Design Elements Element()
Sub Element Reference(weight, referenced Element Entries)<edge_begin><edge_end>Identified Element(name, id, description)
Sub Element Reference(weight, referenced Element Entries)<edge_begin><edge_end>Normalized Ratio()
Sub Element Reference(weight, referenced Element Entries)<edge_begin><edge_end>Refineable Element()
Sub Requirement Reference()<edge_begin><edge_end>Sub Element Reference(weight, referenced Element Entries)
Sub Requirement Reference()<edge_begin><edge_end>Abstract Requirement(risk)
Sub Goal Reference()<edge_begin><edge_end>Sub Element Reference(weight, referenced Element Entries)
Sub Goal Reference()<edge_begin><edge_end>Abstract Goal()
S Model(generated File)<edge_begin><edge_end>S Settings(schema, javapackage, engine)
S Model(generated File)<edge_begin><edge_end>S Artifact(name)
S Table(entityname, cached, prefix)<edge_begin><edge_end>S Artifact(name)
S Table(entityname, cached, prefix)<edge_begin><edge_end>S Settings(schema, javapackage, engine)
S Table(entityname, cached, prefix)<edge_begin><edge_end>S Table Member(name)
S Table Member(name)<edge_begin><edge_end>S Column Props(nullable, aes, index, javacolumn)
S Column(simple Type)<edge_begin><edge_end>S Table Member(name)
S Column(simple Type)<edge_begin><edge_end>S Ext Declared SQL Type()
S Column(simple Type)<edge_begin><edge_end>S Inlined SQL Type(value)
S Join Column()<edge_begin><edge_end>S Table Member(name)
S Join Column()<edge_begin><edge_end>S Table(entityname, cached, prefix)
S Enum()<edge_begin><edge_end>S Artifact(name)
S Enum()<edge_begin><edge_end>S Ext Declared SQL Type()
S Enum()<edge_begin><edge_end>S Enum Literal(name, value)
S String()<edge_begin><edge_end>S Inlined SQL Type(value)
S Decimal()<edge_begin><edge_end>S Inlined SQL Type(value)
Named Element(name)<edge_begin><edge_end>String()
Describable Element(description)<edge_begin><edge_end>String()
Commentable Element(comment)<edge_begin><edge_end>String()
Project()<edge_begin><edge_end>Named Element(name)
Project()<edge_begin><edge_end>Describable Element(description)
Project()<edge_begin><edge_end>Commentable Element(comment)
Project()<edge_begin><edge_end>Property(name, value, location, refid, resource, file, url, environment, classpath, classpathref, prefix)
Project()<edge_begin><edge_end>Target(if, unless)
Property(name, value, location, refid, resource, file, url, environment, classpath, classpathref, prefix)<edge_begin><edge_end>String()
Target(if, unless)<edge_begin><edge_end>Named Element(name)
Target(if, unless)<edge_begin><edge_end>Describable Element(description)
Target(if, unless)<edge_begin><edge_end>Commentable Element(comment)
Target(if, unless)<edge_begin><edge_end>String()
Target(if, unless)<edge_begin><edge_end>Task()
Target(if, unless)<edge_begin><edge_end>Target(if, unless)
Task Element()<edge_begin><edge_end>Named Element(name)
Task Element()<edge_begin><edge_end>Commentable Element(comment)
Task Element()<edge_begin><edge_end>Attribute(value)
Task Element()<edge_begin><edge_end>Task Element()
Attribute(value)<edge_begin><edge_end>Named Element(name)
Attribute(value)<edge_begin><edge_end>String()
Task()<edge_begin><edge_end>Task Element()
Task Parameter()<edge_begin><edge_end>Task Element()
Mga Object(name, position)<edge_begin><edge_end>String()
State Base(default Transition, marked)<edge_begin><edge_end>Mga Object(name, position)
State Base(default Transition, marked)<edge_begin><edge_end>String()
State Base(default Transition, marked)<edge_begin><edge_end>Boolean()
State Base(default Transition, marked)<edge_begin><edge_end>Association State State()
State Base(default Transition, marked)<edge_begin><edge_end>Data Var()
State Base(default Transition, marked)<edge_begin><edge_end>Association Data State Base()
Data Var()<edge_begin><edge_end>Mga Object(name, position)
Data Var()<edge_begin><edge_end>State Base(default Transition, marked)
Data Var()<edge_begin><edge_end>Or State()
Data Var()<edge_begin><edge_end>Association Data State Base()
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>Mga Object(name, position)
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>String()
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>Boolean()
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>Or State()
Transition(guard, trigger, action, is Sync)<edge_begin><edge_end>Association State State()
State Date Relation(value, color)<edge_begin><edge_end>Mga Object(name, position)
State Date Relation(value, color)<edge_begin><edge_end>String()
Root Folder(name)<edge_begin><edge_end>String()
Root Folder(name)<edge_begin><edge_end>Root Folder(name)
Root Folder(name)<edge_begin><edge_end>Or State()
Or State()<edge_begin><edge_end>Compound State()
Or State()<edge_begin><edge_end>Root Folder(name)
Or State()<edge_begin><edge_end>State()
Or State()<edge_begin><edge_end>Init()
Or State()<edge_begin><edge_end>Data Var()
Or State()<edge_begin><edge_end>State Data Relation(value, color)
Or State()<edge_begin><edge_end>Transition(guard, trigger, action, is Sync)
And State()<edge_begin><edge_end>Compound State()
Compound State()<edge_begin><edge_end>State Base(default Transition, marked)
Compound State()<edge_begin><edge_end>And State()
Compound State()<edge_begin><edge_end>Or State()
Primitive State()<edge_begin><edge_end>State Base(default Transition, marked)
Init()<edge_begin><edge_end>Primitive State()
Init()<edge_begin><edge_end>Or State()
State()<edge_begin><edge_end>Primitive State()
State()<edge_begin><edge_end>Or State()
State Data Relation(value, color)<edge_begin><edge_end>Primitive State()
State Data Relation(value, color)<edge_begin><edge_end>String()
State Data Relation(value, color)<edge_begin><edge_end>Or State()
State Data Relation(value, color)<edge_begin><edge_end>Association Data State Base()
Association State State()<edge_begin><edge_end>Transition(guard, trigger, action, is Sync)
Association State State()<edge_begin><edge_end>State Base(default Transition, marked)
Association Data State Base()<edge_begin><edge_end>State Data Relation(value, color)
Association Data State Base()<edge_begin><edge_end>Data Var()
Association Data State Base()<edge_begin><edge_end>State Base(default Transition, marked)
Element()<edge_begin><edge_end>Element()
Packageable Element()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Packageable Element()<edge_begin><edge_end>Parameterable Element()
Named Element(name, visibility, qualified Name)<edge_begin><edge_end>Element()
Named Element(name, visibility, qualified Name)<edge_begin><edge_end>String()
Named Element(name, visibility, qualified Name)<edge_begin><edge_end>Namespace()
Directed Relationship()<edge_begin><edge_end>Relationship()
Directed Relationship()<edge_begin><edge_end>Element()
Relationship()<edge_begin><edge_end>Element()
Namespace()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Namespace()<edge_begin><edge_end>Packageable Element()
Type()<edge_begin><edge_end>Packageable Element()
Classifier(is Abstract)<edge_begin><edge_end>Namespace()
Classifier(is Abstract)<edge_begin><edge_end>Redefinable Element(is Leaf)
Classifier(is Abstract)<edge_begin><edge_end>Type()
Classifier(is Abstract)<edge_begin><edge_end>Templateable Element()
Classifier(is Abstract)<edge_begin><edge_end>Boolean()
Classifier(is Abstract)<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Classifier(is Abstract)<edge_begin><edge_end>Classifier(is Abstract)
Classifier(is Abstract)<edge_begin><edge_end>Use Case()
Redefinable Element(is Leaf)<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Redefinable Element(is Leaf)<edge_begin><edge_end>Boolean()
Redefinable Element(is Leaf)<edge_begin><edge_end>Redefinable Element(is Leaf)
Redefinable Element(is Leaf)<edge_begin><edge_end>Classifier(is Abstract)
Templateable Element()<edge_begin><edge_end>Element()
Parameterable Element()<edge_begin><edge_end>Element()
Behaviored Classifier()<edge_begin><edge_end>Classifier(is Abstract)
Use Case()<edge_begin><edge_end>Behaviored Classifier()
Use Case()<edge_begin><edge_end>Include()
Use Case()<edge_begin><edge_end>Extend()
Use Case()<edge_begin><edge_end>Extension Point()
Use Case()<edge_begin><edge_end>Classifier(is Abstract)
Include()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Include()<edge_begin><edge_end>Directed Relationship()
Include()<edge_begin><edge_end>Use Case()
Extend()<edge_begin><edge_end>Named Element(name, visibility, qualified Name)
Extend()<edge_begin><edge_end>Directed Relationship()
Extend()<edge_begin><edge_end>Use Case()
Extend()<edge_begin><edge_end>Extension Point()
Extension Point()<edge_begin><edge_end>Redefinable Element(is Leaf)
Extension Point()<edge_begin><edge_end>Use Case()
Actor()<edge_begin><edge_end>Behaviored Classifier()
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Attribute(default)<edge_begin><edge_end>Structural Component(name)
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Base Table()<edge_begin><edge_end>Table(name)
Behavioural Component(name, body)<edge_begin><edge_end>Schema(name)
Behavioural Component(name, body)<edge_begin><edge_end>Parameter With Mode(mode)
Binary String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Boolean Type(descriptor)<edge_begin><edge_end>Predefined Type()
Character String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Collection Type()<edge_begin><edge_end>Constructed Type(name)
Collection Type()<edge_begin><edge_end>Collection Type()
Collection Type()<edge_begin><edge_end>Data Type()
Column(default)<edge_begin><edge_end>Structural Component(name)
Column(default)<edge_begin><edge_end>Table(name)
Column Constraint()<edge_begin><edge_end>Restriction()
Constructed Type(name)<edge_begin><edge_end>Data Type()
Data Type()<edge_begin><edge_end>Schema(name)
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Datetime Type(descriptor)<edge_begin><edge_end>Predefined Type()
Derived Table(query expression)<edge_begin><edge_end>Table(name)
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Distinct Type()<edge_begin><edge_end>Predefined Type()
Distinct Type()<edge_begin><edge_end>Feature()
Field()<edge_begin><edge_end>Structural Component(name)
Field()<edge_begin><edge_end>ROW()
Function()<edge_begin><edge_end>Behavioural Component(name, body)
Function()<edge_begin><edge_end>Data Type()
Interval Feature(key, value)<edge_begin><edge_end>Feature()
Interval Type(descriptor)<edge_begin><edge_end>Predefined Type()
MULTISET()<edge_begin><edge_end>Collection Type()
Method(name, body)<edge_begin><edge_end>Method(name, body)
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Method(name, body)<edge_begin><edge_end>Data Type()
Method(name, body)<edge_begin><edge_end>Method Parameter()
Method Parameter()<edge_begin><edge_end>Parameter(name)
Method Parameter()<edge_begin><edge_end>Method(name, body)
Not Null()<edge_begin><edge_end>Column Constraint()
Numeric Feature(key, value)<edge_begin><edge_end>Feature()
Numeric Type(descriptor)<edge_begin><edge_end>Predefined Type()
Parameter(name)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Predefined Type()<edge_begin><edge_end>Data Type()
Predefined Type()<edge_begin><edge_end>Distinct Type()
Primary Key()<edge_begin><edge_end>Unique Constraint()
Procedure()<edge_begin><edge_end>Behavioural Component(name, body)
ROW()<edge_begin><edge_end>Constructed Type(name)
ROW()<edge_begin><edge_end>ROW()
ROW()<edge_begin><edge_end>Field()
Reference Type()<edge_begin><edge_end>Constructed Type(name)
Reference Type()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Unique Constraint()
Restriction()<edge_begin><edge_end>Table(name)
Restriction()<edge_begin><edge_end>Structural Component(name)
Schema(name)<edge_begin><edge_end>Behavioural Component(name, body)
Schema(name)<edge_begin><edge_end>Data Type()
Schema(name)<edge_begin><edge_end>Table(name)
Schema(name)<edge_begin><edge_end>Domain(name, expression, default)
String Feature(key, value)<edge_begin><edge_end>Feature()
Structural Component(name)<edge_begin><edge_end>Data Type()
Structural Component(name)<edge_begin><edge_end>View()
Structural Component(name)<edge_begin><edge_end>Restriction()
Structural Component(name)<edge_begin><edge_end>Feature()
Structural Component(name)<edge_begin><edge_end>Domain(name, expression, default)
Structured Type(is final, is instantiable)<edge_begin><edge_end>User Defined Type(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Attribute(default)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Table(name)<edge_begin><edge_end>Schema(name)
Table(name)<edge_begin><edge_end>Column(default)
Table(name)<edge_begin><edge_end>View()
Table(name)<edge_begin><edge_end>Restriction()
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Table Constraint(name)<edge_begin><edge_end>Restriction()
Trigger(name)<edge_begin><edge_end>Restriction()
Trigger(name)<edge_begin><edge_end>Trigger Descriptor(event, action Time, triggered Action, level)
Trigger(name)<edge_begin><edge_end>Structural Component(name)
Trigger Descriptor(event, action Time, triggered Action, level)<edge_begin><edge_end>Trigger(name)
Typed Table()<edge_begin><edge_end>Base Table()
Typed Table()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Typed Table()<edge_begin><edge_end>Typed Table()
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
User Defined Type(name)<edge_begin><edge_end>Data Type()
View()<edge_begin><edge_end>Derived Table(query expression)
View()<edge_begin><edge_end>Table(name)
View()<edge_begin><edge_end>Structural Component(name)
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
Domain(name, expression, default)<edge_begin><edge_end>Schema(name)
Domain(name, expression, default)<edge_begin><edge_end>Structural Component(name)
Boolean Style Type(text, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Boolean Type()
Currency Style Type(text, text1, text2, text3, text4, automatic Order, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)
Currency Style Type(text, text1, text2, text3, text4, automatic Order, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Currency Symbol Type(mixed, country, language)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Day Type(calendar, style)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Month Type(calendar, possessive Form, style, textual)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Year Type(calendar, style)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Era Type(calendar, style)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Day Of Week Type(calendar, style)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Week Of Year Type(calendar)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Quarter Type(calendar, style)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Hours Type(style)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Am Pm Type()
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Minutes Type(style)
Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Seconds Type(decimal Places, style)
Day Of Week Type(calendar, style)<edge_begin><edge_end>Calendar Type()
Day Type(calendar, style)<edge_begin><edge_end>Calendar Type()
Era Type(calendar, style)<edge_begin><edge_end>Calendar Type()
Month Type(calendar, possessive Form, style, textual)<edge_begin><edge_end>Calendar Type()
Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)<edge_begin><edge_end>Embedded Text Type(mixed, position)
Percentage Style Type(text, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)
Quarter Type(calendar, style)<edge_begin><edge_end>Calendar Type()
Text Style Type(text, group, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)<edge_begin><edge_end>Text Content Type()
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Hours Type(style)
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Am Pm Type()
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Minutes Type(style)
Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)<edge_begin><edge_end>Seconds Type(decimal Places, style)
Week Of Year Type(calendar)<edge_begin><edge_end>Calendar Type()
Year Type(calendar, style)<edge_begin><edge_end>Calendar Type()
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Am Pm Type()
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Boolean Type()
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Boolean Style Type(text, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Currency Style Type(text, text1, text2, text3, text4, automatic Order, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Currency Symbol Type(mixed, country, language)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Date Style Type(text, group, text1, automatic Order, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Day Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Day Of Week Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Embedded Text Type(mixed, position)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Era Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Fraction Type(denominator Value, grouping, min Denominator Digits, min Integer Digits, min Numerator Digits)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Hours Type(style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Minutes Type(style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Month Type(calendar, possessive Form, style, textual)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Number Type(decimal Places, decimal Replacement, display Factor, grouping, min Integer Digits)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Number Style Type(text, any Number Group, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Percentage Style Type(text, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Quarter Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Scientific Number Type(decimal Places, grouping, min Exponent Digits, min Integer Digits)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Seconds Type(decimal Places, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Text Content Type()
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Text Style Type(text, group, text1, country, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Time Style Type(text, group, text1, country, format Source, language, name, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow, volatile)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Week Of Year Type(calendar)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Year Type(calendar, style)
Document Root(mixed, text, automatic Order, calendar, country, decimal Places, decimal Replacement, denominator Value, display Factor, format Source, grouping, language, min Denominator Digits, min Exponent Digits, min Integer Digits, min Numerator Digits, position, possessive Form, style, textual, title, transliteration Country, transliteration Format, transliteration Language, transliteration Style, truncate On Overflow)<edge_begin><edge_end>Calendar Type()
SPARQL Query()<edge_begin><edge_end>Prefix(name, iref)
Base()<edge_begin><edge_end>IRI(value)
Selection Query()<edge_begin><edge_end>SPARQL Query()
Selection Query()<edge_begin><edge_end>Base()
Selection Query()<edge_begin><edge_end>Dataset Clause()
Selection Query()<edge_begin><edge_end>Where Clause()
Selection Query()<edge_begin><edge_end>Group Clause()
Selection Query()<edge_begin><edge_end>Having Clause()
Selection Query()<edge_begin><edge_end>Limit Clause(limit)
Select Query(is Distinct, is Reduced, all)<edge_begin><edge_end>Selection Query()
Select Query(is Distinct, is Reduced, all)<edge_begin><edge_end>Variable(name)
Ask Query()<edge_begin><edge_end>Selection Query()
Describe Query()<edge_begin><edge_end>Selection Query()
Describe Query()<edge_begin><edge_end>Graph Node()
Construct Query()<edge_begin><edge_end>Selection Query()
Construct Query()<edge_begin><edge_end>Group Graph Pattern()
Update Query()<edge_begin><edge_end>SPARQL Query()
Update Query()<edge_begin><edge_end>Update Operation()
Modify Query(with Graph)<edge_begin><edge_end>Update Operation()
Modify Query(with Graph)<edge_begin><edge_end>Group Graph Pattern()
Create Graph Query(is Silent, graph)<edge_begin><edge_end>Update Operation()
Drop Graph Query(is Silent, graph)<edge_begin><edge_end>Update Operation()
Load Graph Query(graph, into Graph)<edge_begin><edge_end>Update Operation()
Clear Graph Query(uri, is Default)<edge_begin><edge_end>Update Operation()
Insert Query(graph)<edge_begin><edge_end>Modify Query(with Graph)
Insert Query(graph)<edge_begin><edge_end>Where Clause()
Insert Data Query(graph)<edge_begin><edge_end>Modify Query(with Graph)
Delete Query(graph)<edge_begin><edge_end>Modify Query(with Graph)
Delete Query(graph)<edge_begin><edge_end>Group Graph Pattern()
Delete Query(graph)<edge_begin><edge_end>Where Clause()
Delete Data Query(graph)<edge_begin><edge_end>Modify Query(with Graph)
Delete Where Query()<edge_begin><edge_end>Modify Query(with Graph)
Dataset Clause()<edge_begin><edge_end>IRI(value)
Default Data Set()<edge_begin><edge_end>Dataset Clause()
Named Data Set()<edge_begin><edge_end>Dataset Clause()
Service Data Set()<edge_begin><edge_end>Dataset Clause()
Where Clause()<edge_begin><edge_end>Group Graph Pattern()
Group Clause()<edge_begin><edge_end>Group Condition()
Having Clause()<edge_begin><edge_end>Constraint()
Sub Select Query()<edge_begin><edge_end>Group Graph Pattern()
Sub Select Query()<edge_begin><edge_end>Variable(name)
Sub Select Query()<edge_begin><edge_end>Where Clause()
Sub Select Query()<edge_begin><edge_end>Group Clause()
Sub Select Query()<edge_begin><edge_end>Having Clause()
Group Graph Pattern Sub()<edge_begin><edge_end>Group Graph Pattern()
Group Graph Pattern Sub()<edge_begin><edge_end>Graph Pattern()
Triples Same Subject()<edge_begin><edge_end>Graph Pattern()
Triples Same Subject()<edge_begin><edge_end>Graph Node()
Triples Same Subject()<edge_begin><edge_end>Property List()
Group Or Union Graph Pattern()<edge_begin><edge_end>Graph Pattern()
Group Or Union Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Optional Graph Pattern()<edge_begin><edge_end>Graph Pattern()
Optional Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Property List()<edge_begin><edge_end>Graph Node()
Graph Graph Pattern()<edge_begin><edge_end>Graph Pattern()
Graph Graph Pattern()<edge_begin><edge_end>Graph Node()
Graph Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Service Graph Pattern()<edge_begin><edge_end>Graph Pattern()
Service Graph Pattern()<edge_begin><edge_end>Graph Node()
Service Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Filter Pattern()<edge_begin><edge_end>Graph Pattern()
Filter Pattern()<edge_begin><edge_end>Expression()
Exists Pattern()<edge_begin><edge_end>Graph Pattern()
Exists Pattern()<edge_begin><edge_end>Group Graph Pattern()
Not Exists Pattern()<edge_begin><edge_end>Graph Pattern()
Not Exists Pattern()<edge_begin><edge_end>Group Graph Pattern()
Minus Pattern()<edge_begin><edge_end>Graph Pattern()
Minus Pattern()<edge_begin><edge_end>Group Graph Pattern()
Expression()<edge_begin><edge_end>Constraint()
Expression Filter Expression(operator)<edge_begin><edge_end>Expression()
Expression Filter Expression(operator)<edge_begin><edge_end>Filter Node()
Function(name)<edge_begin><edge_end>Group Condition()
Function(name)<edge_begin><edge_end>Constraint()
Function(name)<edge_begin><edge_end>Filter Node()
Function(name)<edge_begin><edge_end>Variable(name)
Named Function()<edge_begin><edge_end>Function(name)
Named Function()<edge_begin><edge_end>Prefix(name, iref)
Sparql Function()<edge_begin><edge_end>Function(name)
Built In Call()<edge_begin><edge_end>Group Condition()
Built In Call()<edge_begin><edge_end>Constraint()
Built In Call()<edge_begin><edge_end>Expression()
Built In Call()<edge_begin><edge_end>Variable(name)
Expr Agg Arg(is Distinct)<edge_begin><edge_end>Expression()
Graph Node()<edge_begin><edge_end>Filter Node()
Variable(name)<edge_begin><edge_end>Group Condition()
Variable(name)<edge_begin><edge_end>Graph Node()
Un Named Variable()<edge_begin><edge_end>Variable(name)
Named Variable()<edge_begin><edge_end>Variable(name)
Named Variable()<edge_begin><edge_end>Prefix(name, iref)
Blank Node(name)<edge_begin><edge_end>Graph Node()
Parameter(name)<edge_begin><edge_end>Graph Node()
Value()<edge_begin><edge_end>Graph Node()
Value()<edge_begin><edge_end>RDF Tag()
IRI(value)<edge_begin><edge_end>Graph Node()
String Value(value)<edge_begin><edge_end>Value()
Integer Value(value)<edge_begin><edge_end>Value()
Type Tag()<edge_begin><edge_end>RDF Tag()
Type Tag()<edge_begin><edge_end>Graph Node()
Lang Tag(lang)<edge_begin><edge_end>RDF Tag()
Or Filter Expression()<edge_begin><edge_end>Expression()
And Filter Expression()<edge_begin><edge_end>Expression()
Count Aggregate(is Distinct, is All)<edge_begin><edge_end>Aggregate()
Count Aggregate(is Distinct, is All)<edge_begin><edge_end>Expression()
Sum Aggregate()<edge_begin><edge_end>Aggregate()
Sum Aggregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Min Agregate()<edge_begin><edge_end>Aggregate()
Min Agregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Max Aggregate()<edge_begin><edge_end>Aggregate()
Max Aggregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Avg Aggregate()<edge_begin><edge_end>Aggregate()
Avg Aggregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Sample Aggregate()<edge_begin><edge_end>Aggregate()
Sample Aggregate()<edge_begin><edge_end>Expr Agg Arg(is Distinct)
Group Aggregate(is Distinct, value)<edge_begin><edge_end>Aggregate()
Group Aggregate(is Distinct, value)<edge_begin><edge_end>Expression()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Description Provider(description)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Status Provider()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contribution(label)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contact(name, email)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Custom Category(identifier, label, description)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Description Provider(description)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Product()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Bundle()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Feature()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Category()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Map Rule()
Configuration(operating System, window System, architecture)<edge_begin><edge_end>Enabled Status Provider(enabled)
Contribution(label)<edge_begin><edge_end>Enabled Status Provider(enabled)
Contribution(label)<edge_begin><edge_end>Description Provider(description)
Contribution(label)<edge_begin><edge_end>Status Provider()
Contribution(label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Contribution(label)<edge_begin><edge_end>Mapped Repository(mirror Artifacts, category Prefix)
Contribution(label)<edge_begin><edge_end>Contact(name, email)
Contribution(label)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Contact(name, email)<edge_begin><edge_end>Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)
Feature()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Feature()<edge_begin><edge_end>Features()
Feature()<edge_begin><edge_end>Bundles()
Feature()<edge_begin><edge_end>Fragments()
Bundle()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Mapped Unit()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Mapped Unit()<edge_begin><edge_end>Enabled Status Provider(enabled)
Mapped Unit()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Product()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Product()<edge_begin><edge_end>Features()
Product()<edge_begin><edge_end>Bundles()
Product()<edge_begin><edge_end>Fragments()
Category()<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type)
Category()<edge_begin><edge_end>Categories()
Category()<edge_begin><edge_end>Features()
Category()<edge_begin><edge_end>Products()
Category()<edge_begin><edge_end>Bundles()
Category()<edge_begin><edge_end>Fragments()
Category()<edge_begin><edge_end>IU Details()
Custom Category(identifier, label, description)<edge_begin><edge_end>Status Provider()
Custom Category(identifier, label, description)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Custom Category(identifier, label, description)<edge_begin><edge_end>Feature()
Map Rule()<edge_begin><edge_end>Installable Unit Request(name, version Range)
Map Rule()<edge_begin><edge_end>Description Provider(description)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Status Provider()
Installable Unit Request(name, version Range)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Description Provider(description)
Installable Unit Request(name, version Range)<edge_begin><edge_end>Version Range()
Exclusion Rule()<edge_begin><edge_end>Map Rule()
Valid Configurations Rule()<edge_begin><edge_end>Map Rule()
Valid Configurations Rule()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Enabled Status Provider(enabled)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Status Provider()
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Metadata Repository()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Status Provider()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Status Provider()<edge_begin><edge_end>Status(code, message)
I Artifact Key(classifier, id, version)<edge_begin><edge_end>Version()
I Copyright(location, body)<edge_begin><edge_end>URI()
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Touchpoint Type(id, version)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>Version()
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I License(location, body, digest)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Copyright(location, body)
I Installable Unit Fragment()<edge_begin><edge_end>I Installable Unit(filter, id, version, resolved, singleton)
I License(location, body, digest)<edge_begin><edge_end>URI()
I Provided Capability(name, namespace, version)<edge_begin><edge_end>Version()
I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)<edge_begin><edge_end>Version Range()
I Touchpoint Type(id, version)<edge_begin><edge_end>Version()
I Update Descriptor(id, range, description, severity)<edge_begin><edge_end>Version Range()
Artifact Key()<edge_begin><edge_end>I Artifact Key(classifier, id, version)
Copyright()<edge_begin><edge_end>I Copyright(location, body)
Metadata Repository()<edge_begin><edge_end>I Metadata Repository()
Metadata Repository()<edge_begin><edge_end>Installable Unit()
Metadata Repository()<edge_begin><edge_end>Repository Reference(location, type, options, nickname)
Metadata Repository()<edge_begin><edge_end>Property(key, value)
Installable Unit()<edge_begin><edge_end>I Installable Unit(filter, id, version, resolved, singleton)
Installable Unit()<edge_begin><edge_end>Artifact Key()
Installable Unit()<edge_begin><edge_end>Provided Capability()
Installable Unit()<edge_begin><edge_end>Required Capability()
Installable Unit()<edge_begin><edge_end>Property(key, value)
Installable Unit()<edge_begin><edge_end>Touchpoint Data()
Installable Unit Fragment()<edge_begin><edge_end>Installable Unit()
Installable Unit Fragment()<edge_begin><edge_end>I Installable Unit Fragment()
Installable Unit Fragment()<edge_begin><edge_end>Required Capability()
License()<edge_begin><edge_end>I License(location, body, digest)
Provided Capability()<edge_begin><edge_end>I Provided Capability(name, namespace, version)
Required Capability()<edge_begin><edge_end>I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)
Touchpoint Data()<edge_begin><edge_end>I Touchpoint Data()
Touchpoint Data()<edge_begin><edge_end>Instruction Map(key)
Touchpoint Instruction()<edge_begin><edge_end>I Touchpoint Instruction(body, import Attribute)
Touchpoint Type()<edge_begin><edge_end>I Touchpoint Type(id, version)
Update Descriptor()<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
Instruction Map(key)<edge_begin><edge_end>Touchpoint Instruction()
I Metadata Repository()<edge_begin><edge_end>I Queryable()
I Metadata Repository()<edge_begin><edge_end>I Repository(location, name, type, version, description, provider, modifiable)
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>I Adaptable()
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>URI()
Repository Reference(location, type, options, nickname)<edge_begin><edge_end>URI()
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Installable Units()
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Properties()
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Metadata Repository()
Installable Units()<edge_begin><edge_end>Categories()
Installable Units()<edge_begin><edge_end>Features()
Installable Units()<edge_begin><edge_end>Products()
Installable Units()<edge_begin><edge_end>Bundles()
Installable Units()<edge_begin><edge_end>Fragments()
Installable Units()<edge_begin><edge_end>Miscellaneous()
Categories()<edge_begin><edge_end>Category()
Features()<edge_begin><edge_end>Feature()
Products()<edge_begin><edge_end>Product()
Bundles()<edge_begin><edge_end>Bundle()
Fragments()<edge_begin><edge_end>Fragment()
Miscellaneous()<edge_begin><edge_end>Other IU()
IU Presentation(id, version, name, label, description, type)<edge_begin><edge_end>Version()
IU Presentation(id, version, name, label, description, type)<edge_begin><edge_end>Installable Unit()
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type)
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Details()
Fragment()<edge_begin><edge_end>Bundle()
Other IU()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Properties()<edge_begin><edge_end>Property(key, value)
Required Capabilities()<edge_begin><edge_end>Required Capability Wrapper()
Provided Capabilities()<edge_begin><edge_end>Provided Capability Wrapper()
Touchpoints()<edge_begin><edge_end>I Touchpoint Type(id, version)
Touchpoints()<edge_begin><edge_end>Touchpoint Data()
IU Details()<edge_begin><edge_end>Required Capabilities()
IU Details()<edge_begin><edge_end>Provided Capabilities()
IU Details()<edge_begin><edge_end>Properties()
IU Details()<edge_begin><edge_end>Touchpoints()
IU Details()<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
IU Details()<edge_begin><edge_end>I Copyright(location, body)
IU Details()<edge_begin><edge_end>I License(location, body, digest)
Required Capability Wrapper()<edge_begin><edge_end>I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)
Required Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Required Capability Wrapper()<edge_begin><edge_end>Required Capability()
Provided Capability Wrapper()<edge_begin><edge_end>I Provided Capability(name, namespace, version)
Provided Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Provided Capability Wrapper()<edge_begin><edge_end>Provided Capability()
Located Element(location)<edge_begin><edge_end>String()
Ided Element(id)<edge_begin><edge_end>Located Element(location)
Ided Element(id)<edge_begin><edge_end>String()
URI(value)<edge_begin><edge_end>Located Element(location)
URI(value)<edge_begin><edge_end>String()
PNML Document()<edge_begin><edge_end>Located Element(location)
PNML Document()<edge_begin><edge_end>URI(value)
PNML Document()<edge_begin><edge_end>Net Element()
Net Element()<edge_begin><edge_end>Ided Element(id)
Net Element()<edge_begin><edge_end>URI(value)
Net Element()<edge_begin><edge_end>PNML Document()
Net Element()<edge_begin><edge_end>Net Content()
Net Element()<edge_begin><edge_end>Name()
Net Content()<edge_begin><edge_end>Located Element(location)
Net Content()<edge_begin><edge_end>Net Element()
Net Content()<edge_begin><edge_end>Name()
Labeled Element()<edge_begin><edge_end>Located Element(location)
Labeled Element()<edge_begin><edge_end>Label(text)
Label(text)<edge_begin><edge_end>Located Element(location)
Label(text)<edge_begin><edge_end>String()
Label(text)<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Net Element()
Name()<edge_begin><edge_end>Net Content()
Net Content Element()<edge_begin><edge_end>Net Content()
Net Content Element()<edge_begin><edge_end>Ided Element(id)
Arc()<edge_begin><edge_end>Net Content()
Arc()<edge_begin><edge_end>Ided Element(id)
Arc()<edge_begin><edge_end>Net Content Element()
Place()<edge_begin><edge_end>Net Content Element()
Transition()<edge_begin><edge_end>Net Content Element()
Petri Net(name)<edge_begin><edge_end>Node(name)
Petri Net(name)<edge_begin><edge_end>Arc(kind, weight)
Transition(min time, max time)<edge_begin><edge_end>Node(name)
Node(name)<edge_begin><edge_end>Petri Net(name)
Node(name)<edge_begin><edge_end>Arc(kind, weight)
Place(initial Marking)<edge_begin><edge_end>Node(name)
Arc(kind, weight)<edge_begin><edge_end>Node(name)
Arc(kind, weight)<edge_begin><edge_end>Petri Net(name)
Node dynamic()<edge_begin><edge_end>Node(name)
Place dynamic(marking)<edge_begin><edge_end>Node dynamic()
Place dynamic(marking)<edge_begin><edge_end>Place(initial Marking)
Petri Net dynamic()<edge_begin><edge_end>Node dynamic()
Petri Net dynamic()<edge_begin><edge_end>Petri Net(name)
Petri Net Event()<edge_begin><edge_end>PN Sim Event(internal, date, name)
Fire Transition Event(time)<edge_begin><edge_end>Petri Net Event()
Fire Transition Event(time)<edge_begin><edge_end>Transition(min time, max time)
PN Scenario()<edge_begin><edge_end>PN Trace()
PN Scenario()<edge_begin><edge_end>PN Sim Event(internal, date, name)
PN Trace()<edge_begin><edge_end>PN Scenario()
Classifier()<edge_begin><edge_end>Instance()
Instance()<edge_begin><edge_end>Classifier()
Actor()<edge_begin><edge_end>Classifier()
Use Case(extension Point)<edge_begin><edge_end>Classifier()
Use Case(extension Point)<edge_begin><edge_end>String()
Use Case(extension Point)<edge_begin><edge_end>Include()
Use Case(extension Point)<edge_begin><edge_end>Extend()
Use Case(extension Point)<edge_begin><edge_end>Extension Point()
Use Case Instance()<edge_begin><edge_end>Instance()
Include()<edge_begin><edge_end>Relation Ship()
Include()<edge_begin><edge_end>Use Case(extension Point)
Extend()<edge_begin><edge_end>Relation Ship()
Extend()<edge_begin><edge_end>Boolean Expression(value)
Extend()<edge_begin><edge_end>Use Case(extension Point)
Extend()<edge_begin><edge_end>Extension Point()
Boolean Expression(value)<edge_begin><edge_end>String()
Extension Point()<edge_begin><edge_end>Model Element()
Extension Point()<edge_begin><edge_end>Location Reference(value)
Extension Point()<edge_begin><edge_end>Extend()
Extension Point()<edge_begin><edge_end>Use Case(extension Point)
Location Reference(value)<edge_begin><edge_end>String()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Conference Member()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Member()<edge_begin><edge_end>Person(email)
Conference Member()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(paper ID, title)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Author()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(paper ID, title)
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(email)
Administrator()<edge_begin><edge_end>Event()
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Workshop()<edge_begin><edge_end>Event()
Event()<edge_begin><edge_end>Thing()
Event()<edge_begin><edge_end>Event Tracks()
Event()<edge_begin><edge_end>Approval Email()
Event()<edge_begin><edge_end>Event Setup()
Event()<edge_begin><edge_end>Administrator()
Account()<edge_begin><edge_end>Person(email)
User()<edge_begin><edge_end>Person(email)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Person(email)<edge_begin><edge_end>Thing()
Person(email)<edge_begin><edge_end>Inforamtion()
Person(email)<edge_begin><edge_end>Document()
Person(email)<edge_begin><edge_end>Account()
Person(email)<edge_begin><edge_end>Event()
Person(email)<edge_begin><edge_end>Person(email)
Person(email)<edge_begin><edge_end>Activity()
Person(email)<edge_begin><edge_end>String()
Symposium()<edge_begin><edge_end>Event()
Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(email)
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event()
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event()
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event()
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Committee()<edge_begin><edge_end>User()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity()
Activity()<edge_begin><edge_end>Thing()
Activity()<edge_begin><edge_end>Person(email)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity()
Registration()<edge_begin><edge_end>Activity()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Research Topic()<edge_begin><edge_end>Event Setup()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Xdoc File()<edge_begin><edge_end>Abstract Section()
Document()<edge_begin><edge_end>Abstract Section()
Document()<edge_begin><edge_end>Text Or Markup()
Document()<edge_begin><edge_end>Chapter()
Document()<edge_begin><edge_end>Lang Def(keywords, name)
Document()<edge_begin><edge_end>Glossary()
Document()<edge_begin><edge_end>Part()
Chapter()<edge_begin><edge_end>Abstract Section()
Chapter()<edge_begin><edge_end>Section()
Chapter Ref()<edge_begin><edge_end>Chapter()
Section()<edge_begin><edge_end>Abstract Section()
Section()<edge_begin><edge_end>Section2()
Section Ref()<edge_begin><edge_end>Section()
Section2()<edge_begin><edge_end>Abstract Section()
Section2()<edge_begin><edge_end>Section3()
Section2Ref()<edge_begin><edge_end>Section2()
Section3()<edge_begin><edge_end>Abstract Section()
Section3()<edge_begin><edge_end>Section4()
Section4()<edge_begin><edge_end>Abstract Section()
Abstract Section()<edge_begin><edge_end>Identifiable(name)
Abstract Section()<edge_begin><edge_end>Text Or Markup()
Table()<edge_begin><edge_end>Mark Up()
Table()<edge_begin><edge_end>Table Row()
Table Row()<edge_begin><edge_end>Table Data()
Table Data()<edge_begin><edge_end>Text Or Markup()
Emphasize()<edge_begin><edge_end>Mark Up()
Emphasize()<edge_begin><edge_end>Markup In Code()
Emphasize()<edge_begin><edge_end>Text Or Markup()
Anchor()<edge_begin><edge_end>Identifiable(name)
Anchor()<edge_begin><edge_end>Mark Up()
Anchor()<edge_begin><edge_end>Markup In Code()
Ref()<edge_begin><edge_end>Mark Up()
Ref()<edge_begin><edge_end>Markup In Code()
Ref()<edge_begin><edge_end>Identifiable(name)
Ref()<edge_begin><edge_end>Text Or Markup()
Ordered List()<edge_begin><edge_end>Mark Up()
Ordered List()<edge_begin><edge_end>Item()
Unordered List()<edge_begin><edge_end>Mark Up()
Unordered List()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Text Or Markup()
Code Ref()<edge_begin><edge_end>Mark Up()
Code Ref()<edge_begin><edge_end>Text Or Markup()
Link(url, text)<edge_begin><edge_end>Mark Up()
Image Ref(name, path, clazz, style, caption)<edge_begin><edge_end>Mark Up()
Code Block()<edge_begin><edge_end>Mark Up()
Code Block()<edge_begin><edge_end>Lang Def(keywords, name)
Todo(text)<edge_begin><edge_end>Mark Up()
Todo(text)<edge_begin><edge_end>Markup In Code()
Glossary Entry(name, alias)<edge_begin><edge_end>Text Or Markup()
Glossary()<edge_begin><edge_end>Glossary Entry(name, alias)
Part()<edge_begin><edge_end>Abstract Section()
Part()<edge_begin><edge_end>Chapter()
Part Ref()<edge_begin><edge_end>Part()
Record(ee, url, key, mdate)<edge_begin><edge_end>Author(name)
Article(title, from Page, to Page, number, volume, month, year)<edge_begin><edge_end>Record(ee, url, key, mdate)
Article(title, from Page, to Page, number, volume, month, year)<edge_begin><edge_end>Journal(name)
Author(name)<edge_begin><edge_end>Record(ee, url, key, mdate)
Journal(name)<edge_begin><edge_end>Article(title, from Page, to Page, number, volume, month, year)
Book(title, year, month, volume, series, edition, isbn)<edge_begin><edge_end>Record(ee, url, key, mdate)
Book(title, year, month, volume, series, edition, isbn)<edge_begin><edge_end>Publisher(name, address)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Editor(name)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Organization(name)
In Collection(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Publisher(name, address)
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Editor(name)
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Organization(name)
In Proceedings(title, bootitle, year, from Page, to Page, month)<edge_begin><edge_end>Publisher(name, address)
Masters Thesis(title, year, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
Masters Thesis(title, year, month)<edge_begin><edge_end>School(name, address)
Proceedings(title, year, month, isbn)<edge_begin><edge_end>Record(ee, url, key, mdate)
Proceedings(title, year, month, isbn)<edge_begin><edge_end>Editor(name)
Proceedings(title, year, month, isbn)<edge_begin><edge_end>Publisher(name, address)
Proceedings(title, year, month, isbn)<edge_begin><edge_end>Organization(name)
Ph D Thesis(title, year, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
Ph D Thesis(title, year, month)<edge_begin><edge_end>School(name, address)
Www(title, year, month)<edge_begin><edge_end>Record(ee, url, key, mdate)
Www(title, year, month)<edge_begin><edge_end>Editor(name)
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Definition(namespace)
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Declaration()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Statement()
Event Derivation()<edge_begin><edge_end>Expression()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Transition Reaction()<edge_begin><edge_end>Transition Statement()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Reaction Priority(priority)<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Assignment(operator)<edge_begin><edge_end>Expression()
Event Raising()<edge_begin><edge_end>Expression()
Element Reference Expression()<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Event Raised Reference Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Bool Literal(value)<edge_begin><edge_end>Literal()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
Event Definition(direction, type)<edge_begin><edge_end>Event Derivation()
Variable Definition(readonly, external, type)<edge_begin><edge_end>Expression()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Operation Call()<edge_begin><edge_end>Expression()
Operation Call()<edge_begin><edge_end>Operation(param Types, type)
Pseudostate()<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Region(priority)
Vertex()<edge_begin><edge_end>Transition(priority)
Region(priority)<edge_begin><edge_end>Vertex()
Region(priority)<edge_begin><edge_end>Composite Element()
Transition(priority)<edge_begin><edge_end>Specification Element(specification)
Transition(priority)<edge_begin><edge_end>Reaction()
Transition(priority)<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Regular State()
Variable()<edge_begin><edge_end>Declaration()
Event()<edge_begin><edge_end>Declaration()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Specification Element(specification)
Statechart()<edge_begin><edge_end>Reactive Element()
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Statechart()<edge_begin><edge_end>Composite Element()
Entry(kind)<edge_begin><edge_end>Pseudostate()
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Effect()
Reactive Element()<edge_begin><edge_end>Reaction()
Exit()<edge_begin><edge_end>Pseudostate()
Scope()<edge_begin><edge_end>Declaration()
Scope()<edge_begin><edge_end>Event()
Scope()<edge_begin><edge_end>Variable()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Regular State()<edge_begin><edge_end>Vertex()
Composite Element()<edge_begin><edge_end>Region(priority)
Configuration(location, temp)<edge_begin><edge_end>Project(id, workspace)
Project(id, workspace)<edge_begin><edge_end>Located Element(absolute Path, name)
Project(id, workspace)<edge_begin><edge_end>Java(package)
Project(id, workspace)<edge_begin><edge_end>Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)
Project(id, workspace)<edge_begin><edge_end>Build()
Project(id, workspace)<edge_begin><edge_end>Plugin(extra)
Project(id, workspace)<edge_begin><edge_end>Schema(extension Name, extension Id, plugin Name)
Source(comment, handled, mark, content)<edge_begin><edge_end>Located Element(absolute Path, name)
Java(package)<edge_begin><edge_end>Source(comment, handled, mark, content)
Java(package)<edge_begin><edge_end>Project(id, workspace)
Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)<edge_begin><edge_end>Source(comment, handled, mark, content)
Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)<edge_begin><edge_end>Dependency(name, version, reexport, diagraph)
Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)<edge_begin><edge_end>Class Path(name)
Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)<edge_begin><edge_end>Export(name)
Extension(point Id, clazz, id, name, extra, diagraph)<edge_begin><edge_end>Extension Point(id, name, schema, diagraph)
Extension(point Id, clazz, id, name, extra, diagraph)<edge_begin><edge_end>Extension Attribute(name, value)
Extension(point Id, clazz, id, name, extra, diagraph)<edge_begin><edge_end>Java(package)
Build()<edge_begin><edge_end>Source(comment, handled, mark, content)
Dependency(name, version, reexport, diagraph)<edge_begin><edge_end>Manifest(symbolic Name, singleton, vendor, version, version Id, version Qualifier, lazy, execution Environment, diagraph)
Extension Point(id, name, schema, diagraph)<edge_begin><edge_end>Extension(point Id, clazz, id, name, extra, diagraph)
Extension Point(id, name, schema, diagraph)<edge_begin><edge_end>Plugin(extra)
Plugin(extra)<edge_begin><edge_end>Source(comment, handled, mark, content)
Plugin(extra)<edge_begin><edge_end>Extension(point Id, clazz, id, name, extra, diagraph)
Plugin(extra)<edge_begin><edge_end>Extension Point(id, name, schema, diagraph)
Plugin(extra)<edge_begin><edge_end>Project(id, workspace)
Schema(extension Name, extension Id, plugin Name)<edge_begin><edge_end>Source(comment, handled, mark, content)
Schema(extension Name, extension Id, plugin Name)<edge_begin><edge_end>Extension Reference(name, java, package, project)
Schema(extension Name, extension Id, plugin Name)<edge_begin><edge_end>Project(id, workspace)
Extension Reference(name, java, package, project)<edge_begin><edge_end>Schema(extension Name, extension Id, plugin Name)
Extension Reference(name, java, package, project)<edge_begin><edge_end>Java(package)
Timed System()<edge_begin><edge_end>Named Element(name)
Timed System()<edge_begin><edge_end>TFSM()
Timed System()<edge_begin><edge_end>FSM Clock(value)
Timed System()<edge_begin><edge_end>FSM Event()
TFSM()<edge_begin><edge_end>Region Container()
TFSM()<edge_begin><edge_end>State()
TFSM()<edge_begin><edge_end>FSM Event()
TFSM()<edge_begin><edge_end>FSM Clock(value)
TFSM()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Region Container()
State()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Action()
State()<edge_begin><edge_end>TFSM()
Transition()<edge_begin><edge_end>Named Element(name)
Transition()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Guard()
Transition()<edge_begin><edge_end>FSM Event()
Guard()<edge_begin><edge_end>Named Element(name)
Temporal Guard(after Duration)<edge_begin><edge_end>Guard()
Temporal Guard(after Duration)<edge_begin><edge_end>FSM Clock(value)
Event Guard()<edge_begin><edge_end>Guard()
Event Guard()<edge_begin><edge_end>FSM Event()
FSM Event()<edge_begin><edge_end>Named Element(name)
FSM Event()<edge_begin><edge_end>Transition()
FSM Clock(value)<edge_begin><edge_end>Named Element(name)
Evaluate Guard()<edge_begin><edge_end>Guard()
Evaluate Guard()<edge_begin><edge_end>Condition()
Region(name)<edge_begin><edge_end>State()
Region Container()<edge_begin><edge_end>Named Element(name)
Region Container()<edge_begin><edge_end>Region(name)
Action()<edge_begin><edge_end>Named Element(name)
All Action Finished Condition()<edge_begin><edge_end>Condition()
System Property Condition(expected Attribute Value)<edge_begin><edge_end>Condition()
Collision Sensor Condition()<edge_begin><edge_end>Condition()
Action Sequence()<edge_begin><edge_end>Action()
Stop Action()<edge_begin><edge_end>Action()
Move Forward Action(duration, start Tick, speed)<edge_begin><edge_end>Action()
Move Backard Action(duration, start Tick, speed)<edge_begin><edge_end>Action()
Move Forward And Turning Right Action(duration, start Tick, diff, speed)<edge_begin><edge_end>Action()
Move Forward And Turning Left Action(duration, start Tick, diff, speed)<edge_begin><edge_end>Action()
Move Backard And Turning Right Action(duration, start Tick, diff, speed)<edge_begin><edge_end>Action()
Move Backard And Turning Left Action(duration, start Tick, diff, speed)<edge_begin><edge_end>Action()
Turning Left Action(duration, start Tick, speed)<edge_begin><edge_end>Action()
Turning Right Action(duration, start Tick, speed)<edge_begin><edge_end>Action()
Acceleratet Action(ratio, start Tick)<edge_begin><edge_end>Action()
Deceleratet Action(ratio, start Tick)<edge_begin><edge_end>Action()
SCAN Collision Action()<edge_begin><edge_end>Action()
Emergency Stop Action()<edge_begin><edge_end>Action()
Basic Element(name, documentation, id)<edge_begin><edge_end>Model Element()
Entity()<edge_begin><edge_end>Basic Element(name, documentation, id)
Entity()<edge_begin><edge_end>Entity()
Entity()<edge_begin><edge_end>Attribute(type)
Relation Ship(source Min, source Max, target Min, target Max)<edge_begin><edge_end>Basic Element(name, documentation, id)
Relation Ship(source Min, source Max, target Min, target Max)<edge_begin><edge_end>Entity()
Attribute(type)<edge_begin><edge_end>Basic Element(name, documentation, id)
Organization()<edge_begin><edge_end>Annotable Element()
Organization()<edge_begin><edge_end>Model Element()
Agent(is Human)<edge_begin><edge_end>Annotable Element()
Agent(is Human)<edge_begin><edge_end>Goal(priority, synopsis)
Goal(priority, synopsis)<edge_begin><edge_end>Annotable Element()
Goal(priority, synopsis)<edge_begin><edge_end>Goal(priority, synopsis)
Goal(priority, synopsis)<edge_begin><edge_end>Agent(is Human)
Goal(priority, synopsis)<edge_begin><edge_end>Privilege Group(documentation)
Goal(priority, synopsis)<edge_begin><edge_end>Goal Step()
Privilege(category)<edge_begin><edge_end>Basic Element(name, documentation, id)
Requirements Definition(version, date)<edge_begin><edge_end>Organization()
Privilege Group(documentation)<edge_begin><edge_end>Model Element()
Privilege Group(documentation)<edge_begin><edge_end>Entity()
Privilege Group(documentation)<edge_begin><edge_end>Privilege(category)
Process()<edge_begin><edge_end>Organization()
Goal Step()<edge_begin><edge_end>Goal(priority, synopsis)
Goal Step()<edge_begin><edge_end>Process()
Annotable Element()<edge_begin><edge_end>Basic Element(name, documentation, id)
Annotable Element()<edge_begin><edge_end>Annotation(author, annotation, date, status, id, comment)
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Queries Connection()
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Ebcdic Connection(Mid File, Data File)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Input SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Td Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Td Table()
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
HL7Connection(Start Char, End Char)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
Td Column()<edge_begin><edge_end>Td Sql Data Type(java Data Type, nullable, unsigned Attribute, case Sensitive, auto Increment, local Type Name, searchable)
Td XML Element(java Type)<edge_begin><edge_end>Td XML Document(xsd File Path)
Td XML Element(java Type)<edge_begin><edge_end>Td XML Content()
Td XML Content()<edge_begin><edge_end>Td XML Element(java Type)
Model Element(name)<edge_begin><edge_end>Partition()
State Machine()<edge_begin><edge_end>Model Element(name)
State Machine()<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>Transition()
Activity()<edge_begin><edge_end>State Machine()
Activity()<edge_begin><edge_end>Partition()
Partition()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>State Vertex()
Composite State()<edge_begin><edge_end>State()
Composite State()<edge_begin><edge_end>State Vertex()
Action State(is Dynamic)<edge_begin><edge_end>State()
Pseudostate(kind)<edge_begin><edge_end>State Vertex()
Object Flow State()<edge_begin><edge_end>State()
Object Flow State()<edge_begin><edge_end>Model Element(name)
Final State()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Model Element(name)
Transition()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Guard()
Guard()<edge_begin><edge_end>Model Element(name)
Guard()<edge_begin><edge_end>Boolean Expression(language, body)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Publication Process(min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Sequence(sequence Type)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Researcher(name, for Name, position)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Place Holder PP()
Sequence(sequence Type)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Rule(text, key)<edge_begin><edge_end>Place Holder Rule()
Researcher(name, for Name, position)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Researcher(name, for Name, position)<edge_begin><edge_end>Write()
Researcher(name, for Name, position)<edge_begin><edge_end>Review()
Researcher(name, for Name, position)<edge_begin><edge_end>Paper()
Researcher(name, for Name, position)<edge_begin><edge_end>Place Holder Rs()
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent)
Paper()<edge_begin><edge_end>Researcher(name, for Name, position)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Review Note(content)<edge_begin><edge_end>Place Holder Rn()
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Progress(percent)<edge_begin><edge_end>Paper()
Write()<edge_begin><edge_end>Labelled(lname)
Write()<edge_begin><edge_end>Paragraph(content)
Review()<edge_begin><edge_end>Labelled(lname)
Review()<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name, position)
Publication Structure()<edge_begin><edge_end>Paper()
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Publication Structure()
Place Holder Rs()<edge_begin><edge_end>Place Holder()
Place Holder Rule()<edge_begin><edge_end>Place Holder()
Place Holder Rn()<edge_begin><edge_end>Place Holder()
Place Holder PP()<edge_begin><edge_end>Place Holder()
Catalog Container(name, active, supports Guest Access)<edge_begin><edge_end>Connection Config(vendor, version, url, catalog, persistent)
Catalog Container(name, active, supports Guest Access)<edge_begin><edge_end>Catalog Generation Strategy(create Index On View, create Relative Record Number)
Connection Config(vendor, version, url, catalog, persistent)<edge_begin><edge_end>Connection Credentials()
Database Container(vendor, version)<edge_begin><edge_end>Catalog Container(name, active, supports Guest Access)
Index Def(clustered, unique)<edge_begin><edge_end>Database Object Def(label)
Index Def(clustered, unique)<edge_begin><edge_end>Index Column Def(name, ordering, sequence)
Index Column Def(name, ordering, sequence)<edge_begin><edge_end>Database Object Def(label)
Prepared Statement()<edge_begin><edge_end>Statement()
Schema Def()<edge_begin><edge_end>Database Object Def(label)
Table Def()<edge_begin><edge_end>Database Object Def(label)
Table Def()<edge_begin><edge_end>Table Column Def(default, name, nullable)
Table Column Def(default, name, nullable)<edge_begin><edge_end>Database Object Def(label)
View Def(query Select)<edge_begin><edge_end>Table Def()
Model(package Name)<edge_begin><edge_end>Database Block(name)
Database Block(name)<edge_begin><edge_end>Config Block()
Database Block(name)<edge_begin><edge_end>Init Block()
Database Block(name)<edge_begin><edge_end>Migration Block()
Config Block()<edge_begin><edge_end>Configuration Statement(name)
Init Block()<edge_begin><edge_end>DDL Statement()
Content Uri(type)<edge_begin><edge_end>Content Uri Segment(name)
Migration Block()<edge_begin><edge_end>DDL Statement()
Case()<edge_begin><edge_end>Expression()
Select Statement()<edge_begin><edge_end>DML Statement()
Select Statement()<edge_begin><edge_end>Select Core Expression()
Select Statement()<edge_begin><edge_end>Ordering Term List()
Select Statement()<edge_begin><edge_end>Expression()
Ordering Term List()<edge_begin><edge_end>Ordering Term(asc, desc)
Select List()<edge_begin><edge_end>Column Source(name)
Where Expressions()<edge_begin><edge_end>Expression()
Group By Expressions()<edge_begin><edge_end>Expression()
Having Expressions()<edge_begin><edge_end>Expression()
Ordering Term(asc, desc)<edge_begin><edge_end>Expression()
Join Source()<edge_begin><edge_end>Single Source()
Join Source()<edge_begin><edge_end>Join Statement(natural, left, outer, inner, cross)
Select Source(name)<edge_begin><edge_end>Single Source()
Single Source Join()<edge_begin><edge_end>Single Source()
Single Source Join()<edge_begin><edge_end>Join Source()
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Single Source()
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Expression()
Table Definition(name)<edge_begin><edge_end>DDL Statement()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DDL Statement()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>Table Definition(name)
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>Expression()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DML Statement()
Alter Table Add Column Statement()<edge_begin><edge_end>DDL Statement()
Alter Table Add Column Statement()<edge_begin><edge_end>Table Definition(name)
Alter Table Add Column Statement()<edge_begin><edge_end>Column Source(name)
Drop Table Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop Table Statement(if Exists)<edge_begin><edge_end>Table Definition(name)
Drop Trigger Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop Trigger Statement(if Exists)<edge_begin><edge_end>Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)
Drop View Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop View Statement(if Exists)<edge_begin><edge_end>Create View Statement(temporary)
Create Index Statement(unique, name)<edge_begin><edge_end>DDL Statement()
Create Index Statement(unique, name)<edge_begin><edge_end>Table Definition(name)
Create Index Statement(unique, name)<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Drop Index Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop Index Statement(if Exists)<edge_begin><edge_end>Create Index Statement(unique, name)
Unique Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Unique Table Constraint()<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Unique Table Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Primary Constraint()<edge_begin><edge_end>Table Constraint(name)
Primary Constraint()<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Primary Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Check Table Constraint()<edge_begin><edge_end>Expression()
Indexed Column(collation Name, asc, desc)<edge_begin><edge_end>Column Def(type)
Delete Statement()<edge_begin><edge_end>DML Statement()
Delete Statement()<edge_begin><edge_end>Table Definition(name)
Delete Statement()<edge_begin><edge_end>Expression()
Insert Statement(conflict Resolution)<edge_begin><edge_end>DML Statement()
Insert Statement(conflict Resolution)<edge_begin><edge_end>Table Definition(name)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Column Def(type)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Expression()
Insert Statement(conflict Resolution)<edge_begin><edge_end>Select Statement()
Update Statement(conflict Resolution)<edge_begin><edge_end>DML Statement()
Update Statement(conflict Resolution)<edge_begin><edge_end>Table Definition(name)
Update Statement(conflict Resolution)<edge_begin><edge_end>Update Column Expression()
Update Statement(conflict Resolution)<edge_begin><edge_end>Expression()
Update Column Expression()<edge_begin><edge_end>Column Def(type)
Update Column Expression()<edge_begin><edge_end>Expression()
Action Statement()<edge_begin><edge_end>Configuration Statement(name)
Action Statement()<edge_begin><edge_end>Content Uri(type)
Function(all)<edge_begin><edge_end>Configuration Statement(name)
Function(all)<edge_begin><edge_end>Expression()
Function(all)<edge_begin><edge_end>Function Arg(type, name)
Function(all)<edge_begin><edge_end>Select Statement()
Content Uri Param Segment(num, text)<edge_begin><edge_end>Content Uri Segment(name)
Expr Concat(op)<edge_begin><edge_end>Expression()
Expr Mult(op)<edge_begin><edge_end>Expression()
Expr Add(op)<edge_begin><edge_end>Expression()
Expr Bit(op)<edge_begin><edge_end>Expression()
Expr Relate(op)<edge_begin><edge_end>Expression()
Expr Equal(op)<edge_begin><edge_end>Expression()
Expr And(op)<edge_begin><edge_end>Expression()
Expr Or(op)<edge_begin><edge_end>Expression()
Null Check Expression()<edge_begin><edge_end>Expression()
Is Null()<edge_begin><edge_end>Expression()
Not Null()<edge_begin><edge_end>Expression()
New Column()<edge_begin><edge_end>Expression()
New Column()<edge_begin><edge_end>Column Source(name)
Old Column()<edge_begin><edge_end>Expression()
Old Column()<edge_begin><edge_end>Column Source(name)
Column Source Ref(all)<edge_begin><edge_end>Expression()
Column Source Ref(all)<edge_begin><edge_end>Select Source(name)
Column Source Ref(all)<edge_begin><edge_end>Column Source(name)
Literal()<edge_begin><edge_end>Expression()
Literal()<edge_begin><edge_end>Literal Value()
Nested Expression()<edge_begin><edge_end>Expression()
Select Statement Expression(not, exists)<edge_begin><edge_end>Expression()
Select Statement Expression(not, exists)<edge_begin><edge_end>Select Statement()
Case Expression()<edge_begin><edge_end>Expression()
Case Expression()<edge_begin><edge_end>Case()
Cast Expression(type)<edge_begin><edge_end>Expression()
Function Argument()<edge_begin><edge_end>Expression()
Function Argument()<edge_begin><edge_end>Function Arg(type, name)
Select Core(op)<edge_begin><edge_end>Select Core Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select Core Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select List()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Join Source()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Where Expressions()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Group By Expressions()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Having Expressions()
Single Source Table()<edge_begin><edge_end>Select Source(name)
Single Source Table()<edge_begin><edge_end>Table Definition(name)
Single Source Select Statement()<edge_begin><edge_end>Select Source(name)
Single Source Select Statement()<edge_begin><edge_end>Select Statement()
Result Column()<edge_begin><edge_end>Column Source(name)
Result Column()<edge_begin><edge_end>Expression()
Numeric Literal(number)<edge_begin><edge_end>Literal Value()
String Literal(literal)<edge_begin><edge_end>Literal Value()
Null Literal(literal)<edge_begin><edge_end>Literal Value()
Current Time Literal(literal)<edge_begin><edge_end>Literal Value()
Current Date Literal(literal)<edge_begin><edge_end>Literal Value()
Current Time Stamp Literal(literal)<edge_begin><edge_end>Literal Value()
Create Table Statement(temporary)<edge_begin><edge_end>Table Definition(name)
Create Table Statement(temporary)<edge_begin><edge_end>Column Source(name)
Create Table Statement(temporary)<edge_begin><edge_end>Table Constraint(name)
Create View Statement(temporary)<edge_begin><edge_end>Table Definition(name)
Create View Statement(temporary)<edge_begin><edge_end>Select Statement()
Alter Table Rename Statement()<edge_begin><edge_end>Table Definition(name)
Column Def(type)<edge_begin><edge_end>Column Source(name)
Column Def(type)<edge_begin><edge_end>Column Constraint()
Primary Key Column Constraint(asc, desc, autoincrement)<edge_begin><edge_end>Column Constraint()
Not Null Constraint()<edge_begin><edge_end>Column Constraint()
Not Null Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Unique Constraint()<edge_begin><edge_end>Column Constraint()
Unique Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Default Constraint()<edge_begin><edge_end>Column Constraint()
Default Constraint()<edge_begin><edge_end>Default Value()
Literal Default Value()<edge_begin><edge_end>Default Value()
Literal Default Value()<edge_begin><edge_end>Literal Value()
Expression Default Value()<edge_begin><edge_end>Default Value()
Expression Default Value()<edge_begin><edge_end>Expression()
Ontology Document()<edge_begin><edge_end>IRI(id)
Ontology Document()<edge_begin><edge_end>Import()
Ontology Document()<edge_begin><edge_end>Prefix Definition(pref)
Ontology Document()<edge_begin><edge_end>Query()
Import()<edge_begin><edge_end>IRI(id)
Prefix Definition(pref)<edge_begin><edge_end>Full IRI()
Select Query()<edge_begin><edge_end>Query()
Select Query()<edge_begin><edge_end>Templateable Element()
Select Query()<edge_begin><edge_end>Atom()
Select Query()<edge_begin><edge_end>Variable(symbol)
Construct Query()<edge_begin><edge_end>Query()
Construct Query()<edge_begin><edge_end>Templateable Element()
Construct Query()<edge_begin><edge_end>Atom()
Ask Query()<edge_begin><edge_end>Query()
Ask Query()<edge_begin><edge_end>Templateable Element()
Ask Query()<edge_begin><edge_end>Atom()
Describe Query()<edge_begin><edge_end>Query()
Describe Query()<edge_begin><edge_end>Templateable Element()
Describe Query()<edge_begin><edge_end>IRI(id)
Describe Query()<edge_begin><edge_end>Atom()
Full IRI()<edge_begin><edge_end>IRI(id)
Abbreviated IRI()<edge_begin><edge_end>IRI(id)
Variable(symbol)<edge_begin><edge_end>Term()
Class Variable()<edge_begin><edge_end>Variable(symbol)
Class Variable()<edge_begin><edge_end>Class Expression()
Object Property Variable()<edge_begin><edge_end>Variable(symbol)
Object Property Variable()<edge_begin><edge_end>Object Property Expression()
Data Property Variable()<edge_begin><edge_end>Variable(symbol)
Data Property Variable()<edge_begin><edge_end>Data Property Expression()
Individual Variable()<edge_begin><edge_end>Variable(symbol)
Individual Variable()<edge_begin><edge_end>Individual()
Constant()<edge_begin><edge_end>Term()
Constant()<edge_begin><edge_end>IRI(id)
Class()<edge_begin><edge_end>Class Expression()
Class()<edge_begin><edge_end>Constant()
Datatype()<edge_begin><edge_end>Constant()
Datatype()<edge_begin><edge_end>Data Range()
Object Property()<edge_begin><edge_end>Object Property Expression()
Object Property()<edge_begin><edge_end>Constant()
Data Property()<edge_begin><edge_end>Data Property Expression()
Data Property()<edge_begin><edge_end>Constant()
Named Individual()<edge_begin><edge_end>Individual()
Named Individual()<edge_begin><edge_end>Constant()
Anonymous Individual(node ID)<edge_begin><edge_end>Individual()
Literal Variable()<edge_begin><edge_end>Variable(symbol)
Literal Variable()<edge_begin><edge_end>Abstract Literal()
Literal(lexical Form)<edge_begin><edge_end>Abstract Literal()
Literal(lexical Form)<edge_begin><edge_end>Datatype()
Expression()<edge_begin><edge_end>Parameterable Element()
Assertion()<edge_begin><edge_end>Atom()
Class Assertion()<edge_begin><edge_end>Assertion()
Class Assertion()<edge_begin><edge_end>Individual()
Class Assertion()<edge_begin><edge_end>Class Expression()
Object Property Assertion()<edge_begin><edge_end>Assertion()
Object Property Assertion()<edge_begin><edge_end>Individual()
Object Property Assertion()<edge_begin><edge_end>Object Property Expression()
Data Property Assertion()<edge_begin><edge_end>Assertion()
Data Property Assertion()<edge_begin><edge_end>Individual()
Data Property Assertion()<edge_begin><edge_end>Abstract Literal()
Data Property Assertion()<edge_begin><edge_end>Data Property Expression()
Negative Object Property Assertion()<edge_begin><edge_end>Assertion()
Negative Object Property Assertion()<edge_begin><edge_end>Individual()
Negative Object Property Assertion()<edge_begin><edge_end>Object Property Expression()
Negative Data Property Assertion()<edge_begin><edge_end>Assertion()
Negative Data Property Assertion()<edge_begin><edge_end>Individual()
Negative Data Property Assertion()<edge_begin><edge_end>Abstract Literal()
Negative Data Property Assertion()<edge_begin><edge_end>Data Property Expression()
Same Individual()<edge_begin><edge_end>Assertion()
Same Individual()<edge_begin><edge_end>Individual()
Different Individuals()<edge_begin><edge_end>Assertion()
Different Individuals()<edge_begin><edge_end>Individual()
Class Atom()<edge_begin><edge_end>Atom()
Sub Class Of()<edge_begin><edge_end>Class Atom()
Sub Class Of()<edge_begin><edge_end>Class Expression()
Equivalent Classes()<edge_begin><edge_end>Class Atom()
Equivalent Classes()<edge_begin><edge_end>Class Expression()
Disjoint Classes()<edge_begin><edge_end>Class Atom()
Disjoint Classes()<edge_begin><edge_end>Class Expression()
Disjoint Union()<edge_begin><edge_end>Class Atom()
Disjoint Union()<edge_begin><edge_end>Class()
Disjoint Union()<edge_begin><edge_end>Class Variable()
Disjoint Union()<edge_begin><edge_end>Class Expression()
Class Expression()<edge_begin><edge_end>Expression()
Object Union Of()<edge_begin><edge_end>Class Expression()
Object Complement Of()<edge_begin><edge_end>Class Expression()
Object One Of()<edge_begin><edge_end>Class Expression()
Object One Of()<edge_begin><edge_end>Individual()
Object Intersection Of()<edge_begin><edge_end>Class Expression()
Object All Values From()<edge_begin><edge_end>Class Expression()
Object All Values From()<edge_begin><edge_end>Object Property Expression()
Object Some Values From()<edge_begin><edge_end>Class Expression()
Object Some Values From()<edge_begin><edge_end>Object Property Expression()
Object Has Value()<edge_begin><edge_end>Class Expression()
Object Has Value()<edge_begin><edge_end>Individual()
Object Has Value()<edge_begin><edge_end>Object Property Expression()
Object Min Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Object Min Cardinality(cardinality)<edge_begin><edge_end>Object Property Expression()
Object Max Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Object Max Cardinality(cardinality)<edge_begin><edge_end>Object Property Expression()
Object Exact Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Object Exact Cardinality(cardinality)<edge_begin><edge_end>Object Property Expression()
Data All Values From()<edge_begin><edge_end>Class Expression()
Data All Values From()<edge_begin><edge_end>Data Range()
Data All Values From()<edge_begin><edge_end>Data Property Expression()
Data Some Values From()<edge_begin><edge_end>Class Expression()
Data Some Values From()<edge_begin><edge_end>Data Range()
Data Some Values From()<edge_begin><edge_end>Data Property Expression()
Data Has Value()<edge_begin><edge_end>Class Expression()
Data Has Value()<edge_begin><edge_end>Abstract Literal()
Data Has Value()<edge_begin><edge_end>Data Property Expression()
Data Min Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Data Min Cardinality(cardinality)<edge_begin><edge_end>Data Range()
Data Min Cardinality(cardinality)<edge_begin><edge_end>Data Property Expression()
Data Max Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Data Max Cardinality(cardinality)<edge_begin><edge_end>Data Range()
Data Max Cardinality(cardinality)<edge_begin><edge_end>Data Property Expression()
Data Exact Cardinality(cardinality)<edge_begin><edge_end>Class Expression()
Data Exact Cardinality(cardinality)<edge_begin><edge_end>Data Range()
Data Exact Cardinality(cardinality)<edge_begin><edge_end>Data Property Expression()
Data Union Of()<edge_begin><edge_end>Data Range()
Data Complement Of()<edge_begin><edge_end>Data Range()
Data One Of()<edge_begin><edge_end>Data Range()
Data One Of()<edge_begin><edge_end>Abstract Literal()
Data Intersection Of()<edge_begin><edge_end>Data Range()
Datatype Restriction()<edge_begin><edge_end>Data Range()
Datatype Restriction()<edge_begin><edge_end>Datatype()
Datatype Restriction()<edge_begin><edge_end>Facet Restriction()
Facet Restriction()<edge_begin><edge_end>IRI(id)
Facet Restriction()<edge_begin><edge_end>Abstract Literal()
Object Property Atom()<edge_begin><edge_end>Atom()
Sub Object Property Of()<edge_begin><edge_end>Object Property Atom()
Sub Object Property Of()<edge_begin><edge_end>Object Property Expression()
Sub Object Property Of()<edge_begin><edge_end>Object Property Chain()
Object Property Chain()<edge_begin><edge_end>Object Property Expression()
Equivalent Object Properties()<edge_begin><edge_end>Object Property Atom()
Equivalent Object Properties()<edge_begin><edge_end>Object Property Expression()
Disjoint Object Properties()<edge_begin><edge_end>Object Property Atom()
Disjoint Object Properties()<edge_begin><edge_end>Object Property Expression()
Object Property Domain()<edge_begin><edge_end>Object Property Atom()
Object Property Domain()<edge_begin><edge_end>Object Property Expression()
Object Property Domain()<edge_begin><edge_end>Class Expression()
Object Property Range()<edge_begin><edge_end>Object Property Atom()
Object Property Range()<edge_begin><edge_end>Object Property Expression()
Object Property Range()<edge_begin><edge_end>Class Expression()
Inverse Object Property Atom()<edge_begin><edge_end>Object Property Atom()
Inverse Object Property Atom()<edge_begin><edge_end>Object Property Expression()
Functional Object Property()<edge_begin><edge_end>Object Property Atom()
Functional Object Property()<edge_begin><edge_end>Object Property Expression()
Inverse Functional Object Property()<edge_begin><edge_end>Object Property Atom()
Inverse Functional Object Property()<edge_begin><edge_end>Object Property Expression()
Reflexive Object Property()<edge_begin><edge_end>Object Property Atom()
Reflexive Object Property()<edge_begin><edge_end>Object Property Expression()
Irreflexive Object Property()<edge_begin><edge_end>Object Property Atom()
Irreflexive Object Property()<edge_begin><edge_end>Object Property Expression()
Symmetric Object Property()<edge_begin><edge_end>Object Property Atom()
Symmetric Object Property()<edge_begin><edge_end>Object Property Expression()
Asymmetric Object Property()<edge_begin><edge_end>Object Property Atom()
Asymmetric Object Property()<edge_begin><edge_end>Object Property Expression()
Transitive Object Property()<edge_begin><edge_end>Object Property Atom()
Transitive Object Property()<edge_begin><edge_end>Object Property Expression()
Object Property Expression()<edge_begin><edge_end>Expression()
Inverse Object Property()<edge_begin><edge_end>Object Property Expression()
Data Property Atom()<edge_begin><edge_end>Atom()
Sub Data Property Of()<edge_begin><edge_end>Data Property Atom()
Sub Data Property Of()<edge_begin><edge_end>Data Property Expression()
Equivalent Data Properties()<edge_begin><edge_end>Data Property Atom()
Equivalent Data Properties()<edge_begin><edge_end>Data Property Expression()
Disjoint Data Properties()<edge_begin><edge_end>Data Property Atom()
Disjoint Data Properties()<edge_begin><edge_end>Data Property Expression()
Data Property Domain()<edge_begin><edge_end>Data Property Atom()
Data Property Domain()<edge_begin><edge_end>Data Property Expression()
Data Property Domain()<edge_begin><edge_end>Class Expression()
Data Property Range()<edge_begin><edge_end>Data Property Atom()
Data Property Range()<edge_begin><edge_end>Data Property Expression()
Data Property Range()<edge_begin><edge_end>Data Range()
Functional Data Property()<edge_begin><edge_end>Data Property Atom()
Functional Data Property()<edge_begin><edge_end>Data Property Expression()
Data Property Expression()<edge_begin><edge_end>Expression()
Has Key()<edge_begin><edge_end>Atom()
Has Key()<edge_begin><edge_end>Class Expression()
Has Key()<edge_begin><edge_end>Object Property Expression()
Has Key()<edge_begin><edge_end>Data Property Expression()
Declaration()<edge_begin><edge_end>Atom()
Class Declaration()<edge_begin><edge_end>Declaration()
Class Declaration()<edge_begin><edge_end>Class()
Class Declaration()<edge_begin><edge_end>Class Variable()
Object Property Declaration()<edge_begin><edge_end>Declaration()
Object Property Declaration()<edge_begin><edge_end>Object Property()
Object Property Declaration()<edge_begin><edge_end>Object Property Variable()
Datatype Property Declaration()<edge_begin><edge_end>Declaration()
Datatype Property Declaration()<edge_begin><edge_end>Data Property()
Datatype Property Declaration()<edge_begin><edge_end>Data Property Variable()
Individual Declaration()<edge_begin><edge_end>Declaration()
Individual Declaration()<edge_begin><edge_end>Named Individual()
Individual Declaration()<edge_begin><edge_end>Individual Variable()
Template Parameter()<edge_begin><edge_end>Template Signature()
Template Parameter()<edge_begin><edge_end>Parameterable Element()
Template Parameter()<edge_begin><edge_end>Template Parameter Substitution()
Parameterable Element()<edge_begin><edge_end>Template Parameter()
Template Signature()<edge_begin><edge_end>Template Parameter()
Template Signature()<edge_begin><edge_end>Templateable Element()
Templateable Element()<edge_begin><edge_end>Template Signature()
Templateable Element()<edge_begin><edge_end>Template Binding()
Template Parameter Substitution()<edge_begin><edge_end>Parameterable Element()
Template Parameter Substitution()<edge_begin><edge_end>Template Binding()
Template Binding()<edge_begin><edge_end>Template Parameter Substitution()
Template Binding()<edge_begin><edge_end>Templateable Element()
Template Binding()<edge_begin><edge_end>Template Signature()
Direct Class Assertion()<edge_begin><edge_end>Assertion()
Direct Class Assertion()<edge_begin><edge_end>Individual()
Direct Class Assertion()<edge_begin><edge_end>Class Expression()
Direct Sub Class Of()<edge_begin><edge_end>Class Atom()
Direct Sub Class Of()<edge_begin><edge_end>Class Expression()
Strict Sub Class Of()<edge_begin><edge_end>Class Atom()
Strict Sub Class Of()<edge_begin><edge_end>Class Expression()
State Machine()<edge_begin><edge_end>Declaration()
State Machine()<edge_begin><edge_end>State Machine Variable(type, name)
Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)<edge_begin><edge_end>Declaration()
Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)<edge_begin><edge_end>State(label, id)
State(label, id)<edge_begin><edge_end>Declaration()
State(label, id)<edge_begin><edge_end>State(label, id)
State(label, id)<edge_begin><edge_end>Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)
Normal State()<edge_begin><edge_end>State(label, id)
Normal State()<edge_begin><edge_end>Action(action Label, action Statement)
Initial State()<edge_begin><edge_end>State(label, id)
Final State()<edge_begin><edge_end>State(label, id)
Project(name, basedir, description)<edge_begin><edge_end>String()
Project(name, basedir, description)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Project(name, basedir, description)<edge_begin><edge_end>Path(id, refid)
Project(name, basedir, description)<edge_begin><edge_end>Property()
Project(name, basedir, description)<edge_begin><edge_end>Task Def(name, classname)
Property Name(name)<edge_begin><edge_end>Property()
Property Name(name)<edge_begin><edge_end>String()
Property Value(value)<edge_begin><edge_end>Property Name(name)
Property Value(value)<edge_begin><edge_end>String()
Property Location(location)<edge_begin><edge_end>Property Name(name)
Property Location(location)<edge_begin><edge_end>String()
Property File(file)<edge_begin><edge_end>Property()
Property File(file)<edge_begin><edge_end>String()
Property Env(environment)<edge_begin><edge_end>Property()
Property Env(environment)<edge_begin><edge_end>String()
Target(name, description, unless, if Condition)<edge_begin><edge_end>String()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Target(name, description, unless, if Condition)<edge_begin><edge_end>Task()
Basic()<edge_begin><edge_end>Pattern()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>String()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File List(dir, files)<edge_begin><edge_end>Basic()
File List(dir, files)<edge_begin><edge_end>String()
Filter(token, value)<edge_begin><edge_end>Basic()
Filter(token, value)<edge_begin><edge_end>String()
Filters File(file)<edge_begin><edge_end>Basic()
Filters File(file)<edge_begin><edge_end>String()
Path Element(path, location)<edge_begin><edge_end>Basic()
Path Element(path, location)<edge_begin><edge_end>String()
Set()<edge_begin><edge_end>Pattern()
Pattern Set()<edge_begin><edge_end>Set()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Set(dir)<edge_begin><edge_end>Set()
File Set(dir)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File Set(dir)<edge_begin><edge_end>Includes()
File Set(dir)<edge_begin><edge_end>Excludes()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Path(id, refid)<edge_begin><edge_end>Set()
Path(id, refid)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Class Path(refid)<edge_begin><edge_end>String()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Task()<edge_begin><edge_end>Target(name, description, unless, if Condition)
Task Def(name, classname)<edge_begin><edge_end>String()
New Task()<edge_begin><edge_end>Task()
New Task()<edge_begin><edge_end>Task Def(name, classname)
New Task()<edge_begin><edge_end>Attribut(name, value)
Attribut(name, value)<edge_begin><edge_end>String()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Exec(executable, dir)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>Execution Task()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Echo(message, file, append)<edge_begin><edge_end>String()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Format Tstamp(property, pattern, offset, unit, locale)<edge_begin><edge_end>String()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>String()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>String()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>String()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mkdir(dir)<edge_begin><edge_end>File Task()
Mkdir(dir)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>String()
Project()<edge_begin><edge_end>Document()
Typed Element(type)<edge_begin><edge_end>String()
Element With IL(name, label)<edge_begin><edge_end>Typed Element(type)
Element With IL(name, label)<edge_begin><edge_end>String()
Document()<edge_begin><edge_end>Element With IL(name, label)
Document()<edge_begin><edge_end>Project()
Document()<edge_begin><edge_end>Section()
Text Element(description)<edge_begin><edge_end>Element With IL(name, label)
Text Element(description)<edge_begin><edge_end>String()
Section()<edge_begin><edge_end>Text Element(description)
Section()<edge_begin><edge_end>Document()
Section()<edge_begin><edge_end>Section()
Section()<edge_begin><edge_end>Abstract Requirement()
Abstract Requirement()<edge_begin><edge_end>Text Element(description)
Abstract Requirement()<edge_begin><edge_end>Section()
Abstract Requirement()<edge_begin><edge_end>Macro Requirement()
Abstract Requirement()<edge_begin><edge_end>Cover Link()
Abstract Requirement()<edge_begin><edge_end>Attribute(value)
Requirement()<edge_begin><edge_end>Abstract Requirement()
Macro Requirement()<edge_begin><edge_end>Abstract Requirement()
Cover Link()<edge_begin><edge_end>Typed Element(type)
Cover Link()<edge_begin><edge_end>Abstract Requirement()
Attribute(value)<edge_begin><edge_end>Typed Element(type)
Attribute(value)<edge_begin><edge_end>String()
Ided Element(id)<edge_begin><edge_end>String()
URI(value)<edge_begin><edge_end>String()
Any Element(name, text)<edge_begin><edge_end>String()
NC Name(value)<edge_begin><edge_end>String()
PNML Document()<edge_begin><edge_end>URI(value)
PNML Document()<edge_begin><edge_end>Net Element()
PNML Document()<edge_begin><edge_end>Module()
Module()<edge_begin><edge_end>Ided Element(id)
Module()<edge_begin><edge_end>Interface()
Module()<edge_begin><edge_end>Net Content()
Module()<edge_begin><edge_end>PNML Document()
Interface()<edge_begin><edge_end>Module()
Interface()<edge_begin><edge_end>Node()
Interface()<edge_begin><edge_end>Reference()
Net Element()<edge_begin><edge_end>Ided Element(id)
Net Element()<edge_begin><edge_end>URI(value)
Net Element()<edge_begin><edge_end>PNML Document()
Net Element()<edge_begin><edge_end>Net Content()
Net Element()<edge_begin><edge_end>Tool Specific(tool, version)
Net Element()<edge_begin><edge_end>Net Graphics()
Net Element()<edge_begin><edge_end>Name()
Net Content()<edge_begin><edge_end>Net Element()
Net Content()<edge_begin><edge_end>Name()
Net Content()<edge_begin><edge_end>Page()
Net Content()<edge_begin><edge_end>Module()
Tool Specific(tool, version)<edge_begin><edge_end>String()
Tool Specific(tool, version)<edge_begin><edge_end>Any Element(name, text)
Tool Specific(tool, version)<edge_begin><edge_end>Net Element()
Tool Specific(tool, version)<edge_begin><edge_end>Arc()
Tool Specific(tool, version)<edge_begin><edge_end>Node()
Tool Specific(tool, version)<edge_begin><edge_end>Page()
Labeled Element()<edge_begin><edge_end>Label(text)
Labeled Element()<edge_begin><edge_end>Annotation Graphics()
Label(text)<edge_begin><edge_end>String()
Label(text)<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Net Element()
Name()<edge_begin><edge_end>Net Content()
Inscription()<edge_begin><edge_end>Labeled Element()
Inscription()<edge_begin><edge_end>Arc()
Initial Marking()<edge_begin><edge_end>Labeled Element()
Initial Marking()<edge_begin><edge_end>Place()
Net Content Element()<edge_begin><edge_end>Net Content()
Net Content Element()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Net Content()
Arc()<edge_begin><edge_end>Ided Element(id)
Arc()<edge_begin><edge_end>Net Content Element()
Arc()<edge_begin><edge_end>Tool Specific(tool, version)
Arc()<edge_begin><edge_end>Edge Graphics()
Arc()<edge_begin><edge_end>Inscription()
Page()<edge_begin><edge_end>Net Content()
Page()<edge_begin><edge_end>Ided Element(id)
Page()<edge_begin><edge_end>Tool Specific(tool, version)
Page()<edge_begin><edge_end>Page Graphics()
Reference()<edge_begin><edge_end>Node()
Reference()<edge_begin><edge_end>NC Name(value)
Reference()<edge_begin><edge_end>Import Node()
Reference Place()<edge_begin><edge_end>Net Content()
Reference Place()<edge_begin><edge_end>Reference()
Reference Transition()<edge_begin><edge_end>Net Content()
Reference Transition()<edge_begin><edge_end>Reference()
Instance()<edge_begin><edge_end>Net Content()
Instance()<edge_begin><edge_end>Ided Element(id)
Instance()<edge_begin><edge_end>URI(value)
Instance()<edge_begin><edge_end>Import Node()
Import Node()<edge_begin><edge_end>NC Name(value)
Import Node()<edge_begin><edge_end>Reference()
Import Node()<edge_begin><edge_end>Instance()
Node()<edge_begin><edge_end>Ided Element(id)
Node()<edge_begin><edge_end>Net Content Element()
Node()<edge_begin><edge_end>Tool Specific(tool, version)
Node()<edge_begin><edge_end>Node Graphics()
Place()<edge_begin><edge_end>Net Content Element()
Place()<edge_begin><edge_end>Initial Marking()
Transition()<edge_begin><edge_end>Net Content Element()
Net Graphics()<edge_begin><edge_end>Graphics()
Net Graphics()<edge_begin><edge_end>Net Element()
Node Graphics()<edge_begin><edge_end>Graphics()
Node Graphics()<edge_begin><edge_end>Node()
Node Graphics()<edge_begin><edge_end>Position()
Node Graphics()<edge_begin><edge_end>Dimension(width, height)
Node Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Node Graphics()<edge_begin><edge_end>Line(width, shape, style)
Edge Graphics()<edge_begin><edge_end>Graphics()
Edge Graphics()<edge_begin><edge_end>Arc()
Edge Graphics()<edge_begin><edge_end>Position()
Edge Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Edge Graphics()<edge_begin><edge_end>Line(width, shape, style)
Annotation Graphics()<edge_begin><edge_end>Graphics()
Annotation Graphics()<edge_begin><edge_end>Labeled Element()
Annotation Graphics()<edge_begin><edge_end>Offset()
Annotation Graphics()<edge_begin><edge_end>Font(family, style, weight, size, decoration, align, rotation)
Annotation Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Annotation Graphics()<edge_begin><edge_end>Line(width, shape, style)
Page Graphics()<edge_begin><edge_end>Graphics()
Page Graphics()<edge_begin><edge_end>Page()
Coordinate(x, y)<edge_begin><edge_end>Integer()
Position()<edge_begin><edge_end>Coordinate(x, y)
Position()<edge_begin><edge_end>Node Graphics()
Position()<edge_begin><edge_end>Edge Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Offset()<edge_begin><edge_end>Annotation Graphics()
Dimension(width, height)<edge_begin><edge_end>Integer()
Dimension(width, height)<edge_begin><edge_end>Node Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Color()
Fill(gradientrotation)<edge_begin><edge_end>URI(value)
Fill(gradientrotation)<edge_begin><edge_end>Node Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Edge Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Annotation Graphics()
Line(width, shape, style)<edge_begin><edge_end>Color()
Line(width, shape, style)<edge_begin><edge_end>Integer()
Line(width, shape, style)<edge_begin><edge_end>Node Graphics()
Line(width, shape, style)<edge_begin><edge_end>Edge Graphics()
Line(width, shape, style)<edge_begin><edge_end>Annotation Graphics()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>String()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Integer()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Annotation Graphics()
Named Element(name)<edge_begin><edge_end>String()
Data Base(SGB Dname)<edge_begin><edge_end>Named Element(name)
Data Base(SGB Dname)<edge_begin><edge_end>String()
Data Base(SGB Dname)<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Data Base(SGB Dname)
Table()<edge_begin><edge_end>Tuple()
Tuple()<edge_begin><edge_end>Table()
Tuple()<edge_begin><edge_end>Tuple Element(value)
Tuple Element(value)<edge_begin><edge_end>Tuple()
Tuple Element(value)<edge_begin><edge_end>String()
HTML()<edge_begin><edge_end>HEAD()
HTML()<edge_begin><edge_end>BBODY(background, bgcolor, text, link, alink, vlink)
HTML Element(value)<edge_begin><edge_end>String()
HTML Element(value)<edge_begin><edge_end>HTML Element(value)
HEAD()<edge_begin><edge_end>HTML Element(value)
HEAD()<edge_begin><edge_end>HEAD Element()
HEAD()<edge_begin><edge_end>HTML()
HEAD Element()<edge_begin><edge_end>HTML Element(value)
HEAD Element()<edge_begin><edge_end>HEAD()
LINK(rel, title, ahref, type)<edge_begin><edge_end>HEAD Element()
LINK(rel, title, ahref, type)<edge_begin><edge_end>String()
TITLE()<edge_begin><edge_end>HEAD Element()
BBODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML Element(value)
BBODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>String()
BBODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>BODY Element()
BBODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML()
BODY Element()<edge_begin><edge_end>HTML Element(value)
BODY Element()<edge_begin><edge_end>BBODY(background, bgcolor, text, link, alink, vlink)
H1()<edge_begin><edge_end>BODY Element()
H2()<edge_begin><edge_end>BODY Element()
H3()<edge_begin><edge_end>BODY Element()
H4()<edge_begin><edge_end>BODY Element()
EM()<edge_begin><edge_end>BODY Element()
STRONG()<edge_begin><edge_end>BODY Element()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>BODY Element()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>String()
BR(clear)<edge_begin><edge_end>BODY Element()
BR(clear)<edge_begin><edge_end>String()
STYLE()<edge_begin><edge_end>BODY Element()
SPAN(style)<edge_begin><edge_end>BODY Element()
SPAN(style)<edge_begin><edge_end>String()
A(ahref, name, id)<edge_begin><edge_end>BODY Element()
A(ahref, name, id)<edge_begin><edge_end>String()
DIV(align)<edge_begin><edge_end>BODY Element()
DIV(align)<edge_begin><edge_end>String()
P()<edge_begin><edge_end>BODY Element()
TABLE Element(bgcolor, background)<edge_begin><edge_end>BODY Element()
TABLE Element(bgcolor, background)<edge_begin><edge_end>String()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>String()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TR(valign, align)
TR(valign, align)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TR(valign, align)<edge_begin><edge_end>String()
TR(valign, align)<edge_begin><edge_end>TABLE(border, width, cellspacing, cellpadding)
TR(valign, align)<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>String()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TR(valign, align)
TH()<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
SELECT(multiple, size, name)<edge_begin><edge_end>String()
OPTION(selected, option Value)<edge_begin><edge_end>String()
List Element(type)<edge_begin><edge_end>String()
OL(start)<edge_begin><edge_end>List Element(type)
OL(start)<edge_begin><edge_end>String()
UL()<edge_begin><edge_end>List Element(type)
LI(li Value)<edge_begin><edge_end>List Element(type)
LI(li Value)<edge_begin><edge_end>String()
H5()<edge_begin><edge_end>BODY Element()
H6()<edge_begin><edge_end>BODY Element()
Website()<edge_begin><edge_end>HTML()
Urml Model Element(reviewed)<edge_begin><edge_end>Urml Model Element(reviewed)
Stakeholder()<edge_begin><edge_end>Urml Model Element(reviewed)
Stakeholder()<edge_begin><edge_end>Goal(soft, type)
Stakeholder Role()<edge_begin><edge_end>Set Entry()
Phase()<edge_begin><edge_end>Phase Set Entry()
Urml Project Settings()<edge_begin><edge_end>Phase()
Goal(soft, type)<edge_begin><edge_end>Urml Model Element(reviewed)
Goal(soft, type)<edge_begin><edge_end>Stakeholder()
Goal(soft, type)<edge_begin><edge_end>Abstract Feature()
Goal(soft, type)<edge_begin><edge_end>Application Domain Use Case()
Goal(soft, type)<edge_begin><edge_end>Goal(soft, type)
Goal(soft, type)<edge_begin><edge_end>Goal Reference(weight)
Goal Reference(weight)<edge_begin><edge_end>Urml Model Element(reviewed)
Goal Reference(weight)<edge_begin><edge_end>Goal(soft, type)
Requirement(terminal)<edge_begin><edge_end>Mitigation()
Requirement(terminal)<edge_begin><edge_end>Service()
Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Functional Requirement()<edge_begin><edge_end>Abstract Feature()
Functional Requirement()<edge_begin><edge_end>Functional Requirement()
Non Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Non Functional Requirement()<edge_begin><edge_end>Abstract Feature()
Non Functional Requirement()<edge_begin><edge_end>Non Functional Requirement()
Use Case()<edge_begin><edge_end>Urml Model Element(reviewed)
Use Case()<edge_begin><edge_end>Actor()
Application Domain Use Case()<edge_begin><edge_end>Use Case()
Application Domain Use Case()<edge_begin><edge_end>Goal(soft, type)
Solution Domain Use Case()<edge_begin><edge_end>Use Case()
Solution Domain Use Case()<edge_begin><edge_end>Abstract Feature()
Actor()<edge_begin><edge_end>Asset()
Actor()<edge_begin><edge_end>Use Case()
Service()<edge_begin><edge_end>Asset()
Service()<edge_begin><edge_end>Requirement(terminal)
Service()<edge_begin><edge_end>Service()
Asset()<edge_begin><edge_end>Urml Model Element(reviewed)
Asset()<edge_begin><edge_end>Danger()
Danger()<edge_begin><edge_end>Urml Model Element(reviewed)
Danger()<edge_begin><edge_end>Asset()
Danger()<edge_begin><edge_end>Mitigation()
Mitigation()<edge_begin><edge_end>Urml Model Element(reviewed)
Mitigation()<edge_begin><edge_end>Danger()
Procedural Mitigation(mitigation Procedure)<edge_begin><edge_end>Mitigation()
Abstract Feature()<edge_begin><edge_end>Urml Model Element(reviewed)
Abstract Feature()<edge_begin><edge_end>Goal(soft, type)
Abstract Feature()<edge_begin><edge_end>Functional Requirement()
Abstract Feature()<edge_begin><edge_end>Non Functional Requirement()
Abstract Feature()<edge_begin><edge_end>Solution Domain Use Case()
Abstract Feature()<edge_begin><edge_end>Abstract Feature()
Abstract Feature()<edge_begin><edge_end>Variation Point(multiplicity)
Abstract Feature()<edge_begin><edge_end>Variation Point Instance()
Feature()<edge_begin><edge_end>Abstract Feature()
Feature()<edge_begin><edge_end>Product()
Variation Point(multiplicity)<edge_begin><edge_end>Abstract Feature()
Variation Point(multiplicity)<edge_begin><edge_end>Variation Point Instance()
Variation Point Instance()<edge_begin><edge_end>Urml Model Element(reviewed)
Variation Point Instance()<edge_begin><edge_end>Variation Point(multiplicity)
Variation Point Instance()<edge_begin><edge_end>Product()
Variation Point Instance()<edge_begin><edge_end>Abstract Feature()
Product()<edge_begin><edge_end>Urml Model Element(reviewed)
Product()<edge_begin><edge_end>Variation Point Instance()
Product()<edge_begin><edge_end>Feature()
Annotation Graphics()<edge_begin><edge_end>Two Dim Vector(x, y)
Arc(group, id, source, target)<edge_begin><edge_end>Arc Type(text)
Arc(group, id, source, target)<edge_begin><edge_end>Edge Graphics()
Arc(group, id, source, target)<edge_begin><edge_end>Inscription(text)
Arc(group, id, source, target)<edge_begin><edge_end>Pnml Annotation(text)
Arc(group, id, source, target)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Arc Type(text)<edge_begin><edge_end>Text Type()
Connection Weight(connection)<edge_begin><edge_end>Stat(text)
Connection Weights()<edge_begin><edge_end>Connection Weight(connection)
Cost()<edge_begin><edge_end>Stat(text)
Document Root(mixed)<edge_begin><edge_end>Pnml(group)
Edge Graphics()<edge_begin><edge_end>Two Dim Vector(x, y)
Initial Marking(text)<edge_begin><edge_end>Annotation Graphics()
Inscription(text)<edge_begin><edge_end>Annotation Graphics()
Net(group, id, type)<edge_begin><edge_end>Net Graphics(group)
Net(group, id, type)<edge_begin><edge_end>Place Type1()
Net(group, id, type)<edge_begin><edge_end>Transition(group, id)
Net(group, id, type)<edge_begin><edge_end>Arc(group, id, source, target)
Net(group, id, type)<edge_begin><edge_end>Page(group, id)
Net(group, id, type)<edge_begin><edge_end>Pnml Annotation(text)
Net(group, id, type)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Net Graphics(group)<edge_begin><edge_end>Two Dim Vector(x, y)
Node Graphics(group)<edge_begin><edge_end>Two Dim Vector(x, y)
Page(group, id)<edge_begin><edge_end>Reference Place(group, id, ref)
Page(group, id)<edge_begin><edge_end>Net Graphics(group)
Page(group, id)<edge_begin><edge_end>Transition Type(text)
Page(group, id)<edge_begin><edge_end>Place Type1()
Page(group, id)<edge_begin><edge_end>Transition(group, id)
Page(group, id)<edge_begin><edge_end>Arc(group, id, source, target)
Page(group, id)<edge_begin><edge_end>Page(group, id)
Page(group, id)<edge_begin><edge_end>Pnml Annotation(text)
Page(group, id)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Place(group, id)<edge_begin><edge_end>Place Type(text)
Place(group, id)<edge_begin><edge_end>Node Graphics(group)
Place(group, id)<edge_begin><edge_end>Initial Marking(text)
Place(group, id)<edge_begin><edge_end>Pnml Annotation(text)
Place(group, id)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Place Type1()<edge_begin><edge_end>Place(group, id)
Pnml(group)<edge_begin><edge_end>Net(group, id, type)
Pnml(group)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Pnml Annotation(text)<edge_begin><edge_end>Annotation Graphics()
Processing Time()<edge_begin><edge_end>Stat(text)
Reference Place(group, id, ref)<edge_begin><edge_end>Node Graphics(group)
Reference Place(group, id, ref)<edge_begin><edge_end>Pnml Annotation(text)
Reference Place(group, id, ref)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Reference Place Specific(tool, version)<edge_begin><edge_end>Node Graphics(group)
Roles()<edge_begin><edge_end>Role(text)
Stat(text)<edge_begin><edge_end>Non Negative Decimal()
Transformation(text)<edge_begin><edge_end>Annotation Graphics()
Transition(group, id)<edge_begin><edge_end>Transition Type(text)
Transition(group, id)<edge_begin><edge_end>Node Graphics(group)
Transition(group, id)<edge_begin><edge_end>Transformation(text)
Transition(group, id)<edge_begin><edge_end>Pnml Annotation(text)
Transition(group, id)<edge_begin><edge_end>Toolspecific Type(mixed, group, any, tool, version)
Transition Specific(token Case Sensitive, tool, version)<edge_begin><edge_end>Roles()
Transition Specific(token Case Sensitive, tool, version)<edge_begin><edge_end>Cost()
Transition Specific(token Case Sensitive, tool, version)<edge_begin><edge_end>Processing Time()
Annotation()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>HL Annotation Addin(text)
Arc()<edge_begin><edge_end>Has Id(id)
Arc()<edge_begin><edge_end>HL Arc Addin(kind)
Arc()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Page()
Attribute()<edge_begin><edge_end>Label()
CPN Tools Transition Addin()<edge_begin><edge_end>Code()
CPN Tools Transition Addin()<edge_begin><edge_end>Time()
CPN Tools Transition Addin()<edge_begin><edge_end>Priority()
Code()<edge_begin><edge_end>Annotation()
Condition()<edge_begin><edge_end>Annotation()
Fusion Group()<edge_begin><edge_end>Place()
Fusion Group()<edge_begin><edge_end>Petri Net(kind, time Type)
HL Annotation()<edge_begin><edge_end>Annotation()
HL Arc Addin(kind)<edge_begin><edge_end>HL Annotation()
HL Declaration()<edge_begin><edge_end>Annotation()
HL Declaration()<edge_begin><edge_end>Has Id(id)
HL Marking()<edge_begin><edge_end>Annotation()
HL Place Addin()<edge_begin><edge_end>Sort()
HL Place Addin()<edge_begin><edge_end>HL Marking()
HL Transition Addin()<edge_begin><edge_end>Condition()
Has Label()<edge_begin><edge_end>Label()
Has Name()<edge_begin><edge_end>Name()
Has Tool Info()<edge_begin><edge_end>Tool Info(tool, version)
Instance(sub Page ID)<edge_begin><edge_end>Node()
Instance(sub Page ID)<edge_begin><edge_end>Parameter Assignment(parameter, value)
Label()<edge_begin><edge_end>Has Tool Info()
Label()<edge_begin><edge_end>Has Label()
Name()<edge_begin><edge_end>HL Annotation()
Node()<edge_begin><edge_end>Object()
Node()<edge_begin><edge_end>Arc()
Object()<edge_begin><edge_end>Has Id(id)
Object()<edge_begin><edge_end>Has Tool Info()
Object()<edge_begin><edge_end>Has Label()
Object()<edge_begin><edge_end>Has Name()
Object()<edge_begin><edge_end>Page()
Page()<edge_begin><edge_end>Has Id(id)
Page()<edge_begin><edge_end>Has Name()
Page()<edge_begin><edge_end>Has Label()
Page()<edge_begin><edge_end>Petri Net(kind, time Type)
Page()<edge_begin><edge_end>Object()
Page()<edge_begin><edge_end>Arc()
Parameter Assignment(parameter, value)<edge_begin><edge_end>Instance(sub Page ID)
Petri Net(kind, time Type)<edge_begin><edge_end>Has Id(id)
Petri Net(kind, time Type)<edge_begin><edge_end>Has Tool Info()
Petri Net(kind, time Type)<edge_begin><edge_end>Has Label()
Petri Net(kind, time Type)<edge_begin><edge_end>Has Name()
Petri Net(kind, time Type)<edge_begin><edge_end>Page()
Petri Net(kind, time Type)<edge_begin><edge_end>Fusion Group()
Place()<edge_begin><edge_end>Place Node()
Place()<edge_begin><edge_end>Ref Place()
Place Node()<edge_begin><edge_end>Node()
Place Node()<edge_begin><edge_end>HL Place Addin()
Priority()<edge_begin><edge_end>Annotation()
Ref Place()<edge_begin><edge_end>Place Node()
Ref Place()<edge_begin><edge_end>Place()
Ref Trans()<edge_begin><edge_end>Transition Node()
Sort()<edge_begin><edge_end>Annotation()
Time()<edge_begin><edge_end>Annotation()
Tool Info(tool, version)<edge_begin><edge_end>Has Tool Info()
Transition()<edge_begin><edge_end>Transition Node()
Transition Node()<edge_begin><edge_end>Node()
Transition Node()<edge_begin><edge_end>HL Transition Addin()
Transition Node()<edge_begin><edge_end>CPN Tools Transition Addin()
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Paper Keyword(weight)
Paper()<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Keyword(word)
Keyword(word)<edge_begin><edge_end>Named(name)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(word)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Paper Keyword(weight)
Paper()<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Publication Structure()<edge_begin><edge_end>Position(description)
Position(description)<edge_begin><edge_end>Named(name)
Position(description)<edge_begin><edge_end>Position(description)
Keyword(description)<edge_begin><edge_end>Named(name)
Keyword(description)<edge_begin><edge_end>Paper()
Knowledge Manager()<edge_begin><edge_end>Named(name)
Knowledge Manager()<edge_begin><edge_end>Keyword(description)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(description)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Keyspace(name)<edge_begin><edge_end>Column Family(name)
Column Family(name)<edge_begin><edge_end>Row(key)
Row(key)<edge_begin><edge_end>Column(key, timestamp)
Row(key)<edge_begin><edge_end>Super Column(key)
Column(key, timestamp)<edge_begin><edge_end>Timestamp()
Column(key, timestamp)<edge_begin><edge_end>Data Type()
Super Column(key)<edge_begin><edge_end>Column(key, timestamp)
Integer Type(value)<edge_begin><edge_end>Data Type()
UTF8Type(value)<edge_begin><edge_end>Data Type()
Float Type(value)<edge_begin><edge_end>Data Type()
Boolean Type(value)<edge_begin><edge_end>Data Type()
UUID Type(value)<edge_begin><edge_end>Data Type()
Ascii Type(value)<edge_begin><edge_end>Data Type()
Double Type(value)<edge_begin><edge_end>Data Type()
Counter Column Type(value)<edge_begin><edge_end>Data Type()
Decimal Type(value)<edge_begin><edge_end>Data Type()
Decimal Type(value)<edge_begin><edge_end>Decimal()
Bytes Type(value)<edge_begin><edge_end>Data Type()
Bytes Type(value)<edge_begin><edge_end>Bytes()
Date Type(value)<edge_begin><edge_end>Data Type()
Date Type(value)<edge_begin><edge_end>Timestamp()
G Abstract State()<edge_begin><edge_end>G Abstract Action(kind)
G State()<edge_begin><edge_end>Named(name, comment)
G State()<edge_begin><edge_end>G Abstract State()
Transition(preserve Timers)<edge_begin><edge_end>Named(name, comment)
Transition(preserve Timers)<edge_begin><edge_end>G Abstract State()
Transition(preserve Timers)<edge_begin><edge_end>Value()
G Composite State()<edge_begin><edge_end>G State()
G Composite State()<edge_begin><edge_end>G Abstract State()
G Composite State()<edge_begin><edge_end>Transition(preserve Timers)
G Start State()<edge_begin><edge_end>G Abstract State()
G Stop State()<edge_begin><edge_end>G Abstract State()
G Statemachine(package)<edge_begin><edge_end>G Composite State()
G Statemachine(package)<edge_begin><edge_end>Parameter()
Call Action()<edge_begin><edge_end>G Abstract Action(kind)
Call Action()<edge_begin><edge_end>Call(action Id)
Parameter()<edge_begin><edge_end>Named(name, comment)
Get Parameter()<edge_begin><edge_end>Value()
Get Parameter()<edge_begin><edge_end>Parameter()
Call(action Id)<edge_begin><edge_end>Value()
Constant Value(value)<edge_begin><edge_end>Value()
String Value()<edge_begin><edge_end>Constant Value(value)
Number Value()<edge_begin><edge_end>Constant Value(value)
Boolean Value()<edge_begin><edge_end>Constant Value(value)
Long Value()<edge_begin><edge_end>Number Value()
Statemachine(translation, self Name)<edge_begin><edge_end>Statemachine(translation, self Name)
Statemachine(translation, self Name)<edge_begin><edge_end>Abstract Node()
Statemachine(translation, self Name)<edge_begin><edge_end>Transition(operations)
Statemachine Owner()<edge_begin><edge_end>Statemachine(translation, self Name)
Transition(operations)<edge_begin><edge_end>Abstract Node()
Abstract Node()<edge_begin><edge_end>Transition(operations)
State(active)<edge_begin><edge_end>Abstract Node()
State(active)<edge_begin><edge_end>Statemachine Owner()
State(active)<edge_begin><edge_end>State(active)
Initial()<edge_begin><edge_end>Abstract Node()
Final()<edge_begin><edge_end>Abstract Node()
Place()<edge_begin><edge_end>Place()
Place()<edge_begin><edge_end>Initial Marking()
Place()<edge_begin><edge_end>Sort()
Arc()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Arc Expression()
Transition()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Guard()
Page()<edge_begin><edge_end>Page()
Arc Expression()<edge_begin><edge_end>CPN Inscription(text)
Guard()<edge_begin><edge_end>CPN Inscription(text)
Initial Marking()<edge_begin><edge_end>CPN Inscription(text)
Sort()<edge_begin><edge_end>CPN Inscription(text)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Paper Keyword(weight)
Paper()<edge_begin><edge_end>Paper()
Paper()<edge_begin><edge_end>State(id, kind, name)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Progress(percent)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Publication System()<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Publication Structure()
Publication System()<edge_begin><edge_end>Position(description)
Publication System()<edge_begin><edge_end>Publication Status(label)
Position(description)<edge_begin><edge_end>Named(name)
Position(description)<edge_begin><edge_end>Position(description)
Keyword(word)<edge_begin><edge_end>Named(name)
Keyword(word)<edge_begin><edge_end>Paper()
Knowledge Manager()<edge_begin><edge_end>Named(name)
Knowledge Manager()<edge_begin><edge_end>Keyword(word)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(word)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Publication Status(label)<edge_begin><edge_end>State Machine Variable()
Publication Status(label)<edge_begin><edge_end>State(id, kind, name)
Transition(guard Label, guard Expression)<edge_begin><edge_end>State Machine Object(label)
Transition(guard Label, guard Expression)<edge_begin><edge_end>Action(action Label, action Statement)
Transition(guard Label, guard Expression)<edge_begin><edge_end>State(id, kind, name)
State(id, kind, name)<edge_begin><edge_end>State Machine Object(label)
State(id, kind, name)<edge_begin><edge_end>Transition(guard Label, guard Expression)
State(id, kind, name)<edge_begin><edge_end>Action(action Label, action Statement)
Action(action Label, action Statement)<edge_begin><edge_end>Action(action Label, action Statement)
Controller Attribute()<edge_begin><edge_end>Controller()
Controller()<edge_begin><edge_end>Controller Attribute()
Controller()<edge_begin><edge_end>State Machine()
State Machine()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State Transition()
Sub Controller State()<edge_begin><edge_end>State()
Sub Controller State()<edge_begin><edge_end>Controller()
View State()<edge_begin><edge_end>State()
State Transition()<edge_begin><edge_end>State()
State Transition()<edge_begin><edge_end>Event()
State Transition()<edge_begin><edge_end>State Machine Action()
Boolean Expression(value)<edge_begin><edge_end>String()
State Machine()<edge_begin><edge_end>Transition()
State Machine()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State Vertex()
State()<edge_begin><edge_end>State Machine()
State()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Event()
Composite State(is Concurrent)<edge_begin><edge_end>State()
Composite State(is Concurrent)<edge_begin><edge_end>State Vertex()
Composite State(is Concurrent)<edge_begin><edge_end>Boolean()
Transition()<edge_begin><edge_end>State Machine()
Transition()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Event()
Transition()<edge_begin><edge_end>Guard()
Transition()<edge_begin><edge_end>State Vertex()
State Vertex()<edge_begin><edge_end>Composite State(is Concurrent)
State Vertex()<edge_begin><edge_end>Transition()
Guard()<edge_begin><edge_end>Transition()
Guard()<edge_begin><edge_end>Boolean Expression(value)
Event()<edge_begin><edge_end>Transition()
Event()<edge_begin><edge_end>State()
JPQL Query()<edge_begin><edge_end>Where Clause()
Select Statement()<edge_begin><edge_end>JPQL Query()
Select Statement()<edge_begin><edge_end>Expression Term()
Select Statement()<edge_begin><edge_end>Select Clause(is Distinct)
Select Statement()<edge_begin><edge_end>From Clause()
Select Statement()<edge_begin><edge_end>Group By Clause()
Select Statement()<edge_begin><edge_end>Order By Clause()
Group By Clause()<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Group By Clause()<edge_begin><edge_end>Having Clause()
Having Clause()<edge_begin><edge_end>Expression(unary Operator, is Not)
Order By Clause()<edge_begin><edge_end>Order By Spec()
Update Statement()<edge_begin><edge_end>JPQL Query()
Update Statement()<edge_begin><edge_end>Update Clause()
Update Statement()<edge_begin><edge_end>Set Clause()
Update Clause()<edge_begin><edge_end>From Entry()
Set Clause()<edge_begin><edge_end>Update Item()
Update Item()<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Update Item()<edge_begin><edge_end>Literal()
Delete Statement()<edge_begin><edge_end>JPQL Query()
Delete Statement()<edge_begin><edge_end>Delete Clause()
Delete Clause()<edge_begin><edge_end>From Clause()
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Count Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Max Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Min Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Select Constructor Expression(name)<edge_begin><edge_end>Select Expression()
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
From Clause()<edge_begin><edge_end>From Entry()
From Entry()<edge_begin><edge_end>Variable Declaration(name)
From Class(type)<edge_begin><edge_end>From Entry()
From Class(type)<edge_begin><edge_end>From Join(is Fetch)
From Collection()<edge_begin><edge_end>From Entry()
From Collection()<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(direction, attributes)
From Join(is Fetch)<edge_begin><edge_end>Variable Declaration(name)
Join()<edge_begin><edge_end>From Join(is Fetch)
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Where Clause()<edge_begin><edge_end>Expression(unary Operator, is Not)
Expression(unary Operator, is Not)<edge_begin><edge_end>Select Expression()
Expression(unary Operator, is Not)<edge_begin><edge_end>Expression(unary Operator, is Not)
Expression(unary Operator, is Not)<edge_begin><edge_end>Variable()
Expression(unary Operator, is Not)<edge_begin><edge_end>Select Statement()
Expression(unary Operator, is Not)<edge_begin><edge_end>Literal()
Variable()<edge_begin><edge_end>Expression(unary Operator, is Not)
Variable()<edge_begin><edge_end>Expression Term()
Expression Term()<edge_begin><edge_end>Expression(unary Operator, is Not)
Alias Attribute Expression(direction, attributes)<edge_begin><edge_end>Order By Spec()
Alias Attribute Expression(direction, attributes)<edge_begin><edge_end>Variable()
Alias Attribute Expression(direction, attributes)<edge_begin><edge_end>Variable Declaration(name)
Parameter Expression(name, index)<edge_begin><edge_end>Variable()
Function Expression(name, trim Spec)<edge_begin><edge_end>Expression(unary Operator, is Not)
Literal()<edge_begin><edge_end>Variable()
Integer Literal(value)<edge_begin><edge_end>Literal()
Float Literal()<edge_begin><edge_end>Literal()
Float Literal()<edge_begin><edge_end>Float(integer Value, fraction Value)
String Literal(value)<edge_begin><edge_end>Literal()
Null Literal(value)<edge_begin><edge_end>Literal()
Boolean Literal(value)<edge_begin><edge_end>Literal()
Or Expression()<edge_begin><edge_end>Expression(unary Operator, is Not)
And Expression()<edge_begin><edge_end>Expression(unary Operator, is Not)
Comparison Operator Expression(operator)<edge_begin><edge_end>Expression(unary Operator, is Not)
Addition Expression(operator)<edge_begin><edge_end>Expression(unary Operator, is Not)
Multiplication Expression(operator)<edge_begin><edge_end>Expression(unary Operator, is Not)
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Attribute(default)<edge_begin><edge_end>Structural Component(name)
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Base Table()<edge_begin><edge_end>Table(name)
Behavioural Component(name, body)<edge_begin><edge_end>Schema(name)
Behavioural Component(name, body)<edge_begin><edge_end>Parameter With Mode(mode)
Binary String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Boolean Type(descriptor)<edge_begin><edge_end>Predefined Type()
Character String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Collection Type()<edge_begin><edge_end>Constructed Type(name)
Collection Type()<edge_begin><edge_end>Collection Type()
Collection Type()<edge_begin><edge_end>Data Type()
Column(default)<edge_begin><edge_end>Structural Component(name)
Column(default)<edge_begin><edge_end>Table(name)
Column Constraint()<edge_begin><edge_end>Restriction()
Constructed Type(name)<edge_begin><edge_end>Data Type()
Data Type()<edge_begin><edge_end>Schema(name)
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Datetime Type(descriptor)<edge_begin><edge_end>Predefined Type()
Derived Table(query expression)<edge_begin><edge_end>Table(name)
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Distinct Type()<edge_begin><edge_end>Predefined Type()
Distinct Type()<edge_begin><edge_end>Feature()
Domain(name, expression, default)<edge_begin><edge_end>Schema(name)
Domain(name, expression, default)<edge_begin><edge_end>Structural Component(name)
Domain(name, expression, default)<edge_begin><edge_end>Domain Constraint()
Domain Constraint()<edge_begin><edge_end>Table Constraint(name)
Domain Constraint()<edge_begin><edge_end>Domain(name, expression, default)
Field()<edge_begin><edge_end>Structural Component(name)
Field()<edge_begin><edge_end>ROW()
Function()<edge_begin><edge_end>Behavioural Component(name, body)
Function()<edge_begin><edge_end>Data Type()
Interval Feature(key, value)<edge_begin><edge_end>Feature()
Interval Type(descriptor)<edge_begin><edge_end>Predefined Type()
MULTISET()<edge_begin><edge_end>Collection Type()
Method(name, body)<edge_begin><edge_end>Method(name, body)
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Method(name, body)<edge_begin><edge_end>Data Type()
Method(name, body)<edge_begin><edge_end>Method Parameter()
Method Parameter()<edge_begin><edge_end>Parameter(name)
Method Parameter()<edge_begin><edge_end>Method(name, body)
Not Null()<edge_begin><edge_end>Column Constraint()
Numeric Feature(key, value)<edge_begin><edge_end>Feature()
Numeric Type(descriptor)<edge_begin><edge_end>Predefined Type()
Parameter(name)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Predefined Type()<edge_begin><edge_end>Data Type()
Predefined Type()<edge_begin><edge_end>Distinct Type()
Primary Key()<edge_begin><edge_end>Unique Constraint()
Procedure()<edge_begin><edge_end>Behavioural Component(name, body)
ROW()<edge_begin><edge_end>Constructed Type(name)
ROW()<edge_begin><edge_end>ROW()
ROW()<edge_begin><edge_end>Field()
Reference Type()<edge_begin><edge_end>Constructed Type(name)
Reference Type()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Unique Constraint()
Restriction()<edge_begin><edge_end>Table(name)
Restriction()<edge_begin><edge_end>Structural Component(name)
Schema(name)<edge_begin><edge_end>Behavioural Component(name, body)
Schema(name)<edge_begin><edge_end>Data Type()
Schema(name)<edge_begin><edge_end>Table(name)
Schema(name)<edge_begin><edge_end>Domain(name, expression, default)
String Feature(key, value)<edge_begin><edge_end>Feature()
Structural Component(name)<edge_begin><edge_end>Data Type()
Structural Component(name)<edge_begin><edge_end>View()
Structural Component(name)<edge_begin><edge_end>Restriction()
Structural Component(name)<edge_begin><edge_end>Feature()
Structural Component(name)<edge_begin><edge_end>Domain(name, expression, default)
Structured Type(is final, is instantiable)<edge_begin><edge_end>User Defined Type(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Attribute(default)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Table(name)<edge_begin><edge_end>Schema(name)
Table(name)<edge_begin><edge_end>Column(default)
Table(name)<edge_begin><edge_end>View()
Table(name)<edge_begin><edge_end>Restriction()
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Table Constraint(name)<edge_begin><edge_end>Restriction()
Trigger(name)<edge_begin><edge_end>Restriction()
Trigger(name)<edge_begin><edge_end>Trigger Descriptor(event, action Time, triggered Action, level)
Trigger(name)<edge_begin><edge_end>Structural Component(name)
Trigger Descriptor(event, action Time, triggered Action, level)<edge_begin><edge_end>Trigger(name)
Typed Table()<edge_begin><edge_end>Base Table()
Typed Table()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Typed Table()<edge_begin><edge_end>Typed Table()
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
User Defined Type(name)<edge_begin><edge_end>Data Type()
View()<edge_begin><edge_end>Derived Table(query expression)
View()<edge_begin><edge_end>Table(name)
View()<edge_begin><edge_end>Structural Component(name)
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
Team(name, meaning, status, url Page)<edge_begin><edge_end>String()
Team(name, meaning, status, url Page)<edge_begin><edge_end>Activity Report()
Team(name, meaning, status, url Page)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Team(name, meaning, status, url Page)<edge_begin><edge_end>Open Position(status, mission, duration)
Team(name, meaning, status, url Page)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Team(name, meaning, status, url Page)<edge_begin><edge_end>Publication()
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>String()
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>Software(website, title, description)
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>Seminar(title, abstract, place, date From, date Until, url4slides)
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>Paper(title, url4pdf, state)
Person(name, firstname, affiliation, phone, mail)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Publication()<edge_begin><edge_end>Team(name, meaning, status, url Page)
Publication()<edge_begin><edge_end>Paper(title, url4pdf, state)
Seminar(title, abstract, place, date From, date Until, url4slides)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Open Position(status, mission, duration)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Paper(title, url4pdf, state)<edge_begin><edge_end>Publication()
Paper(title, url4pdf, state)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Software(website, title, description)<edge_begin><edge_end>Person(name, firstname, affiliation, phone, mail)
Partner(name, country, category)<edge_begin><edge_end>Collaboration(website, title, status, from, until)
Article()<edge_begin><edge_end>Publication()
Master Thesis()<edge_begin><edge_end>Publication()
Misc()<edge_begin><edge_end>Publication()
Ph D Thesis()<edge_begin><edge_end>Publication()
In Proceedings()<edge_begin><edge_end>Publication()
Value Type()<edge_begin><edge_end>Data()
String Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Error Value()<edge_begin><edge_end>Value Type()
Workbook()<edge_begin><edge_end>Worksheet(name)
Worksheet(name)<edge_begin><edge_end>Workbook()
Worksheet(name)<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Worksheet(name)
Table()<edge_begin><edge_end>Column(auto Fit Width, width)
Table()<edge_begin><edge_end>Row(auto Fit Height, height)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Column(auto Fit Width, width)<edge_begin><edge_end>Table()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row(auto Fit Height, height)<edge_begin><edge_end>Table()
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Data()<edge_begin><edge_end>Value Type()
Build(component Name, test Build, u RI)<edge_begin><edge_end>Component Name Type()
Document Root(mixed)<edge_begin><edge_end>Driver()
Driver()<edge_begin><edge_end>Driver Info()
Driver()<edge_begin><edge_end>Task(group, name, pre Reboot Device, timeout)
Driver Info()<edge_begin><edge_end>Info(value, key)
Execute On PC(group)<edge_begin><edge_end>Cmd PC(value, phase, sync, u RI)
Execute On PC(group)<edge_begin><edge_end>Build(component Name, test Build, u RI)
Execute On Symbian(group)<edge_begin><edge_end>Cmd Symbian(argument, output, stat Command, sync)
Execute On Symbian(group)<edge_begin><edge_end>Test Execute Script(p C Path, symbian Path)
Execute On Symbian(group)<edge_begin><edge_end>Rtest(result File, symbian Path)
Reference()<edge_begin><edge_end>Task(group, name, pre Reboot Device, timeout)
Retrieve From Symbian(group)<edge_begin><edge_end>Transfer(move, p C Path, symbian Path)
Rtest(result File, symbian Path)<edge_begin><edge_end>Symbian Path()
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Execute On PC(group)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Transfer To Symbian(group)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Execute On Symbian(group)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Retrieve From Symbian(group)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Reference()
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Task(group, name, pre Reboot Device, timeout)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Flash ROM(p C Path)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Start Trace(enable Primary Filters, enable Secondary Filters, disable Primary Filters, disable Secondary Filters, config File Path)
Task(group, name, pre Reboot Device, timeout)<edge_begin><edge_end>Stop Trace()
Test Case(target)<edge_begin><edge_end>Target Type()
Test Cases List(operator)<edge_begin><edge_end>Test Case(target)
Test Execute Script(p C Path, symbian Path)<edge_begin><edge_end>Test Cases List(operator)
Test Execute Script(p C Path, symbian Path)<edge_begin><edge_end>Symbian Path()
Transfer(move, p C Path, symbian Path)<edge_begin><edge_end>Symbian Path()
Transfer To Symbian(group)<edge_begin><edge_end>Transfer(move, p C Path, symbian Path)
Wiki Page(name)<edge_begin><edge_end>Paragraph Types()
Block Quote()<edge_begin><edge_end>Paragraph Types()
Block Quote()<edge_begin><edge_end>Any Text Sequence()
Template(type)<edge_begin><edge_end>Paragraph Types()
About Template()<edge_begin><edge_end>Template(type)
About Template()<edge_begin><edge_end>Any Text Sequence()
Main Template()<edge_begin><edge_end>Template(type)
Main Template()<edge_begin><edge_end>Any Text Sequence()
Quote Template()<edge_begin><edge_end>Template(type)
Ordered List()<edge_begin><edge_end>Paragraph Types()
Ordered List()<edge_begin><edge_end>Order List Item()
Ordered List()<edge_begin><edge_end>Paragraph(paragraph)
Unordered List()<edge_begin><edge_end>Paragraph Types()
Unordered List()<edge_begin><edge_end>Unorder List Item(level)
Unordered List()<edge_begin><edge_end>Paragraph(paragraph)
Unorder List Item(level)<edge_begin><edge_end>Any Text Sequence()
Order List Item()<edge_begin><edge_end>Any Text Sequence()
Image(name, type, h Align)<edge_begin><edge_end>Paragraph Types()
Image(name, type, h Align)<edge_begin><edge_end>Abstract Unformatted Inline Content()
Image(name, type, h Align)<edge_begin><edge_end>Any Text Sequence()
Category(value)<edge_begin><edge_end>Paragraph Types()
Category(value)<edge_begin><edge_end>Text(name)
Heading2()<edge_begin><edge_end>Paragraph Types()
Heading2()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Heading3()<edge_begin><edge_end>Paragraph Types()
Heading3()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Heading4()<edge_begin><edge_end>Paragraph Types()
Heading4()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Heading5()<edge_begin><edge_end>Paragraph Types()
Heading5()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Abstract Formatted Inline Content()<edge_begin><edge_end>Any Text()
Abstract Formatted Inline Content()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Bold()<edge_begin><edge_end>Abstract Formatted Inline Content()
Italic()<edge_begin><edge_end>Abstract Formatted Inline Content()
Italic Bold()<edge_begin><edge_end>Abstract Formatted Inline Content()
Abstract Unformatted Inline Content()<edge_begin><edge_end>Any Text()
Text(name)<edge_begin><edge_end>Abstract Unformatted Inline Content()
Hyper Link()<edge_begin><edge_end>Abstract Unformatted Inline Content()
Hyper Link()<edge_begin><edge_end>Any Text()
Internal()<edge_begin><edge_end>Hyper Link()
Internal()<edge_begin><edge_end>Wiki Page(name)
Internal()<edge_begin><edge_end>Text(name)
External(name)<edge_begin><edge_end>Hyper Link()
Any Text Sequence()<edge_begin><edge_end>Any Text()
Any Text()<edge_begin><edge_end>Paragraph Types()
Paragraph(paragraph)<edge_begin><edge_end>Paragraph Types()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Identified Element(id, name, description)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Date()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Stake Holder()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Ratio()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Rationale()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Actor(address, email, phone Number)
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Identified Element(id, name, description)
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Ratio()
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Positive Factor()
Verifiable Element(verified)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Specification(version)<edge_begin><edge_end>Verifiable Element(verified)
Specification(version)<edge_begin><edge_end>Actor(address, email, phone Number)
Specification(version)<edge_begin><edge_end>System Overview(purpose, capabilities)
Specification(version)<edge_begin><edge_end>Requirements Group()
Specification(version)<edge_begin><edge_end>Verification Activity(verification Method, passed)
Specification(version)<edge_begin><edge_end>Conflict(degree)
System Overview(purpose, capabilities)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
System Overview(purpose, capabilities)<edge_begin><edge_end>Goal(priority)
System Overview(purpose, capabilities)<edge_begin><edge_end>System Context()
System Overview(purpose, capabilities)<edge_begin><edge_end>Variable(type)
System Context()<edge_begin><edge_end>Identified Element(id, name, description)
System Context()<edge_begin><edge_end>Actor(address, email, phone Number)
System Context()<edge_begin><edge_end>Variable(type)
Actor(address, email, phone Number)<edge_begin><edge_end>Identified Element(id, name, description)
Actor(address, email, phone Number)<edge_begin><edge_end>Interaction(direction)
Interaction(direction)<edge_begin><edge_end>Identified Element(id, name, description)
Goal(priority)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Goal(priority)<edge_begin><edge_end>Conflict(degree)
Goal(priority)<edge_begin><edge_end>Ratio()
Conflict(degree)<edge_begin><edge_end>Identified Element(id, name, description)
Conflict(degree)<edge_begin><edge_end>Goal(priority)
Conflict(degree)<edge_begin><edge_end>Ratio()
Stake Holder()<edge_begin><edge_end>Actor(address, email, phone Number)
Stake Holder()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Stake Holder()<edge_begin><edge_end>Rationale()
Requirements Group()<edge_begin><edge_end>Verifiable Element(verified)
Requirements Group()<edge_begin><edge_end>Abstract Requirement(risk)
Requirements Group()<edge_begin><edge_end>Specification(version)
Abstract Requirement(risk)<edge_begin><edge_end>Verifiable Element(verified)
Abstract Requirement(risk)<edge_begin><edge_end>Abstract Requirement(risk)
Abstract Requirement(risk)<edge_begin><edge_end>Verification Activity(verification Method, passed)
Abstract Requirement(risk)<edge_begin><edge_end>Requirements Group()
Abstract Requirement(risk)<edge_begin><edge_end>Variable(type)
Requirement()<edge_begin><edge_end>Abstract Requirement(risk)
Requirement()<edge_begin><edge_end>Requirement()
Requirement()<edge_begin><edge_end>Assumption(type)
Assumption(type)<edge_begin><edge_end>Abstract Requirement(risk)
Assumption(type)<edge_begin><edge_end>Requirement()
Verification Activity(verification Method, passed)<edge_begin><edge_end>Identified Element(id, name, description)
Verification Activity(verification Method, passed)<edge_begin><edge_end>Abstract Requirement(risk)
Ref Expression Collected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Ref User Selected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Referenced Model Elements(agregation Type)<edge_begin><edge_end>Identified Element(id, name, description)
Referenced Model Elements(agregation Type)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Identified Element(id, name, description)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Ratio()
Trace()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Trace()<edge_begin><edge_end>Specification(version)
Trace Model Element Reference(container)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
Trace Model Element Reference(container)<edge_begin><edge_end>Requirements Coverage Data(nb Requirements, verification Level)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Identified Element(id, name, description)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Ratio()
Variable(type)<edge_begin><edge_end>Identified Element(id, name, description)
Ref Derived Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Rationale()<edge_begin><edge_end>Identified Element(id, name, description)
Rationale()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Model(view Name)<edge_begin><edge_end>Metamodel(metamodel URL)
Model(view Name)<edge_begin><edge_end>Expression()
Metamodel(metamodel URL)<edge_begin><edge_end>Metamodel Name(name)
Expression()<edge_begin><edge_end>Select(select)
Expression()<edge_begin><edge_end>From()
Expression()<edge_begin><edge_end>Condition()
Select(select)<edge_begin><edge_end>Select Attribute()
Select Attribute()<edge_begin><edge_end>Metamodel Name(name)
Select Attribute()<edge_begin><edge_end>Class(name)
Select Attribute()<edge_begin><edge_end>Attribute(name)
From()<edge_begin><edge_end>Join()
Join()<edge_begin><edge_end>Join Left()
Join()<edge_begin><edge_end>Join Right()
Join()<edge_begin><edge_end>Relation(name)
Join Left()<edge_begin><edge_end>Metamodel Name(name)
Join Left()<edge_begin><edge_end>Class(name)
Join Right()<edge_begin><edge_end>Metamodel Name(name)
Join Right()<edge_begin><edge_end>Class(name)
Comparison()<edge_begin><edge_end>Left()
Comparison()<edge_begin><edge_end>Right(value)
Left()<edge_begin><edge_end>Metamodel Name(name)
Left()<edge_begin><edge_end>Class(name)
Left()<edge_begin><edge_end>Attribute(name)
Right(value)<edge_begin><edge_end>Metamodel Name(name)
Right(value)<edge_begin><edge_end>Class(name)
Right(value)<edge_begin><edge_end>Attribute(name)
Located Element(location)<edge_begin><edge_end>String()
Named Element(name)<edge_begin><edge_end>Located Element(location)
Named Element(name)<edge_begin><edge_end>String()
Grafcet()<edge_begin><edge_end>Named Element(name)
Grafcet()<edge_begin><edge_end>Element()
Grafcet()<edge_begin><edge_end>Connection()
Element()<edge_begin><edge_end>Named Element(name)
Element()<edge_begin><edge_end>Grafcet()
Step(is Initial, is Active, action)<edge_begin><edge_end>Element()
Step(is Initial, is Active, action)<edge_begin><edge_end>Boolean()
Step(is Initial, is Active, action)<edge_begin><edge_end>String()
Step(is Initial, is Active, action)<edge_begin><edge_end>Transition To Step()
Step(is Initial, is Active, action)<edge_begin><edge_end>Step To Transition()
Transition(condition)<edge_begin><edge_end>Element()
Transition(condition)<edge_begin><edge_end>String()
Transition(condition)<edge_begin><edge_end>Step To Transition()
Transition(condition)<edge_begin><edge_end>Transition To Step()
Connection()<edge_begin><edge_end>Named Element(name)
Connection()<edge_begin><edge_end>Grafcet()
Step To Transition()<edge_begin><edge_end>Connection()
Step To Transition()<edge_begin><edge_end>Step(is Initial, is Active, action)
Step To Transition()<edge_begin><edge_end>Transition(condition)
Transition To Step()<edge_begin><edge_end>Connection()
Transition To Step()<edge_begin><edge_end>Transition(condition)
Transition To Step()<edge_begin><edge_end>Step(is Initial, is Active, action)
Person(name, surname, email, nationality)<edge_begin><edge_end>University(name, city, province Or State, country)
Person(name, surname, email, nationality)<edge_begin><edge_end>Publication()
Publication()<edge_begin><edge_end>Person(name, surname, email, nationality)
Article(title, from Page, to Page, number, volume, month, year)<edge_begin><edge_end>Publication()
Article(title, from Page, to Page, number, volume, month, year)<edge_begin><edge_end>Journal(name, jcr Indexed, acronym)
In Proceedings(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Publication()
In Proceedings(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Publisher(name, address)
In Proceedings(title, book Title, year, from Page, to Page, month)<edge_begin><edge_end>Editor(name)
Journal(name, jcr Indexed, acronym)<edge_begin><edge_end>Article(title, from Page, to Page, number, volume, month, year)
Book(title, year, month, volume, series, edition, isbn)<edge_begin><edge_end>Publication()
Book(title, year, month, volume, series, edition, isbn)<edge_begin><edge_end>Publisher(name, address)
Sistedes Member()<edge_begin><edge_end>Person(name, surname, email, nationality)
Sistedes Member()<edge_begin><edge_end>Edition(year, location)
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Definition()
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Declaration()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Statement()
Event Derivation()<edge_begin><edge_end>Expression()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Transition Reaction()<edge_begin><edge_end>Transition Statement()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Reaction Priority(priority)<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Assignment(operator)<edge_begin><edge_end>Expression()
Event Raising()<edge_begin><edge_end>Expression()
Event Definition(direction, type)<edge_begin><edge_end>Event Derivation()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression(value)<edge_begin><edge_end>Expression()
Element Reference Expression()<edge_begin><edge_end>Expression()
Operation Call()<edge_begin><edge_end>Expression()
Operation Call()<edge_begin><edge_end>Operation(param Types, type)
State Machine()<edge_begin><edge_end>Simple State()
State Machine()<edge_begin><edge_end>State(name)
State Machine()<edge_begin><edge_end>Transition(name)
State Machine()<edge_begin><edge_end>Event(description)
State Machine()<edge_begin><edge_end>Final state()
State Machine()<edge_begin><edge_end>Composite state()
State(name)<edge_begin><edge_end>Transition(name)
Transition(name)<edge_begin><edge_end>State(name)
Transition(name)<edge_begin><edge_end>Event(description)
Final state()<edge_begin><edge_end>State(name)
Event(description)<edge_begin><edge_end>State(name)
Event(description)<edge_begin><edge_end>Transition(name)
Composite state()<edge_begin><edge_end>State(name)
Simple State()<edge_begin><edge_end>State(name)
Policy(name, parser URI)<edge_begin><edge_end>Automata(name)
Policy(name, parser URI)<edge_begin><edge_end>Expression()
Automata(name)<edge_begin><edge_end>State(name)
Automata(name)<edge_begin><edge_end>Transition(name)
Transition(name)<edge_begin><edge_end>State(name)
Exec()<edge_begin><edge_end>Expression()
Exec()<edge_begin><edge_end>Transition(name)
Cond()<edge_begin><edge_end>Expression()
Cond()<edge_begin><edge_end>Relational(operator)
Read(init Bit, length)<edge_begin><edge_end>Expression()
Write(init Bit, length)<edge_begin><edge_end>Expression()
Write(init Bit, length)<edge_begin><edge_end>Var Reference()
Init()<edge_begin><edge_end>Expression()
Init()<edge_begin><edge_end>Automata(name)
Relational(operator)<edge_begin><edge_end>Expression()
Arithmetic Expression(operator)<edge_begin><edge_end>Expression()
Literal()<edge_begin><edge_end>Expression()
Integer Lit(value)<edge_begin><edge_end>Literal()
String Lit(value)<edge_begin><edge_end>Literal()
Var Declaration(name)<edge_begin><edge_end>Expression()
Var Reference()<edge_begin><edge_end>Expression()
Var Reference()<edge_begin><edge_end>Var Declaration(name)
Field()<edge_begin><edge_end>Literal()
Annotation()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>HL Annotation Addin(text)
Arc()<edge_begin><edge_end>HL Arc Addin(type)
Arc()<edge_begin><edge_end>Has Id(id)
Arc()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Page()
Attribute()<edge_begin><edge_end>Label()
Has Label()<edge_begin><edge_end>Label()
Has Name()<edge_begin><edge_end>Name()
Has Tool Info()<edge_begin><edge_end>Tool Info(tool, version)
Label()<edge_begin><edge_end>Has Tool Info()
Label()<edge_begin><edge_end>Has Label()
Name()<edge_begin><edge_end>HL Annotation()
Node()<edge_begin><edge_end>Object()
Node()<edge_begin><edge_end>Arc()
Object()<edge_begin><edge_end>Has Tool Info()
Object()<edge_begin><edge_end>Has Id(id)
Object()<edge_begin><edge_end>Has Label()
Object()<edge_begin><edge_end>Has Name()
Object()<edge_begin><edge_end>Page()
Page()<edge_begin><edge_end>Has Name()
Page()<edge_begin><edge_end>Has Label()
Page()<edge_begin><edge_end>Has Id(id)
Page()<edge_begin><edge_end>Petri Net(type)
Page()<edge_begin><edge_end>Object()
Page()<edge_begin><edge_end>Arc()
Petri Net(type)<edge_begin><edge_end>Has Tool Info()
Petri Net(type)<edge_begin><edge_end>Has Id(id)
Petri Net(type)<edge_begin><edge_end>Has Label()
Petri Net(type)<edge_begin><edge_end>Has Name()
Petri Net(type)<edge_begin><edge_end>Page()
Petri Net(type)<edge_begin><edge_end>Fusion Group()
Place()<edge_begin><edge_end>Place Node()
Place()<edge_begin><edge_end>Ref Place()
Place Node()<edge_begin><edge_end>Node()
Place Node()<edge_begin><edge_end>HL Place Addin()
Ref Place()<edge_begin><edge_end>Place Node()
Ref Place()<edge_begin><edge_end>Place()
Ref Trans()<edge_begin><edge_end>Transition Node()
Tool Info(tool, version)<edge_begin><edge_end>Has Tool Info()
Transition()<edge_begin><edge_end>Transition Node()
Transition Node()<edge_begin><edge_end>Node()
Transition Node()<edge_begin><edge_end>HL Transition Addin()
Transition Node()<edge_begin><edge_end>CPN Tools Transition Addin()
HL Marking()<edge_begin><edge_end>Annotation()
Type()<edge_begin><edge_end>Annotation()
HL Place Addin()<edge_begin><edge_end>Type()
HL Place Addin()<edge_begin><edge_end>HL Marking()
HL Arc Addin(type)<edge_begin><edge_end>HL Annotation()
HL Annotation()<edge_begin><edge_end>Annotation()
Condition()<edge_begin><edge_end>Annotation()
HL Transition Addin()<edge_begin><edge_end>Condition()
CPN Tools Transition Addin()<edge_begin><edge_end>Code()
CPN Tools Transition Addin()<edge_begin><edge_end>Time()
Code()<edge_begin><edge_end>Annotation()
Time()<edge_begin><edge_end>Annotation()
HL Declaration()<edge_begin><edge_end>Annotation()
HL Declaration()<edge_begin><edge_end>Has Id(id)
Instance(sub Page ID)<edge_begin><edge_end>Node()
Instance(sub Page ID)<edge_begin><edge_end>Parameter Assignment(parameter, value)
Parameter Assignment(parameter, value)<edge_begin><edge_end>Instance(sub Page ID)
Fusion Group()<edge_begin><edge_end>Place()
Fusion Group()<edge_begin><edge_end>Petri Net(type)
Automaton(name)<edge_begin><edge_end>State(name)
Automaton(name)<edge_begin><edge_end>Input(name)
Automaton(name)<edge_begin><edge_end>Activation(name)
Automaton(name)<edge_begin><edge_end>Transition(name)
Transition(name)<edge_begin><edge_end>State(name)
Transition(name)<edge_begin><edge_end>Input(name)
Transition(name)<edge_begin><edge_end>Activation(name)
Activation(name)<edge_begin><edge_end>Output(name)
Activation(name)<edge_begin><edge_end>Return Value(name, is Void)
Input(name)<edge_begin><edge_end>Operation(name)
Output(name)<edge_begin><edge_end>Operation(name)
Output(name)<edge_begin><edge_end>Object(name)
Output(name)<edge_begin><edge_end>Return Value(name, is Void)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Float Value(value)<edge_begin><edge_end>Value Type()
Float Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Word Document()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Word Document()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Word Document()
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
String Property()<edge_begin><edge_end>String Type(val)
String Type(val)<edge_begin><edge_end>String()
Word Document()<edge_begin><edge_end>Smart Tags Collection()
Word Document()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Word Document()<edge_begin><edge_end>Custom Document Properties Collection()
Word Document()<edge_begin><edge_end>String Property()
Word Document()<edge_begin><edge_end>Fonts List Elt()
Word Document()<edge_begin><edge_end>Lists Elt()
Word Document()<edge_begin><edge_end>Styles Elt()
Word Document()<edge_begin><edge_end>Doc Pr Elt()
Word Document()<edge_begin><edge_end>Body Elt()
Doc Pr Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Block Level Elt()
Body Elt()<edge_begin><edge_end>Sect Pr Elt()
Block Level Elt()<edge_begin><edge_end>Body Elt()
Block Level Elt()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Block Level Chunk Elt()<edge_begin><edge_end>Block Level Elt()
Para Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Para Elt()<edge_begin><edge_end>Para Pr Elt()
Para Elt()<edge_begin><edge_end>Para Content Elt()
Para Pr Elt()<edge_begin><edge_end>Para Elt()
Para Content Elt()<edge_begin><edge_end>Para Elt()
Run Elt()<edge_begin><edge_end>Para Content Elt()
Run Elt()<edge_begin><edge_end>Run Pr Elt()
Run Elt()<edge_begin><edge_end>Run Content Elt()
Run Pr Elt()<edge_begin><edge_end>Run Elt()
Run Content Elt()<edge_begin><edge_end>Run Elt()
Break Elt(type)<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>String Type(val)
Del Text()<edge_begin><edge_end>Run Content Elt()
Del Text()<edge_begin><edge_end>String Type(val)
Instr Text()<edge_begin><edge_end>Run Content Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
Del Instr Text()<edge_begin><edge_end>Run Content Elt()
Del Instr Text()<edge_begin><edge_end>String Type(val)
No Break Hyphen()<edge_begin><edge_end>Run Content Elt()
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Annotation Ref()<edge_begin><edge_end>Run Content Elt()
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Endnote Ref()<edge_begin><edge_end>Run Content Elt()
Separator()<edge_begin><edge_end>Run Content Elt()
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Pg Num()<edge_begin><edge_end>Run Content Elt()
Cr()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Endnote()<edge_begin><edge_end>Run Content Elt()
Endnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Note Elt(type, suppress Ref)<edge_begin><edge_end>Block Level Elt()
Picture()<edge_begin><edge_end>Run Content Elt()
Picture()<edge_begin><edge_end>Picture Type()
Symbol()<edge_begin><edge_end>Run Content Elt()
Symbol()<edge_begin><edge_end>Sym Elt()
Sym Elt()<edge_begin><edge_end>String Type(val)
Tab()<edge_begin><edge_end>Run Content Elt()
Tab()<edge_begin><edge_end>Tab Elt()
Fld Char()<edge_begin><edge_end>Run Content Elt()
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Fonts List Elt()<edge_begin><edge_end>Word Document()
Lists Elt()<edge_begin><edge_end>Word Document()
Styles Elt()<edge_begin><edge_end>Word Document()
Sect Pr Elt()<edge_begin><edge_end>Body Elt()
Run Level Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Cf Chunk()<edge_begin><edge_end>Block Level Elt()
Simple Field Elt()<edge_begin><edge_end>Para Content Elt()
H Link Elt()<edge_begin><edge_end>Para Content Elt()
Sub Doc Elt()<edge_begin><edge_end>Para Content Elt()
Model()<edge_begin><edge_end>Select Query()
Model()<edge_begin><edge_end>Or Order By Column()
Select Sub Set(op, all)<edge_begin><edge_end>Select(select)
Select(select)<edge_begin><edge_end>Select Query()
Select(select)<edge_begin><edge_end>Select Sub Set(op, all)
Select(select)<edge_begin><edge_end>Or Column()
Select(select)<edge_begin><edge_end>Or Table()
Select(select)<edge_begin><edge_end>Or Expr()
Select(select)<edge_begin><edge_end>Or Group By Column()
Or Column()<edge_begin><edge_end>Column Or Alias(alias, all Cols)
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Or Column()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Operands()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Db Object Name(dbname)
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Db Object Name All(dbname)
Or Table()<edge_begin><edge_end>From Table()
From Table()<edge_begin><edge_end>Or Table()
From Table()<edge_begin><edge_end>Table Or Alias(alias)
From Table()<edge_begin><edge_end>From Table Join(join)
From Table Join(join)<edge_begin><edge_end>Table Or Alias(alias)
From Table Join(join)<edge_begin><edge_end>Or Expr()
Table Or Alias(alias)<edge_begin><edge_end>Table Full()
Table Or Alias(alias)<edge_begin><edge_end>Sub Query Operand()
Table Or Alias(alias)<edge_begin><edge_end>Db Object Name(dbname)
Db Object Name(dbname)<edge_begin><edge_end>Column Full()
Db Object Name(dbname)<edge_begin><edge_end>Table Full()
Or Order By Column()<edge_begin><edge_end>Order By Column Full(col Order Int, direction)
Order By Column Full(col Order Int, direction)<edge_begin><edge_end>Or Order By Column()
Order By Column Full(col Order Int, direction)<edge_begin><edge_end>Column Full()
Or Group By Column()<edge_begin><edge_end>Group By Column Full()
Group By Column Full()<edge_begin><edge_end>Or Group By Column()
Group By Column Full()<edge_begin><edge_end>Column Full()
Or Expr()<edge_begin><edge_end>Full Expression(c, not Prm, isnull)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Or Expr()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Full Expression(c, not Prm, isnull)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Expr Group()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>X Expr(xf)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Operands()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>In Oper(op)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Between(op Between)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Like(op Like)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Comparison(operator, sub Operator)
Expr Group()<edge_begin><edge_end>Or Expr()
X Expr(xf)<edge_begin><edge_end>Operands()
X Expr(xf)<edge_begin><edge_end>Prms()
Prms()<edge_begin><edge_end>JR Parameter(jrprm)
JR Parameter(jrprm)<edge_begin><edge_end>Prms()
Comparison(operator, sub Operator)<edge_begin><edge_end>Operands()
Like(op Like)<edge_begin><edge_end>Like Operand(op2)
Like Operand(op2)<edge_begin><edge_end>Op Function(fname)
Like Operand(op2)<edge_begin><edge_end>Op Function Cast(type, p, p2)
Between(op Between)<edge_begin><edge_end>Operands()
In Oper(op)<edge_begin><edge_end>Sub Query Operand()
In Oper(op)<edge_begin><edge_end>Operand List()
Operands()<edge_begin><edge_end>Op Function Arg Agregate()
Operands()<edge_begin><edge_end>Operand()
Operands()<edge_begin><edge_end>Operands()
Operand()<edge_begin><edge_end>Column Operand()
Operand()<edge_begin><edge_end>Operand()
Operand()<edge_begin><edge_end>Sub Query Operand()
Operand()<edge_begin><edge_end>Op Function Cast(type, p, p2)
Operand()<edge_begin><edge_end>Op Function(fname)
Operand()<edge_begin><edge_end>SQL Case Operand()
Operand()<edge_begin><edge_end>P Operand(prm)
Operand()<edge_begin><edge_end>Exp Operand(prm)
Operand()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
Op Function(fname)<edge_begin><edge_end>Op Function Arg()
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg()
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg Agregate()
Op Function Cast(type, p, p2)<edge_begin><edge_end>Operands()
Column Operand()<edge_begin><edge_end>Column Full()
Sub Query Operand()<edge_begin><edge_end>Select Query()
Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)<edge_begin><edge_end>Operand List()
SQL Case Operand()<edge_begin><edge_end>Or Expr()
SQL Case Operand()<edge_begin><edge_end>SQL Case Whens()
Sql Case When()<edge_begin><edge_end>SQL Case Whens()
Sql Case When()<edge_begin><edge_end>Or Expr()
Sql Case When()<edge_begin><edge_end>Operands()
Col()<edge_begin><edge_end>Column Full()
Col()<edge_begin><edge_end>Db Object Name(dbname)
tbls()<edge_begin><edge_end>Table Full()
tbls()<edge_begin><edge_end>Db Object Name(dbname)
Op List()<edge_begin><edge_end>Operand List()
Op List()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
Plus()<edge_begin><edge_end>Operands()
Minus()<edge_begin><edge_end>Operands()
Star()<edge_begin><edge_end>Operands()
Div()<edge_begin><edge_end>Operands()
Concat()<edge_begin><edge_end>Operands()
Op F List()<edge_begin><edge_end>Op Function Arg()
Op F List()<edge_begin><edge_end>Op Function Arg Operand()
When List()<edge_begin><edge_end>SQL Case Whens()
When List()<edge_begin><edge_end>Sql Case When()
Place(token, final Marking)<edge_begin><edge_end>Node(name, type)
Pt Net()<edge_begin><edge_end>Place(token, final Marking)
Pt Net()<edge_begin><edge_end>Transition()
Pt Net()<edge_begin><edge_end>Marking()
Pt Net()<edge_begin><edge_end>Annotation(text)
Pt Net()<edge_begin><edge_end>Arc(weight)
Transition()<edge_begin><edge_end>Node(name, type)
Node(name, type)<edge_begin><edge_end>Annotation(text)
Node(name, type)<edge_begin><edge_end>Arc(weight)
Marking()<edge_begin><edge_end>Ref Marked Place(token)
Place Reference()<edge_begin><edge_end>Place(token, final Marking)
Ref Marked Place(token)<edge_begin><edge_end>Place Reference()
Arc(weight)<edge_begin><edge_end>Node(name, type)
Arc To Place()<edge_begin><edge_end>Arc(weight)
Arc To Transition()<edge_begin><edge_end>Arc(weight)
Transition Ext(probability, min Time, cost, max Time, confidentiality)<edge_begin><edge_end>Transition()
Place Ext(probability, is Start)<edge_begin><edge_end>Place(token, final Marking)
Arc To Place Ext(probability)<edge_begin><edge_end>Arc To Place()
Arc To Transition Ext(probability)<edge_begin><edge_end>Arc To Transition()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
Body()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Body()<edge_begin><edge_end>Rule()
In Where Holds()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
In Where Holds()<edge_begin><edge_end>Term()
Asm L File()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Asm L File()<edge_begin><edge_end>Asm L Element()
Asm L File()<edge_begin><edge_end>Main()
Asm L Element()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Asm L Element()<edge_begin><edge_end>Asm L File()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Asm L Element()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Var Or Case()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Var Or Method()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Boolean()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>String()
Var Declaration(is Constant, is Declaration, is Local, name)<edge_begin><edge_end>Type(with Null)
Namespace(name)<edge_begin><edge_end>Asm L Element()
Namespace(name)<edge_begin><edge_end>String()
Structure(name, super Structure Name)<edge_begin><edge_end>Asm L Element()
Structure(name, super Structure Name)<edge_begin><edge_end>String()
Structure(name, super Structure Name)<edge_begin><edge_end>Var Or Case()
Var Or Case()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Var Or Case()<edge_begin><edge_end>Structure(name, super Structure Name)
Case(name)<edge_begin><edge_end>Var Or Case()
Case(name)<edge_begin><edge_end>String()
Case(name)<edge_begin><edge_end>Var Declaration(is Constant, is Declaration, is Local, name)
Class(name, is Abstract, super Class Name)<edge_begin><edge_end>Asm L Element()
Class(name, is Abstract, super Class Name)<edge_begin><edge_end>String()
Class(name, is Abstract, super Class Name)<edge_begin><edge_end>Boolean()
Class(name, is Abstract, super Class Name)<edge_begin><edge_end>Var Or Method()
Var Or Method()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Var Or Method()<edge_begin><edge_end>Class(name, is Abstract, super Class Name)
Enumeration(name)<edge_begin><edge_end>Asm L Element()
Enumeration(name)<edge_begin><edge_end>String()
Enumeration(name)<edge_begin><edge_end>Enumerator(name)
Enumerator(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Enumerator(name)<edge_begin><edge_end>String()
Enumerator(name)<edge_begin><edge_end>Term()
Function(name)<edge_begin><edge_end>Asm L Element()
Function(name)<edge_begin><edge_end>String()
Function(name)<edge_begin><edge_end>Body()
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Function(name)
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Var Or Method()
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Boolean()
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Type(with Null)
Method(is Abstract, is Shared, is Entry Point, is Override)<edge_begin><edge_end>Parameter(name)
Parameter(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Parameter(name)<edge_begin><edge_end>String()
Parameter(name)<edge_begin><edge_end>Type(with Null)
Parameter(name)<edge_begin><edge_end>Method(is Abstract, is Shared, is Entry Point, is Override)
Main()<edge_begin><edge_end>Function(name)
Main()<edge_begin><edge_end>Asm L File()
Main()<edge_begin><edge_end>Initially()
Initially()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Initially()<edge_begin><edge_end>Var Term(name)
Initially()<edge_begin><edge_end>Term()
Rule()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Rule()<edge_begin><edge_end>Body()
Skip Rule()<edge_begin><edge_end>Rule()
Step(name)<edge_begin><edge_end>Rule()
Step(name)<edge_begin><edge_end>String()
Step Until Fix Point()<edge_begin><edge_end>Step(name)
Step Expression()<edge_begin><edge_end>Step(name)
Step Expression()<edge_begin><edge_end>Term()
Step While()<edge_begin><edge_end>Step Expression()
Step Until()<edge_begin><edge_end>Step Expression()
Step For Each()<edge_begin><edge_end>Step(name)
Step For Each()<edge_begin><edge_end>In Where Holds()
Method Invocation()<edge_begin><edge_end>Rule()
Method Invocation()<edge_begin><edge_end>Method Call Term(name)
Update Rule()<edge_begin><edge_end>Rule()
Update Rule()<edge_begin><edge_end>Term()
Update Var Rule()<edge_begin><edge_end>Update Rule()
Update Var Rule()<edge_begin><edge_end>Term()
Update Field Rule()<edge_begin><edge_end>Update Rule()
Update Field Rule()<edge_begin><edge_end>Var Term(name)
Update Map Rule()<edge_begin><edge_end>Update Rule()
Update Map Rule()<edge_begin><edge_end>Var Term(name)
Update Map Rule()<edge_begin><edge_end>Term()
Choose Rule()<edge_begin><edge_end>Rule()
Choose Rule()<edge_begin><edge_end>In Where Holds()
Choose Rule()<edge_begin><edge_end>Body()
Forall Rule()<edge_begin><edge_end>Rule()
Forall Rule()<edge_begin><edge_end>In Where Holds()
Forall Rule()<edge_begin><edge_end>Body()
Conditional Rule()<edge_begin><edge_end>Rule()
Conditional Rule()<edge_begin><edge_end>Term()
Conditional Rule()<edge_begin><edge_end>Body()
Conditional Rule()<edge_begin><edge_end>Else If()
Else If()<edge_begin><edge_end>Conditional Rule()
Return Rule()<edge_begin><edge_end>Rule()
Return Rule()<edge_begin><edge_end>Term()
Add Rule()<edge_begin><edge_end>Rule()
Add Rule()<edge_begin><edge_end>Term()
Add Rule()<edge_begin><edge_end>Var Term(name)
Remove Rule()<edge_begin><edge_end>Rule()
Remove Rule()<edge_begin><edge_end>Term()
Remove Rule()<edge_begin><edge_end>Var Term(name)
Type(with Null)<edge_begin><edge_end>Asm L Element()
Type(with Null)<edge_begin><edge_end>Boolean()
Type(with Null)<edge_begin><edge_end>Var Declaration(is Constant, is Declaration, is Local, name)
Type(with Null)<edge_begin><edge_end>Method(is Abstract, is Shared, is Entry Point, is Override)
Type(with Null)<edge_begin><edge_end>Parameter(name)
Named Type(name)<edge_begin><edge_end>Type(with Null)
Named Type(name)<edge_begin><edge_end>String()
Map Type()<edge_begin><edge_end>Type(with Null)
Tuplet Type()<edge_begin><edge_end>Type(with Null)
Set Type()<edge_begin><edge_end>Type(with Null)
Sequence Type()<edge_begin><edge_end>Type(with Null)
Term()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Var Term(name)<edge_begin><edge_end>Term()
Var Term(name)<edge_begin><edge_end>String()
Operator(op Name)<edge_begin><edge_end>Term()
Operator(op Name)<edge_begin><edge_end>String()
Map Term(separator)<edge_begin><edge_end>Term()
Map Term(separator)<edge_begin><edge_end>String()
Tulplet Term()<edge_begin><edge_end>Term()
Method Call Term(name)<edge_begin><edge_end>Term()
Method Call Term(name)<edge_begin><edge_end>String()
New Instance()<edge_begin><edge_end>Method Call Term(name)
Predicate Term()<edge_begin><edge_end>Term()
Predicate Term()<edge_begin><edge_end>In Where Holds()
For All Term()<edge_begin><edge_end>Predicate Term()
Exists Term(is Unique)<edge_begin><edge_end>Predicate Term()
Exists Term(is Unique)<edge_begin><edge_end>Boolean()
Any In()<edge_begin><edge_end>Predicate Term()
Set Term()<edge_begin><edge_end>Term()
Enumerate Set()<edge_begin><edge_end>Set Term()
Enumerate Set()<edge_begin><edge_end>Term()
Range Set()<edge_begin><edge_end>Set Term()
Range Set()<edge_begin><edge_end>Term()
Algorithm Set()<edge_begin><edge_end>Set Term()
Algorithm Set()<edge_begin><edge_end>In Where Holds()
Sequence Term()<edge_begin><edge_end>Term()
Enumerate Sequence()<edge_begin><edge_end>Sequence Term()
Enumerate Sequence()<edge_begin><edge_end>Term()
Range Sequence()<edge_begin><edge_end>Sequence Term()
Range Sequence()<edge_begin><edge_end>Term()
Constant()<edge_begin><edge_end>Term()
Boolean Constant(val)<edge_begin><edge_end>Constant()
Boolean Constant(val)<edge_begin><edge_end>Boolean()
Integer Constant(val)<edge_begin><edge_end>Constant()
Integer Constant(val)<edge_begin><edge_end>Integer()
String Constant(val)<edge_begin><edge_end>Constant()
String Constant(val)<edge_begin><edge_end>String()
Null Constant()<edge_begin><edge_end>Constant()
Database()<edge_begin><edge_end>Model Element(name)
Database()<edge_begin><edge_end>User Defined Data Type(precision, length, default Value)
Database()<edge_begin><edge_end>Table()
Database()<edge_begin><edge_end>System Data Type(predefined Length, predefined Dec Places)
Table()<edge_begin><edge_end>Model Element(name)
Table()<edge_begin><edge_end>Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)
Table()<edge_begin><edge_end>Primary Key Con()
Table()<edge_begin><edge_end>Unique Con()
Table()<edge_begin><edge_end>Column(default, nullable, precision, length)
Table()<edge_begin><edge_end>Check Con(check Condition)
Column(default, nullable, precision, length)<edge_begin><edge_end>Model Element(name)
Column(default, nullable, precision, length)<edge_begin><edge_end>P Key And Unique()
Column(default, nullable, precision, length)<edge_begin><edge_end>Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)
Column(default, nullable, precision, length)<edge_begin><edge_end>Data Type()
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>Constraints(deferrable, deferred)
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>P Key And Unique()
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>Column(default, nullable, precision, length)
Foreign Key(delete Action RHS, update Action RHS, match, inverse Referential Integrity Con)<edge_begin><edge_end>Table()
Constraints(deferrable, deferred)<edge_begin><edge_end>Model Element(name)
Check Con(check Condition)<edge_begin><edge_end>Constraints(deferrable, deferred)
P Key And Unique()<edge_begin><edge_end>Constraints(deferrable, deferred)
P Key And Unique()<edge_begin><edge_end>Column(default, nullable, precision, length)
Primary Key Con()<edge_begin><edge_end>P Key And Unique()
Unique Con()<edge_begin><edge_end>P Key And Unique()
System Data Type(predefined Length, predefined Dec Places)<edge_begin><edge_end>Data Type()
User Defined Data Type(precision, length, default Value)<edge_begin><edge_end>Data Type()
User Defined Data Type(precision, length, default Value)<edge_begin><edge_end>System Data Type(predefined Length, predefined Dec Places)
Data Type()<edge_begin><edge_end>Model Element(name)
Database Versions(package Name, file Name)<edge_begin><edge_end>Database Version()
Database Version()<edge_begin><edge_end>Database()
Database Version()<edge_begin><edge_end>Database Version()
Database Version()<edge_begin><edge_end>Table Mapping()
Database Version()<edge_begin><edge_end>Column Mapping()
Database()<edge_begin><edge_end>Name Provider(name)
Database()<edge_begin><edge_end>Table()
Database()<edge_begin><edge_end>View()
Database()<edge_begin><edge_end>Trigger()
Database()<edge_begin><edge_end>Index()
Table Mapping()<edge_begin><edge_end>String To Table Mapping Entry Map(key)
Column Mapping()<edge_begin><edge_end>String To Column Mapping Entry Map(key)
Table()<edge_begin><edge_end>Name Provider(name)
Table()<edge_begin><edge_end>Database()
Table()<edge_begin><edge_end>Column(type)
Table()<edge_begin><edge_end>Table Constraint(name)
Table Constraint(name)<edge_begin><edge_end>Table()
Primary Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Primary Key Table Constraint()<edge_begin><edge_end>Indexed Column()
Unique Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Unique Table Constraint()<edge_begin><edge_end>Indexed Column()
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Check Table Constraint()<edge_begin><edge_end>Expression()
Foreign Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Foreign Key Table Constraint()<edge_begin><edge_end>Column(type)
Foreign Key Table Constraint()<edge_begin><edge_end>Table()
Column(type)<edge_begin><edge_end>Name Provider(name)
Column(type)<edge_begin><edge_end>Table()
Column(type)<edge_begin><edge_end>Column Constraint(name)
Indexed Column()<edge_begin><edge_end>Column(type)
Column Constraint(name)<edge_begin><edge_end>Column(type)
Primary Key Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Foreign Key Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Foreign Key Column Constraint()<edge_begin><edge_end>Table()
Foreign Key Column Constraint()<edge_begin><edge_end>Column(type)
Not Null Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Unique Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Check Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Check Column Constraint()<edge_begin><edge_end>Expression()
Default Value Column Constraint()<edge_begin><edge_end>Column Constraint(name)
View()<edge_begin><edge_end>Name Provider(name)
View()<edge_begin><edge_end>Database()
Index()<edge_begin><edge_end>Database()
Trigger()<edge_begin><edge_end>Name Provider(name)
Trigger()<edge_begin><edge_end>Database()
Spreadsheet(File Path, Label)<edge_begin><edge_end>Sheet(Sheet Name, Sheet Index)
Sheet(Sheet Name, Sheet Index)<edge_begin><edge_end>Row(Row Index)
Sheet(Sheet Name, Sheet Index)<edge_begin><edge_end>Column(Column Index)
Sheet(Sheet Name, Sheet Index)<edge_begin><edge_end>Spreadsheet(File Path, Label)
Row(Row Index)<edge_begin><edge_end>Cell(Value Formatted, Cell Type, Double Value, String Value)
Row(Row Index)<edge_begin><edge_end>Sheet(Sheet Name, Sheet Index)
Column(Column Index)<edge_begin><edge_end>Cell(Value Formatted, Cell Type, Double Value, String Value)
Column(Column Index)<edge_begin><edge_end>Sheet(Sheet Name, Sheet Index)
Cell(Value Formatted, Cell Type, Double Value, String Value)<edge_begin><edge_end>Row(Row Index)
Cell(Value Formatted, Cell Type, Double Value, String Value)<edge_begin><edge_end>Column(Column Index)
Node()<edge_begin><edge_end>Named Element(name)
Node()<edge_begin><edge_end>Dataflow Net()
State Machine()<edge_begin><edge_end>Node()
State Machine()<edge_begin><edge_end>State Machine State()
State Machine()<edge_begin><edge_end>Firing Rule(comp Type)
Dataflow Net()<edge_begin><edge_end>Node()
Dataflow Net()<edge_begin><edge_end>Channel()
Dataflow Net()<edge_begin><edge_end>Process(host)
State Machine State()<edge_begin><edge_end>Named Element(name)
State Machine State()<edge_begin><edge_end>State Machine Transition(priority)
State Machine State()<edge_begin><edge_end>State Machine()
State Machine Transition(priority)<edge_begin><edge_end>Named Element(name)
State Machine Transition(priority)<edge_begin><edge_end>State Machine State()
State Machine Transition(priority)<edge_begin><edge_end>Firing Rule(comp Type)
Channel()<edge_begin><edge_end>Named Element(name)
Firing Rule(comp Type)<edge_begin><edge_end>Named Element(name)
Firing Rule(comp Type)<edge_begin><edge_end>Channel()
Firing Rule(comp Type)<edge_begin><edge_end>Token(value)
Dataflow System(protocol)<edge_begin><edge_end>Named Element(name)
Dataflow System(protocol)<edge_begin><edge_end>Dataflow Net()
Dataflow System(protocol)<edge_begin><edge_end>Channel()
Dataflow System(protocol)<edge_begin><edge_end>Process(host)
Process(host)<edge_begin><edge_end>Named Element(name)
HTML()<edge_begin><edge_end>HEAD()
HTML()<edge_begin><edge_end>BODY(background, bgcolor, text, link, alink, vlink)
HTML Element(value)<edge_begin><edge_end>String()
HTML Element(value)<edge_begin><edge_end>HTML Element(value)
HEAD()<edge_begin><edge_end>HTML Element(value)
HEAD()<edge_begin><edge_end>HEAD Element()
HEAD()<edge_begin><edge_end>HTML()
HEAD Element()<edge_begin><edge_end>HTML Element(value)
HEAD Element()<edge_begin><edge_end>HEAD()
LINK(rel, title, ahref, type)<edge_begin><edge_end>HEAD Element()
LINK(rel, title, ahref, type)<edge_begin><edge_end>String()
TITLE()<edge_begin><edge_end>HEAD Element()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML Element(value)
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>String()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>BODY Element()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML()
BODY Element()<edge_begin><edge_end>HTML Element(value)
BODY Element()<edge_begin><edge_end>BODY(background, bgcolor, text, link, alink, vlink)
H1()<edge_begin><edge_end>BODY Element()
H2()<edge_begin><edge_end>BODY Element()
H3()<edge_begin><edge_end>BODY Element()
H4()<edge_begin><edge_end>BODY Element()
EM()<edge_begin><edge_end>BODY Element()
STRONG()<edge_begin><edge_end>BODY Element()
B()<edge_begin><edge_end>BODY Element()
I()<edge_begin><edge_end>BODY Element()
TT()<edge_begin><edge_end>BODY Element()
PRE()<edge_begin><edge_end>BODY Element()
BIG()<edge_begin><edge_end>BODY Element()
SMALL()<edge_begin><edge_end>BODY Element()
SUB()<edge_begin><edge_end>BODY Element()
SUP()<edge_begin><edge_end>BODY Element()
STRIKE()<edge_begin><edge_end>BODY Element()
FONT(color, face, size)<edge_begin><edge_end>BODY Element()
FONT(color, face, size)<edge_begin><edge_end>String()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>BODY Element()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>String()
BR(clear)<edge_begin><edge_end>BODY Element()
BR(clear)<edge_begin><edge_end>String()
MAP()<edge_begin><edge_end>BODY Element()
AREA(shape, coords, ahref)<edge_begin><edge_end>BODY Element()
AREA(shape, coords, ahref)<edge_begin><edge_end>String()
STYLE()<edge_begin><edge_end>BODY Element()
EMBED(src, width, height, align, vspace, hspace, border)<edge_begin><edge_end>BODY Element()
EMBED(src, width, height, align, vspace, hspace, border)<edge_begin><edge_end>String()
NOEMBED()<edge_begin><edge_end>BODY Element()
SPAN(style)<edge_begin><edge_end>BODY Element()
SPAN(style)<edge_begin><edge_end>String()
A(ahref, name, id)<edge_begin><edge_end>BODY Element()
A(ahref, name, id)<edge_begin><edge_end>String()
DIV(align)<edge_begin><edge_end>BODY Element()
DIV(align)<edge_begin><edge_end>String()
P()<edge_begin><edge_end>BODY Element()
TABLE Element(bgcolor, background)<edge_begin><edge_end>BODY Element()
TABLE Element(bgcolor, background)<edge_begin><edge_end>String()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>String()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TR(valign, align)
TR(valign, align)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TR(valign, align)<edge_begin><edge_end>String()
TR(valign, align)<edge_begin><edge_end>TABLE(border, width, cellspacing, cellpadding)
TR(valign, align)<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>String()
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TR(valign, align)
TH()<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
FORM(action, method)<edge_begin><edge_end>String()
INPUT(align, maxlength, size, checked, src, input Value, name, type)<edge_begin><edge_end>String()
TEXTAREA(name, rows, cols)<edge_begin><edge_end>String()
SELECT(multiple, size, name)<edge_begin><edge_end>String()
OPTION(selected, option Value)<edge_begin><edge_end>String()
List Element(type)<edge_begin><edge_end>String()
OL(start)<edge_begin><edge_end>List Element(type)
OL(start)<edge_begin><edge_end>String()
UL()<edge_begin><edge_end>List Element(type)
LI(li Value)<edge_begin><edge_end>List Element(type)
LI(li Value)<edge_begin><edge_end>String()
APPLET(applet, class, src, align, width, height)<edge_begin><edge_end>String()
PARAM(name, param Value)<edge_begin><edge_end>String()
OBJECT(classid, id, data, type, standby)<edge_begin><edge_end>String()
FRAMESET(rows, cols, framespacing, frameborder, border)<edge_begin><edge_end>String()
FRAME(src, name, marginwidth, marginheight, scrolling, noresize)<edge_begin><edge_end>String()
IFRAME()<edge_begin><edge_end>FRAME(src, name, marginwidth, marginheight, scrolling, noresize)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Paper Keyword(weight)
Paper()<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Progress(percent)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Publication System()<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Publication Structure()
Publication System()<edge_begin><edge_end>Position(description)
Position(description)<edge_begin><edge_end>Named(name)
Position(description)<edge_begin><edge_end>Position(description)
Keyword(description)<edge_begin><edge_end>Named(name)
Keyword(description)<edge_begin><edge_end>Paper()
Knowledge Manager()<edge_begin><edge_end>Named(name)
Knowledge Manager()<edge_begin><edge_end>Keyword(description)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(description)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Query()<edge_begin><edge_end>From Statement()
Query()<edge_begin><edge_end>Select Statement()
From Statement()<edge_begin><edge_end>Aggregate Root()
Aggregate Root()<edge_begin><edge_end>Named(name)
Aggregate Root()<edge_begin><edge_end>Alias()
Alias()<edge_begin><edge_end>Named(name)
Select Statement()<edge_begin><edge_end>Select Expression()
Select Expression()<edge_begin><edge_end>Alias()
Path Expression()<edge_begin><edge_end>Named(name)
Path Expression()<edge_begin><edge_end>Path Element(name)
Function Call(function)<edge_begin><edge_end>Function Argument()
Integer Literal(value)<edge_begin><edge_end>Literal()
String Literal(value)<edge_begin><edge_end>Literal()
Boolean Literal(value)<edge_begin><edge_end>Literal()
Var(identifier)<edge_begin><edge_end>I Expression Term()
Bool Const(value)<edge_begin><edge_end>I Expression Term()
Int Const(value)<edge_begin><edge_end>I Expression Term()
Operation(operator)<edge_begin><edge_end>I Expression Term()
Component()<edge_begin><edge_end>I Named Element(name)
Component()<edge_begin><edge_end>Port(type)
Component()<edge_begin><edge_end>State Automaton()
Port(type)<edge_begin><edge_end>I Named Element(name)
Port(type)<edge_begin><edge_end>I Expression Term()
Input Port()<edge_begin><edge_end>Port(type)
Output Port()<edge_begin><edge_end>Port(type)
State Automaton()<edge_begin><edge_end>State(is Initial)
State Automaton()<edge_begin><edge_end>Transition Segment()
State(is Initial)<edge_begin><edge_end>I Named Element(name)
State(is Initial)<edge_begin><edge_end>Transition Segment Specification()
Transition Segment()<edge_begin><edge_end>I Named Element(name)
Transition Segment()<edge_begin><edge_end>State(is Initial)
Transition Segment()<edge_begin><edge_end>Transition Segment Specification()
Transition Segment Specification()<edge_begin><edge_end>I Expression Term()
Transition Segment Specification()<edge_begin><edge_end>Action()
Data State Variable(type)<edge_begin><edge_end>I Named Element(name)
Data State Variable(type)<edge_begin><edge_end>I Expression Term()
Action()<edge_begin><edge_end>Var(identifier)
Action()<edge_begin><edge_end>I Expression Term()
Namespace()<edge_begin><edge_end>Named Element(name)
Classifier()<edge_begin><edge_end>Namespace()
Classifier()<edge_begin><edge_end>Classifier()
Classifier()<edge_begin><edge_end>Generalization()
Directed Relationship()<edge_begin><edge_end>Relationship()
Association c()<edge_begin><edge_end>Classifier()
Association c()<edge_begin><edge_end>Multiplicity Element c(source Lower, source Upper, target Lower, target Upper)
Association c()<edge_begin><edge_end>Relationship()
Generalization()<edge_begin><edge_end>Directed Relationship()
Generalization()<edge_begin><edge_end>Classifier()
Use Case Diagram c()<edge_begin><edge_end>Classifier()
Use Case Diagram c()<edge_begin><edge_end>Relationship()
Actor()<edge_begin><edge_end>Classifier()
System c()<edge_begin><edge_end>Classifier()
System c()<edge_begin><edge_end>Use Case()
Use Case()<edge_begin><edge_end>Classifier()
Use Case()<edge_begin><edge_end>Include()
Use Case()<edge_begin><edge_end>Extend c(Expression)
Use Case()<edge_begin><edge_end>Extension Point()
Extend c(Expression)<edge_begin><edge_end>Named Element(name)
Extend c(Expression)<edge_begin><edge_end>Directed Relationship()
Extend c(Expression)<edge_begin><edge_end>Use Case()
Include()<edge_begin><edge_end>Named Element(name)
Include()<edge_begin><edge_end>Directed Relationship()
Include()<edge_begin><edge_end>Use Case()
Extension Point()<edge_begin><edge_end>Named Element(name)
Extension Point()<edge_begin><edge_end>Use Case()
Node()<edge_begin><edge_end>Transition(trigger Event Name)
Transition(trigger Event Name)<edge_begin><edge_end>Node()
Transition(trigger Event Name)<edge_begin><edge_end>Condition(expression)
Initial Node()<edge_begin><edge_end>Node()
Final Node()<edge_begin><edge_end>Node()
Conditional Node()<edge_begin><edge_end>Node()
Conditional Node()<edge_begin><edge_end>Condition(expression)
State(name, duration)<edge_begin><edge_end>Node()
State Machine(name)<edge_begin><edge_end>Node()
State Machine(name)<edge_begin><edge_end>Transition(trigger Event Name)
Timeout Transition()<edge_begin><edge_end>Transition(trigger Event Name)
Database(name)<edge_begin><edge_end>Table(name)
Table(name)<edge_begin><edge_end>Attribute(attribute Name)
Attribute(attribute Name)<edge_begin><edge_end>Type()
Attribute(attribute Name)<edge_begin><edge_end>Property()
Integer(integer, length)<edge_begin><edge_end>Type()
Varchar(varchar, length)<edge_begin><edge_end>Type()
Text(text)<edge_begin><edge_end>Type()
Date Time(date)<edge_begin><edge_end>Type()
Primary Key(primary Key)<edge_begin><edge_end>Property()
Auto Increment(auto Increment)<edge_begin><edge_end>Property()
Nullable(nullable)<edge_begin><edge_end>Property()
Foreign Key(table Name, attribute Name)<edge_begin><edge_end>Property()
Named Element(name)<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Data Base(url)<edge_begin><edge_end>Table Container()
Data Base(url)<edge_begin><edge_end>Schema()
Abstract Table()<edge_begin><edge_end>Named Element(name)
Abstract Table()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Abstract Table()<edge_begin><edge_end>Table Container()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Named Element(name)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index Element(asc)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Primary Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key Element()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Abstract Table()
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Named Element(name)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Index Element(asc)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Table()
View(query)<edge_begin><edge_end>Abstract Table()
Table()<edge_begin><edge_end>Abstract Table()
Table()<edge_begin><edge_end>Primary Key()
Table()<edge_begin><edge_end>Foreign Key()
Table()<edge_begin><edge_end>Constraint(expression)
Table()<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Primary Key()<edge_begin><edge_end>Named Element(name)
Primary Key()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Primary Key()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>Named Element(name)
Foreign Key()<edge_begin><edge_end>Foreign Key Element()
Foreign Key()<edge_begin><edge_end>Table()
Foreign Key Element()<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Foreign Key Element()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Index Element(asc)<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Index Element(asc)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Constraint(expression)<edge_begin><edge_end>Named Element(name)
Constraint(expression)<edge_begin><edge_end>Table()
Schema()<edge_begin><edge_end>Table Container()
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Named Element(name)
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Table Container()<edge_begin><edge_end>Named Element(name)
Table Container()<edge_begin><edge_end>Abstract Table()
Table Container()<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
Workbook()<edge_begin><edge_end>Worksheet(name)
Worksheet(name)<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Column()
Table()<edge_begin><edge_end>Row()
Column()<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row()<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row()<edge_begin><edge_end>Cell(formula)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Cell(formula)<edge_begin><edge_end>Table Element(index)
Cell(formula)<edge_begin><edge_end>Data()
Data()<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Value Type()
Error Value()<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Value Type()
Binding Parser()<edge_begin><edge_end>Statement Parser()
Binding Parse Result()<edge_begin><edge_end>Binding Statement()
Binding Parse Result()<edge_begin><edge_end>Binding Parse Error()
Definition Parser()<edge_begin><edge_end>Statement Parser()
Definition Parse Result()<edge_begin><edge_end>Definition Statement()
Definition Parse Result()<edge_begin><edge_end>Definition Parse Error()
Definition Writer()<edge_begin><edge_end>Statement Writer()
Name Helper()<edge_begin><edge_end>SQL Object Name Helper()
Query Writer()<edge_begin><edge_end>Statement Writer()
Query Parser()<edge_begin><edge_end>Statement Parser()
Statement Writer()<edge_begin><edge_end>Name Helper()
Call Statement(parms)<edge_begin><edge_end>Definition Statement()
Commit Statement(hold)<edge_begin><edge_end>Definition Statement()
Connect Statement(pwd, reset, to, user)<edge_begin><edge_end>Definition Statement()
Create Alias Statement()<edge_begin><edge_end>Definition Statement()
Create Index Statement(unique)<edge_begin><edge_end>Definition Statement()
Create Table Statement()<edge_begin><edge_end>Definition Statement()
Create View Statement(fields, query)<edge_begin><edge_end>Definition Statement()
Disconnect Statement(target)<edge_begin><edge_end>Definition Statement()
Drop Statement(range, target)<edge_begin><edge_end>Definition Statement()
Lock Table Statement(allow Read, share Mode)<edge_begin><edge_end>Definition Statement()
Release Statement(server Name)<edge_begin><edge_end>Definition Statement()
Rename Statement(new Name, system, target)<edge_begin><edge_end>Definition Statement()
Rollback Statement(hold)<edge_begin><edge_end>Definition Statement()
Set Connection Statement(database Name)<edge_begin><edge_end>Definition Statement()
Extended Query Select()<edge_begin><edge_end>Extended Query Expression Body(optimize Records Number)
Declare Cursor Statement(cursor Name, cursor Type, for Query, for Statement Name, hold)<edge_begin><edge_end>Binding Statement()
Describe Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Describe Statement(statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)
Execute Immediate Statement(variable)<edge_begin><edge_end>Binding Statement()
Execute Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Fetch Statement(cursor Name, into, position, relative Position)<edge_begin><edge_end>Binding Statement()
Fetch Statement(cursor Name, into, position, relative Position)<edge_begin><edge_end>Multiple Row Fetch Clause(descriptor, rows Number, using Descriptor)
Set Transaction Statement(isolation Level, rw Operation)<edge_begin><edge_end>Binding Statement()
Open Statement(cursor, using, using Type)<edge_begin><edge_end>Binding Statement()
Prepare Statement(from, statement Name)<edge_begin><edge_end>Binding Statement()
Prepare Statement(from, statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)
Close Statement(cursor)<edge_begin><edge_end>Binding Statement()
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>Properties()
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)
DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)<edge_begin><edge_end>Query(query Type, query Sql, catalog)
DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)<edge_begin><edge_end>DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)
DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)<edge_begin><edge_end>Safi Driver Manager()
Query(query Type, query Sql, catalog)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
Query(query Type, query Sql, catalog)<edge_begin><edge_end>Query Parameter(data Type)
Query(query Type, query Sql, catalog)<edge_begin><edge_end>DB Connection(url, user, password, login Timeout, properties, transaction Mode, min Pool Size, max Pool Size, acquire Increment, max Idle Time)
Query(query Type, query Sql, catalog)<edge_begin><edge_end>Safi Result Set(use Cache, scrollable, read Only, scroll Mode, holdability Mode)
Query Parameter(data Type)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
Query Parameter(data Type)<edge_begin><edge_end>Query(query Type, query Sql, catalog)
Safi Driver Manager()<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
Safi Driver Manager()<edge_begin><edge_end>DB Driver(driver Class Name, pooling, example Url, jars, default, guide Url, website Url, default Port, url Regex Pattern)
Safi Result Set(use Cache, scrollable, read Only, scroll Mode, holdability Mode)<edge_begin><edge_end>DB Resource(name, last Modified, last Updated, id)
Safi Result Set(use Cache, scrollable, read Only, scroll Mode, holdability Mode)<edge_begin><edge_end>Query(query Type, query Sql, catalog)
Server Resource(name, last Modified, last Updated, id, description)<edge_begin><edge_end>User(firstname, lastname, password)
Safi Server(bind IP, management Port, running, debug, db Port)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Safi Server(bind IP, management Port, running, debug, db Port)<edge_begin><edge_end>User(firstname, lastname, password)
Role()<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Role()<edge_begin><edge_end>Entitlement()
Entitlement()<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
User(firstname, lastname, password)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
User(firstname, lastname, password)<edge_begin><edge_end>Role()
Saflet(code, subsystem Id)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Saflet(code, subsystem Id)<edge_begin><edge_end>Saflet Project(enabled)
Saflet Project(enabled)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Saflet Project(enabled)<edge_begin><edge_end>Saflet(code, subsystem Id)
Saflet Project(enabled)<edge_begin><edge_end>Prompt(system, extension)
Prompt(system, extension)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Prompt(system, extension)<edge_begin><edge_end>Saflet Project(enabled)
Telephony Subsystem(hostname, running, private, visible Safi Server IP, enabled, manager Name, manager Password, manager Port, version Id, prompt Directory, platform Id)<edge_begin><edge_end>Server Resource(name, last Modified, last Updated, id, description)
Telephony Subsystem(hostname, running, private, visible Safi Server IP, enabled, manager Name, manager Password, manager Port, version Id, prompt Directory, platform Id)<edge_begin><edge_end>Safi Server(bind IP, management Port, running, debug, db Port)
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Specification(namespace)
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Specification()
Statechart Specification(namespace)<edge_begin><edge_end>Statechart Scope()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Event Definition(direction)<edge_begin><edge_end>Event Derivation()
Event Derivation()<edge_begin><edge_end>Expression()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Regular Event Spec()<edge_begin><edge_end>Expression()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Bool Literal(value)<edge_begin><edge_end>Literal()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
String Literal(value)<edge_begin><edge_end>Literal()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Reaction Effect()<edge_begin><edge_end>Expression()
Event Raising Expression()<edge_begin><edge_end>Expression()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Typed Element Reference Expression()<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Table Space Definition(type Supported, extent Size Supported, prefetch Size Supported, managed By Supported, page Size Supported, buffer Pool Supported, default Supported, container Maximum Size Supported, container Initial Size Supported, container Extent Size Supported, table Space Type, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Stored Procedure Definition(null Input Action Supported, package Generation Supported, determininstic Supported, returned Null Supported, returned Type Declaration Constraint Supported, parameter Init Value Supported, parameter Style Supported, return Type Supported, parameter Declaration Constraint Supported, maximum Action Body Length, parameter Style, language Type, function Language Type, procedure Type, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Trigger Definition(maximum Reference Part Length, maximum Action Body Length, type Supported, when Clause Supported, granularity Supported, references Clause Supported, per Column Update Trigger Supported, instead Of Trigger Supported, row Trigger Reference Supported, table Trigger Reference Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Column Definition(identity Supported, computed Supported, identity Start Value Supported, identity Increment Supported, identity Minimum Supported, identity Maximum Supported, identity Cycle Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Constraint Definition(deferrable Constraint Supported, informational Constraint Supported, clustered Primary Key Supported, clustered Unique Constraint Supported, primary Key Nullable, unique Key Nullable, maximum Check Expression Length, parent Update DRI Rule Type, parent Delete DRI Rule Type, check Option, maximum Primary Key Identifier Length, maximum Foreign Key Identifier Length, maximum Check Constraint Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Extended Definition(name, value)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Index Definition(percent Free Terminology, percent Free Changeable, clustering Supported, cluster Changeable, fill Factor Supported, included Columns Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Table Definition(audit Supported, data Capture Supported, edit Proc Supported, encoding Supported, valid Proc Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Sequence Definition(type Enumeration Supported, cache Supported, order Supported, no Maximum Value String, no Minimum Value String, no Cache String, cache Default Value)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>User Defined Type Definition(default Value Supported, distinct Type Supported, structured Type Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Query Definition(identifier Quote String, host Variable Marker, host Variable Marker Supported, cast Expression Supported, default Keyword For Insert Value Supported, extended Grouping Supported, table Alias In Delete Supported)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>SQL Syntax Definition(keywords, operators, termination Character)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Nickname Definition(constraint Supported, index Supported, maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Schema Definition(maximum Identifier Length)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>View Definition(maximum Identifier Length, index Supported, check Option Supported, check Option Levels Supported)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Debugger Definition(condition Supported)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Privileged Element Definition(name)
Database Vendor Definition(vendor, version, constraints Supported, maximum Identifier Length, trigger Supported, snapshot View Supported, join Supported, view Trigger Supported, tablespaces Supported, maximum Comment Length, sequence Supported, m QT Supported, schema Supported, alias Supported, synonym Supported, user Defined Type Supported, domain Supported, SQL Statement Supported, nickname Supported, quoted DML Supported, quoted DDL Supported, xml Supported, m QT Index Supported, event Supported, sql UDF Supported, stored Procedure Supported, package Supported, authorization Identifier Supported, role Supported, group Supported, user Supported, role Authorization Supported, constructed Data Type Supported, u DF Supported)<edge_begin><edge_end>Constructed Data Type Definition(array Datatype Supported, multiset Datatype Supported, row Datatype Supported, reference Datatype Supported, cursor Datatype Supported)
Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)<edge_begin><edge_end>Field Qualifier Definition(name, maximum Precision, default Precision, precision Supported, maximum Scale, default Scale, scale Supported)
Stored Procedure Definition(null Input Action Supported, package Generation Supported, determininstic Supported, returned Null Supported, returned Type Declaration Constraint Supported, parameter Init Value Supported, parameter Style Supported, return Type Supported, parameter Declaration Constraint Supported, maximum Action Body Length, parameter Style, language Type, function Language Type, procedure Type, maximum Identifier Length)<edge_begin><edge_end>Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)
Column Definition(identity Supported, computed Supported, identity Start Value Supported, identity Increment Supported, identity Minimum Supported, identity Maximum Supported, identity Cycle Supported, maximum Identifier Length)<edge_begin><edge_end>Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)
Sequence Definition(type Enumeration Supported, cache Supported, order Supported, no Maximum Value String, no Minimum Value String, no Cache String, cache Default Value)<edge_begin><edge_end>Predefined Data Type Definition(length Supported, scale Supported, precision Supported, key Constraint Supported, identity Supported, multiple Columns Supported, nullable Supported, default Supported, clustering Supported, fill Factor Supported, bit Data Supported, maximum Value, minimum Value, maximum Length, maximum Precision, maximum Scale, minimum Scale, default Value Types, primitive Type, name, jdbc Enum Type, character Set, encoding Scheme, character Set Suffix, encoding Scheme Suffix, java Class Name, default Length, default Precision, default Scale, cutoff Precision, length Unit, ordering Supported, grouping Supported, display Name, display Name Supported, leading Field Qualifier Supported, trailing Field Qualifier Supported, field Qualifier Separator, large Value Specifier Supported, large Value Specifier Name, large Value Specifier Length, length Semantic Supported, length Semantic, language Type)
Field Qualifier Definition(name, maximum Precision, default Precision, precision Supported, maximum Scale, default Scale, scale Supported)<edge_begin><edge_end>Field Qualifier Definition(name, maximum Precision, default Precision, precision Supported, maximum Scale, default Scale, scale Supported)
Privileged Element Definition(name)<edge_begin><edge_end>Privilege Definition(name)
Privilege Definition(name)<edge_begin><edge_end>Privileged Element Definition(name)
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Specification()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Regular Event Spec()<edge_begin><edge_end>Expression()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
Time Event Spec(type, unit)<edge_begin><edge_end>Expression()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Bool Literal(value)<edge_begin><edge_end>Literal()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
String Literal(value)<edge_begin><edge_end>Literal()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Reaction Effect()<edge_begin><edge_end>Expression()
Event Raising Expression()<edge_begin><edge_end>Expression()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Element Reference Expression(operation Call)<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Parenthesized Expression()<edge_begin><edge_end>Expression()
Marking()<edge_begin><edge_end>I Net Element(name, comment)
Marking()<edge_begin><edge_end>Place Marking()
Place Marking()<edge_begin><edge_end>I Entity Identifiable(uuid)
Place Marking()<edge_begin><edge_end>Place()
Place Marking()<edge_begin><edge_end>Token Multi Set()
High Level Petri Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
High Level Petri Net Marked()<edge_begin><edge_end>High Level Petri Net()
High Level Petri Net Marked()<edge_begin><edge_end>Marking()
Token Type()<edge_begin><edge_end>I Net Element(name, comment)
Token Type Atomic()<edge_begin><edge_end>Token Type()
Token Type Atomic()<edge_begin><edge_end>Atom()
Token Type Atomic()<edge_begin><edge_end>Token Atomic()
Token Type Element Net()<edge_begin><edge_end>Token Type()
Token Type Element Net()<edge_begin><edge_end>Element Net Marked()
Token Type Element Net()<edge_begin><edge_end>High Level Petri Net()
Token Type Element Net()<edge_begin><edge_end>Token Net()
Token()<edge_begin><edge_end>I Net Element(name, comment)
Token()<edge_begin><edge_end>Token Attribute(type, name, value)
Token Atomic()<edge_begin><edge_end>Token()
Token Atomic()<edge_begin><edge_end>Token Type Atomic()
Token Atomic()<edge_begin><edge_end>Atom()
Token Net()<edge_begin><edge_end>Token()
Token Net()<edge_begin><edge_end>Token Type Element Net()
Token Net()<edge_begin><edge_end>Element Net Marked()
Token Attribute(type, name, value)<edge_begin><edge_end>I Entity Identifiable(uuid)
Element Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
Element Net Marked()<edge_begin><edge_end>Token Type Element Net()
Element Net Marked()<edge_begin><edge_end>Marking()
Atom()<edge_begin><edge_end>I Net Element(name, comment)
Token Weight(weight)<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Weight(weight)<edge_begin><edge_end>Token()
Token Multiset Expression()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Multiset Expression()<edge_begin><edge_end>Token Type()
Token Multiset Expression()<edge_begin><edge_end>Token Multi Set()
Token Multi Set()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Multi Set()<edge_begin><edge_end>Token Weight(weight)
Token Multi Set()<edge_begin><edge_end>Token Type()
Variable(name)<edge_begin><edge_end>I Entity Identifiable(uuid)
Variable(name)<edge_begin><edge_end>Context Variable()
Token Variadic Expression()<edge_begin><edge_end>I Net Element(name, comment)
Token Variadic Expression()<edge_begin><edge_end>Monom(power)
Token Variadic Expression()<edge_begin><edge_end>Monom Constant(power)
Monom(power)<edge_begin><edge_end>I Entity Identifiable(uuid)
Monom(power)<edge_begin><edge_end>Variable(name)
Token Expression Binding()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Expression Binding()<edge_begin><edge_end>Token Variadic Expression()
Token Expression Binding()<edge_begin><edge_end>Token Binding()
Token Binding()<edge_begin><edge_end>I Entity Identifiable(uuid)
Token Binding()<edge_begin><edge_end>Variable(name)
Token Binding()<edge_begin><edge_end>Token()
Monom Constant(power)<edge_begin><edge_end>I Entity Identifiable(uuid)
Monom Constant(power)<edge_begin><edge_end>Variable(name)
Monom Constant(power)<edge_begin><edge_end>Token()
Net Constant()<edge_begin><edge_end>I Net Element(name, comment)
Net Constant()<edge_begin><edge_end>Token Binding()
High Level Petri Net()<edge_begin><edge_end>I Net Element(name, comment)
High Level Petri Net()<edge_begin><edge_end>Context Variable()
High Level Petri Net()<edge_begin><edge_end>Node()
High Level Petri Net()<edge_begin><edge_end>Arc()
Place()<edge_begin><edge_end>Node()
Place()<edge_begin><edge_end>Arc PT()
Place()<edge_begin><edge_end>Arc TP()
Place()<edge_begin><edge_end>Token Type()
Transition()<edge_begin><edge_end>Context Variable()
Transition()<edge_begin><edge_end>Node()
Transition()<edge_begin><edge_end>Arc PT()
Transition()<edge_begin><edge_end>Arc TP()
Arc PT()<edge_begin><edge_end>Arc()
Arc PT()<edge_begin><edge_end>Place()
Arc PT()<edge_begin><edge_end>Transition()
Arc PT()<edge_begin><edge_end>Token Variadic Expression()
Arc TP()<edge_begin><edge_end>Arc()
Arc TP()<edge_begin><edge_end>Transition()
Arc TP()<edge_begin><edge_end>Place()
Arc TP()<edge_begin><edge_end>Token Variadic Expression()
Context Variable()<edge_begin><edge_end>I Entity Identifiable(uuid)
Context Variable()<edge_begin><edge_end>Variable(name)
Node()<edge_begin><edge_end>I Net Element(name, comment)
Node()<edge_begin><edge_end>High Level Petri Net()
Arc()<edge_begin><edge_end>I Net Element(name, comment)
Arc()<edge_begin><edge_end>High Level Petri Net()
N Pnet()<edge_begin><edge_end>I Net Element(name, comment)
N Pnet()<edge_begin><edge_end>High Level Petri Net()
N Pnet()<edge_begin><edge_end>Token Type Element Net()
N Pnet()<edge_begin><edge_end>Token Type Atomic()
N Pnet()<edge_begin><edge_end>Net Constant()
N Pnet()<edge_begin><edge_end>Synchronization(kind, key)
N Pnet Marked()<edge_begin><edge_end>I Net Element(name, comment)
N Pnet Marked()<edge_begin><edge_end>N Pnet()
N Pnet Marked()<edge_begin><edge_end>Marking()
N Pnet Marked()<edge_begin><edge_end>NPN Diagram Net System()
Synchronization(kind, key)<edge_begin><edge_end>I Net Element(name, comment)
Synchronization(kind, key)<edge_begin><edge_end>Transition Synchronized()
Transition Synchronized()<edge_begin><edge_end>Transition()
Transition Synchronized()<edge_begin><edge_end>Synchronization(kind, key)
I Net Element(name, comment)<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Diagram NPN Marked()<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Diagram NPN Marked()<edge_begin><edge_end>NPN Diagram Net System()
NPN Diagram NPN Marked()<edge_begin><edge_end>N Pnet Marked()
NPN Diagram Net System()<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Diagram Net System()<edge_begin><edge_end>High Level Petri Net()
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Arc PTSN()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Token SN(constraints)
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Arc PTSN()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Transition SN()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Place SN()
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Place SN()
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Transition SN()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Symbol Node SN(constraints)<edge_begin><edge_end>NPN Diagram Net System()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>Rectangle()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>Node()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>NPN Diagram Net System()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>Arc()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>Point()
NPN Symbol Token SN(constraints)<edge_begin><edge_end>I Entity Identifiable(uuid)
NPN Symbol Token SN(constraints)<edge_begin><edge_end>NPN Symbol Place SN()
NPN Symbol Token SN(constraints)<edge_begin><edge_end>Rectangle()
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Queries Connection()
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)<edge_begin><edge_end>Map()
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Ebcdic Connection(Mid File, Data File)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Input SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>List()
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>List()
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>WSDL Parameter(Element, source, Column, Expression, Parameter Info, Parameter Info Parent)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Td Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Concept(Loop Expression, Loop Limit, input Model)<edge_begin><edge_end>Td Table()
Concept(Loop Expression, Loop Limit, input Model)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
Concept(Loop Expression, Loop Limit, input Model)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>HL7File Node(File Path, Order, Attribute, Default Value, Related Column, Repeatable)
Header Footer Connection(is Header, imports, main Code, libraries)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
FTP Connection(Host, Port, Username, Password, Mode, Ecoding, SFTP, FTPS, Method, Keystore File, Keystore Password, Usesocks, Proxyhost, Proxyport, Proxyuser, Proxypassword, Custom Encode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Td Table()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Td View()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field)
Td Column()<edge_begin><edge_end>Td Sql Data Type(java Data Type, nullable, unsigned Attribute, case Sensitive, auto Increment, local Type Name, searchable)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Schema(xsd File Path)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Content()
Td Xml Content()<edge_begin><edge_end>Td Xml Element Type(java Type)
D Table(header Column Width)<edge_begin><edge_end>Line Container()
D Table(header Column Width)<edge_begin><edge_end>D Table Element Updater()
D Table(header Column Width)<edge_begin><edge_end>D Column(label, visible, width)
D Table(header Column Width)<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
D Table Element()<edge_begin><edge_end>Table Mapping(semantic Elements)
Line Container()<edge_begin><edge_end>D Line(label, visible, collapsed)
D Line(label, visible, collapsed)<edge_begin><edge_end>Line Container()
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element()
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element Updater()
D Line(label, visible, collapsed)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
D Line(label, visible, collapsed)<edge_begin><edge_end>D Cell(label)
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style)
D Cell(label)<edge_begin><edge_end>D Table Element()
D Cell(label)<edge_begin><edge_end>D Table Element Updater()
D Cell(label)<edge_begin><edge_end>D Line(label, visible, collapsed)
D Cell(label)<edge_begin><edge_end>D Column(label, visible, width)
D Cell(label)<edge_begin><edge_end>D Cell Style()
D Cell(label)<edge_begin><edge_end>Cell Updater(can Edit)
D Cell(label)<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
D Cell Style()<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style)
D Cell Style()<edge_begin><edge_end>Table Mapping(semantic Elements)
D Column(label, visible, width)<edge_begin><edge_end>D Table Element()
D Column(label, visible, width)<edge_begin><edge_end>D Cell(label)
D Column(label, visible, width)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
D Column(label, visible, width)<edge_begin><edge_end>D Table(header Column Width)
D Column(label, visible, width)<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style)
D Target Column()<edge_begin><edge_end>D Column(label, visible, width)
D Target Column()<edge_begin><edge_end>D Table Element Updater()
D Feature Column(feature Name)<edge_begin><edge_end>D Column(label, visible, width)
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Create Line Tool()
Edition Table Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Edition Table Description()<edge_begin><edge_end>Feature Column Mapping(feature Name, label Expression, feature Parent Expression)
Cross Table Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Cross Table Description()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Cross Table Description()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Cross Table Description()<edge_begin><edge_end>Create Cross Column Tool()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Table Mapping(semantic Elements)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Style Updater()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Create Line Tool()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Delete Line Tool()
Column Mapping(header Label Expression, initial Width)<edge_begin><edge_end>Table Mapping(semantic Elements)
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Style Updater()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Create Column Tool()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Delete Column Tool()
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Cell Updater(can Edit)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Style Updater()
Cell Updater(can Edit)<edge_begin><edge_end>Label Edit Tool()
Style Updater()<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
Style Updater()<edge_begin><edge_end>Foreground Conditional Style(predicate Expression)
Style Updater()<edge_begin><edge_end>Background Style Description()
Style Updater()<edge_begin><edge_end>Background Conditional Style(predicate Expression)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Table Mapping(semantic Elements)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Cell Updater(can Edit)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Style Updater()
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Create Cell Tool()
Table Tool()<edge_begin><edge_end>Table Variable(documentation)
Label Edit Tool()<edge_begin><edge_end>Table Tool()
Create Tool()<edge_begin><edge_end>Table Tool()
Create Column Tool()<edge_begin><edge_end>Create Tool()
Create Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Create Cross Column Tool()<edge_begin><edge_end>Create Tool()
Create Cross Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Create Line Tool()<edge_begin><edge_end>Create Tool()
Create Line Tool()<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Create Cell Tool()<edge_begin><edge_end>Table Tool()
Create Cell Tool()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Delete Tool()<edge_begin><edge_end>Table Tool()
Delete Column Tool()<edge_begin><edge_end>Delete Tool()
Delete Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Delete Line Tool()<edge_begin><edge_end>Delete Tool()
Delete Line Tool()<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Foreground Conditional Style(predicate Expression)<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
Background Conditional Style(predicate Expression)<edge_begin><edge_end>Background Style Description()
Table Creation Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Table Navigation Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
State Machine()<edge_begin><edge_end>Named Element(name)
State Machine()<edge_begin><edge_end>State(initial Time, final Time)
State Machine()<edge_begin><edge_end>Transition(initial Time, final Time, time)
State(initial Time, final Time)<edge_begin><edge_end>Named Element(name)
State(initial Time, final Time)<edge_begin><edge_end>Transition(initial Time, final Time, time)
State(initial Time, final Time)<edge_begin><edge_end>State Machine()
Final State()<edge_begin><edge_end>State(initial Time, final Time)
Initial State()<edge_begin><edge_end>State(initial Time, final Time)
Transition(initial Time, final Time, time)<edge_begin><edge_end>Named Element(name)
Transition(initial Time, final Time, time)<edge_begin><edge_end>State(initial Time, final Time)
Transition(initial Time, final Time, time)<edge_begin><edge_end>Trigger(expression)
Transition(initial Time, final Time, time)<edge_begin><edge_end>State Machine()
Timed Transition(duration)<edge_begin><edge_end>Transition(initial Time, final Time, time)
Pseudostate()<edge_begin><edge_end>State(initial Time, final Time)
Fork()<edge_begin><edge_end>Pseudostate()
Join()<edge_begin><edge_end>Pseudostate()
Model Root()<edge_begin><edge_end>Database()
Model Root()<edge_begin><edge_end>Operation()
Database()<edge_begin><edge_end>Named Element(name)
Database()<edge_begin><edge_end>Schema()
Db Object()<edge_begin><edge_end>Named Element(name)
Schema()<edge_begin><edge_end>Db Object()
Schema()<edge_begin><edge_end>Table()
Schema()<edge_begin><edge_end>Sequence(cache Size)
Schema()<edge_begin><edge_end>Index()
Table()<edge_begin><edge_end>Db Object()
Table()<edge_begin><edge_end>Relation()
Table()<edge_begin><edge_end>Schema()
Table()<edge_begin><edge_end>Primary Key()
Table()<edge_begin><edge_end>Table Column(type)
Table()<edge_begin><edge_end>Table Constraint()
Sequence(cache Size)<edge_begin><edge_end>Db Object()
Sequence(cache Size)<edge_begin><edge_end>Schema()
Constraint()<edge_begin><edge_end>Db Object()
Table Constraint()<edge_begin><edge_end>Constraint()
Table Constraint()<edge_begin><edge_end>Named Element(name)
Table Constraint()<edge_begin><edge_end>Table()
Column Constraint()<edge_begin><edge_end>Constraint()
Column Constraint()<edge_begin><edge_end>Table Column(type)
Foreign Key()<edge_begin><edge_end>Table Constraint()
Foreign Key()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>Table Column(type)
Column()<edge_begin><edge_end>Named Element(name)
Table Column(type)<edge_begin><edge_end>Column()
Table Column(type)<edge_begin><edge_end>Table()
Table Column(type)<edge_begin><edge_end>Column Constraint()
Index()<edge_begin><edge_end>Db Object()
Index()<edge_begin><edge_end>Table Column(type)
Index()<edge_begin><edge_end>Table()
Index()<edge_begin><edge_end>Schema()
Unique Index()<edge_begin><edge_end>Table Constraint()
Unique Index()<edge_begin><edge_end>Index()
Primary Key()<edge_begin><edge_end>Unique Index()
Operation()<edge_begin><edge_end>Model Root()
Create Table(table Name)<edge_begin><edge_end>Operation()
Create Table(table Name)<edge_begin><edge_end>Table Column(type)
Create Table(table Name)<edge_begin><edge_end>Table Constraint()
Create Table(table Name)<edge_begin><edge_end>Primary Key()
Create Table(table Name)<edge_begin><edge_end>Sequence(cache Size)
Rename Table(new Name)<edge_begin><edge_end>Operation()
Rename Table(new Name)<edge_begin><edge_end>Table()
Delete Table()<edge_begin><edge_end>Operation()
Delete Table()<edge_begin><edge_end>Table()
Add Column(new Column Name)<edge_begin><edge_end>Operation()
Add Column(new Column Name)<edge_begin><edge_end>Table()
Add Column(new Column Name)<edge_begin><edge_end>Column Constraint()
Rename Column(new Column Name)<edge_begin><edge_end>Operation()
Rename Column(new Column Name)<edge_begin><edge_end>Table()
Rename Column(new Column Name)<edge_begin><edge_end>Table Column(type)
Type Change To Column(new Type)<edge_begin><edge_end>Operation()
Type Change To Column(new Type)<edge_begin><edge_end>Table()
Type Change To Column(new Type)<edge_begin><edge_end>Table Column(type)
Delete Column()<edge_begin><edge_end>Operation()
Delete Column()<edge_begin><edge_end>Table()
Delete Column()<edge_begin><edge_end>Table Column(type)
Query()<edge_begin><edge_end>Relation()
Query()<edge_begin><edge_end>Column Reference()
Column Reference()<edge_begin><edge_end>Column()
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>Named Element(name)
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>State()
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>FSM Event(is Triggered)
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>FSM Clock(number Of Ticks)
TFSM(step Number, last State Change Step Number)<edge_begin><edge_end>Transition(action)
State()<edge_begin><edge_end>Named Element(name)
State()<edge_begin><edge_end>TFSM(step Number, last State Change Step Number)
State()<edge_begin><edge_end>Transition(action)
Transition(action)<edge_begin><edge_end>Named Element(name)
Transition(action)<edge_begin><edge_end>State()
Transition(action)<edge_begin><edge_end>Guard()
Transition(action)<edge_begin><edge_end>FSM Event(is Triggered)
Guard()<edge_begin><edge_end>Named Element(name)
Temporal Guard(after Duration)<edge_begin><edge_end>Guard()
Temporal Guard(after Duration)<edge_begin><edge_end>FSM Clock(number Of Ticks)
Event Guard()<edge_begin><edge_end>Guard()
Event Guard()<edge_begin><edge_end>FSM Event(is Triggered)
FSM Event(is Triggered)<edge_begin><edge_end>Named Element(name)
FSM Event(is Triggered)<edge_begin><edge_end>Transition(action)
FSM Clock(number Of Ticks)<edge_begin><edge_end>Named Element(name)
Timed System()<edge_begin><edge_end>Named Element(name)
Timed System()<edge_begin><edge_end>TFSM(step Number, last State Change Step Number)
Timed System()<edge_begin><edge_end>FSM Clock(number Of Ticks)
Timed System()<edge_begin><edge_end>FSM Event(is Triggered)
Evaluate Guard(condition)<edge_begin><edge_end>Guard()
Model()<edge_begin><edge_end>Bib Type()
Bib Type()<edge_begin><edge_end>Cite Key(cite Key)
Bib Type()<edge_begin><edge_end>Title(title)
Bib Type()<edge_begin><edge_end>Year(year)
Bib Type()<edge_begin><edge_end>Month(month)
Bib Type()<edge_begin><edge_end>Note(note)
Bib Type()<edge_begin><edge_end>Key(key)
Article()<edge_begin><edge_end>Bib Type()
Article()<edge_begin><edge_end>Author(author)
Article()<edge_begin><edge_end>Journal(journal)
Article()<edge_begin><edge_end>Volume(volume)
Article()<edge_begin><edge_end>Number(number)
Article()<edge_begin><edge_end>Pages(pages)
Book()<edge_begin><edge_end>Bib Type()
Book()<edge_begin><edge_end>Publisher(publisher)
Book()<edge_begin><edge_end>Author(author)
Book()<edge_begin><edge_end>Editor(editor)
Book()<edge_begin><edge_end>Volume(volume)
Book()<edge_begin><edge_end>Series(series)
Book()<edge_begin><edge_end>Address(address)
Book()<edge_begin><edge_end>Edition(edition)
Booklet()<edge_begin><edge_end>Bib Type()
Booklet()<edge_begin><edge_end>Author(author)
Booklet()<edge_begin><edge_end>Howpublished(howpublished)
Booklet()<edge_begin><edge_end>Address(address)
Conference()<edge_begin><edge_end>Bib Type()
Conference()<edge_begin><edge_end>Author(author)
Conference()<edge_begin><edge_end>Booktitle(booktitle)
Conference()<edge_begin><edge_end>Editor(editor)
Conference()<edge_begin><edge_end>Pages(pages)
Conference()<edge_begin><edge_end>Organization(organization)
Conference()<edge_begin><edge_end>Publisher(publisher)
Conference()<edge_begin><edge_end>Address(address)
Inbook(author, editor)<edge_begin><edge_end>Bib Type()
Inbook(author, editor)<edge_begin><edge_end>Publisher(publisher)
Inbook(author, editor)<edge_begin><edge_end>Chapter(chapter)
Inbook(author, editor)<edge_begin><edge_end>Pages(pages)
Inbook(author, editor)<edge_begin><edge_end>Volume(volume)
Inbook(author, editor)<edge_begin><edge_end>Series(series)
Inbook(author, editor)<edge_begin><edge_end>Address(address)
Inbook(author, editor)<edge_begin><edge_end>Edition(edition)
Incollection()<edge_begin><edge_end>Bib Type()
Incollection()<edge_begin><edge_end>Author(author)
Incollection()<edge_begin><edge_end>Booktitle(booktitle)
Incollection()<edge_begin><edge_end>Editor(editor)
Incollection()<edge_begin><edge_end>Pages(pages)
Incollection()<edge_begin><edge_end>Organization(organization)
Incollection()<edge_begin><edge_end>Publisher(publisher)
Incollection()<edge_begin><edge_end>Address(address)
Inproceedings()<edge_begin><edge_end>Bib Type()
Inproceedings()<edge_begin><edge_end>Author(author)
Inproceedings()<edge_begin><edge_end>Booktitle(booktitle)
Inproceedings()<edge_begin><edge_end>Editor(editor)
Inproceedings()<edge_begin><edge_end>Series(series)
Inproceedings()<edge_begin><edge_end>Pages(pages)
Inproceedings()<edge_begin><edge_end>Organization(organization)
Inproceedings()<edge_begin><edge_end>Publisher(publisher)
Inproceedings()<edge_begin><edge_end>Address(address)
Manual()<edge_begin><edge_end>Bib Type()
Manual()<edge_begin><edge_end>Author(author)
Manual()<edge_begin><edge_end>Organization(organization)
Manual()<edge_begin><edge_end>Address(address)
Manual()<edge_begin><edge_end>Edition(edition)
Mastersthesis()<edge_begin><edge_end>Bib Type()
Mastersthesis()<edge_begin><edge_end>Author(author)
Mastersthesis()<edge_begin><edge_end>School(school)
Mastersthesis()<edge_begin><edge_end>Address(address)
Misc()<edge_begin><edge_end>Bib Type()
Misc()<edge_begin><edge_end>Author(author)
Misc()<edge_begin><edge_end>Howpublished(howpublished)
Phdthesis()<edge_begin><edge_end>Bib Type()
Phdthesis()<edge_begin><edge_end>Author(author)
Phdthesis()<edge_begin><edge_end>School(school)
Phdthesis()<edge_begin><edge_end>Address(address)
Proceedings()<edge_begin><edge_end>Bib Type()
Proceedings()<edge_begin><edge_end>Editor(editor)
Proceedings()<edge_begin><edge_end>Publisher(publisher)
Proceedings()<edge_begin><edge_end>Organization(organization)
Proceedings()<edge_begin><edge_end>Address(address)
Techreport()<edge_begin><edge_end>Bib Type()
Techreport()<edge_begin><edge_end>Author(author)
Techreport()<edge_begin><edge_end>Institution(institution)
Techreport()<edge_begin><edge_end>Type(type)
Techreport()<edge_begin><edge_end>Number(number)
Techreport()<edge_begin><edge_end>Address(address)
Unpublished()<edge_begin><edge_end>Bib Type()
Unpublished()<edge_begin><edge_end>Author(author)
Actor(description, name, type)<edge_begin><edge_end>Actor(description, name, type)
Alternative Flow()<edge_begin><edge_end>Named Flow(name)
Alternative Flow Alternative()<edge_begin><edge_end>Step Alternative(condition)
Alternative Flow Alternative()<edge_begin><edge_end>Named Flow(name)
Basic Flow()<edge_begin><edge_end>Flow(final State)
Condition()<edge_begin><edge_end>Step Alternative(condition)
Exception Flow(condition)<edge_begin><edge_end>Named Flow(name)
Flow(final State)<edge_begin><edge_end>Step(label, name)
Local Alternative(description)<edge_begin><edge_end>Step Alternative(condition)
Local Alternative(description)<edge_begin><edge_end>Use Case(description, name, postcondition, pre Conditions)
Named Flow(name)<edge_begin><edge_end>Flow(final State)
Normal Step(custom Step Type)<edge_begin><edge_end>Step(label, name)
Normal Step(custom Step Type)<edge_begin><edge_end>Step Alternative(condition)
Normal Step(custom Step Type)<edge_begin><edge_end>Actor(description, name, type)
Package Declaration(description, name)<edge_begin><edge_end>Use Case(description, name, postcondition, pre Conditions)
Package Declaration(description, name)<edge_begin><edge_end>Actor(description, name, type)
Parallel Flow()<edge_begin><edge_end>Named Flow(name)
Parallel Step()<edge_begin><edge_end>Step(label, name)
Parallel Step()<edge_begin><edge_end>Parallel Flow()
Step(label, name)<edge_begin><edge_end>Step(label, name)
Step(label, name)<edge_begin><edge_end>Use Case(description, name, postcondition, pre Conditions)
Step Alternative(condition)<edge_begin><edge_end>Step(label, name)
Use Case(description, name, postcondition, pre Conditions)<edge_begin><edge_end>Use Case(description, name, postcondition, pre Conditions)
Use Case(description, name, postcondition, pre Conditions)<edge_begin><edge_end>Flow(final State)
Use Cases Model()<edge_begin><edge_end>Package Declaration(description, name)
Located Element(location)<edge_begin><edge_end>String()
Named Element(name)<edge_begin><edge_end>Located Element(location)
Named Element(name)<edge_begin><edge_end>String()
Petri Net()<edge_begin><edge_end>Named Element(name)
Petri Net()<edge_begin><edge_end>Element()
Petri Net()<edge_begin><edge_end>Arc(weight)
Petri Net()<edge_begin><edge_end>Execution()
Element()<edge_begin><edge_end>Named Element(name)
Element()<edge_begin><edge_end>Petri Net()
Place()<edge_begin><edge_end>Element()
Place()<edge_begin><edge_end>Transition To Place()
Place()<edge_begin><edge_end>Place To Transition()
Transition()<edge_begin><edge_end>Element()
Transition()<edge_begin><edge_end>Place To Transition()
Transition()<edge_begin><edge_end>Transition To Place()
Arc(weight)<edge_begin><edge_end>Named Element(name)
Arc(weight)<edge_begin><edge_end>Integer()
Arc(weight)<edge_begin><edge_end>Petri Net()
Place To Transition()<edge_begin><edge_end>Arc(weight)
Place To Transition()<edge_begin><edge_end>Place()
Place To Transition()<edge_begin><edge_end>Transition()
Transition To Place()<edge_begin><edge_end>Arc(weight)
Transition To Place()<edge_begin><edge_end>Transition()
Transition To Place()<edge_begin><edge_end>Place()
Execution()<edge_begin><edge_end>Petri Net()
Execution()<edge_begin><edge_end>Marking()
Execution()<edge_begin><edge_end>Movement()
Token()<edge_begin><edge_end>Place()
Token()<edge_begin><edge_end>Marking()
Marking()<edge_begin><edge_end>Execution()
Marking()<edge_begin><edge_end>Token()
Movement()<edge_begin><edge_end>Execution()
Movement()<edge_begin><edge_end>Transition()
Movement()<edge_begin><edge_end>Marking()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference Chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Member()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Meta-Review()<edge_begin><edge_end>Review()
Account()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
User()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Thing()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Time()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>date Time()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Topic()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Integer()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Registration()<edge_begin><edge_end>Conference activity()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Research Topic()<edge_begin><edge_end>Thing()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Committee member()<edge_begin><edge_end>Committee()
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Abstract()<edge_begin><edge_end>Document()
Abstract()<edge_begin><edge_end>article()
Abstract()<edge_begin><edge_end>Thing()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Track()<edge_begin><edge_end>Conference part()
Track()<edge_begin><edge_end>Scientific Event()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Individual Presentation()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Tutorial()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Organizer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>activity()
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>activity()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>activity()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>intensity()
activity()<edge_begin><edge_end>article()
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>activity()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>activity()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>activity()
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>activity()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>activity()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>activity()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>activity()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Scholar()<edge_begin><edge_end>University()
Administrator()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member()<edge_begin><edge_end>Participant(early Registration)
Participant(early Registration)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Student()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Science Worker()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Assistant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Volunteer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Regular()<edge_begin><edge_end>Participant(early Registration)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
chair()<edge_begin><edge_end>Reviewer()
chair()<edge_begin><edge_end>program()
article()<edge_begin><edge_end>Document()
article()<edge_begin><edge_end>activity()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
article()<edge_begin><edge_end>Author()
article()<edge_begin><edge_end>Reviewer()
article()<edge_begin><edge_end>Abstract()
participant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
participant()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
program()<edge_begin><edge_end>chair()
program()<edge_begin><edge_end>session()
Slide Set()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document()
Meal Menu()<edge_begin><edge_end>Meal Event()
Topic()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Topic()<edge_begin><edge_end>Working event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Dining Place()<edge_begin><edge_end>Place()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Withdrawn Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Rejected Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Accepted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Published Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Attendee()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
TPC Member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Two Level Conference()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer()
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Evaluated Paper()<edge_begin><edge_end>Review()
Camera Ready Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Positive Review()<edge_begin><edge_end>Review()
Workshop Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Industrial Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Conference Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Industrial Session()<edge_begin><edge_end>Conference Session()
Conference Session()<edge_begin><edge_end>Session()
Regular Session()<edge_begin><edge_end>Session()
Poster Session()<edge_begin><edge_end>Session()
Demo Session()<edge_begin><edge_end>Session()
Paper Author()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Trip()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference Participant()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Submitted Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Assigned Paper()<edge_begin><edge_end>Submitted Paper()
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Negative Review()<edge_begin><edge_end>Review()
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer()
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>activity()
Review()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Review()<edge_begin><edge_end>Possible Reviewer()
Neutral Review()<edge_begin><edge_end>Review()
Organising Agency()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Organisation()<edge_begin><edge_end>Thing()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Poster Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Regular Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Demo Paper()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Research Institute()<edge_begin><edge_end>Academic Institution()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Agency Staff Member()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Workshop Session()<edge_begin><edge_end>Session()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Workshop()<edge_begin><edge_end>Scientific Event()
Workshop()<edge_begin><edge_end>Academic Event()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Document()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Scientific Event()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Working event()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Thing()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Organizing Committee()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Integer()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Location()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Conference Member()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Administrator()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>date()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>any URI()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Boolean()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>phase of conference()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>program()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>String()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>date Time()
Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)<edge_begin><edge_end>Country()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>PC Member()
PC Chair()<edge_begin><edge_end>Conference Participant()
PC Chair()<edge_begin><edge_end>PC Member()
PC Member()<edge_begin><edge_end>Possible Reviewer()
OC Member()<edge_begin><edge_end>Conference Participant()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Programme Brochure()<edge_begin><edge_end>Document()
Flyer()<edge_begin><edge_end>Document()
Web Site()<edge_begin><edge_end>Document()
Multi-author Volume()<edge_begin><edge_end>Document()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Individual Presentation()<edge_begin><edge_end>Document()
OC Chair()<edge_begin><edge_end>OC Member()
Conference Banquet()<edge_begin><edge_end>Social Event()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Workshop Chair()<edge_begin><edge_end>PC Member()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Session Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
University()<edge_begin><edge_end>Academic Institution()
University()<edge_begin><edge_end>Organization()
Possible Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Possible Reviewer()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Invited Speaker()<edge_begin><edge_end>Presenter()
Presenter()<edge_begin><edge_end>Conference Participant()
Presenter()<edge_begin><edge_end>Author()
SC Member()<edge_begin><edge_end>PC Member()
Presenter house()<edge_begin><edge_end>Building()
Building()<edge_begin><edge_end>Place()
Presenter state()<edge_begin><edge_end>State()
Delegate()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Presenter city()<edge_begin><edge_end>City()
Hotel registration form()<edge_begin><edge_end>Form()
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
Form()<edge_begin><edge_end>Document()
Car()<edge_begin><edge_end>Transport vehicle()
Transport vehicle()<edge_begin><edge_end>Item()
Mailing list()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>Item()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Document()<edge_begin><edge_end>Document()
Renting()<edge_begin><edge_end>Activity before conference()
Activity before conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Dinner banquet()<edge_begin><edge_end>Social program()
One day presenter()<edge_begin><edge_end>Delegate()
Social program()<edge_begin><edge_end>Conference activity()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Thing()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>String()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Document()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Inforamtion()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Account()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference document()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Organization()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Item()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Presenter city()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Money()
Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Time()
Power Point presentation()<edge_begin><edge_end>Presentation()
Presentation()<edge_begin><edge_end>Conference activity()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Conference restaurant()<edge_begin><edge_end>Building()
Conference city()<edge_begin><edge_end>City()
Conference state()<edge_begin><edge_end>State()
Submissions deadline()<edge_begin><edge_end>Deadline()
Deadline()<edge_begin><edge_end>Time()
Deadline()<edge_begin><edge_end>date()
Simulating()<edge_begin><edge_end>Research()
Research()<edge_begin><edge_end>Activity before conference()
Technic activity()<edge_begin><edge_end>Conference activity()
Conference activity()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Technical commitee()<edge_begin><edge_end>Delegate()
Place()<edge_begin><edge_end>Thing()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Place()<edge_begin><edge_end>Item()
Author cd proceedings included()<edge_begin><edge_end>Author()
Cd proceening()<edge_begin><edge_end>Publication()
Trip day()<edge_begin><edge_end>Time()
Record of attendance()<edge_begin><edge_end>Document()
Listener()<edge_begin><edge_end>Delegate()
Session room()<edge_begin><edge_end>Place()
Brief introduction for Session chair()<edge_begin><edge_end>Document()
Session chair()<edge_begin><edge_end>Delegate()
Invitation letter()<edge_begin><edge_end>Document()
Registration form()<edge_begin><edge_end>Form()
Viza()<edge_begin><edge_end>Document()
Conference days()<edge_begin><edge_end>Time()
Conference building()<edge_begin><edge_end>Building()
Registration fee()<edge_begin><edge_end>Fee()
Departure()<edge_begin><edge_end>Activity after conference()
Activity after conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference airport()<edge_begin><edge_end>Building()
Worker lecturer()<edge_begin><edge_end>Lecturer()
Lecturer()<edge_begin><edge_end>Author()
Transparency()<edge_begin><edge_end>Document()
Speaker()<edge_begin><edge_end>Delegate()
City()<edge_begin><edge_end>Thing()
Card()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Item()<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Item()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Time()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Book proceeding()<edge_begin><edge_end>Publication()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Audiovisual equipment()<edge_begin><edge_end>Item()
Video presentation()<edge_begin><edge_end>Presentation()
Hotel room()<edge_begin><edge_end>Place()
Hotel presenter()<edge_begin><edge_end>Delegate()
Conference hotel()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Item()
Money()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Money()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Thing()
Money()<edge_begin><edge_end>Money()
Introduction()<edge_begin><edge_end>Conference activity()
Welcome address()<edge_begin><edge_end>Conference activity()
Value added tax()<edge_begin><edge_end>Tax()
Tax()<edge_begin><edge_end>Money()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Final manuscript()<edge_begin><edge_end>Submission()
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Sponsor city()<edge_begin><edge_end>City()
Sponsor()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Introduction of speaker()<edge_begin><edge_end>Introduction()
Conference hall()<edge_begin><edge_end>Place()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Plenary lecture speaker()<edge_begin><edge_end>Author()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Tutorial speaker()<edge_begin><edge_end>Author()
Session()<edge_begin><edge_end>Lecture(has Acronym)
Session()<edge_begin><edge_end>Scientific Event()
Registation deadline()<edge_begin><edge_end>Deadline()
Single hotel room()<edge_begin><edge_end>Hotel room()
Non speaker()<edge_begin><edge_end>Delegate()
Author information form()<edge_begin><edge_end>Form()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
IASTED non member()<edge_begin><edge_end>Delegate()
Hotel fee()<edge_begin><edge_end>Fee()
Fee()<edge_begin><edge_end>Money()
Publication()<edge_begin><edge_end>Item()
Taxi()<edge_begin><edge_end>Transport vehicle()
Sponsor state()<edge_begin><edge_end>State()
Modelling()<edge_begin><edge_end>Research()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Payment document()<edge_begin><edge_end>Document()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
One conference day()<edge_begin><edge_end>Conference days()
Fee for extra trip()<edge_begin><edge_end>Fee()
Full day tour()<edge_begin><edge_end>Activity after conference()
Conference Hiker()<edge_begin><edge_end>Delegate()
Computer()<edge_begin><edge_end>Audiovisual equipment()
IASTED member()<edge_begin><edge_end>Delegate()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Author book proceedings included()<edge_begin><edge_end>Author()
Sponsor company house()<edge_begin><edge_end>Building()
Sponzorship()<edge_begin><edge_end>Money()
Student lecturer()<edge_begin><edge_end>Lecturer()
Trip city()<edge_begin><edge_end>City()
Cheque()<edge_begin><edge_end>Payment document()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Student non speaker()<edge_begin><edge_end>Non speaker()
Student registration fee()<edge_begin><edge_end>Registration fee()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Tip()<edge_begin><edge_end>Money()
Credit card()<edge_begin><edge_end>Card()
Van()<edge_begin><edge_end>Transport vehicle()
Main office()<edge_begin><edge_end>Place()
Presenter university()<edge_begin><edge_end>Building()
Departure tax()<edge_begin><edge_end>Tax()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Double hotel room()<edge_begin><edge_end>Hotel room()
Initial manuscipt()<edge_begin><edge_end>Submission()
Coffee break()<edge_begin><edge_end>Conference activity()
Bank transfer()<edge_begin><edge_end>Payment document()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Speaker lecture()<edge_begin><edge_end>Session()
Coctail reception()<edge_begin><edge_end>Conference activity()
Work Shop()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Organizing Committee()<edge_begin><edge_end>Thing()
Organizing Committee()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Committee Member()<edge_begin><edge_end>Organizer()
Committee Member()<edge_begin><edge_end>Conference(annual Order, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL, has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date)
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Outside Referee()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Author()<edge_begin><edge_end>Speaker()
Author()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Author()<edge_begin><edge_end>article()
Author()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Lecture(has Acronym)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Lecture(has Acronym)<edge_begin><edge_end>String()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Reviewer()<edge_begin><edge_end>Organizer()
Reviewer()<edge_begin><edge_end>Speaker()
Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title, full paper size)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Personal Review History()
Reviewer()<edge_begin><edge_end>Double Blind Review()
Double Blind Review()<edge_begin><edge_end>Thing()
Double Blind Review()<edge_begin><edge_end>Reviewer()
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>article()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Regular contribution()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Document()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Co-author()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Bid()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Decision()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Reviewer()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Subject Area()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>unsigned Long()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>String()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Author()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Administrator()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Meta-Reviewer()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Integer()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Person(has Mail, works For Company, email, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Review()
Paper(paper ID, title, full paper size)<edge_begin><edge_end>Possible Reviewer()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Project(name, basedir, description)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Project(name, basedir, description)<edge_begin><edge_end>Path(id, refid)
Project(name, basedir, description)<edge_begin><edge_end>Property()
Project(name, basedir, description)<edge_begin><edge_end>Task Def(name, classname)
Property Name(name)<edge_begin><edge_end>Property()
Property Value(value)<edge_begin><edge_end>Property Name(name)
Property Location(location)<edge_begin><edge_end>Property Name(name)
Property File(file)<edge_begin><edge_end>Property()
Property Env(environment)<edge_begin><edge_end>Property()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Target(name, description, unless, if Condition)<edge_begin><edge_end>Task()
Basic()<edge_begin><edge_end>Pattern()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File List(dir, files)<edge_begin><edge_end>Basic()
Filter(token, value)<edge_begin><edge_end>Basic()
Filters File(file)<edge_begin><edge_end>Basic()
Path Element(path, location)<edge_begin><edge_end>Basic()
Set()<edge_begin><edge_end>Pattern()
Pattern Set()<edge_begin><edge_end>Set()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Set(dir)<edge_begin><edge_end>Set()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File Set(dir)<edge_begin><edge_end>Includes()
File Set(dir)<edge_begin><edge_end>Excludes()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Path(id, refid)<edge_begin><edge_end>Set()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Task()<edge_begin><edge_end>Target(name, description, unless, if Condition)
New Task()<edge_begin><edge_end>Task()
New Task()<edge_begin><edge_end>Task Def(name, classname)
New Task()<edge_begin><edge_end>Attribut(name, value)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Java(classname, jar, fork)<edge_begin><edge_end>Execution Task()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mkdir(dir)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Ided Element(id)<edge_begin><edge_end>String()
URI(value)<edge_begin><edge_end>String()
Any Element(name, text)<edge_begin><edge_end>String()
PNML Document()<edge_begin><edge_end>URI(value)
PNML Document()<edge_begin><edge_end>Net Element()
Net Element()<edge_begin><edge_end>Ided Element(id)
Net Element()<edge_begin><edge_end>URI(value)
Net Element()<edge_begin><edge_end>PNML Document()
Net Element()<edge_begin><edge_end>Net Content()
Net Element()<edge_begin><edge_end>Tool Specific(tool, version)
Net Element()<edge_begin><edge_end>Net Graphics()
Net Element()<edge_begin><edge_end>Name()
Net Content()<edge_begin><edge_end>Net Element()
Net Content()<edge_begin><edge_end>Name()
Tool Specific(tool, version)<edge_begin><edge_end>String()
Tool Specific(tool, version)<edge_begin><edge_end>Any Element(name, text)
Tool Specific(tool, version)<edge_begin><edge_end>Net Element()
Tool Specific(tool, version)<edge_begin><edge_end>Arc()
Tool Specific(tool, version)<edge_begin><edge_end>Node()
Labeled Element()<edge_begin><edge_end>Label(text)
Labeled Element()<edge_begin><edge_end>Annotation Graphics()
Label(text)<edge_begin><edge_end>String()
Label(text)<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Net Element()
Name()<edge_begin><edge_end>Net Content()
Inscription()<edge_begin><edge_end>Labeled Element()
Inscription()<edge_begin><edge_end>Arc()
Initial Marking()<edge_begin><edge_end>Labeled Element()
Initial Marking()<edge_begin><edge_end>Place()
Net Content Element()<edge_begin><edge_end>Net Content()
Net Content Element()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Net Content()
Arc()<edge_begin><edge_end>Ided Element(id)
Arc()<edge_begin><edge_end>Net Content Element()
Arc()<edge_begin><edge_end>Tool Specific(tool, version)
Arc()<edge_begin><edge_end>Edge Graphics()
Arc()<edge_begin><edge_end>Inscription()
Node()<edge_begin><edge_end>Ided Element(id)
Node()<edge_begin><edge_end>Net Content Element()
Node()<edge_begin><edge_end>Tool Specific(tool, version)
Node()<edge_begin><edge_end>Node Graphics()
Place()<edge_begin><edge_end>Net Content Element()
Place()<edge_begin><edge_end>Initial Marking()
Transition()<edge_begin><edge_end>Net Content Element()
Net Graphics()<edge_begin><edge_end>Graphics()
Net Graphics()<edge_begin><edge_end>Net Element()
Node Graphics()<edge_begin><edge_end>Graphics()
Node Graphics()<edge_begin><edge_end>Node()
Node Graphics()<edge_begin><edge_end>Position()
Node Graphics()<edge_begin><edge_end>Dimension(width, height)
Node Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Node Graphics()<edge_begin><edge_end>Line(width, shape, style)
Edge Graphics()<edge_begin><edge_end>Graphics()
Edge Graphics()<edge_begin><edge_end>Arc()
Edge Graphics()<edge_begin><edge_end>Position()
Edge Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Edge Graphics()<edge_begin><edge_end>Line(width, shape, style)
Annotation Graphics()<edge_begin><edge_end>Graphics()
Annotation Graphics()<edge_begin><edge_end>Labeled Element()
Annotation Graphics()<edge_begin><edge_end>Offset()
Annotation Graphics()<edge_begin><edge_end>Font(family, style, weight, size, decoration, align, rotation)
Annotation Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Annotation Graphics()<edge_begin><edge_end>Line(width, shape, style)
Coordinate(x, y)<edge_begin><edge_end>Integer()
Position()<edge_begin><edge_end>Coordinate(x, y)
Position()<edge_begin><edge_end>Node Graphics()
Position()<edge_begin><edge_end>Edge Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Offset()<edge_begin><edge_end>Annotation Graphics()
Dimension(width, height)<edge_begin><edge_end>Integer()
Dimension(width, height)<edge_begin><edge_end>Node Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Color()
Fill(gradientrotation)<edge_begin><edge_end>URI(value)
Fill(gradientrotation)<edge_begin><edge_end>Node Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Edge Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Annotation Graphics()
Line(width, shape, style)<edge_begin><edge_end>Color()
Line(width, shape, style)<edge_begin><edge_end>Integer()
Line(width, shape, style)<edge_begin><edge_end>Node Graphics()
Line(width, shape, style)<edge_begin><edge_end>Edge Graphics()
Line(width, shape, style)<edge_begin><edge_end>Annotation Graphics()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>String()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Integer()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Annotation Graphics()
Model()<edge_begin><edge_end>Select Query()
Fetch First(row)<edge_begin><edge_end>Integer Value(integer)
Limit(l1)<edge_begin><edge_end>Integer Value(integer)
Select Sub Set(op, all)<edge_begin><edge_end>Select(select)
Select(select)<edge_begin><edge_end>Select Query()
Select(select)<edge_begin><edge_end>Select Sub Set(op, all)
Select(select)<edge_begin><edge_end>Or Column()
Select(select)<edge_begin><edge_end>Or Table()
Select(select)<edge_begin><edge_end>Or Expr()
Select(select)<edge_begin><edge_end>Or Group By Column()
Select(select)<edge_begin><edge_end>Or Order By Column()
Select(select)<edge_begin><edge_end>Limit(l1)
Select(select)<edge_begin><edge_end>Offset(offset)
Select(select)<edge_begin><edge_end>Fetch First(row)
Or Column()<edge_begin><edge_end>Pivot For Clause()
Or Column()<edge_begin><edge_end>Column Or Alias(alias, all Cols)
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Or Column()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Operands()
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Db Object Name(dbname)
Column Or Alias(alias, all Cols)<edge_begin><edge_end>Db Object Name All(dbname)
Column Full()<edge_begin><edge_end>Pivot For Clause()
Or Table()<edge_begin><edge_end>From Table()
From Table()<edge_begin><edge_end>Or Table()
From Table()<edge_begin><edge_end>Table Or Alias(alias)
From Table()<edge_begin><edge_end>From Table Join(join)
From Table Join(join)<edge_begin><edge_end>Table Or Alias(alias)
From Table Join(join)<edge_begin><edge_end>Or Expr()
Table Or Alias(alias)<edge_begin><edge_end>Table Full()
Table Or Alias(alias)<edge_begin><edge_end>Sub Query Operand()
Table Or Alias(alias)<edge_begin><edge_end>Pivot Table()
Table Or Alias(alias)<edge_begin><edge_end>Unpivot Table()
Table Or Alias(alias)<edge_begin><edge_end>Db Object Name(dbname)
Pivot Table()<edge_begin><edge_end>Pivot Functions(abc)
Pivot Table()<edge_begin><edge_end>Pivot For Clause()
Pivot Table()<edge_begin><edge_end>Pivot In Clause(pinany)
Pivot In Clause(pinany)<edge_begin><edge_end>Sub Query Operand()
Pivot In Clause(pinany)<edge_begin><edge_end>Unpivot In Clause Args()
Unpivot Table()<edge_begin><edge_end>Pivot Columns()
Unpivot Table()<edge_begin><edge_end>Pivot For Clause()
Unpivot Table()<edge_begin><edge_end>Unpivot In Clause()
Unpivot In Clause Arg()<edge_begin><edge_end>Unpivot In Clause Args()
Unpivot In Clause Arg()<edge_begin><edge_end>Pivot Columns()
Pivots()<edge_begin><edge_end>Pivot Columns()
Pivot Col()<edge_begin><edge_end>Pivot Function()
Pivot Col()<edge_begin><edge_end>Pivot Columns()
Pivot Col()<edge_begin><edge_end>Pivots()
Db Object Name(dbname)<edge_begin><edge_end>Column Full()
Db Object Name(dbname)<edge_begin><edge_end>Pivot Col()
Db Object Name(dbname)<edge_begin><edge_end>Table Full()
Or Order By Column()<edge_begin><edge_end>Order By Column Full(col Order Int, direction)
Order By Column Full(col Order Int, direction)<edge_begin><edge_end>Or Order By Column()
Order By Column Full(col Order Int, direction)<edge_begin><edge_end>Column Full()
Or Group By Column()<edge_begin><edge_end>Group By Column Full()
Group By Column Full()<edge_begin><edge_end>Or Group By Column()
Group By Column Full()<edge_begin><edge_end>Column Full()
Group By Column Full()<edge_begin><edge_end>Op Function(fname)
Or Expr()<edge_begin><edge_end>Full Expression(c, not Prm, isnull)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Or Expr()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Full Expression(c, not Prm, isnull)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Expr Group(isnot)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>X Expr(xf)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>In Oper(op)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Exists Oper(op)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Operands()
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Between(op Between)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Like(op Like)
Full Expression(c, not Prm, isnull)<edge_begin><edge_end>Comparison(operator, sub Operator)
Expr Group(isnot)<edge_begin><edge_end>Or Expr()
X Expr(xf)<edge_begin><edge_end>Operands()
X Expr(xf)<edge_begin><edge_end>Prms()
Prms()<edge_begin><edge_end>JR Parameter(jrprm)
JR Parameter(jrprm)<edge_begin><edge_end>Prms()
Comparison(operator, sub Operator)<edge_begin><edge_end>Operands()
Like(op Like)<edge_begin><edge_end>Like Operand(op2)
Like Operand(op2)<edge_begin><edge_end>Op Function(fname)
Like Operand(op2)<edge_begin><edge_end>Op Function Cast(type, p, p2)
Like Operand(op2)<edge_begin><edge_end>P Operand(prm)
Between(op Between)<edge_begin><edge_end>Operands()
In Oper(op)<edge_begin><edge_end>Sub Query Operand()
In Oper(op)<edge_begin><edge_end>Operand List Group()
Exists Oper(op)<edge_begin><edge_end>Sub Query Operand()
Exists Oper(op)<edge_begin><edge_end>Operand List Group()
Operand List Group()<edge_begin><edge_end>Operand List()
Operands()<edge_begin><edge_end>Op Function Arg Agregate()
Operands()<edge_begin><edge_end>Operand()
Operands()<edge_begin><edge_end>Operands()
Operand()<edge_begin><edge_end>Column Operand(ora)
Operand()<edge_begin><edge_end>Operand()
Operand()<edge_begin><edge_end>Sub Query Operand()
Operand()<edge_begin><edge_end>Op Function Cast(type, p, p2)
Operand()<edge_begin><edge_end>Function Extract(v)
Operand()<edge_begin><edge_end>Op Function(fname)
Operand()<edge_begin><edge_end>SQL Case Operand()
Operand()<edge_begin><edge_end>P Operand(prm)
Operand()<edge_begin><edge_end>Exp Operand(prm)
Operand()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
Op Function(fname)<edge_begin><edge_end>Op Function Arg()
Op Function(fname)<edge_begin><edge_end>Function Analytical()
Function Extract(v)<edge_begin><edge_end>Operands()
Function Analytical()<edge_begin><edge_end>Analytic Clause()
Analytic Clause()<edge_begin><edge_end>Query Partition Clause()
Analytic Clause()<edge_begin><edge_end>Order By Clause()
Analytic Clause()<edge_begin><edge_end>Windowing Clause()
Windowing Clause Between()<edge_begin><edge_end>Windowing Clause()
Windowing Clause Between()<edge_begin><edge_end>Windowing Clause Operand Preceding()
Windowing Clause Between()<edge_begin><edge_end>Windowing Clause Operand Following()
Windowing Clause Operand Following()<edge_begin><edge_end>Analytic Expr Arg()
Windowing Clause Operand Preceding()<edge_begin><edge_end>Windowing Clause()
Windowing Clause Operand Preceding()<edge_begin><edge_end>Analytic Expr Arg()
Order By Clause()<edge_begin><edge_end>Order By Clause Args()
Order By Clause Arg()<edge_begin><edge_end>Order By Clause Args()
Order By Clause Arg()<edge_begin><edge_end>Analytic Expr Arg()
Query Partition Clause()<edge_begin><edge_end>Analytic Expr Args()
Analytic Expr Args()<edge_begin><edge_end>Query Partition Clause()
Analytic Expr Arg()<edge_begin><edge_end>Analytic Expr Args()
Analytic Expr Arg()<edge_begin><edge_end>Operands()
Analytic Expr Arg()<edge_begin><edge_end>Db Object Name(dbname)
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg()
Op Function Arg Operand()<edge_begin><edge_end>Op Function Arg Agregate()
Op Function Cast(type, p, p2)<edge_begin><edge_end>Operands()
Column Operand(ora)<edge_begin><edge_end>Column Full()
Sub Query Operand()<edge_begin><edge_end>Select Query()
Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)<edge_begin><edge_end>Operand List()
SQL Case Operand()<edge_begin><edge_end>Or Expr()
SQL Case Operand()<edge_begin><edge_end>SQL Case Whens()
Sql Case When()<edge_begin><edge_end>SQL Case Whens()
Sql Case When()<edge_begin><edge_end>Or Expr()
Sql Case When()<edge_begin><edge_end>Operands()
Col()<edge_begin><edge_end>Column Full()
Col()<edge_begin><edge_end>Db Object Name(dbname)
Unipivot In Clause(op)<edge_begin><edge_end>Unpivot In Clause()
Unipivot In Clause(op)<edge_begin><edge_end>Unpivot In Clause Args()
uicargs()<edge_begin><edge_end>Unpivot In Clause Args()
uicargs()<edge_begin><edge_end>Unpivot In Clause Arg()
pvcs()<edge_begin><edge_end>Pivots()
pvcs()<edge_begin><edge_end>Pivot Col()
pcols()<edge_begin><edge_end>Pivot Col()
pcols()<edge_begin><edge_end>Db Object Name(dbname)
tbls()<edge_begin><edge_end>Table Full()
tbls()<edge_begin><edge_end>Db Object Name(dbname)
Op List()<edge_begin><edge_end>Operand List()
Op List()<edge_begin><edge_end>Scalar Operand(soint, sostr, sodbl, sodate, sotime, sodt)
Plus()<edge_begin><edge_end>Operands()
Minus()<edge_begin><edge_end>Operands()
Star()<edge_begin><edge_end>Operands()
Div()<edge_begin><edge_end>Operands()
Concat()<edge_begin><edge_end>Operands()
OBC Args()<edge_begin><edge_end>Order By Clause Args()
OBC Args()<edge_begin><edge_end>Order By Clause Arg()
A Exp Args()<edge_begin><edge_end>Analytic Expr Args()
A Exp Args()<edge_begin><edge_end>Analytic Expr Arg()
Op F List()<edge_begin><edge_end>Op Function Arg()
Op F List()<edge_begin><edge_end>Op Function Arg Operand()
When List()<edge_begin><edge_end>SQL Case Whens()
When List()<edge_begin><edge_end>Sql Case When()
Type()<edge_begin><edge_end>Named Element(name)
Type()<edge_begin><edge_end>Described Element(description)
Native SQL Type()<edge_begin><edge_end>Type()
Separated Element(separator)<edge_begin><edge_end>Separator()
Database(dsn)<edge_begin><edge_end>Named Element(name)
Database(dsn)<edge_begin><edge_end>Described Element(description)
Database(dsn)<edge_begin><edge_end>User(password)
Database(dsn)<edge_begin><edge_end>Schema()
User(password)<edge_begin><edge_end>Named Element(name)
User(password)<edge_begin><edge_end>Described Element(description)
User(password)<edge_begin><edge_end>FQ Named Element()
User(password)<edge_begin><edge_end>Schema()
Schema()<edge_begin><edge_end>Named Element(name)
Schema()<edge_begin><edge_end>Described Element(description)
Schema()<edge_begin><edge_end>Domain(type)
Schema()<edge_begin><edge_end>Table()
Schema()<edge_begin><edge_end>View(sql)
View(sql)<edge_begin><edge_end>Named Element(name)
View(sql)<edge_begin><edge_end>Described Element(description)
View(sql)<edge_begin><edge_end>FQ Named Element()
View(sql)<edge_begin><edge_end>SQL()
Table()<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Described Element(description)
Table()<edge_begin><edge_end>FQ Named Element()
Table()<edge_begin><edge_end>Column()
I Column()<edge_begin><edge_end>Named Element(name)
I Column()<edge_begin><edge_end>Described Element(description)
I Column()<edge_begin><edge_end>FQ Named Element()
Column()<edge_begin><edge_end>I Column()
Column()<edge_begin><edge_end>Type()
Domain(type)<edge_begin><edge_end>Type()
Domain(type)<edge_begin><edge_end>FQ Named Element()
Domain(type)<edge_begin><edge_end>Data Type()
I File()<edge_begin><edge_end>Named Element(name)
I File()<edge_begin><edge_end>Described Element(description)
File Set(hostname)<edge_begin><edge_end>Named Element(name)
File Set(hostname)<edge_begin><edge_end>Described Element(description)
File Set(hostname)<edge_begin><edge_end>I File()
File(files, number Of Header Lines)<edge_begin><edge_end>Separated Element(separator)
File(files, number Of Header Lines)<edge_begin><edge_end>I File()
File(files, number Of Header Lines)<edge_begin><edge_end>Field(length, position, type)
Field(length, position, type)<edge_begin><edge_end>I Column()
Field(length, position, type)<edge_begin><edge_end>Separated Element(separator)
SCT File(file)<edge_begin><edge_end>I File()
SCT File(file)<edge_begin><edge_end>Column()
SCT File(file)<edge_begin><edge_end>Domain(type)
Mapping Import()<edge_begin><edge_end>Mapping(expression)
Mapping Import()<edge_begin><edge_end>I Column()
Mapping Import()<edge_begin><edge_end>Column()
Mapping File()<edge_begin><edge_end>Mapping(expression)
Mapping File()<edge_begin><edge_end>Field(length, position, type)
Mapping Export()<edge_begin><edge_end>Mapping(expression)
Mapping Export()<edge_begin><edge_end>Column()
Mapping Export()<edge_begin><edge_end>I Column()
Mapping SQL()<edge_begin><edge_end>Mapping(expression)
Mapping SQL()<edge_begin><edge_end>Column()
Task Set()<edge_begin><edge_end>Named Element(name)
Task Set()<edge_begin><edge_end>Described Element(description)
Task Set()<edge_begin><edge_end>Task(file Name)
Task(file Name)<edge_begin><edge_end>Named Element(name)
Task(file Name)<edge_begin><edge_end>Described Element(description)
Task(file Name)<edge_begin><edge_end>Task(file Name)
Task Import()<edge_begin><edge_end>Task(file Name)
Task Import()<edge_begin><edge_end>I File()
Task Import()<edge_begin><edge_end>Table()
Task Import()<edge_begin><edge_end>Mapping Import()
Task File()<edge_begin><edge_end>Task(file Name)
Task File()<edge_begin><edge_end>File(files, number Of Header Lines)
Task File()<edge_begin><edge_end>Mapping File()
Task Export()<edge_begin><edge_end>Task(file Name)
Task Export()<edge_begin><edge_end>Table()
Task Export()<edge_begin><edge_end>I File()
Task Export()<edge_begin><edge_end>Mapping Export()
Task SQL()<edge_begin><edge_end>Task(file Name)
Task SQL()<edge_begin><edge_end>Table()
Task SQL()<edge_begin><edge_end>Mapping SQL()
Site()<edge_begin><edge_end>Named Element(name)
Site()<edge_begin><edge_end>Described Element(description)
Site()<edge_begin><edge_end>Database(dsn)
Site()<edge_begin><edge_end>File Set(hostname)
Site()<edge_begin><edge_end>Task Set()
Internal Model(context)<edge_begin><edge_end>Automaton()
Automaton()<edge_begin><edge_end>State(label)
Automaton()<edge_begin><edge_end>Event Token()
Automaton()<edge_begin><edge_end>Timed Zone(time)
Event Token()<edge_begin><edge_end>State(label)
Event Token()<edge_begin><edge_end>Timed Zone(time)
State(label)<edge_begin><edge_end>Transition()
State(label)<edge_begin><edge_end>Event Token()
State(label)<edge_begin><edge_end>Timed Zone(time)
Init State()<edge_begin><edge_end>State(label)
Final State()<edge_begin><edge_end>State(label)
Trap State()<edge_begin><edge_end>State(label)
Transition()<edge_begin><edge_end>State(label)
Typed Transition()<edge_begin><edge_end>Transition()
Typed Transition()<edge_begin><edge_end>Guard()
Epsilon Transition()<edge_begin><edge_end>Transition()
Guard()<edge_begin><edge_end>Typed Transition()
Timed Zone(time)<edge_begin><edge_end>State(label)
Within()<edge_begin><edge_end>Timed Zone(time)
Holds For()<edge_begin><edge_end>Timed Zone(time)
Named Element(name)<edge_begin><edge_end>String()
Data Base(SGB Dname)<edge_begin><edge_end>Named Element(name)
Data Base(SGB Dname)<edge_begin><edge_end>String()
Data Base(SGB Dname)<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Data Base(SGB Dname)
Table()<edge_begin><edge_end>Column(data Type, null, default Value)
Column(data Type, null, default Value)<edge_begin><edge_end>Named Element(name)
Column(data Type, null, default Value)<edge_begin><edge_end>String()
Column(data Type, null, default Value)<edge_begin><edge_end>Boolean()
Column(data Type, null, default Value)<edge_begin><edge_end>Table()
State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)<edge_begin><edge_end>Storage(data)
State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)<edge_begin><edge_end>State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)
State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)<edge_begin><edge_end>Equality Helper(check Link Order)
State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)<edge_begin><edge_end>Integer Array()
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Storage(data)
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Transition(match, parameter Count, parameter Keys)
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>State Space(state Count, transition Count, layout Zoom Level, layout State Repulsion, layout Transition Attraction, layout Hide Labels, layout Hide Indizes, max State Distance, all Parameter Keys)
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Integer Array()
State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)<edge_begin><edge_end>Model(resource, e Graph, object Keys, object Count)
Model(resource, e Graph, object Keys, object Count)<edge_begin><edge_end>E Graph()
Model(resource, e Graph, object Keys, object Count)<edge_begin><edge_end>E Object Integer Map Entry(value)
Model(resource, e Graph, object Keys, object Count)<edge_begin><edge_end>Integer Array()
Transition(match, parameter Count, parameter Keys)<edge_begin><edge_end>Storage(data)
Transition(match, parameter Count, parameter Keys)<edge_begin><edge_end>State(index, hash Code, derived From, open, goal, pruned, location, object Count, object Keys)
Transition(match, parameter Count, parameter Keys)<edge_begin><edge_end>Integer Array()
Storage(data)<edge_begin><edge_end>Integer Array()
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Publication Process(min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Sequence(sequence Type)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Researcher(name, for Name, position)
Publication Phase(name, min Time, max Time)<edge_begin><edge_end>Rule(text, key)
Sequence(sequence Type)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Researcher(name, for Name, position)<edge_begin><edge_end>Publication Phase(name, min Time, max Time)
Researcher(name, for Name, position)<edge_begin><edge_end>Write()
Researcher(name, for Name, position)<edge_begin><edge_end>Review()
Researcher(name, for Name, position)<edge_begin><edge_end>Paper()
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent, time)
Paper()<edge_begin><edge_end>Researcher(name, for Name, position)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent, time)<edge_begin><edge_end>Labelled(lname)
Progress(percent, time)<edge_begin><edge_end>Publication Process(min Time, max Time)
Progress(percent, time)<edge_begin><edge_end>Paper()
Write()<edge_begin><edge_end>Labelled(lname)
Write()<edge_begin><edge_end>Paragraph(content)
Review()<edge_begin><edge_end>Labelled(lname)
Review()<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name, position)
Publication Structure()<edge_begin><edge_end>Paper()
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Publication Structure()
Pseudostate()<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Named Element(name)
Vertex()<edge_begin><edge_end>Region(priority)
Vertex()<edge_begin><edge_end>Transition(priority)
Region(priority)<edge_begin><edge_end>Named Element(name)
Region(priority)<edge_begin><edge_end>Vertex()
Transition(priority)<edge_begin><edge_end>Expression Element(expression)
Transition(priority)<edge_begin><edge_end>Reaction()
Transition(priority)<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Regular State()
Variable()<edge_begin><edge_end>Declaration()
Event()<edge_begin><edge_end>Declaration()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Named Element(name)
Statechart()<edge_begin><edge_end>Expression Element(expression)
Statechart()<edge_begin><edge_end>Reactive Element()
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Statechart()<edge_begin><edge_end>Region(priority)
Entry(kind)<edge_begin><edge_end>Pseudostate()
Declaration()<edge_begin><edge_end>Named Element(name)
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Effect()
Reactive Element()<edge_begin><edge_end>Reaction()
Exit()<edge_begin><edge_end>Pseudostate()
Scope()<edge_begin><edge_end>Declaration()
Scope()<edge_begin><edge_end>Event()
Scope()<edge_begin><edge_end>Variable()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Expression Element(expression)
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Regular State()
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Region(priority)
State(orthogonal, substatechart Id, submachine, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Regular State()<edge_begin><edge_end>Vertex()
State Machine()<edge_begin><edge_end>Declaration()
State Machine()<edge_begin><edge_end>State Machine Variable(type, name)
Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)<edge_begin><edge_end>Declaration()
Transition(label, source Label, target Label, guard Label, action Label, guard Expression, action Statement)<edge_begin><edge_end>State(label, id)
State(label, id)<edge_begin><edge_end>Declaration()
State(label, id)<edge_begin><edge_end>State(label, id)
Normal State()<edge_begin><edge_end>State(label, id)
Normal State()<edge_begin><edge_end>Action(action Label, action Statement)
Initial State()<edge_begin><edge_end>State(label, id)
Final State()<edge_begin><edge_end>State(label, id)
Actor()<edge_begin><edge_end>Named Element(name)
Use Case()<edge_begin><edge_end>Named Element(name)
Use Case()<edge_begin><edge_end>Include()
Use Case()<edge_begin><edge_end>Extend()
Extend()<edge_begin><edge_end>Use Case()
Include()<edge_begin><edge_end>Use Case()
Use Case Container()<edge_begin><edge_end>Named Element(name)
Named Element(name)<edge_begin><edge_end>String()
Association()<edge_begin><edge_end>Named Element(name)
Association()<edge_begin><edge_end>Actor()
Association()<edge_begin><edge_end>Use Case()
Net()<edge_begin><edge_end>Place(name)
Net()<edge_begin><edge_end>Transition(name)
Net()<edge_begin><edge_end>Arc()
Place(name)<edge_begin><edge_end>Net()
Place(name)<edge_begin><edge_end>PT Arc()
Place(name)<edge_begin><edge_end>TP Arc()
Transition(name)<edge_begin><edge_end>Net()
Transition(name)<edge_begin><edge_end>PT Arc()
Transition(name)<edge_begin><edge_end>TP Arc()
PT Arc()<edge_begin><edge_end>Arc()
PT Arc()<edge_begin><edge_end>Place(name)
PT Arc()<edge_begin><edge_end>Transition(name)
TP Arc()<edge_begin><edge_end>Arc()
TP Arc()<edge_begin><edge_end>Transition(name)
TP Arc()<edge_begin><edge_end>Place(name)
Arc()<edge_begin><edge_end>Net()
Named Element(name)<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Data Base(url)<edge_begin><edge_end>Table Container()
Data Base(url)<edge_begin><edge_end>Schema()
Abstract Table()<edge_begin><edge_end>Named Element(name)
Abstract Table()<edge_begin><edge_end>Table Container()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Named Element(name)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index Element(asc)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Primary Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key Element()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Table()
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Named Element(name)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Index Element(asc)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Table()
View(query)<edge_begin><edge_end>Abstract Table()
View(query)<edge_begin><edge_end>View Element(name, alias)
Table()<edge_begin><edge_end>Abstract Table()
Table()<edge_begin><edge_end>Primary Key()
Table()<edge_begin><edge_end>Foreign Key()
Table()<edge_begin><edge_end>Constraint(expression)
Table()<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Table()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Primary Key()<edge_begin><edge_end>Named Element(name)
Primary Key()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Primary Key()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>Named Element(name)
Foreign Key()<edge_begin><edge_end>Foreign Key Element()
Foreign Key()<edge_begin><edge_end>Table()
Foreign Key Element()<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Foreign Key Element()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Index Element(asc)<edge_begin><edge_end>Database Element(ID, comments, tech ID)
Index Element(asc)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Constraint(expression)<edge_begin><edge_end>Named Element(name)
Constraint(expression)<edge_begin><edge_end>Table()
Schema()<edge_begin><edge_end>Table Container()
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Named Element(name)
Sequence(start, increment, min Value, max Value, cache Size, cycle)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Table Container()<edge_begin><edge_end>Named Element(name)
Table Container()<edge_begin><edge_end>Abstract Table()
Table Container()<edge_begin><edge_end>Sequence(start, increment, min Value, max Value, cache Size, cycle)
HAL()<edge_begin><edge_end>Connexion(login, password)
HAL()<edge_begin><edge_end>Entry()
Connexion(login, password)<edge_begin><edge_end>String()
Entry()<edge_begin><edge_end>Aut Lab Type()
Entry()<edge_begin><edge_end>Tampon Type(id)
Article()<edge_begin><edge_end>Entry()
Article()<edge_begin><edge_end>Meta Art Type(domain, abstract)
Article Recent()<edge_begin><edge_end>Article()
Article Recent()<edge_begin><edge_end>Depots Type()
Article Retro(date Redaction)<edge_begin><edge_end>Article()
Article Retro(date Redaction)<edge_begin><edge_end>String()
Article Retro(date Redaction)<edge_begin><edge_end>Abstract Depot(nom)
Notice()<edge_begin><edge_end>Entry()
Notice()<edge_begin><edge_end>Meta Art Notice Type(domain, abstract)
Art Revue Type(urldoi, journal, volume, page, annee)<edge_begin><edge_end>Reference Biblio Type()
Art Revue Type(urldoi, journal, volume, page, annee)<edge_begin><edge_end>String()
Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)<edge_begin><edge_end>Reference Biblio Type()
Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)<edge_begin><edge_end>String()
Art Ouvrage Type(urldoi, titouv, edcom, annee, edsci, serie)<edge_begin><edge_end>Reference Biblio Type()
Art Ouvrage Type(urldoi, titouv, edcom, annee, edsci, serie)<edge_begin><edge_end>String()
Ouvrage Type(urldoi, edcom, annee, page)<edge_begin><edge_end>Reference Biblio Type()
Ouvrage Type(urldoi, edcom, annee, page)<edge_begin><edge_end>String()
These Type(orgthe, niveau, defencedate, directeur, codirecteur)<edge_begin><edge_end>Reference Biblio Type()
These Type(orgthe, niveau, defencedate, directeur, codirecteur)<edge_begin><edge_end>String()
Brevet Type(datebrevet, numbrevet, page, pays)<edge_begin><edge_end>Reference Biblio Type()
Brevet Type(datebrevet, numbrevet, page, pays)<edge_begin><edge_end>String()
Autre Type(urldoi, annee, description)<edge_begin><edge_end>Reference Biblio Type()
Autre Type(urldoi, annee, description)<edge_begin><edge_end>String()
Art Revue()<edge_begin><edge_end>Art Revue Type(urldoi, journal, volume, page, annee)
Art Journal()<edge_begin><edge_end>Art Revue Type(urldoi, journal, volume, page, annee)
Workshop()<edge_begin><edge_end>Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)
Communication()<edge_begin><edge_end>Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)
Conference()<edge_begin><edge_end>Workshop Type(urldoi, titconf, ville, pays, edcom, annee, page, edsci, serie)
Art Ouvrage()<edge_begin><edge_end>Art Ouvrage Type(urldoi, titouv, edcom, annee, edsci, serie)
Ouvrage()<edge_begin><edge_end>Ouvrage Type(urldoi, edcom, annee, page)
Brevet()<edge_begin><edge_end>Brevet Type(datebrevet, numbrevet, page, pays)
Autre()<edge_begin><edge_end>Autre Type(urldoi, annee, description)
These()<edge_begin><edge_end>These Type(orgthe, niveau, defencedate, directeur, codirecteur)
Meta Type(langue, title, comment, ref Interne, idext, is Epj, is Epl, classification, collaboration, keyword, datevisible, financement, researchteam)<edge_begin><edge_end>String()
Meta Type(langue, title, comment, ref Interne, idext, is Epj, is Epl, classification, collaboration, keyword, datevisible, financement, researchteam)<edge_begin><edge_end>Integer()
Meta Art Type(domain, abstract)<edge_begin><edge_end>Meta Type(langue, title, comment, ref Interne, idext, is Epj, is Epl, classification, collaboration, keyword, datevisible, financement, researchteam)
Meta Art Type(domain, abstract)<edge_begin><edge_end>String()
Meta Art Type(domain, abstract)<edge_begin><edge_end>Reference Biblio Type()
Meta Art Notice Type(domain, abstract)<edge_begin><edge_end>Meta Type(langue, title, comment, ref Interne, idext, is Epj, is Epl, classification, collaboration, keyword, datevisible, financement, researchteam)
Meta Art Notice Type(domain, abstract)<edge_begin><edge_end>String()
Meta Art Notice Type(domain, abstract)<edge_begin><edge_end>Reference Biblio Type()
Aut Lab Type()<edge_begin><edge_end>Auteur(nom, prenom, autre Prenom, email, url Perso)
Aut Lab Type()<edge_begin><edge_end>Laboratoire(id)
Auteur(nom, prenom, autre Prenom, email, url Perso)<edge_begin><edge_end>String()
Auteur(nom, prenom, autre Prenom, email, url Perso)<edge_begin><edge_end>Laboratoire(id)
Laboratoire(id)<edge_begin><edge_end>Integer()
Laboratoire(id)<edge_begin><edge_end>Abstract Meta Lab()
Meta Lab(id)<edge_begin><edge_end>Abstract Meta Lab()
Meta Lab(id)<edge_begin><edge_end>String()
Affiliation Type(institution, prive, ecole, universite)<edge_begin><edge_end>String()
Tampon Type(id)<edge_begin><edge_end>String()
Abstract Depot(nom)<edge_begin><edge_end>String()
Depot(format)<edge_begin><edge_end>Abstract Depot(nom)
Depot Web(format)<edge_begin><edge_end>Abstract Depot(nom)
Depots Type()<edge_begin><edge_end>Abstract Depot Type()
Depots Type()<edge_begin><edge_end>Abstract Depot(nom)
Web Link(identifiant)<edge_begin><edge_end>Abstract Depot Type()
Web Link(identifiant)<edge_begin><edge_end>String()
Web Link(identifiant)<edge_begin><edge_end>Server()
Catalog()<edge_begin><edge_end>Catalog Element(id, name, description)
Story Base()<edge_begin><edge_end>Catalog Element(id, name, description)
Story Container()<edge_begin><edge_end>Catalog Element(id, name, description)
Story Container()<edge_begin><edge_end>Story Base()
Protagonist()<edge_begin><edge_end>Story Container()
Role()<edge_begin><edge_end>Protagonist()
Role()<edge_begin><edge_end>Role()
Actor()<edge_begin><edge_end>Protagonist()
Actor()<edge_begin><edge_end>Role()
Actor()<edge_begin><edge_end>Actor()
User()<edge_begin><edge_end>Actor()
System()<edge_begin><edge_end>Actor()
Persona(picture)<edge_begin><edge_end>User()
Persona(picture)<edge_begin><edge_end>Goal(name, details)
Epic()<edge_begin><edge_end>Story Container()
Epic()<edge_begin><edge_end>Story Base()
Theme()<edge_begin><edge_end>Catalog Element(id, name, description)
Theme()<edge_begin><edge_end>Theme()
Story(goal, benefit, completed)<edge_begin><edge_end>Story Base()
Story(goal, benefit, completed)<edge_begin><edge_end>Scenario(context, action, outcome)
Story(goal, benefit, completed)<edge_begin><edge_end>Story(goal, benefit, completed)
Story(goal, benefit, completed)<edge_begin><edge_end>Theme()
Story(goal, benefit, completed)<edge_begin><edge_end>Protagonist()
Story(goal, benefit, completed)<edge_begin><edge_end>Conditional Protagonist(condition)
Story(goal, benefit, completed)<edge_begin><edge_end>Parameter(name, type, description)
Story(goal, benefit, completed)<edge_begin><edge_end>Goal(name, details)
Scenario(context, action, outcome)<edge_begin><edge_end>Catalog Element(id, name, description)
Conditional Protagonist(condition)<edge_begin><edge_end>Protagonist()
Bib Te X File()<edge_begin><edge_end>Bib Te X Entry(id)
Authored Entry()<edge_begin><edge_end>Bib Te X Entry(id)
Authored Entry()<edge_begin><edge_end>Author(author)
Dated Entry(year)<edge_begin><edge_end>Bib Te X Entry(id)
Titled Entry(title)<edge_begin><edge_end>Bib Te X Entry(id)
Book Titled Entry(booktitle)<edge_begin><edge_end>Bib Te X Entry(id)
Article(journal)<edge_begin><edge_end>Authored Entry()
Article(journal)<edge_begin><edge_end>Dated Entry(year)
Article(journal)<edge_begin><edge_end>Titled Entry(title)
Tech Report()<edge_begin><edge_end>Authored Entry()
Tech Report()<edge_begin><edge_end>Dated Entry(year)
Tech Report()<edge_begin><edge_end>Titled Entry(title)
Unpublished(note)<edge_begin><edge_end>Authored Entry()
Unpublished(note)<edge_begin><edge_end>Titled Entry(title)
Manual()<edge_begin><edge_end>Titled Entry(title)
Proceedings()<edge_begin><edge_end>Dated Entry(year)
Proceedings()<edge_begin><edge_end>Titled Entry(title)
In Proceedings()<edge_begin><edge_end>Proceedings()
In Proceedings()<edge_begin><edge_end>Authored Entry()
In Proceedings()<edge_begin><edge_end>Book Titled Entry(booktitle)
Booklet()<edge_begin><edge_end>Dated Entry(year)
Book(publisher)<edge_begin><edge_end>Authored Entry()
Book(publisher)<edge_begin><edge_end>Dated Entry(year)
Book(publisher)<edge_begin><edge_end>Titled Entry(title)
In Collection()<edge_begin><edge_end>Book(publisher)
In Collection()<edge_begin><edge_end>Book Titled Entry(booktitle)
In Book(chapter)<edge_begin><edge_end>Book(publisher)
Misc()<edge_begin><edge_end>Bib Te X Entry(id)
Thesis Entry(school)<edge_begin><edge_end>Authored Entry()
Thesis Entry(school)<edge_begin><edge_end>Dated Entry(year)
Thesis Entry(school)<edge_begin><edge_end>Titled Entry(title)
Ph D Thesis()<edge_begin><edge_end>Thesis Entry(school)
Master Thesis()<edge_begin><edge_end>Thesis Entry(school)
State Machine Root()<edge_begin><edge_end>State Machine(name)
State Machine(name)<edge_begin><edge_end>Transition(description)
State Machine(name)<edge_begin><edge_end>State()
State Machine(name)<edge_begin><edge_end>State Machine Root()
State Machine(name)<edge_begin><edge_end>Action(value)
State()<edge_begin><edge_end>State Vertex()
State()<edge_begin><edge_end>State Machine(name)
State()<edge_begin><edge_end>Transition(description)
State()<edge_begin><edge_end>Event(name)
State()<edge_begin><edge_end>State Action()
Composite State(is Concurrent)<edge_begin><edge_end>State()
Composite State(is Concurrent)<edge_begin><edge_end>State Vertex()
Action(value)<edge_begin><edge_end>State Machine(name)
Transition(description)<edge_begin><edge_end>State Machine(name)
Transition(description)<edge_begin><edge_end>State()
Transition(description)<edge_begin><edge_end>Event(name)
Transition(description)<edge_begin><edge_end>Guard(expression)
Transition(description)<edge_begin><edge_end>Transition Action()
Transition(description)<edge_begin><edge_end>State Vertex()
Event(name)<edge_begin><edge_end>Transition(description)
Guard(expression)<edge_begin><edge_end>Transition(description)
Transition Action()<edge_begin><edge_end>Action(value)
Transition Action()<edge_begin><edge_end>Transition(description)
State Vertex()<edge_begin><edge_end>Composite State(is Concurrent)
State Vertex()<edge_begin><edge_end>Transition(description)
State Vertex()<edge_begin><edge_end>Label(name)
State Action()<edge_begin><edge_end>Action(value)
State Action()<edge_begin><edge_end>State()
DO()<edge_begin><edge_end>State Action()
ENTRY()<edge_begin><edge_end>State Action()
EXIT()<edge_begin><edge_end>State Action()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Thing()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Inforamtion()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Document()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Account()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Event(starts on, ends on)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Activity()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Conference document()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>String()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Organization()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on)
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Conference Member()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Conference Member()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Paper(paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(paper ID, title)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Author()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Author()<edge_begin><edge_end>Paper(paper ID, title)
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Administrator()<edge_begin><edge_end>Event(starts on, ends on)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Event(starts on, ends on)<edge_begin><edge_end>Thing()
Event(starts on, ends on)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on)<edge_begin><edge_end>Administrator()
Event(starts on, ends on)<edge_begin><edge_end>String()
Account()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Symposium()<edge_begin><edge_end>Event(starts on, ends on)
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on)
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on)
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity()
Activity()<edge_begin><edge_end>Thing()
Activity()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity()
Registration()<edge_begin><edge_end>Activity()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Research Topic()<edge_begin><edge_end>Event Setup()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Committee member()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Track()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on)
Workshop()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Working event()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer()
Review()<edge_begin><edge_end>Reviewed contribution()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>paper(full paper size)
paper(full paper size)<edge_begin><edge_end>article()
paper(full paper size)<edge_begin><edge_end>Integer()
paper(full paper size)<edge_begin><edge_end>human(e-mail, last name, first name)
Rejected Paper()<edge_begin><edge_end>paper(full paper size)
Undecided Paper()<edge_begin><edge_end>paper(full paper size)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>activity()
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
article()<edge_begin><edge_end>activity()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
conference()<edge_begin><edge_end>Thing()
conference()<edge_begin><edge_end>phase of conference()
bidding of reviewer()<edge_begin><edge_end>activity()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>activity()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>intensity()
activity()<edge_begin><edge_end>article()
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>activity()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>activity()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>activity()
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>activity()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>activity()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
review()<edge_begin><edge_end>article()
review()<edge_begin><edge_end>classification()
review()<edge_begin><edge_end>activity()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>activity()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>activity()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social event()
Social event()<edge_begin><edge_end>Event(starts on, ends on)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
University()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Working event()<edge_begin><edge_end>Event(starts on, ends on)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member()<edge_begin><edge_end>Participant(early Registration)
Participant(early Registration)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Student()<edge_begin><edge_end>Participant(early Registration)
Science Worker()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Assistant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Volunteer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Regular()<edge_begin><edge_end>Participant(early Registration)
Project()<edge_begin><edge_end>Xmlns(name, value)
Project()<edge_begin><edge_end>Goal(name)
Project()<edge_begin><edge_end>Path(id, refid)
Project()<edge_begin><edge_end>Ant Property()
Project()<edge_begin><edge_end>Ant Task Def(name, classname)
Project()<edge_begin><edge_end>Pre Post Goal()
Ant Property()<edge_begin><edge_end>Contents Goal()
Ant Property Name(name)<edge_begin><edge_end>Ant Property()
Ant Property Value(value)<edge_begin><edge_end>Ant Property Name(name)
Ant Property Location(location)<edge_begin><edge_end>Ant Property Name(name)
Ant Property File(file)<edge_begin><edge_end>Ant Property()
Ant Property Env(environment)<edge_begin><edge_end>Ant Property()
Jelly Command()<edge_begin><edge_end>Contents Goal()
Jelly Set(var, value)<edge_begin><edge_end>Jelly Command()
Abstract Goal()<edge_begin><edge_end>Contents Goal()
Attain Goal()<edge_begin><edge_end>Contents Goal()
Attain Goal()<edge_begin><edge_end>Goal(name)
Pre Post Goal()<edge_begin><edge_end>Abstract Goal()
Pre Goal()<edge_begin><edge_end>Pre Post Goal()
Pre Goal()<edge_begin><edge_end>Goal(name)
Post Goal()<edge_begin><edge_end>Pre Post Goal()
Post Goal()<edge_begin><edge_end>Goal(name)
Goal(name)<edge_begin><edge_end>Abstract Goal()
Goal(name)<edge_begin><edge_end>Pre Goal()
Goal(name)<edge_begin><edge_end>Post Goal()
Basic()<edge_begin><edge_end>Pattern()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File List(dir, files)<edge_begin><edge_end>Basic()
Filter(token, value)<edge_begin><edge_end>Basic()
Filters File(file)<edge_begin><edge_end>Basic()
Path Element(path, location)<edge_begin><edge_end>Basic()
Set()<edge_begin><edge_end>Pattern()
Pattern Set()<edge_begin><edge_end>Set()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Set(dir)<edge_begin><edge_end>Set()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File Set(dir)<edge_begin><edge_end>Includes()
File Set(dir)<edge_begin><edge_end>Excludes()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Path(id, refid)<edge_begin><edge_end>Set()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Task()<edge_begin><edge_end>Contents Goal()
Ant Task Def(name, classname)<edge_begin><edge_end>Contents Goal()
New Task()<edge_begin><edge_end>Task()
New Task()<edge_begin><edge_end>Ant Task Def(name, classname)
New Task()<edge_begin><edge_end>Attribut(name, value)
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Java(classname, jar, fork)<edge_begin><edge_end>Execution Task()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mkdir(dir)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Trace()<edge_begin><edge_end>Petrinetv3 Net Initialize()
Trace()<edge_begin><edge_end>Petrinetv3 Net Run()
Trace()<edge_begin><edge_end>Petrinetv3 Net Tick Enabled Transitions()
Trace()<edge_begin><edge_end>Petrinetv3 Transition Fire()
Trace()<edge_begin><edge_end>Traced Place()
Trace()<edge_begin><edge_end>Traced Token()
Trace()<edge_begin><edge_end>Traced Transition()
Trace()<edge_begin><edge_end>Step()
Trace()<edge_begin><edge_end>State()
Big Step()<edge_begin><edge_end>Step()
Petrinetv3 Net Initialize()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Petrinetv3 Net Initialize()<edge_begin><edge_end>Small Step()
Petrinetv3 Net Run()<edge_begin><edge_end>Big Step()
Petrinetv3 Net Run()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Petrinetv3 Net Run Implicit Step()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Petrinetv3 Net Run Implicit Step()<edge_begin><edge_end>Small Step()
Petrinetv3 Net Tick Enabled Transitions()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Petrinetv3 Net Tick Enabled Transitions()<edge_begin><edge_end>Small Step()
Petrinetv3 Transition Fire()<edge_begin><edge_end>Petrinetv3 Net Run Abstract Sub Step()
Petrinetv3 Transition Fire()<edge_begin><edge_end>Small Step()
Root Implicit Step()<edge_begin><edge_end>Small Step()
Small Step()<edge_begin><edge_end>Step()
Step()<edge_begin><edge_end>State()
Place tokens Value()<edge_begin><edge_end>Traced Place()
Place tokens Value()<edge_begin><edge_end>State()
Place tokens Value()<edge_begin><edge_end>Traced Token()
State()<edge_begin><edge_end>Step()
State()<edge_begin><edge_end>Place tokens Value()
State()<edge_begin><edge_end>Transition clock Value(clock)
Transition clock Value(clock)<edge_begin><edge_end>Traced Transition()
Transition clock Value(clock)<edge_begin><edge_end>State()
Traced Place()<edge_begin><edge_end>Place tokens Value()
Traced Transition()<edge_begin><edge_end>Transition clock Value(clock)
Traced Transition()<edge_begin><edge_end>Traced Place()
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Attribute(default)<edge_begin><edge_end>Structural Component(name)
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Base Table()<edge_begin><edge_end>Table(name)
Behavioural Component(name, body)<edge_begin><edge_end>Schema(name)
Behavioural Component(name, body)<edge_begin><edge_end>Parameter With Mode(mode)
Binary String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Boolean Type(descriptor)<edge_begin><edge_end>Predefined Type()
Character String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Collection Type()<edge_begin><edge_end>Constructed Type(name)
Collection Type()<edge_begin><edge_end>Collection Type()
Collection Type()<edge_begin><edge_end>Data Type()
Column(default)<edge_begin><edge_end>Structural Component(name)
Column(default)<edge_begin><edge_end>Table(name)
Column Constraint()<edge_begin><edge_end>Restriction()
Constructed Type(name)<edge_begin><edge_end>Data Type()
Data Type()<edge_begin><edge_end>Schema(name)
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Datetime Type(descriptor)<edge_begin><edge_end>Predefined Type()
Derived Table(query expression)<edge_begin><edge_end>Table(name)
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Distinct Type()<edge_begin><edge_end>Predefined Type()
Distinct Type()<edge_begin><edge_end>Feature()
Field()<edge_begin><edge_end>Structural Component(name)
Field()<edge_begin><edge_end>ROW()
Function()<edge_begin><edge_end>Behavioural Component(name, body)
Function()<edge_begin><edge_end>Data Type()
Interval Feature(key, value)<edge_begin><edge_end>Feature()
Interval Type(descriptor)<edge_begin><edge_end>Predefined Type()
MULTISET()<edge_begin><edge_end>Collection Type()
Method(name, body)<edge_begin><edge_end>Method(name, body)
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Method(name, body)<edge_begin><edge_end>Data Type()
Method(name, body)<edge_begin><edge_end>Method Parameter()
Method Parameter()<edge_begin><edge_end>Parameter(name)
Method Parameter()<edge_begin><edge_end>Method(name, body)
Not Null()<edge_begin><edge_end>Column Constraint()
Numeric Feature(key, value)<edge_begin><edge_end>Feature()
Numeric Type(descriptor)<edge_begin><edge_end>Predefined Type()
Parameter(name)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Predefined Type()<edge_begin><edge_end>Data Type()
Predefined Type()<edge_begin><edge_end>Distinct Type()
Primary Key()<edge_begin><edge_end>Unique Constraint()
Procedure()<edge_begin><edge_end>Behavioural Component(name, body)
ROW()<edge_begin><edge_end>Constructed Type(name)
ROW()<edge_begin><edge_end>ROW()
ROW()<edge_begin><edge_end>Field()
Reference Type()<edge_begin><edge_end>Constructed Type(name)
Reference Type()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Unique Constraint()
Restriction()<edge_begin><edge_end>Table(name)
Restriction()<edge_begin><edge_end>Structural Component(name)
Schema(name)<edge_begin><edge_end>Behavioural Component(name, body)
Schema(name)<edge_begin><edge_end>Data Type()
Schema(name)<edge_begin><edge_end>Table(name)
String Feature(key, value)<edge_begin><edge_end>Feature()
Structural Component(name)<edge_begin><edge_end>Data Type()
Structural Component(name)<edge_begin><edge_end>View()
Structural Component(name)<edge_begin><edge_end>Restriction()
Structural Component(name)<edge_begin><edge_end>Feature()
Structured Type(is final, is instantiable)<edge_begin><edge_end>User Defined Type(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Attribute(default)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Table(name)<edge_begin><edge_end>Schema(name)
Table(name)<edge_begin><edge_end>Column(default)
Table(name)<edge_begin><edge_end>View()
Table(name)<edge_begin><edge_end>Trigger(name, event, action Time, triggered Action)
Table(name)<edge_begin><edge_end>Restriction()
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Table Constraint(name)<edge_begin><edge_end>Restriction()
Trigger(name, event, action Time, triggered Action)<edge_begin><edge_end>Table(name)
Trigger(name, event, action Time, triggered Action)<edge_begin><edge_end>Structural Component(name)
Typed Table()<edge_begin><edge_end>Base Table()
Typed Table()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Typed Table()<edge_begin><edge_end>Typed Table()
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
User Defined Type(name)<edge_begin><edge_end>Data Type()
View()<edge_begin><edge_end>Derived Table(query expression)
View()<edge_begin><edge_end>Table(name)
View()<edge_begin><edge_end>Structural Component(name)
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
Named Element(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Named Element(name)<edge_begin><edge_end>String()
Database()<edge_begin><edge_end>Named Element(name)
Database()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Database()
Table()<edge_begin><edge_end>Foreign Key()
Table()<edge_begin><edge_end>Table Element()
Table()<edge_begin><edge_end>Parameter()
Table Element()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Table Element()<edge_begin><edge_end>Table()
Column(name, can Be Null)<edge_begin><edge_end>Table Element()
Column(name, can Be Null)<edge_begin><edge_end>Foreign Key()
Column(name, can Be Null)<edge_begin><edge_end>String()
Column(name, can Be Null)<edge_begin><edge_end>Type(length, is Unsigned)
Column(name, can Be Null)<edge_begin><edge_end>Boolean()
Column(name, can Be Null)<edge_begin><edge_end>Value()
Column(name, can Be Null)<edge_begin><edge_end>Key(is Unique, name)
Key(is Unique, name)<edge_begin><edge_end>Table Element()
Key(is Unique, name)<edge_begin><edge_end>Boolean()
Key(is Unique, name)<edge_begin><edge_end>String()
Key(is Unique, name)<edge_begin><edge_end>Column(name, can Be Null)
Simple Key()<edge_begin><edge_end>Key(is Unique, name)
Primary Key()<edge_begin><edge_end>Key(is Unique, name)
Foreign Key()<edge_begin><edge_end>Key(is Unique, name)
Foreign Key()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>Column(name, can Be Null)
Type(length, is Unsigned)<edge_begin><edge_end>Named Element(name)
Type(length, is Unsigned)<edge_begin><edge_end>Integer()
Type(length, is Unsigned)<edge_begin><edge_end>Boolean()
Parameter()<edge_begin><edge_end>Named Element(name)
Parameter()<edge_begin><edge_end>Table()
Parameter()<edge_begin><edge_end>Value()
Value()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Integer Val(value)<edge_begin><edge_end>Value()
Integer Val(value)<edge_begin><edge_end>Integer()
Null Val()<edge_begin><edge_end>Value()
String Val(value)<edge_begin><edge_end>Value()
String Val(value)<edge_begin><edge_end>String()
State Machine()<edge_begin><edge_end>Abstract State()
State Machine()<edge_begin><edge_end>Resource Import(import URI)
State Machine()<edge_begin><edge_end>State(name)
State(name)<edge_begin><edge_end>Abstract State()
State(name)<edge_begin><edge_end>Initial Transition()
Initial Transition()<edge_begin><edge_end>Action()
Abstract State()<edge_begin><edge_end>State(name)
Abstract State()<edge_begin><edge_end>Abstract Transition()
Abstract State()<edge_begin><edge_end>Var Def(name)
Abstract Transition()<edge_begin><edge_end>Event()
Abstract Transition()<edge_begin><edge_end>Condition(script)
Abstract Transition()<edge_begin><edge_end>Action()
Transition()<edge_begin><edge_end>Abstract Transition()
Transition()<edge_begin><edge_end>State(name)
Internal Transition()<edge_begin><edge_end>Abstract Transition()
Symbolic Event(name)<edge_begin><edge_end>Event()
Abstract Transition Event()<edge_begin><edge_end>Event()
Transition Event()<edge_begin><edge_end>Abstract Transition Event()
Transition Event()<edge_begin><edge_end>State(name)
Enter Event()<edge_begin><edge_end>Abstract Transition Event()
Exit Event()<edge_begin><edge_end>Abstract Transition Event()
Script Event(script)<edge_begin><edge_end>Event()
Timer Event()<edge_begin><edge_end>Event()
Timer Event()<edge_begin><edge_end>Expression()
Symbolic Action(name)<edge_begin><edge_end>Action()
Symbolic Action(name)<edge_begin><edge_end>Expression()
Script Action(script)<edge_begin><edge_end>Action()
Var Def(name)<edge_begin><edge_end>Typed(many)
Var Def(name)<edge_begin><edge_end>Expression()
Assignment Action()<edge_begin><edge_end>Action()
Assignment Action()<edge_begin><edge_end>Var Def(name)
Assignment Action()<edge_begin><edge_end>Expression()
Var Ref()<edge_begin><edge_end>Expression()
Var Ref()<edge_begin><edge_end>Var Def(name)
E Path()<edge_begin><edge_end>Expression()
E Path()<edge_begin><edge_end>Var Ref()
E Path()<edge_begin><edge_end>E Step(feature Name)
E Step(feature Name)<edge_begin><edge_end>E Step Filter(free Var Name)
E Step Filter(free Var Name)<edge_begin><edge_end>Script Expression(script)
Literal()<edge_begin><edge_end>Expression()
Boolean Literal(boolean Value)<edge_begin><edge_end>Literal()
Int Literal(int Value)<edge_begin><edge_end>Literal()
Float Literal(float Value)<edge_begin><edge_end>Literal()
String Literal(string Value)<edge_begin><edge_end>Literal()
Script Expression(script)<edge_begin><edge_end>Expression()
Abstract Uri Literal(uri)<edge_begin><edge_end>Literal()
Abstract Uri Literal(uri)<edge_begin><edge_end>EURI()
Uri Literal(uri Value)<edge_begin><edge_end>Abstract Uri Literal(uri)
Uri Literal(uri Value)<edge_begin><edge_end>EURI()
Resource Uri Literal(resource Uri)<edge_begin><edge_end>Abstract Uri Literal(uri)
Resource Uri Literal(resource Uri)<edge_begin><edge_end>EURI()
E Object Uri Literal(uri Fragment)<edge_begin><edge_end>Resource Uri Literal(resource Uri)
Delay Literal(time Unit)<edge_begin><edge_end>Int Literal(int Value)
Domain Model Import()<edge_begin><edge_end>Resource Import(import URI)
Domain Data Import()<edge_begin><edge_end>Resource Import(import URI)
State Machine()<edge_begin><edge_end>Named Element(name)
State Machine()<edge_begin><edge_end>Region()
Region()<edge_begin><edge_end>Named Element(name)
Region()<edge_begin><edge_end>Abstract State()
Region()<edge_begin><edge_end>Transition()
Region()<edge_begin><edge_end>State()
Abstract State()<edge_begin><edge_end>Named Element(name)
Abstract State()<edge_begin><edge_end>Transition()
Abstract State()<edge_begin><edge_end>Region()
State()<edge_begin><edge_end>Abstract State()
State()<edge_begin><edge_end>Program()
State()<edge_begin><edge_end>Region()
Transition()<edge_begin><edge_end>Named Element(name)
Transition()<edge_begin><edge_end>Trigger(expression)
Transition()<edge_begin><edge_end>Abstract State()
Transition()<edge_begin><edge_end>Statement()
Transition()<edge_begin><edge_end>Constraint()
Pseudostate()<edge_begin><edge_end>Abstract State()
Initial State()<edge_begin><edge_end>Pseudostate()
Fork()<edge_begin><edge_end>Pseudostate()
Join()<edge_begin><edge_end>Pseudostate()
Shallow History()<edge_begin><edge_end>Pseudostate()
Junction()<edge_begin><edge_end>Pseudostate()
Conditional()<edge_begin><edge_end>Pseudostate()
Final State()<edge_begin><edge_end>State()
Program()<edge_begin><edge_end>Statement()
Requirement(identifier, name, priority, is Mandatory)<edge_begin><edge_end>Description()
Requirement(identifier, name, priority, is Mandatory)<edge_begin><edge_end>Person(name)
Requirement(identifier, name, priority, is Mandatory)<edge_begin><edge_end>Dependency()
Category(name)<edge_begin><edge_end>Category(name)
Category(name)<edge_begin><edge_end>Person(name)
Category(name)<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Textual Description(description)<edge_begin><edge_end>Description()
Quality Requirement()<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Functional Requirement()<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Person(name)<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Person(name)<edge_begin><edge_end>Category(name)
Simple Dependency(comment)<edge_begin><edge_end>Dependency()
Simple Dependency(comment)<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Refines()<edge_begin><edge_end>Simple Dependency(comment)
I Cost()<edge_begin><edge_end>Simple Dependency(comment)
C Value()<edge_begin><edge_end>Simple Dependency(comment)
Requires()<edge_begin><edge_end>Dependency()
Requires()<edge_begin><edge_end>Argument()
Binary Operator Argument(operator)<edge_begin><edge_end>Argument()
Requirement Argument()<edge_begin><edge_end>Argument()
Requirement Argument()<edge_begin><edge_end>Requirement(identifier, name, priority, is Mandatory)
Document Root(name)<edge_begin><edge_end>Category(name)
Document Root(name)<edge_begin><edge_end>Person(name)
NOT Operator()<edge_begin><edge_end>Argument()
String()<edge_begin><edge_end>Data Type()
Boolean()<edge_begin><edge_end>Data Type()
Real()<edge_begin><edge_end>Data Type()
Date()<edge_begin><edge_end>Data Type()
Time Stamp()<edge_begin><edge_end>Date()
Integer()<edge_begin><edge_end>Data Type()
Float()<edge_begin><edge_end>Data Type()
Double()<edge_begin><edge_end>Data Type()
Select Expression()<edge_begin><edge_end>Select Parameter()
Select Expression()<edge_begin><edge_end>Column Expression()
Select Expression()<edge_begin><edge_end>From Expression()
Select Expression()<edge_begin><edge_end>Where Expression()
Select Expression()<edge_begin><edge_end>Group By Expression()
Select Expression()<edge_begin><edge_end>Having Expression()
Select Expression()<edge_begin><edge_end>Set Expression()
Select Expression()<edge_begin><edge_end>Order By Expression()
Select Expression()<edge_begin><edge_end>Limit Expression(limit, offset)
Select Parameter All()<edge_begin><edge_end>Select Parameter()
Select Parameter Distinct()<edge_begin><edge_end>Select Parameter()
Column Expression()<edge_begin><edge_end>Single Column Expression(alias)
Single Column Expression(alias)<edge_begin><edge_end>Expression()
Single Column Expression(alias)<edge_begin><edge_end>Column Operation()
Single Column Expression(alias)<edge_begin><edge_end>Select Parameter()
Column Operation Count()<edge_begin><edge_end>Column Operation()
Column Operation Min()<edge_begin><edge_end>Column Operation()
Column Operation Max()<edge_begin><edge_end>Column Operation()
Column Operation Sum()<edge_begin><edge_end>Column Operation()
Column Operation Avg()<edge_begin><edge_end>Column Operation()
Column Operation Every()<edge_begin><edge_end>Column Operation()
Column Operation Some()<edge_begin><edge_end>Column Operation()
From Expression()<edge_begin><edge_end>Table List Expression()
Table Expression(label)<edge_begin><edge_end>Select Expression()
Table Expression(label)<edge_begin><edge_end>Table(name)
Table List Expression()<edge_begin><edge_end>Table Expression(label)
Table List Expression()<edge_begin><edge_end>Join Table Expression()
Join Table Expression()<edge_begin><edge_end>Join Operation()
Join Table Expression()<edge_begin><edge_end>Table Expression(label)
Join Table Expression()<edge_begin><edge_end>Expression()
Join Operation Inner()<edge_begin><edge_end>Join Operation()
Join Operation Left()<edge_begin><edge_end>Join Operation()
Join Operation Right()<edge_begin><edge_end>Join Operation()
Join Operation Outer()<edge_begin><edge_end>Join Operation()
Where Expression()<edge_begin><edge_end>Expression()
Order By Expression()<edge_begin><edge_end>Order By Parameter()
Order By Column Expression()<edge_begin><edge_end>Order By Expression()
Order By Column Expression()<edge_begin><edge_end>Column(name)
Order By Alias Expression(alias)<edge_begin><edge_end>Order By Expression()
Order By Select Expression()<edge_begin><edge_end>Order By Expression()
Order By Select Expression()<edge_begin><edge_end>Select Expression()
Order By Parameter Asc()<edge_begin><edge_end>Order By Parameter()
Order By Parameter Desc()<edge_begin><edge_end>Order By Parameter()
Group By Expression()<edge_begin><edge_end>Expression()
Having Expression()<edge_begin><edge_end>Expression()
Set Expression()<edge_begin><edge_end>Select Expression()
Set Expression()<edge_begin><edge_end>Set Operation()
Set Operation Union()<edge_begin><edge_end>Set Operation()
Set Operation Union()<edge_begin><edge_end>Select Parameter()
Set Operation Minus()<edge_begin><edge_end>Set Operation()
Set Operation Minus()<edge_begin><edge_end>Select Parameter Distinct()
Set Operation Except()<edge_begin><edge_end>Set Operation()
Set Operation Except()<edge_begin><edge_end>Select Parameter Distinct()
Set Operation Intersect()<edge_begin><edge_end>Set Operation()
Set Operation Intersect()<edge_begin><edge_end>Select Parameter Distinct()
Simple Expression()<edge_begin><edge_end>Expression()
Simple Expression()<edge_begin><edge_end>And Or Expression Operation()
Simple Expression()<edge_begin><edge_end>Condition()
Simple Expression()<edge_begin><edge_end>Expression Operation Not()
And Or Expression Operation()<edge_begin><edge_end>Expression Operation()
Expression Operation Not()<edge_begin><edge_end>Expression Operation()
Expression Operation And()<edge_begin><edge_end>And Or Expression Operation()
Expression Operation Or()<edge_begin><edge_end>And Or Expression Operation()
Simple Condition()<edge_begin><edge_end>Condition()
Simple Condition()<edge_begin><edge_end>Value()
Operation Condition()<edge_begin><edge_end>Simple Condition()
Operation Condition()<edge_begin><edge_end>Condition Operation()
Is Null Condition()<edge_begin><edge_end>Simple Condition()
Is Null Condition()<edge_begin><edge_end>Expression Operation Not()
Exists Condition()<edge_begin><edge_end>Simple Condition()
Exists Condition()<edge_begin><edge_end>Select Expression()
Between Condition()<edge_begin><edge_end>Simple Condition()
In Condition()<edge_begin><edge_end>Simple Condition()
In Condition()<edge_begin><edge_end>Select Expression()
In Condition()<edge_begin><edge_end>Expression Operation Not()
Like Condition()<edge_begin><edge_end>Simple Condition()
Like Condition()<edge_begin><edge_end>Expression Operation Not()
Condition Operation Equal()<edge_begin><edge_end>Condition Operation()
Condition Operation Lesser()<edge_begin><edge_end>Condition Operation()
Condition Operation Less Equal()<edge_begin><edge_end>Condition Operation()
Condition Operation Greater()<edge_begin><edge_end>Condition Operation()
Condition Operation Great Equal()<edge_begin><edge_end>Condition Operation()
Condition Operation Un Equal()<edge_begin><edge_end>Condition Operation()
Condition Operation Un Equal2()<edge_begin><edge_end>Condition Operation()
Value Front Operation()<edge_begin><edge_end>Value Operation()
Value Front Operation Plus()<edge_begin><edge_end>Value Front Operation()
Value Front Operation Minus()<edge_begin><edge_end>Value Front Operation()
Value Operation Multiply()<edge_begin><edge_end>Value Operation()
Value Operation Divide()<edge_begin><edge_end>Value Operation()
Value Operation Parallel()<edge_begin><edge_end>Value Operation()
Simple Value()<edge_begin><edge_end>Value()
Simple Value()<edge_begin><edge_end>Term()
Simple Value()<edge_begin><edge_end>Value Operation()
Simple Value()<edge_begin><edge_end>Value Front Operation()
Condition Value()<edge_begin><edge_end>Value()
Condition Value()<edge_begin><edge_end>Condition()
Function Value(function Name)<edge_begin><edge_end>Value()
Boolean Term()<edge_begin><edge_end>Term()
Boolean Term True()<edge_begin><edge_end>Boolean Term()
Boolean Term False()<edge_begin><edge_end>Boolean Term()
Null Term()<edge_begin><edge_end>Term()
Column Term()<edge_begin><edge_end>Term()
Column Term()<edge_begin><edge_end>Table(name)
Column Term()<edge_begin><edge_end>Column(name)
Simple Term(value)<edge_begin><edge_end>Term()
Simple Term String()<edge_begin><edge_end>Simple Term(value)
Simple Term Float()<edge_begin><edge_end>Simple Term(value)
Simple Term Integer()<edge_begin><edge_end>Simple Term(value)
Simple Term Char()<edge_begin><edge_end>Simple Term(value)
Count Star Term()<edge_begin><edge_end>Term()
Star Term()<edge_begin><edge_end>Term()
Requirement Project()<edge_begin><edge_end>Identified Element(identifier, short Description)
Requirement Project()<edge_begin><edge_end>Hierarchical Element(next Req Index)
Requirement Project()<edge_begin><edge_end>Attribute Configuration()
Requirement Project()<edge_begin><edge_end>Special Chapter()
Requirement Project()<edge_begin><edge_end>Upstream Model()
Hierarchical Element(next Req Index)<edge_begin><edge_end>Identified Element(identifier, short Description)
Hierarchical Element(next Req Index)<edge_begin><edge_end>Hierarchical Element(next Req Index)
Hierarchical Element(next Req Index)<edge_begin><edge_end>Requirement(external Resources)
Current Requirement(impacted)<edge_begin><edge_end>Requirement(external Resources)
Attribute Configuration()<edge_begin><edge_end>Configurated Attribute(name, type)
Configurated Attribute(name, type)<edge_begin><edge_end>Default Attribute Value()
Configurated Attribute(name, type)<edge_begin><edge_end>Attribute Value(value)
Default Attribute Value()<edge_begin><edge_end>Attribute Value(value)
Special Chapter()<edge_begin><edge_end>Hierarchical Element(next Req Index)
Special Chapter()<edge_begin><edge_end>Requirement(external Resources)
Text Attribute(value)<edge_begin><edge_end>Attribute(name)
Object Attribute()<edge_begin><edge_end>Attribute(name)
Attribute Link(partial)<edge_begin><edge_end>Object Attribute()
Attribute Allocate()<edge_begin><edge_end>Object Attribute()
Untraced Chapter()<edge_begin><edge_end>Special Chapter()
Problem Chapter()<edge_begin><edge_end>Special Chapter()
Trash Chapter()<edge_begin><edge_end>Special Chapter()
Requirement(external Resources)<edge_begin><edge_end>Identified Element(identifier, short Description)
Requirement(external Resources)<edge_begin><edge_end>Attribute(name)
Anonymous Requirement()<edge_begin><edge_end>Requirement(external Resources)
Deleted Chapter()<edge_begin><edge_end>Special Chapter()
Element(name)<edge_begin><edge_end>String()
Petri Net()<edge_begin><edge_end>Element(name)
Petri Net()<edge_begin><edge_end>Place()
Petri Net()<edge_begin><edge_end>Transition()
Petri Net()<edge_begin><edge_end>Arc(weight)
Place()<edge_begin><edge_end>Element(name)
Place()<edge_begin><edge_end>Trans To Place Arc()
Place()<edge_begin><edge_end>Place To Trans Arc()
Transition()<edge_begin><edge_end>Element(name)
Transition()<edge_begin><edge_end>Place To Trans Arc()
Transition()<edge_begin><edge_end>Trans To Place Arc()
Arc(weight)<edge_begin><edge_end>Integer()
Place To Trans Arc()<edge_begin><edge_end>Arc(weight)
Place To Trans Arc()<edge_begin><edge_end>Place()
Place To Trans Arc()<edge_begin><edge_end>Transition()
Trans To Place Arc()<edge_begin><edge_end>Arc(weight)
Trans To Place Arc()<edge_begin><edge_end>Transition()
Trans To Place Arc()<edge_begin><edge_end>Place()
ARRAY(num elements)<edge_begin><edge_end>Collection Type()
Attribute(default)<edge_begin><edge_end>Structural Component(name)
Attribute(default)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Base Table()<edge_begin><edge_end>Table(name)
Behavioural Component(name, body)<edge_begin><edge_end>Schema(name)
Behavioural Component(name, body)<edge_begin><edge_end>Parameter With Mode(mode)
Binary String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Boolean Type(descriptor)<edge_begin><edge_end>Predefined Type()
Character String Type(descriptor, length def)<edge_begin><edge_end>Predefined Type()
Collection Type()<edge_begin><edge_end>Constructed Type(name)
Collection Type()<edge_begin><edge_end>Collection Type()
Collection Type()<edge_begin><edge_end>Data Type()
Column(default)<edge_begin><edge_end>Structural Component(name)
Column(default)<edge_begin><edge_end>Table(name)
Column Constraint()<edge_begin><edge_end>Restriction()
Constructed Type(name)<edge_begin><edge_end>Data Type()
Data Type()<edge_begin><edge_end>Schema(name)
Datetime Feature(key, value)<edge_begin><edge_end>Feature()
Datetime Type(descriptor)<edge_begin><edge_end>Predefined Type()
Derived Table(query expression)<edge_begin><edge_end>Table(name)
Distinct Type()<edge_begin><edge_end>User Defined Type(name)
Distinct Type()<edge_begin><edge_end>Predefined Type()
Distinct Type()<edge_begin><edge_end>Feature()
Field()<edge_begin><edge_end>Structural Component(name)
Field()<edge_begin><edge_end>ROW()
Function()<edge_begin><edge_end>Behavioural Component(name, body)
Function()<edge_begin><edge_end>Data Type()
Interval Feature(key, value)<edge_begin><edge_end>Feature()
Interval Type(descriptor)<edge_begin><edge_end>Predefined Type()
MULTISET()<edge_begin><edge_end>Collection Type()
Method(name, body)<edge_begin><edge_end>Method(name, body)
Method(name, body)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Method(name, body)<edge_begin><edge_end>Data Type()
Method(name, body)<edge_begin><edge_end>Method Parameter()
Method Parameter()<edge_begin><edge_end>Parameter(name)
Method Parameter()<edge_begin><edge_end>Method(name, body)
Not Null()<edge_begin><edge_end>Column Constraint()
Numeric Feature(key, value)<edge_begin><edge_end>Feature()
Numeric Type(descriptor)<edge_begin><edge_end>Predefined Type()
Parameter(name)<edge_begin><edge_end>Data Type()
Parameter With Mode(mode)<edge_begin><edge_end>Parameter(name)
Parameter With Mode(mode)<edge_begin><edge_end>Behavioural Component(name, body)
Predefined Type()<edge_begin><edge_end>Data Type()
Predefined Type()<edge_begin><edge_end>Distinct Type()
Primary Key()<edge_begin><edge_end>Unique Constraint()
Procedure()<edge_begin><edge_end>Behavioural Component(name, body)
ROW()<edge_begin><edge_end>Constructed Type(name)
ROW()<edge_begin><edge_end>ROW()
ROW()<edge_begin><edge_end>Field()
Reference Type()<edge_begin><edge_end>Constructed Type(name)
Reference Type()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Table Constraint(name)
Referential Constraint(delete action, update action, match)<edge_begin><edge_end>Unique Constraint()
Restriction()<edge_begin><edge_end>Table(name)
Restriction()<edge_begin><edge_end>Structural Component(name)
Schema(name)<edge_begin><edge_end>Behavioural Component(name, body)
Schema(name)<edge_begin><edge_end>Data Type()
Schema(name)<edge_begin><edge_end>Table(name)
String Feature(key, value)<edge_begin><edge_end>Feature()
Structural Component(name)<edge_begin><edge_end>Data Type()
Structural Component(name)<edge_begin><edge_end>View()
Structural Component(name)<edge_begin><edge_end>Restriction()
Structural Component(name)<edge_begin><edge_end>Feature()
Structured Type(is final, is instantiable)<edge_begin><edge_end>User Defined Type(name)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Structured Type(is final, is instantiable)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Attribute(default)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Method(name, body)
Structured Type(is final, is instantiable)<edge_begin><edge_end>Typed Table()
Table(name)<edge_begin><edge_end>Schema(name)
Table(name)<edge_begin><edge_end>Column(default)
Table(name)<edge_begin><edge_end>View()
Table(name)<edge_begin><edge_end>Restriction()
Table Check Constraint(expression)<edge_begin><edge_end>Table Constraint(name)
Table Constraint(name)<edge_begin><edge_end>Restriction()
Trigger(name)<edge_begin><edge_end>Restriction()
Trigger(name)<edge_begin><edge_end>Trigger Descriptor(event, action Time, triggered Action, level)
Trigger(name)<edge_begin><edge_end>Structural Component(name)
Trigger Descriptor(event, action Time, triggered Action, level)<edge_begin><edge_end>Trigger(name)
Typed Table()<edge_begin><edge_end>Base Table()
Typed Table()<edge_begin><edge_end>Structured Type(is final, is instantiable)
Typed Table()<edge_begin><edge_end>Typed Table()
Unique Constraint()<edge_begin><edge_end>Table Constraint(name)
User Defined Type(name)<edge_begin><edge_end>Data Type()
View()<edge_begin><edge_end>Derived Table(query expression)
View()<edge_begin><edge_end>Table(name)
View()<edge_begin><edge_end>Structural Component(name)
XML Type(descriptor)<edge_begin><edge_end>Predefined Type()
State Machine(nombre)<edge_begin><edge_end>State(nombre)
State Machine(nombre)<edge_begin><edge_end>Properties(application Address, media From Addr, media To Addr, media URI, record Path, scscf User, scscf Host, scscf Port, scscf Protocol, application Server Protocol, application Server Host, application Server Port, media Host, media Port, media Protocol, setup Conference)
State(nombre)<edge_begin><edge_end>Transition()
State(nombre)<edge_begin><edge_end>State(nombre)
Initial State()<edge_begin><edge_end>State(nombre)
Final State()<edge_begin><edge_end>State(nombre)
Composite State()<edge_begin><edge_end>State(nombre)
Composite State()<edge_begin><edge_end>State Machine(nombre)
Ivr Action()<edge_begin><edge_end>Action()
Hang Up()<edge_begin><edge_end>Ivr Action()
New Call(from, to)<edge_begin><edge_end>Ivr Action()
Play(base URL, media URI)<edge_begin><edge_end>Ivr Action()
Play Collect()<edge_begin><edge_end>Play(base URL, media URI)
Play Record()<edge_begin><edge_end>Play(base URL, media URI)
Remove Record(record Id)<edge_begin><edge_end>Ivr Action()
Terminate()<edge_begin><edge_end>Ivr Action()
Send Sms()<edge_begin><edge_end>Action()
Send Sms()<edge_begin><edge_end>SMS(from, to, text)
Set Timer(millis)<edge_begin><edge_end>Action()
Transition()<edge_begin><edge_end>Action()
Transition()<edge_begin><edge_end>State(nombre)
IVR Event()<edge_begin><edge_end>Transition()
Bye()<edge_begin><edge_end>IVR Event()
Call(from, to)<edge_begin><edge_end>IVR Event()
Pick Up()<edge_begin><edge_end>IVR Event()
Played()<edge_begin><edge_end>IVR Event()
Recorderd(record Id)<edge_begin><edge_end>IVR Event()
Terminated()<edge_begin><edge_end>IVR Event()
Init()<edge_begin><edge_end>IVR Event()
Cancel()<edge_begin><edge_end>IVR Event()
Collect Timeout()<edge_begin><edge_end>IVR Event()
Managed(success, code)<edge_begin><edge_end>IVR Event()
None Event()<edge_begin><edge_end>Transition()
SMS Received()<edge_begin><edge_end>Transition()
SMS Received()<edge_begin><edge_end>SMS(from, to, text)
Timer()<edge_begin><edge_end>Transition()
Collected()<edge_begin><edge_end>IVR Event()
Collected()<edge_begin><edge_end>Branch()
Branch()<edge_begin><edge_end>State(nombre)
Branch()<edge_begin><edge_end>Action()
Key(key)<edge_begin><edge_end>Branch()
Otherwise()<edge_begin><edge_end>Branch()
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Queries Connection()
Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Ebcdic Connection(Mid File, Data File)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>CDC Connection()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Input SAP Function Parameter Table()
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
HL7Connection(Start Char, End Char)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Model()<edge_begin><edge_end>Requirement()
Requirement()<edge_begin><edge_end>Req ID(req ID, name)
Requirement()<edge_begin><edge_end>Prefix()
Prefix()<edge_begin><edge_end>Prefix Right Operand(operator)
Prefix Condition(prefix Fixed Syntax)<edge_begin><edge_end>Operator(operator)
Prefix Condition(prefix Fixed Syntax)<edge_begin><edge_end>Value(val, value)
Prefix Condition(prefix Fixed Syntax)<edge_begin><edge_end>Timing Constraint(timing Constraint, minmax)
Param Event(action)<edge_begin><edge_end>Value(val, value)
Actor Event(action)<edge_begin><edge_end>Parameter(parameter, name)
State Event()<edge_begin><edge_end>System(system, name)
State Event()<edge_begin><edge_end>State(state, name)
Parameter State()<edge_begin><edge_end>Parameter(parameter, name)
Main Function()<edge_begin><edge_end>Action(action, name)
Main Composition()<edge_begin><edge_end>System(system, name)
Main State Transition()<edge_begin><edge_end>System(system, name)
Main State Transition()<edge_begin><edge_end>Action(action, name)
Main Attributes()<edge_begin><edge_end>System(system, name)
Main Attributes()<edge_begin><edge_end>Attribute(attribute, name, type)
Main Functions()<edge_begin><edge_end>System(system, name)
Main Functions()<edge_begin><edge_end>Function(function, name, type)
Action(action, name)<edge_begin><edge_end>Parameter(parameter, name)
Action(action, name)<edge_begin><edge_end>Value(val, value)
Timing Constraint(timing Constraint, minmax)<edge_begin><edge_end>Time(value, time Unit)
Cell Type(unit, formula, err, value)<edge_begin><edge_end>String()
Visio Document()<edge_begin><edge_end>Masters Collection()
Visio Document()<edge_begin><edge_end>Pages Collection()
Page Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Page Sheet()<edge_begin><edge_end>Unique Id Elt(Unique ID)
Page Sheet()<edge_begin><edge_end>Master Elt()
Page Sheet()<edge_begin><edge_end>Page Elt()
Named Elt(name, name U)<edge_begin><edge_end>String()
Identified Elt(ID)<edge_begin><edge_end>Integer()
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shapes Collection()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shape Elt()
Shape Elt()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
IX Elt(i X)<edge_begin><edge_end>Integer()
Del Elt(del)<edge_begin><edge_end>Boolean()
Geom()<edge_begin><edge_end>Shape Elt()
Geom()<edge_begin><edge_end>IX Elt(i X)
Geom()<edge_begin><edge_end>Del Elt(del)
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Geom()<edge_begin><edge_end>Line To()
Geom()<edge_begin><edge_end>Move To()
Geom()<edge_begin><edge_end>Arc To()
Geom()<edge_begin><edge_end>Spline Knot()
Geom()<edge_begin><edge_end>Polyline To()
Geom()<edge_begin><edge_end>Infinite Line()
Geom()<edge_begin><edge_end>Ellipse()
Geom()<edge_begin><edge_end>Elliptical Arc To()
Geom()<edge_begin><edge_end>Spline Start()
Geom()<edge_begin><edge_end>NURBS To()
XY Elt()<edge_begin><edge_end>IX Elt(i X)
XY Elt()<edge_begin><edge_end>Del Elt(del)
XY Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Line To()<edge_begin><edge_end>XY Elt()
Line To()<edge_begin><edge_end>Geom()
Move To()<edge_begin><edge_end>XY Elt()
Move To()<edge_begin><edge_end>Geom()
XYA Elt()<edge_begin><edge_end>XY Elt()
XYA Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Arc To()<edge_begin><edge_end>XYA Elt()
Arc To()<edge_begin><edge_end>Geom()
Spline Knot()<edge_begin><edge_end>XYA Elt()
Spline Knot()<edge_begin><edge_end>Geom()
Polyline To()<edge_begin><edge_end>XYA Elt()
Polyline To()<edge_begin><edge_end>Geom()
XYAB Elt()<edge_begin><edge_end>XYA Elt()
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Infinite Line()<edge_begin><edge_end>XYAB Elt()
Infinite Line()<edge_begin><edge_end>Geom()
XYABCD Elt()<edge_begin><edge_end>XYAB Elt()
XYABCD Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Ellipse()<edge_begin><edge_end>XYABCD Elt()
Ellipse()<edge_begin><edge_end>Geom()
Elliptical Arc To()<edge_begin><edge_end>XYABCD Elt()
Elliptical Arc To()<edge_begin><edge_end>Geom()
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Spline Start()<edge_begin><edge_end>Geom()
XYABCDE Elt()<edge_begin><edge_end>XYABCD Elt()
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
NURBS To()<edge_begin><edge_end>XYABCDE Elt()
NURBS To()<edge_begin><edge_end>Geom()
Text()<edge_begin><edge_end>Shape Elt()
Text()<edge_begin><edge_end>Text Elt()
Text Elt()<edge_begin><edge_end>Text()
String Elt(value)<edge_begin><edge_end>Text Elt()
String Elt(value)<edge_begin><edge_end>String()
Masters Collection()<edge_begin><edge_end>Visio Document()
Masters Collection()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Masters Collection()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
Icon(value)<edge_begin><edge_end>Master Elt()
Icon(value)<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Icon(value)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Page Elt()
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Connects Collection()<edge_begin><edge_end>Master Elt()
Connects Collection()<edge_begin><edge_end>Page Elt()
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Integer()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>String()
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Pages Collection()<edge_begin><edge_end>Visio Document()
Pages Collection()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Identified Elt(ID)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Pages Collection()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Boolean()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Integer()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Double()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Page Elt()
Page Elt()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
State Machine()<edge_begin><edge_end>Behavior(/name)
State Machine()<edge_begin><edge_end>Region()
Transition(/name)<edge_begin><edge_end>Behavior(/name)
Transition(/name)<edge_begin><edge_end>Trigger(/name)
Transition(/name)<edge_begin><edge_end>Vertex(/name)
Region()<edge_begin><edge_end>Vertex(/name)
Region()<edge_begin><edge_end>Transition(/name)
Pseudostate(kind)<edge_begin><edge_end>Vertex(/name)
Final State()<edge_begin><edge_end>State()
Vertex(/name)<edge_begin><edge_end>Region()
Activity()<edge_begin><edge_end>Behavior(/name)
State()<edge_begin><edge_end>Vertex(/name)
State()<edge_begin><edge_end>Behavior(/name)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
Value Type()<edge_begin><edge_end>Data()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Number Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Error Value()<edge_begin><edge_end>Value Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Smart Tags Collection()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Workbook()<edge_begin><edge_end>Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)
Workbook()<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Workbook()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>String()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Boolean()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Table Element(index)<edge_begin><edge_end>Styled Element()
Table Element(index)<edge_begin><edge_end>Integer()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Comment(author, show Always)
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Comment(author, show Always)<edge_begin><edge_end>Data()
Comment(author, show Always)<edge_begin><edge_end>String()
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Data()<edge_begin><edge_end>Comment(author, show Always)
Data()<edge_begin><edge_end>Value Type()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Integer()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Boolean()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Double()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>String()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Boolean()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>String()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Integer()
System()<edge_begin><edge_end>Admin()
System()<edge_begin><edge_end>Laboratory()
System()<edge_begin><edge_end>Conference()
System()<edge_begin><edge_end>Revision Process()
Session(year)<edge_begin><edge_end>Location(name)
Session(year)<edge_begin><edge_end>Program Comitee()
Session(year)<edge_begin><edge_end>Steering Comitee()
Session(year)<edge_begin><edge_end>Contribution()
Admin()<edge_begin><edge_end>Location(name)
Conference()<edge_begin><edge_end>Session(year)
Laboratory()<edge_begin><edge_end>Researcher()
Laboratory()<edge_begin><edge_end>Publication()
Researcher()<edge_begin><edge_end>Person()
Researcher()<edge_begin><edge_end>Evaluation()
Researcher()<edge_begin><edge_end>Chapter()
Researcher()<edge_begin><edge_end>Revision Note()
Publication()<edge_begin><edge_end>Chapter()
Chapter()<edge_begin><edge_end>Revision Note()
Steering Comitee()<edge_begin><edge_end>Person()
Program Comitee()<edge_begin><edge_end>Person()
Contribution()<edge_begin><edge_end>Publication()
Evaluation()<edge_begin><edge_end>Publication()
Spreadsheet File(nb Sheet)<edge_begin><edge_end>Sheet(name)
Sheet(name)<edge_begin><edge_end>Text(text Content)
Sheet(name)<edge_begin><edge_end>Image(width, height)
Sheet(name)<edge_begin><edge_end>Table(nb Columns)
Text(text Content)<edge_begin><edge_end>Title(hiearchy)
Image(width, height)<edge_begin><edge_end>Title(hiearchy)
Image(width, height)<edge_begin><edge_end>Point(x, y)
Table(nb Columns)<edge_begin><edge_end>Title(hiearchy)
Table(nb Columns)<edge_begin><edge_end>Header()
Table(nb Columns)<edge_begin><edge_end>Row()
Table(nb Columns)<edge_begin><edge_end>Point(x, y)
Header()<edge_begin><edge_end>Cell()
Cell()<edge_begin><edge_end>Point(x, y)
Row()<edge_begin><edge_end>Cell()
State Machine()<edge_begin><edge_end>Top Region()
Top Region()<edge_begin><edge_end>States()
Top Region()<edge_begin><edge_end>Region(name)
Top Region()<edge_begin><edge_end>Transitions()
Region(name)<edge_begin><edge_end>States()
Region(name)<edge_begin><edge_end>Region(name)
Region(name)<edge_begin><edge_end>Transitions()
Transitions()<edge_begin><edge_end>Transition(guard, behaviour)
Transition(guard, behaviour)<edge_begin><edge_end>State(name)
Transition(guard, behaviour)<edge_begin><edge_end>Triggers()
States()<edge_begin><edge_end>States Separated()
States Separated()<edge_begin><edge_end>State(name)
Triggers()<edge_begin><edge_end>Triggers Separated(first Trigger, following Triggers)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Float Value(value)<edge_begin><edge_end>Value Type()
Float Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Word Document()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Word Document()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Word Document()
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
String Property()<edge_begin><edge_end>String Type(val)
String Type(val)<edge_begin><edge_end>String()
Underline Property(val, color)<edge_begin><edge_end>String()
Word Document()<edge_begin><edge_end>Smart Tags Collection()
Word Document()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Word Document()<edge_begin><edge_end>Custom Document Properties Collection()
Word Document()<edge_begin><edge_end>String Property()
Word Document()<edge_begin><edge_end>Fonts List Elt()
Word Document()<edge_begin><edge_end>Lists Elt()
Word Document()<edge_begin><edge_end>Styles Elt(version Of Built In Stylenames)
Word Document()<edge_begin><edge_end>Doc Pr Elt()
Word Document()<edge_begin><edge_end>Body Elt()
Doc Pr Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Block Level Elt()
Body Elt()<edge_begin><edge_end>Sect Pr Elt()
Block Level Elt()<edge_begin><edge_end>Body Elt()
Block Level Elt()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Block Level Elt()<edge_begin><edge_end>Table Cell Elt()
Block Level Chunk Elt()<edge_begin><edge_end>Block Level Elt()
Para Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Para Elt()<edge_begin><edge_end>Para Pr Elt(keep Next, keep Lines, page Break Before, supress Line Numbers, suppress Auto Hyphens, contextual Spacing, bidi, justification)
Para Elt()<edge_begin><edge_end>Para Content Elt()
Para Pr Elt(keep Next, keep Lines, page Break Before, supress Line Numbers, suppress Auto Hyphens, contextual Spacing, bidi, justification)<edge_begin><edge_end>Para Elt()
Para Pr Elt(keep Next, keep Lines, page Break Before, supress Line Numbers, suppress Auto Hyphens, contextual Spacing, bidi, justification)<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Para Pr Elt(keep Next, keep Lines, page Break Before, supress Line Numbers, suppress Auto Hyphens, contextual Spacing, bidi, justification)<edge_begin><edge_end>String Property()
Para Content Elt()<edge_begin><edge_end>Para Elt()
Run Elt()<edge_begin><edge_end>Para Content Elt()
Run Elt()<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Run Elt()<edge_begin><edge_end>Run Content Elt()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Run Elt()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>String Property()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Fonts Elt(hint)
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Underline Property(val, color)
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>String()
Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)<edge_begin><edge_end>Lang Elt(val, bidi)
Lang Elt(val, bidi)<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Lang Elt(val, bidi)<edge_begin><edge_end>String()
Run Content Elt()<edge_begin><edge_end>Run Elt()
Break Elt(type)<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>String Type(val)
Del Text()<edge_begin><edge_end>Run Content Elt()
Del Text()<edge_begin><edge_end>String Type(val)
Instr Text()<edge_begin><edge_end>Run Content Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
Del Instr Text()<edge_begin><edge_end>Run Content Elt()
Del Instr Text()<edge_begin><edge_end>String Type(val)
No Break Hyphen()<edge_begin><edge_end>Run Content Elt()
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Annotation Ref()<edge_begin><edge_end>Run Content Elt()
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Endnote Ref()<edge_begin><edge_end>Run Content Elt()
Separator()<edge_begin><edge_end>Run Content Elt()
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Pg Num()<edge_begin><edge_end>Run Content Elt()
Cr()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Endnote()<edge_begin><edge_end>Run Content Elt()
Endnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Note Elt(type, suppress Ref)<edge_begin><edge_end>Block Level Elt()
Picture()<edge_begin><edge_end>Run Content Elt()
Picture()<edge_begin><edge_end>Picture Type()
Symbol()<edge_begin><edge_end>Run Content Elt()
Symbol()<edge_begin><edge_end>Sym Elt()
Sym Elt()<edge_begin><edge_end>String Type(val)
Tab()<edge_begin><edge_end>Run Content Elt()
Tab()<edge_begin><edge_end>Tab Elt()
Fld Char()<edge_begin><edge_end>Run Content Elt()
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Table Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Table Elt()<edge_begin><edge_end>Table Pr Elt()
Table Elt()<edge_begin><edge_end>Table Grid Elt()
Table Elt()<edge_begin><edge_end>Table Content Elt()
Table Pr Elt()<edge_begin><edge_end>Table Elt()
Table Pr Elt()<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Table Grid Elt()<edge_begin><edge_end>Table Elt()
Table Content Elt()<edge_begin><edge_end>Table Elt()
Table Content Elt()<edge_begin><edge_end>Row Elt()
Table Content Elt()<edge_begin><edge_end>Run Level Elt()
Row Elt()<edge_begin><edge_end>Table Content Elt()
Row Elt()<edge_begin><edge_end>Table Pr Ex Elt()
Row Elt()<edge_begin><edge_end>Table Row Pr Elt()
Row Elt()<edge_begin><edge_end>Row Content Elt()
Table Pr Ex Elt()<edge_begin><edge_end>Row Elt()
Table Row Pr Elt()<edge_begin><edge_end>Row Elt()
Table Row Pr Elt()<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Row Content Elt()<edge_begin><edge_end>Row Elt()
Row Content Elt()<edge_begin><edge_end>Table Cell Elt()
Row Content Elt()<edge_begin><edge_end>Run Level Elt()
Table Cell Elt()<edge_begin><edge_end>Row Content Elt()
Table Cell Elt()<edge_begin><edge_end>Table Cell Pr Elt()
Table Cell Elt()<edge_begin><edge_end>Block Level Elt()
Table Cell Pr Elt()<edge_begin><edge_end>Table Cell Elt()
Table Cell Pr Elt()<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Fonts List Elt()<edge_begin><edge_end>Word Document()
Fonts List Elt()<edge_begin><edge_end>Fonts Elt(hint)
Fonts List Elt()<edge_begin><edge_end>Font Elt()
Fonts Elt(hint)<edge_begin><edge_end>Fonts List Elt()
Fonts Elt(hint)<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Fonts Elt(hint)<edge_begin><edge_end>String Type(val)
Font Elt()<edge_begin><edge_end>Fonts List Elt()
Font Elt()<edge_begin><edge_end>String Type(val)
Font Elt()<edge_begin><edge_end>String Property()
Styles Elt(version Of Built In Stylenames)<edge_begin><edge_end>Word Document()
Styles Elt(version Of Built In Stylenames)<edge_begin><edge_end>Double()
Styles Elt(version Of Built In Stylenames)<edge_begin><edge_end>Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Styles Elt(version Of Built In Stylenames)
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>String Type(val)
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>String Property()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Double()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Para Pr Elt(keep Next, keep Lines, page Break Before, supress Line Numbers, suppress Auto Hyphens, contextual Spacing, bidi, justification)
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Run Pr Elt(bold, bold cs, italic, italic cs, capitals, small Capitals, strike, double Strike, outline, shadow, emboss, imprint, no Proof, vanish, spec Vanish, rtl, cs, color, highlight, vertical Align)
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Table Pr Elt()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Table Row Pr Elt()
Style Elt(type, default, sti, auto Redefine, hidden, semi Hidden, locked, personal, personal Compose, personal Reply)<edge_begin><edge_end>Table Cell Pr Elt()
Lists Elt()<edge_begin><edge_end>Word Document()
Sect Pr Elt()<edge_begin><edge_end>Body Elt()
Run Level Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Run Level Elt()<edge_begin><edge_end>Table Content Elt()
Run Level Elt()<edge_begin><edge_end>Row Content Elt()
Cf Chunk()<edge_begin><edge_end>Block Level Elt()
Simple Field Elt()<edge_begin><edge_end>Para Content Elt()
H Link Elt()<edge_begin><edge_end>Para Content Elt()
Sub Doc Elt()<edge_begin><edge_end>Para Content Elt()
Named Element(name)<edge_begin><edge_end>Database Element(ID, comments)
Data Base(url)<edge_begin><edge_end>Table Container()
Data Base(url)<edge_begin><edge_end>Schema()
Abstract Table()<edge_begin><edge_end>Named Element(name)
Abstract Table()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Abstract Table()<edge_begin><edge_end>Table Container()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Named Element(name)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Index Element(asc)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Primary Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Foreign Key Element()
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Sequence(start, increment, min Value, max Value)
Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)<edge_begin><edge_end>Abstract Table()
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Named Element(name)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Index Element(asc)
Index(qualifier, unique, cardinality, index Type)<edge_begin><edge_end>Table()
View(query)<edge_begin><edge_end>Abstract Table()
Table()<edge_begin><edge_end>Abstract Table()
Table()<edge_begin><edge_end>Primary Key()
Table()<edge_begin><edge_end>Foreign Key()
Table()<edge_begin><edge_end>Constraint(expression)
Table()<edge_begin><edge_end>Index(qualifier, unique, cardinality, index Type)
Primary Key()<edge_begin><edge_end>Named Element(name)
Primary Key()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Primary Key()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>Named Element(name)
Foreign Key()<edge_begin><edge_end>Foreign Key Element()
Foreign Key()<edge_begin><edge_end>Table()
Foreign Key Element()<edge_begin><edge_end>Database Element(ID, comments)
Foreign Key Element()<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Index Element(asc)<edge_begin><edge_end>Database Element(ID, comments)
Index Element(asc)<edge_begin><edge_end>Column(nullable, default Value, autoincrement, in Primary Key, in Foreign Key, unique)
Constraint(expression)<edge_begin><edge_end>Named Element(name)
Constraint(expression)<edge_begin><edge_end>Table()
Schema()<edge_begin><edge_end>Table Container()
Sequence(start, increment, min Value, max Value)<edge_begin><edge_end>Named Element(name)
Table Container()<edge_begin><edge_end>Named Element(name)
Table Container()<edge_begin><edge_end>Abstract Table()
Table Container()<edge_begin><edge_end>Sequence(start, increment, min Value, max Value)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Cell Type(unit, formula, err, value)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Integer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Boolean()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Settings Elt()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Colors Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Print Setup()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Fonts Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Face Names Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Style Sheets Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Sheet()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Masters Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Pages Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Windows Info()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Event List()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Header Footer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>VB Project Data(data)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Email Routing Data(data, size)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Solution XML()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Custom Properties Collection()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Properties Collection()<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Custom Properties Collection()<edge_begin><edge_end>Custom Property(name, data Type)
Custom Property(name, data Type)<edge_begin><edge_end>Custom Properties Collection()
Custom Property(name, data Type)<edge_begin><edge_end>String()
VB Project Data(data)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
VB Project Data(data)<edge_begin><edge_end>String()
Email Routing Data(data, size)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Email Routing Data(data, size)<edge_begin><edge_end>String()
Email Routing Data(data, size)<edge_begin><edge_end>Integer()
Style Sheets Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Style Sheets Collection()<edge_begin><edge_end>Style Sheet()
Style Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Style Sheet()<edge_begin><edge_end>Identified Elt(ID)
Style Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Style Sheet()<edge_begin><edge_end>Style Sheets Collection()
Document Sheet()<edge_begin><edge_end>Page Sheet()
Document Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Document Sheet()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Page Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Page Sheet()<edge_begin><edge_end>Unique Id Elt(Unique ID)
Page Sheet()<edge_begin><edge_end>Master Elt()
Page Sheet()<edge_begin><edge_end>Page Elt()
Named Elt(name, name U)<edge_begin><edge_end>String()
Identified Elt(ID)<edge_begin><edge_end>Integer()
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shapes Collection()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shape Elt()
Shape Elt()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
IX Elt(i X)<edge_begin><edge_end>Integer()
Del Elt(del)<edge_begin><edge_end>Boolean()
Geom()<edge_begin><edge_end>Shape Elt()
Geom()<edge_begin><edge_end>IX Elt(i X)
Geom()<edge_begin><edge_end>Del Elt(del)
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Geom()<edge_begin><edge_end>Line To()
Geom()<edge_begin><edge_end>Move To()
Geom()<edge_begin><edge_end>Arc To()
Geom()<edge_begin><edge_end>Spline Knot()
Geom()<edge_begin><edge_end>Polyline To()
Geom()<edge_begin><edge_end>Infinite Line()
Geom()<edge_begin><edge_end>Ellipse()
Geom()<edge_begin><edge_end>Elliptical Arc To()
Geom()<edge_begin><edge_end>Spline Start()
Geom()<edge_begin><edge_end>NURBS To()
XY Elt()<edge_begin><edge_end>IX Elt(i X)
XY Elt()<edge_begin><edge_end>Del Elt(del)
XY Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Line To()<edge_begin><edge_end>XY Elt()
Line To()<edge_begin><edge_end>Geom()
Move To()<edge_begin><edge_end>XY Elt()
Move To()<edge_begin><edge_end>Geom()
XYA Elt()<edge_begin><edge_end>XY Elt()
XYA Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Arc To()<edge_begin><edge_end>XYA Elt()
Arc To()<edge_begin><edge_end>Geom()
Spline Knot()<edge_begin><edge_end>XYA Elt()
Spline Knot()<edge_begin><edge_end>Geom()
Polyline To()<edge_begin><edge_end>XYA Elt()
Polyline To()<edge_begin><edge_end>Geom()
XYAB Elt()<edge_begin><edge_end>XYA Elt()
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Infinite Line()<edge_begin><edge_end>XYAB Elt()
Infinite Line()<edge_begin><edge_end>Geom()
XYABCD Elt()<edge_begin><edge_end>XYAB Elt()
XYABCD Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Ellipse()<edge_begin><edge_end>XYABCD Elt()
Ellipse()<edge_begin><edge_end>Geom()
Elliptical Arc To()<edge_begin><edge_end>XYABCD Elt()
Elliptical Arc To()<edge_begin><edge_end>Geom()
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Spline Start()<edge_begin><edge_end>Geom()
XYABCDE Elt()<edge_begin><edge_end>XYABCD Elt()
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
NURBS To()<edge_begin><edge_end>XYABCDE Elt()
NURBS To()<edge_begin><edge_end>Geom()
Text()<edge_begin><edge_end>Shape Elt()
Text()<edge_begin><edge_end>Text Elt()
Text Elt()<edge_begin><edge_end>Text()
String Elt(value)<edge_begin><edge_end>Text Elt()
String Elt(value)<edge_begin><edge_end>String()
Masters Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Masters Collection()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Masters Collection()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
Icon(value)<edge_begin><edge_end>Master Elt()
Icon(value)<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Icon(value)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Page Elt()
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Connects Collection()<edge_begin><edge_end>Master Elt()
Connects Collection()<edge_begin><edge_end>Page Elt()
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Integer()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>String()
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Pages Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Pages Collection()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Identified Elt(ID)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Pages Collection()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Boolean()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Integer()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Double()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Page Elt()
Page Elt()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Document Settings Elt()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Colors Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Print Setup()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Fonts Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Face Names Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Windows Info()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Event List()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Header Footer()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Solution XML()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Automaton(name)<edge_begin><edge_end>State(acceptor, id)
Automaton(name)<edge_begin><edge_end>Token()
Automaton(name)<edge_begin><edge_end>Symbolic Parameter(name)
Automaton(name)<edge_begin><edge_end>Symbolic Timer(name)
Token Parameter Binding()<edge_begin><edge_end>Binding()
Token Parameter Binding()<edge_begin><edge_end>Symbolic Token Parameter()
Reset Timer Action()<edge_begin><edge_end>Timer Action()
Symbolic Input Event(name)<edge_begin><edge_end>Symbolic Event()
Symbolic Timer(name)<edge_begin><edge_end>Symbolic Timeout Event()
Symbolic Token Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Complex Event Processor()<edge_begin><edge_end>Automaton(name)
Complex Event Processor()<edge_begin><edge_end>Symbolic Input Event(name)
Symbolic Event()<edge_begin><edge_end>Symbolic Parameter(name)
Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
State(acceptor, id)<edge_begin><edge_end>Token()
State(acceptor, id)<edge_begin><edge_end>Abstract Transition()
Constant Binding()<edge_begin><edge_end>Binding()
Constant Binding()<edge_begin><edge_end>Fix Parameter(value)
Symbolic Event Parameter()<edge_begin><edge_end>Symbolic Parameter(name)
Free Parameter(excluded Values)<edge_begin><edge_end>Parameter()
Set Timer Action(to Value)<edge_begin><edge_end>Timer Action()
Symbolic Timeout Event()<edge_begin><edge_end>Symbolic Event()
Symbolic Timeout Event()<edge_begin><edge_end>Symbolic Timer(name)
Binding()<edge_begin><edge_end>Symbolic Event Parameter()
Fix Parameter(value)<edge_begin><edge_end>Parameter()
Timer Action()<edge_begin><edge_end>Action()
Timer Action()<edge_begin><edge_end>Symbolic Timer(name)
Epsilon Transition()<edge_begin><edge_end>Abstract Transition()
Event()<edge_begin><edge_end>Symbolic Event()
Event()<edge_begin><edge_end>Fix Parameter(value)
Token()<edge_begin><edge_end>State(acceptor, id)
Token()<edge_begin><edge_end>Parameter()
Transition()<edge_begin><edge_end>Abstract Transition()
Transition()<edge_begin><edge_end>Event Guard()
Event Guard()<edge_begin><edge_end>Binding()
Event Guard()<edge_begin><edge_end>Symbolic Event()
Abstract Transition()<edge_begin><edge_end>State(acceptor, id)
Abstract Transition()<edge_begin><edge_end>Action()
Not Equivalent Relation()<edge_begin><edge_end>State(acceptor, id)
Model()<edge_begin><edge_end>Bibtex Entry Types()
Bibtex Entry Types()<edge_begin><edge_end>Cite Key(key)
Bibtex Entry Types()<edge_begin><edge_end>Title Field(title)
Bibtex Entry Types()<edge_begin><edge_end>Year Field(year)
Bibtex Entry Types()<edge_begin><edge_end>Month Field(month)
Bibtex Entry Types()<edge_begin><edge_end>Note Field(note)
Bibtex Entry Types()<edge_begin><edge_end>Unknown Field()
Article()<edge_begin><edge_end>Bibtex Entry Types()
Article()<edge_begin><edge_end>Author Field()
Article()<edge_begin><edge_end>Journal Field(journal)
Article()<edge_begin><edge_end>Volume Field(volume)
Article()<edge_begin><edge_end>Number Field(number)
Article()<edge_begin><edge_end>Pages Field(pages)
Book()<edge_begin><edge_end>Bibtex Entry Types()
Book()<edge_begin><edge_end>Publisher Field(publisher)
Book()<edge_begin><edge_end>Series Field(series)
Book()<edge_begin><edge_end>Address Field(address)
Book()<edge_begin><edge_end>Edition Field(edition)
Book()<edge_begin><edge_end>Isbn Field(isbn)
Unknown Field()<edge_begin><edge_end>Unknown Type(type)
Unknown Field()<edge_begin><edge_end>Unknown Value(value)
Authors()<edge_begin><edge_end>Author Field()
Authors()<edge_begin><edge_end>Fullname(lastname, firstname)
Place()<edge_begin><edge_end>Net()
Place()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>TP Arc()
Transition()<edge_begin><edge_end>Net()
Transition()<edge_begin><edge_end>PT Arc()
Transition()<edge_begin><edge_end>TP Arc()
Net()<edge_begin><edge_end>Place()
Net()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Arc()
PT Arc()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Place()
TP Arc()<edge_begin><edge_end>Arc()
TP Arc()<edge_begin><edge_end>Transition()
TP Arc()<edge_begin><edge_end>Place()
State(name)<edge_begin><edge_end>Traced Class(trace)
State(name)<edge_begin><edge_end>Composite State()
U Transition()<edge_begin><edge_end>Transition(trigger, effect, name)
Transition(trigger, effect, name)<edge_begin><edge_end>Traced Class(trace)
Transition(trigger, effect, name)<edge_begin><edge_end>State(name)
Composite State()<edge_begin><edge_end>State(name)
State Machine(name)<edge_begin><edge_end>Traced Class(trace)
State Machine(name)<edge_begin><edge_end>State(name)
State Machine(name)<edge_begin><edge_end>Transition(trigger, effect, name)
Initial State()<edge_begin><edge_end>State(name)
Final State()<edge_begin><edge_end>State(name)
U State()<edge_begin><edge_end>State(name)
U State Machine()<edge_begin><edge_end>State Machine(name)
UISUT()<edge_begin><edge_end>UISUT Element(name, description, id)
UISUT()<edge_begin><edge_end>UI Statemachine()
Application System()<edge_begin><edge_end>UISUT Element(name, description, id)
Application System()<edge_begin><edge_end>UISUT()
UI Statemachine()<edge_begin><edge_end>UISUT Element(name, description, id)
UI Statemachine()<edge_begin><edge_end>Abstract State()
UI Statemachine()<edge_begin><edge_end>UI Transition(trigger Str, guard Str, action Str, script Str)
UI Statemachine()<edge_begin><edge_end>UI Data Variable(constraint RE)
UI State(is Initial, pic)<edge_begin><edge_end>Abstract State()
UI State(is Initial, pic)<edge_begin><edge_end>UI Control(variable Name, value Expression)
UI State(is Initial, pic)<edge_begin><edge_end>UI Data Variable(constraint RE)
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UISUT Element(name, description, id)
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>Abstract State()
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UI Trigger()
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UI Condition()
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>Action()
UI Transition(trigger Str, guard Str, action Str, script Str)<edge_begin><edge_end>UI Data Variable(constraint RE)
UI Trigger()<edge_begin><edge_end>UISUT Element(name, description, id)
User Trigger()<edge_begin><edge_end>UI Trigger()
Component Trigger()<edge_begin><edge_end>UI Trigger()
UI Condition()<edge_begin><edge_end>UISUT Element(name, description, id)
Action()<edge_begin><edge_end>UISUT Element(name, description, id)
UI Control(variable Name, value Expression)<edge_begin><edge_end>UISUT Element(name, description, id)
UI Control(variable Name, value Expression)<edge_begin><edge_end>UI Data Variable(constraint RE)
UI Data Variable(constraint RE)<edge_begin><edge_end>UISUT Element(name, description, id)
Initial State()<edge_begin><edge_end>Abstract State()
Final State()<edge_begin><edge_end>Abstract State()
Abstract State()<edge_begin><edge_end>UISUT Element(name, description, id)
Abstract State()<edge_begin><edge_end>UI Transition(trigger Str, guard Str, action Str, script Str)
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Conference Member()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Conference Member()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>activity()
Review()<edge_begin><edge_end>Reviewer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Document()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>article()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Integer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Co-author()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Decision()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>String()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Author()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Administrator()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Administrator()<edge_begin><edge_end>Event()
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Event()<edge_begin><edge_end>Thing()
Event()<edge_begin><edge_end>Event Tracks()
Event()<edge_begin><edge_end>Approval Email()
Event()<edge_begin><edge_end>Event Setup()
Event()<edge_begin><edge_end>Administrator()
Account()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
User()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Thing()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Document()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>String()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Inforamtion()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Account()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Event()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Activity()
Person(email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference document()
Symposium()<edge_begin><edge_end>Event()
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Invited Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event()
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event()
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event()
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity()
Activity()<edge_begin><edge_end>Thing()
Activity()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity()
Registration()<edge_begin><edge_end>Activity()
Full Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Research Topic()<edge_begin><edge_end>Event Setup()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Committee member()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Conference contribution()
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Track()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event()
Tutorial()<edge_begin><edge_end>Conference part()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>activity()
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
article()<edge_begin><edge_end>activity()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>activity()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>activity()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>intensity()
activity()<edge_begin><edge_end>article()
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>activity()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>activity()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>activity()
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>activity()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>activity()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>activity()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>activity()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Content(name)<edge_begin><edge_end>State(name)
Content(name)<edge_begin><edge_end>Automaton(name)
Content(name)<edge_begin><edge_end>Operation(name)
Content(name)<edge_begin><edge_end>Participant(name)
Content(name)<edge_begin><edge_end>Message()
State(name)<edge_begin><edge_end>Message Sequence()
Automaton(name)<edge_begin><edge_end>State(name)
Automaton(name)<edge_begin><edge_end>Transition()
Automaton(name)<edge_begin><edge_end>Participant(name)
Transition()<edge_begin><edge_end>State(name)
Transition()<edge_begin><edge_end>Operation(name)
Transition()<edge_begin><edge_end>Value(value)
Message()<edge_begin><edge_end>Operation(name)
Message()<edge_begin><edge_end>Participant(name)
Message()<edge_begin><edge_end>Value(value)
Message Sequence()<edge_begin><edge_end>Message()
Pseudostate()<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Named Element(name)
Vertex()<edge_begin><edge_end>Region(priority)
Vertex()<edge_begin><edge_end>Transition(priority)
Region(priority)<edge_begin><edge_end>Named Element(name)
Region(priority)<edge_begin><edge_end>Vertex()
Region(priority)<edge_begin><edge_end>Composite Element()
Transition(priority)<edge_begin><edge_end>Specification Element(specification)
Transition(priority)<edge_begin><edge_end>Reaction()
Transition(priority)<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Regular State()
Variable()<edge_begin><edge_end>Declaration()
Event()<edge_begin><edge_end>Declaration()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Named Element(name)
Statechart()<edge_begin><edge_end>Specification Element(specification)
Statechart()<edge_begin><edge_end>Reactive Element()
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Statechart()<edge_begin><edge_end>Composite Element()
Entry(kind)<edge_begin><edge_end>Pseudostate()
Declaration()<edge_begin><edge_end>Named Element(name)
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Effect()
Reactive Element()<edge_begin><edge_end>Reaction()
Exit()<edge_begin><edge_end>Pseudostate()
Scope()<edge_begin><edge_end>Declaration()
Scope()<edge_begin><edge_end>Event()
Scope()<edge_begin><edge_end>Variable()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Regular State()<edge_begin><edge_end>Vertex()
Composite Element()<edge_begin><edge_end>Region(priority)
Grammar(name)<edge_begin><edge_end>Block()
Grammar(name)<edge_begin><edge_end>Element(name)
Block()<edge_begin><edge_end>Element(name)
Block()<edge_begin><edge_end>Column(name, multiple)
Column(name, multiple)<edge_begin><edge_end>Column Definition()
Column Definition()<edge_begin><edge_end>Column Spec()
Mandatory Column()<edge_begin><edge_end>Column Definition()
Optional Column()<edge_begin><edge_end>Column Definition()
Row Spec(header)<edge_begin><edge_end>Column Spec()
Row Spec(header)<edge_begin><edge_end>Syntax(is id, is string, is int, token)
Block Spec()<edge_begin><edge_end>Column Spec()
Block Spec()<edge_begin><edge_end>Block()
Syntax(is id, is string, is int, token)<edge_begin><edge_end>Rule()
Rule()<edge_begin><edge_end>Element(name)
Rule()<edge_begin><edge_end>Syntax Seq()
Syntax Seq()<edge_begin><edge_end>Syntax(is id, is string, is int, token)
Schema()<edge_begin><edge_end>R Model Element(kind, name)
Schema()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>R Model Element(kind, name)
Table()<edge_begin><edge_end>Schema()
Table()<edge_begin><edge_end>Column(type)
Table()<edge_begin><edge_end>Key()
Table()<edge_begin><edge_end>Foreign Key()
Column(type)<edge_begin><edge_end>R Model Element(kind, name)
Column(type)<edge_begin><edge_end>Table()
Column(type)<edge_begin><edge_end>Key()
Column(type)<edge_begin><edge_end>Foreign Key()
Key()<edge_begin><edge_end>R Model Element(kind, name)
Key()<edge_begin><edge_end>Column(type)
Key()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>R Model Element(kind, name)
Foreign Key()<edge_begin><edge_end>Column(type)
Foreign Key()<edge_begin><edge_end>Key()
Foreign Key()<edge_begin><edge_end>Table()
SMACH State Machine(Skill Interface)<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
SMACH State Machine(Skill Interface)<edge_begin><edge_end>SMACH Transition(name)
SMACH State Machine(Skill Interface)<edge_begin><edge_end>Final State(type)
SMACH State Machine(Skill Interface)<edge_begin><edge_end>Init Action State()
SMACH Transition(name)<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Action State()<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Service State()<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Final State(type)<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Init Straight State()<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Init Action State()<edge_begin><edge_end>SMACH State(goal, goal type, remap overwrite)
Petri Net()<edge_begin><edge_end>Identifiable Element(name, author)
Petri Net()<edge_begin><edge_end>Place()
Petri Net()<edge_begin><edge_end>Transition()
Petri Net()<edge_begin><edge_end>Arc(weight)
Petri Net()<edge_begin><edge_end>Type(name)
Type(name)<edge_begin><edge_end>Primitive Attribute(name, prim Type)
Place()<edge_begin><edge_end>Identifiable Element(name, author)
Place()<edge_begin><edge_end>Token(values)
Place()<edge_begin><edge_end>Type(name)
Transition()<edge_begin><edge_end>Identifiable Element(name, author)
Place To Trans Arc()<edge_begin><edge_end>Arc(weight)
Place To Trans Arc()<edge_begin><edge_end>Place()
Place To Trans Arc()<edge_begin><edge_end>Transition()
Trans To Place Arc()<edge_begin><edge_end>Arc(weight)
Trans To Place Arc()<edge_begin><edge_end>Transition()
Trans To Place Arc()<edge_begin><edge_end>Place()
Scheme(name)<edge_begin><edge_end>Table(name)
Scheme(name)<edge_begin><edge_end>F Key()
Table(name)<edge_begin><edge_end>Column(name)
Table(name)<edge_begin><edge_end>Scheme(name)
Table(name)<edge_begin><edge_end>P Key()
Column(name)<edge_begin><edge_end>Table(name)
F Key()<edge_begin><edge_end>P Key()
F Key()<edge_begin><edge_end>Column(name)
F Key()<edge_begin><edge_end>Scheme(name)
P Key()<edge_begin><edge_end>Column(name)
Place()<edge_begin><edge_end>Net()
Place()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>TP Arc()
Transition()<edge_begin><edge_end>Net()
Transition()<edge_begin><edge_end>PT Arc()
Transition()<edge_begin><edge_end>TP Arc()
Net()<edge_begin><edge_end>Place()
Net()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Place()
TP Arc()<edge_begin><edge_end>Transition()
TP Arc()<edge_begin><edge_end>Place()
Model Element(name)<edge_begin><edge_end>Partition()
State Machine()<edge_begin><edge_end>Model Element(name)
State Machine()<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>Transition()
Activity Graph()<edge_begin><edge_end>State Machine()
Activity Graph()<edge_begin><edge_end>Partition()
Partition()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>State Vertex()
Composite State()<edge_begin><edge_end>State()
Composite State()<edge_begin><edge_end>State Vertex()
Action State(is Dynamic)<edge_begin><edge_end>State()
Pseudostate(kind)<edge_begin><edge_end>State Vertex()
Object Flow State()<edge_begin><edge_end>State()
Object Flow State()<edge_begin><edge_end>Model Element(name)
Final State()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Model Element(name)
Transition()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Guard()
Guard()<edge_begin><edge_end>Model Element(name)
Guard()<edge_begin><edge_end>Boolean Expression(language, body)
Place(capacity)<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Petri Net(name)<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Petri Net(name)<edge_begin><edge_end>Transition(name)
Petri Net(name)<edge_begin><edge_end>Input Arc(weight)
Petri Net(name)<edge_begin><edge_end>Output Arc(weight)
Input Arc(weight)<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Input Arc(weight)<edge_begin><edge_end>Transition(name)
Output Arc(weight)<edge_begin><edge_end>Transition(name)
Output Arc(weight)<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Resource()<edge_begin><edge_end>Generic Place(name, number Of Tokens)
Marking()<edge_begin><edge_end>I Net Element(name, comment)
Marking()<edge_begin><edge_end>Place Marking()
Place Marking()<edge_begin><edge_end>I Entity Identifiable(id)
Place Marking()<edge_begin><edge_end>Place()
Place Marking()<edge_begin><edge_end>Token Multi Set()
High Level Petri Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
High Level Petri Net Marked()<edge_begin><edge_end>High Level Petri Net()
High Level Petri Net Marked()<edge_begin><edge_end>Marking()
Token Type()<edge_begin><edge_end>I Net Element(name, comment)
Token Type Atomic()<edge_begin><edge_end>Token Type()
Token Type Atomic()<edge_begin><edge_end>Atom()
Token Type Atomic()<edge_begin><edge_end>Token Atomic()
Token Type Element Net()<edge_begin><edge_end>Token Type()
Token Type Element Net()<edge_begin><edge_end>I Diagram Holder()
Token Type Element Net()<edge_begin><edge_end>Element Net Marked()
Token Type Element Net()<edge_begin><edge_end>High Level Petri Net()
Token Type Element Net()<edge_begin><edge_end>Token Net()
Token()<edge_begin><edge_end>I Net Element(name, comment)
Token()<edge_begin><edge_end>Token Attribute(type, name, value)
Token Atomic()<edge_begin><edge_end>Token()
Token Atomic()<edge_begin><edge_end>Token Type Atomic()
Token Atomic()<edge_begin><edge_end>Atom()
Token Net()<edge_begin><edge_end>Token()
Token Net()<edge_begin><edge_end>Token Type Element Net()
Token Net()<edge_begin><edge_end>Element Net Marked()
Token Attribute(type, name, value)<edge_begin><edge_end>I Entity Identifiable(id)
Element Net Marked()<edge_begin><edge_end>I Net Element(name, comment)
Element Net Marked()<edge_begin><edge_end>Token Type Element Net()
Element Net Marked()<edge_begin><edge_end>Marking()
Atom()<edge_begin><edge_end>I Net Element(name, comment)
Token Weight(weight)<edge_begin><edge_end>I Entity Identifiable(id)
Token Weight(weight)<edge_begin><edge_end>Token()
Token Multiset Expression()<edge_begin><edge_end>I Entity Identifiable(id)
Token Multiset Expression()<edge_begin><edge_end>Token Type()
Token Multiset Expression()<edge_begin><edge_end>Token Multi Set()
Token Multi Set()<edge_begin><edge_end>I Entity Identifiable(id)
Token Multi Set()<edge_begin><edge_end>Token Weight(weight)
Token Multi Set()<edge_begin><edge_end>Token Type()
Variable(name)<edge_begin><edge_end>I Entity Identifiable(id)
Variable(name)<edge_begin><edge_end>Context Variable()
Token Variadic Expression()<edge_begin><edge_end>I Net Element(name, comment)
Token Variadic Expression()<edge_begin><edge_end>Monom(power)
Token Variadic Expression()<edge_begin><edge_end>Monom Constant(power)
Monom(power)<edge_begin><edge_end>I Entity Identifiable(id)
Monom(power)<edge_begin><edge_end>Variable(name)
Token Expression Binding()<edge_begin><edge_end>I Entity Identifiable(id)
Token Expression Binding()<edge_begin><edge_end>Token Variadic Expression()
Token Expression Binding()<edge_begin><edge_end>Token Binding()
Token Binding()<edge_begin><edge_end>I Entity Identifiable(id)
Token Binding()<edge_begin><edge_end>Variable(name)
Token Binding()<edge_begin><edge_end>Token()
Monom Constant(power)<edge_begin><edge_end>I Entity Identifiable(id)
Monom Constant(power)<edge_begin><edge_end>Variable(name)
Monom Constant(power)<edge_begin><edge_end>Token()
Net Constant()<edge_begin><edge_end>I Net Element(name, comment)
Net Constant()<edge_begin><edge_end>Token Binding()
High Level Petri Net()<edge_begin><edge_end>I Net Element(name, comment)
High Level Petri Net()<edge_begin><edge_end>Context Variable()
High Level Petri Net()<edge_begin><edge_end>Node()
High Level Petri Net()<edge_begin><edge_end>Arc()
Place()<edge_begin><edge_end>Node()
Place()<edge_begin><edge_end>Arc PT()
Place()<edge_begin><edge_end>Arc TP()
Place()<edge_begin><edge_end>Token Type()
Transition()<edge_begin><edge_end>Context Variable()
Transition()<edge_begin><edge_end>Node()
Transition()<edge_begin><edge_end>Arc PT()
Transition()<edge_begin><edge_end>Arc TP()
Arc PT()<edge_begin><edge_end>Arc()
Arc PT()<edge_begin><edge_end>Place()
Arc PT()<edge_begin><edge_end>Transition()
Arc PT()<edge_begin><edge_end>Token Variadic Expression()
Arc TP()<edge_begin><edge_end>Arc()
Arc TP()<edge_begin><edge_end>Transition()
Arc TP()<edge_begin><edge_end>Place()
Arc TP()<edge_begin><edge_end>Token Variadic Expression()
Context Variable()<edge_begin><edge_end>I Entity Identifiable(id)
Context Variable()<edge_begin><edge_end>Variable(name)
Node()<edge_begin><edge_end>I Net Element(name, comment)
Node()<edge_begin><edge_end>High Level Petri Net()
Arc()<edge_begin><edge_end>I Net Element(name, comment)
Arc()<edge_begin><edge_end>High Level Petri Net()
N Pnet()<edge_begin><edge_end>I Diagram Holder()
N Pnet()<edge_begin><edge_end>High Level Petri Net()
N Pnet()<edge_begin><edge_end>Token Type Element Net()
N Pnet()<edge_begin><edge_end>Token Type Atomic()
N Pnet()<edge_begin><edge_end>Net Constant()
N Pnet()<edge_begin><edge_end>Synchronization(kind, key)
N Pnet()<edge_begin><edge_end>N Pnet Marked()
N Pnet Marked()<edge_begin><edge_end>I Net Element(name, comment)
N Pnet Marked()<edge_begin><edge_end>N Pnet()
N Pnet Marked()<edge_begin><edge_end>Marking()
Synchronization(kind, key)<edge_begin><edge_end>I Net Element(name, comment)
Synchronization(kind, key)<edge_begin><edge_end>Transition Synchronized()
Transition Synchronized()<edge_begin><edge_end>Transition()
Transition Synchronized()<edge_begin><edge_end>Synchronization(kind, key)
I Net Element(name, comment)<edge_begin><edge_end>I Entity Identifiable(id)
I Diagram Holder()<edge_begin><edge_end>I Net Element(name, comment)
I Diagram Holder()<edge_begin><edge_end>NPN Diagram Net System()
NPN Diagram Net System()<edge_begin><edge_end>I Entity Identifiable(id)
NPN Diagram Net System()<edge_begin><edge_end>I Diagram Holder()
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
NPN Diagram Net System()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
NPN Diagram Net System()<edge_begin><edge_end>High Level Petri Net()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Arc PTSN()
NPN Symbol Place SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Node SN(constraints)
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Arc TPSN()
NPN Symbol Transition SN()<edge_begin><edge_end>NPN Symbol Arc PTSN()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Transition SN()
NPN Symbol Arc PTSN()<edge_begin><edge_end>NPN Symbol Place SN()
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Arc SN(bendpoints)
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Place SN()
NPN Symbol Arc TPSN()<edge_begin><edge_end>NPN Symbol Transition SN()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>I Entity Identifiable(id)
NPN Symbol Node SN(constraints)<edge_begin><edge_end>NPN Diagram Net System()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>Rectangle()
NPN Symbol Node SN(constraints)<edge_begin><edge_end>Node()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>I Entity Identifiable(id)
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>NPN Diagram Net System()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>Arc()
NPN Symbol Arc SN(bendpoints)<edge_begin><edge_end>Point()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Conference Member()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Conference Member()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Paper(paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(paper ID, title)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Author()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(paper ID, title)
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Administrator()<edge_begin><edge_end>Event()
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Event()<edge_begin><edge_end>Thing()
Event()<edge_begin><edge_end>Event Tracks()
Event()<edge_begin><edge_end>Approval Email()
Event()<edge_begin><edge_end>Event Setup()
Event()<edge_begin><edge_end>Administrator()
Account()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Thing()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Inforamtion()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Document()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Account()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Event()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Activity()
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Conference document(has a date of issue)
Person(has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>String()
Symposium()<edge_begin><edge_end>Event()
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event()
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event()
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event()
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity()
Activity()<edge_begin><edge_end>Thing()
Activity()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity()
Registration()<edge_begin><edge_end>Activity()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Research Topic()<edge_begin><edge_end>Event Setup()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document(has a date of issue)
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Committee member()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates(is an abstract submission date, is a full paper submission date, is an ending date, is a date of acceptance announcement, is a date of camera ready paper submission, is a starting date)<edge_begin><edge_end>date()
Important dates(is an abstract submission date, is a full paper submission date, is an ending date, is a date of acceptance announcement, is a date of camera ready paper submission, is a starting date)<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Information for participants()<edge_begin><edge_end>Conference document(has a date of issue)
Conference document(has a date of issue)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Conference document(has a date of issue)<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Conference contribution()
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates(is an abstract submission date, is a full paper submission date, is an ending date, is a date of acceptance announcement, is a date of camera ready paper submission, is a starting date)
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document(has a date of issue)
Conference announcement()<edge_begin><edge_end>Conference document(has a date of issue)
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Track()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event()
Tutorial()<edge_begin><edge_end>Conference part()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Review()<edge_begin><edge_end>Conference document(has a date of issue)
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer()
Review()<edge_begin><edge_end>Reviewed contribution()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document(has a date of issue)
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, email)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document(has a date of issue)
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Requirement(refinement Type)<edge_begin><edge_end>Requirement(refinement Type)
Definable Requirement(time, state)<edge_begin><edge_end>Requirement(refinement Type)
Softgoal()<edge_begin><edge_end>Requirement(refinement Type)
Softgoal()<edge_begin><edge_end>Quality Constraint()
Performative Requirement(start Time)<edge_begin><edge_end>Definable Requirement(time, state)
Quality Constraint()<edge_begin><edge_end>Definable Requirement(time, state)
Quality Constraint()<edge_begin><edge_end>Softgoal()
Aw Req(increment Coefficient)<edge_begin><edge_end>Definable Requirement(time, state)
Domain Assumption()<edge_begin><edge_end>Definable Requirement(time, state)
Goal()<edge_begin><edge_end>Performative Requirement(start Time)
Goal()<edge_begin><edge_end>Goal Model(internal Id)
Task()<edge_begin><edge_end>Performative Requirement(start Time)
Actor()<edge_begin><edge_end>Goal Model(internal Id)
Configuration()<edge_begin><edge_end>Parameter(type, unit, value, metric)
Configuration()<edge_begin><edge_end>Goal Model(internal Id)
Differential Relation(lower Bound, upper Bound, operator, value)<edge_begin><edge_end>Aw Req(increment Coefficient)
Differential Relation(lower Bound, upper Bound, operator, value)<edge_begin><edge_end>Parameter(type, unit, value, metric)
Goal Model(internal Id)<edge_begin><edge_end>Goal()
Goal Model(internal Id)<edge_begin><edge_end>Actor()
Goal Model(internal Id)<edge_begin><edge_end>Configuration()
Goal Model(internal Id)<edge_begin><edge_end>Differential Relation(lower Bound, upper Bound, operator, value)
Parameter(type, unit, value, metric)<edge_begin><edge_end>Configuration()
Specification(name)<edge_begin><edge_end>Import(import URI)
Specification(name)<edge_begin><edge_end>Sml E Package(name)
Specification(name)<edge_begin><edge_end>SmlEClass(name)
Specification(name)<edge_begin><edge_end>Sml E Typed Element(name)
Specification(name)<edge_begin><edge_end>Event Parameter Ranges()
Specification(name)<edge_begin><edge_end>Collaboration(name)
Collaboration(name)<edge_begin><edge_end>Role(static, name)
Collaboration(name)<edge_begin><edge_end>Scenario(singular, kind, name)
Collaboration(name)<edge_begin><edge_end>Import(import URI)
Collaboration(name)<edge_begin><edge_end>Sml E Package(name)
Event Parameter Ranges()<edge_begin><edge_end>Sml E Typed Element(name)
Event Parameter Ranges()<edge_begin><edge_end>Ranges For Parameter()
Ranges For Parameter()<edge_begin><edge_end>Sml E Typed Element(name)
Ranges For Parameter()<edge_begin><edge_end>Abstract Ranges()
Integer Ranges(min, max, values)<edge_begin><edge_end>Abstract Ranges()
String Ranges(values)<edge_begin><edge_end>Abstract Ranges()
Enum Ranges()<edge_begin><edge_end>Abstract Ranges()
Enum Ranges()<edge_begin><edge_end>SmlEEnumLiteral(name)
Role(static, name)<edge_begin><edge_end>SmlEClass(name)
Scenario(singular, kind, name)<edge_begin><edge_end>Role Binding Constraint()
Scenario(singular, kind, name)<edge_begin><edge_end>Interaction()
Role Binding Constraint()<edge_begin><edge_end>Role(static, name)
Role Binding Constraint()<edge_begin><edge_end>Binding Expression()
Feature Access Binding Expression()<edge_begin><edge_end>Binding Expression()
Feature Access Binding Expression()<edge_begin><edge_end>Feature Access()
Variable Fragment()<edge_begin><edge_end>Interaction Fragment()
Variable Fragment()<edge_begin><edge_end>Variable Expression()
Interaction()<edge_begin><edge_end>Interaction Fragment()
Interaction()<edge_begin><edge_end>Constraint Block()
Modal Message(strict, requested)<edge_begin><edge_end>Interaction Fragment()
Modal Message(strict, requested)<edge_begin><edge_end>Role(static, name)
Modal Message(strict, requested)<edge_begin><edge_end>Sml E Typed Element(name)
Modal Message(strict, requested)<edge_begin><edge_end>Parameter Binding()
Parameter Binding()<edge_begin><edge_end>Parameter Expression()
Random Parameter()<edge_begin><edge_end>Parameter Expression()
Expression Parameter()<edge_begin><edge_end>Parameter Expression()
Expression Parameter()<edge_begin><edge_end>Expression()
Variable Binding Parameter()<edge_begin><edge_end>Parameter Expression()
Variable Binding Parameter()<edge_begin><edge_end>Variable Value()
Alternative()<edge_begin><edge_end>Interaction Fragment()
Alternative()<edge_begin><edge_end>Case()
Case()<edge_begin><edge_end>Case Condition()
Case()<edge_begin><edge_end>Interaction()
Loop()<edge_begin><edge_end>Interaction Fragment()
Loop()<edge_begin><edge_end>Loop Condition()
Loop()<edge_begin><edge_end>Interaction()
Parallel()<edge_begin><edge_end>Interaction Fragment()
Parallel()<edge_begin><edge_end>Interaction()
Condition()<edge_begin><edge_end>Interaction Fragment()
Condition()<edge_begin><edge_end>Condition Expression()
Wait Condition(strict, requested)<edge_begin><edge_end>Condition()
Interrupt Condition()<edge_begin><edge_end>Condition()
Violation Condition()<edge_begin><edge_end>Condition()
Loop Condition()<edge_begin><edge_end>Condition Expression()
Case Condition()<edge_begin><edge_end>Condition Expression()
Condition Expression()<edge_begin><edge_end>Expression()
Constraint Block()<edge_begin><edge_end>Message()
Message()<edge_begin><edge_end>Role(static, name)
Message()<edge_begin><edge_end>Sml E Typed Element(name)
Message()<edge_begin><edge_end>Parameter Binding()
Document()<edge_begin><edge_end>Import(import URI)
Document()<edge_begin><edge_end>Sml E Package(name)
Document()<edge_begin><edge_end>Expression Region()
Expression Region()<edge_begin><edge_end>Expression Or Region()
Expression And Variables()<edge_begin><edge_end>Expression Or Region()
Variable Expression()<edge_begin><edge_end>Expression And Variables()
Variable Expression()<edge_begin><edge_end>Expression()
Variable Declaration(name)<edge_begin><edge_end>Expression()
Typed Variable Declaration(name)<edge_begin><edge_end>Variable Expression()
Typed Variable Declaration(name)<edge_begin><edge_end>SmlEClassifier(name)
Variable Assignment()<edge_begin><edge_end>Variable Expression()
Variable Assignment()<edge_begin><edge_end>Variable Declaration(name)
Expression()<edge_begin><edge_end>Expression And Variables()
Value()<edge_begin><edge_end>Expression()
Integer Value(value)<edge_begin><edge_end>Value()
Boolean Value(value)<edge_begin><edge_end>Value()
String Value(value)<edge_begin><edge_end>Value()
Enum Value()<edge_begin><edge_end>Value()
Enum Value()<edge_begin><edge_end>SmlEEnum(name)
Enum Value()<edge_begin><edge_end>SmlEEnumLiteral(name)
Null Value()<edge_begin><edge_end>Value()
Variable Value()<edge_begin><edge_end>Value()
Variable Value()<edge_begin><edge_end>Variable(name)
Collection Access(collection Operation)<edge_begin><edge_end>Expression()
Feature Access()<edge_begin><edge_end>Value()
Feature Access()<edge_begin><edge_end>Variable(name)
Feature Access()<edge_begin><edge_end>Structural Feature Value()
Feature Access()<edge_begin><edge_end>Collection Access(collection Operation)
Structural Feature Value()<edge_begin><edge_end>Sml E Structural Feature(name)
Binary Operation Expression(operator)<edge_begin><edge_end>Expression()
Unary Operation Expression(operator)<edge_begin><edge_end>Expression()
XML Value Function Concat(returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Concat(returning Option)<edge_begin><edge_end>XML Value Function Concat Content Item()
XML Namespace Declaration Prefix(prefix)<edge_begin><edge_end>XML Namespace Declaration Item(uri)
XML Namespace Declaration Default(no Default)<edge_begin><edge_end>XML Namespace Declaration Item(uri)
XML Attribute Declaration Item()<edge_begin><edge_end>XML Attributes Declaration()
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Namespaces Declaration()
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Attributes Declaration()
XML Value Function Element(element Name, returning Option)<edge_begin><edge_end>XML Value Function Element Content List(null Handling Option)
XML Namespace Declaration Item(uri)<edge_begin><edge_end>XML Namespaces Declaration()
XML Value Function Element Content Item()<edge_begin><edge_end>XML Value Function Element Content List(null Handling Option)
XML Value Function Forest(null Handling Option, returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Forest(null Handling Option, returning Option)<edge_begin><edge_end>XML Value Function Forest Content Item()
XML Value Function Forest(null Handling Option, returning Option)<edge_begin><edge_end>XML Namespaces Declaration()
XML Value Function Comment(returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Comment(returning Option)<edge_begin><edge_end>XML Value Function Comment Content()
XML Value Function Document(returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Document(returning Option)<edge_begin><edge_end>XML Value Function Document Content()
XML Value Function Parse(content Option, whitespace Handling Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Parse(content Option, whitespace Handling Option)<edge_begin><edge_end>XML Value Function Parse Content()
XML Value Function PI(target Name, returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function PI(target Name, returning Option)<edge_begin><edge_end>XML Value Function PI Content()
XML Value Function Query(empty Handling Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Query(empty Handling Option)<edge_begin><edge_end>XML Query Expression(xquery Expr Content)
XML Value Function Query(empty Handling Option)<edge_begin><edge_end>XML Query Argument List(passing Mechanism)
XML Value Function Query(empty Handling Option)<edge_begin><edge_end>XML Value Function Query Returning(returning Option, passing Option)
XML Value Function Text(returning Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Text(returning Option)<edge_begin><edge_end>XML Value Function Text Content()
XML Value Function Validate(content Option)<edge_begin><edge_end>XML Value Function()
XML Value Function Validate(content Option)<edge_begin><edge_end>XML Value Function Validate Content()
XML Value Function Validate(content Option)<edge_begin><edge_end>XML Value Function Validate According To()
XML Predicate Content()<edge_begin><edge_end>XML Predicate()
XML Predicate Document()<edge_begin><edge_end>XML Predicate()
XML Predicate Exists()<edge_begin><edge_end>XML Predicate()
XML Predicate Exists()<edge_begin><edge_end>XML Query Expression(xquery Expr Content)
XML Predicate Exists()<edge_begin><edge_end>XML Query Argument List(passing Mechanism)
XML Predicate Valid()<edge_begin><edge_end>XML Predicate()
XML Query Expression(xquery Expr Content)<edge_begin><edge_end>XML Predicate Exists()
XML Query Expression(xquery Expr Content)<edge_begin><edge_end>XML Value Function Query(empty Handling Option)
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Predicate Exists()
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Query Argument Item(passing Mechanism)
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Value Function Query(empty Handling Option)
XML Query Argument List(passing Mechanism)<edge_begin><edge_end>XML Table Function(table Row Pattern)
XML Query Argument Item(passing Mechanism)<edge_begin><edge_end>XML Query Argument List(passing Mechanism)
XML Serialize Function(content Option, serialize Version, declaration Option)<edge_begin><edge_end>XML Serialize Function Target()
XML Serialize Function(content Option, serialize Version, declaration Option)<edge_begin><edge_end>XML Serialize Function Encoding(encoding Name)
XML Serialize Function Target()<edge_begin><edge_end>XML Serialize Function(content Option, serialize Version, declaration Option)
XML Aggregate Function(returning Option)<edge_begin><edge_end>XML Aggregate Sort Specification()
XML Value Function Concat Content Item()<edge_begin><edge_end>XML Value Function Concat(returning Option)
XML Value Function Comment Content()<edge_begin><edge_end>XML Value Function Comment(returning Option)
XML Value Function Document Content()<edge_begin><edge_end>XML Value Function Document(returning Option)
XML Aggregate Sort Specification()<edge_begin><edge_end>XML Aggregate Function(returning Option)
XML Value Function Forest Content Item()<edge_begin><edge_end>XML Value Function Forest(null Handling Option, returning Option)
XML Value Function Parse Content()<edge_begin><edge_end>XML Value Function Parse(content Option, whitespace Handling Option)
XML Value Function PI Content()<edge_begin><edge_end>XML Value Function PI(target Name, returning Option)
XML Table Function(table Row Pattern)<edge_begin><edge_end>XML Query Argument List(passing Mechanism)
XML Table Function(table Row Pattern)<edge_begin><edge_end>XML Table Column Definition Item()
XML Table Function(table Row Pattern)<edge_begin><edge_end>XML Namespaces Declaration()
XML Value Function Text Content()<edge_begin><edge_end>XML Value Function Text(returning Option)
XML Value Function Validate Content()<edge_begin><edge_end>XML Value Function Validate(content Option)
XML Table Column Definition Item()<edge_begin><edge_end>XML Table Function(table Row Pattern)
XML Table Column Definition Regular(passing Option, table Column Pattern)<edge_begin><edge_end>XML Table Column Definition Item()
XML Table Column Definition Regular(passing Option, table Column Pattern)<edge_begin><edge_end>XML Table Column Definition Default()
XML Table Column Definition Ordinality()<edge_begin><edge_end>XML Table Column Definition Item()
XML Value Function Validate According To()<edge_begin><edge_end>XML Value Function Validate(content Option)
XML Value Function Validate According To()<edge_begin><edge_end>XML Value Function Validate Element()
XML Value Function Validate According To URI(no Namespace, target Namespace URI, schema Location URI)<edge_begin><edge_end>XML Value Function Validate According To()
XML Value Function Validate According To Identifier(schema Name, registered XML Schema Name)<edge_begin><edge_end>XML Value Function Validate According To()
XML Value Function Validate Element Name()<edge_begin><edge_end>XML Value Function Validate Element()
XML Value Function Validate Element Namespace(no Namespace, namespace URI)<edge_begin><edge_end>XML Value Function Validate Element()
XML Namespaces Declaration()<edge_begin><edge_end>XML Namespace Declaration Item(uri)
XML Namespaces Declaration()<edge_begin><edge_end>XML Value Function Element(element Name, returning Option)
XML Namespaces Declaration()<edge_begin><edge_end>XML Value Function Forest(null Handling Option, returning Option)
XML Namespaces Declaration()<edge_begin><edge_end>XML Table Function(table Row Pattern)
XML Attributes Declaration()<edge_begin><edge_end>XML Value Function Element(element Name, returning Option)
XML Attributes Declaration()<edge_begin><edge_end>XML Attribute Declaration Item()
XML Value Function Element Content List(null Handling Option)<edge_begin><edge_end>XML Value Function Element(element Name, returning Option)
XML Value Function Element Content List(null Handling Option)<edge_begin><edge_end>XML Value Function Element Content Item()
XML Value Function Query Returning(returning Option, passing Option)<edge_begin><edge_end>XML Value Function Query(empty Handling Option)
XML Value Function Validate Element()<edge_begin><edge_end>XML Value Function Validate Element Namespace(no Namespace, namespace URI)
XML Value Function Validate Element()<edge_begin><edge_end>XML Value Function Validate Element Name()
XML Value Function Validate Element()<edge_begin><edge_end>XML Value Function Validate According To()
XML Table Column Definition Default()<edge_begin><edge_end>XML Table Column Definition Regular(passing Option, table Column Pattern)
m Comp(type, name)<edge_begin><edge_end>m Comp(type, name)
m Comp(type, name)<edge_begin><edge_end>m Port(name, io, type)
m Comp(type, name)<edge_begin><edge_end>m FSM(name)
m Comp(type, name)<edge_begin><edge_end>m Variable(name, type)
m Port(name, io, type)<edge_begin><edge_end>m Port(name, io, type)
m Port(name, io, type)<edge_begin><edge_end>m Variable(name, type)
m FSM(name)<edge_begin><edge_end>m Comp(type, name)
m FSM(name)<edge_begin><edge_end>m Variable(name, type)
m FSM(name)<edge_begin><edge_end>m State(name)
m State(name)<edge_begin><edge_end>m FSM(name)
m State(name)<edge_begin><edge_end>m Variable(name, type)
m State(name)<edge_begin><edge_end>m Transition(name, trigger Exp, guard, action)
m State(name)<edge_begin><edge_end>m State(name)
m Transition(name, trigger Exp, guard, action)<edge_begin><edge_end>m State(name)
m Transition(name, trigger Exp, guard, action)<edge_begin><edge_end>m Variable(name, type)
m Transition(name, trigger Exp, guard, action)<edge_begin><edge_end>m Port(name, io, type)
Descriptorlist Type()<edge_begin><edge_end>Descriptor Type(id, ontologyid, provider)
Descriptorresultlists Type()<edge_begin><edge_end>Descriptorresult Type(descriptorid, structureid)
Descriptorresult Type(descriptorid, structureid)<edge_begin><edge_end>Descriptorvalue Type(index, label, value)
Descriptor Type(id, ontologyid, provider)<edge_begin><edge_end>Parameter Type(key, value)
Document Root(mixed)<edge_begin><edge_end>Qsar Type()
Preprocessing Type()<edge_begin><edge_end>Preprocessing Step Type(id, name, namespace, order, vendor)
Qsar Type()<edge_begin><edge_end>Structurelist Type()
Qsar Type()<edge_begin><edge_end>Descriptorlist Type()
Qsar Type()<edge_begin><edge_end>Descriptorprovider Type(id, name, u RL, vendor, version)
Qsar Type()<edge_begin><edge_end>Preprocessing Type()
Qsar Type()<edge_begin><edge_end>Responses List Type()
Qsar Type()<edge_begin><edge_end>Responseunit Type(description, id, name, shortname, u RL)
Qsar Type()<edge_begin><edge_end>Metadata Type(authors, datasetname, description, license, u RL)
Qsar Type()<edge_begin><edge_end>Descriptorresultlists Type()
Resource Type(checksum, excluded, file, id, name, no2d, no3d, no Mols, type, u RL)<edge_begin><edge_end>Structure Type(id, inchi, resourceid, resourceindex)
Responses List Type()<edge_begin><edge_end>Response Type(value, array Values, structure ID, unit)
Structurelist Type()<edge_begin><edge_end>Resource Type(checksum, excluded, file, id, name, no2d, no3d, no Mols, type, u RL)
Ddl()<edge_begin><edge_end>Ddl Statement()
Alter()<edge_begin><edge_end>Ddl Statement()
Alter()<edge_begin><edge_end>Create Table()
Alter()<edge_begin><edge_end>Alter Table Action()
Alter Table Action()<edge_begin><edge_end>Constraint()
Drop Table Constraint()<edge_begin><edge_end>Alter Table Action()
Drop Table Constraint()<edge_begin><edge_end>Constraint()
Comment(comment)<edge_begin><edge_end>Ddl Statement()
Table Comment()<edge_begin><edge_end>Comment(comment)
Table Comment()<edge_begin><edge_end>Create Table()
Column Comment()<edge_begin><edge_end>Comment(comment)
Column Comment()<edge_begin><edge_end>Column(sorted, default)
Add Table Constraint(name)<edge_begin><edge_end>Alter Table Action()
Create(name)<edge_begin><edge_end>Ddl Statement()
Create Table()<edge_begin><edge_end>Create(name)
Create Table()<edge_begin><edge_end>Table Property(name)
Create Index(unique, sort Orders)<edge_begin><edge_end>Create(name)
Create Index(unique, sort Orders)<edge_begin><edge_end>Create Table()
Create Index(unique, sort Orders)<edge_begin><edge_end>Column(sorted, default)
Column(sorted, default)<edge_begin><edge_end>Table Property(name)
Column(sorted, default)<edge_begin><edge_end>Sql Data Type(name)
Column(sorted, default)<edge_begin><edge_end>Constraint()
Column(sorted, default)<edge_begin><edge_end>Reference Clause()
Drop(object)<edge_begin><edge_end>Ddl Statement()
Constraint()<edge_begin><edge_end>Table Property(name)
Nullable Constraint(not)<edge_begin><edge_end>Constraint()
Unique Key Constraint()<edge_begin><edge_end>Constraint()
Unique Key Constraint()<edge_begin><edge_end>Column(sorted, default)
Primary Key Constraint()<edge_begin><edge_end>Constraint()
Primary Key Constraint()<edge_begin><edge_end>Column(sorted, default)
Foreign Key Constraint()<edge_begin><edge_end>Constraint()
Foreign Key Constraint()<edge_begin><edge_end>Column(sorted, default)
Foreign Key Constraint()<edge_begin><edge_end>Reference Clause()
Reference Clause()<edge_begin><edge_end>Create Table()
Reference Clause()<edge_begin><edge_end>Column(sorted, default)
Sql Character(national, size)<edge_begin><edge_end>Sql Data Type(name)
Sql Number(has Precision, precision, scale)<edge_begin><edge_end>Sql Data Type(name)
Long Raw()<edge_begin><edge_end>Sql Data Type(name)
Long(raw)<edge_begin><edge_end>Long Raw()
Raw(size)<edge_begin><edge_end>Long Raw()
Sql Date Time()<edge_begin><edge_end>Sql Data Type(name)
Sql Date()<edge_begin><edge_end>Sql Date Time()
Sql Time Stamp(precision)<edge_begin><edge_end>Sql Date Time()
Sql Interval(year, day, precision, seconds Precision)<edge_begin><edge_end>Sql Date Time()
Large Object Type(size)<edge_begin><edge_end>Sql Data Type(name)
Row Id Type(size)<edge_begin><edge_end>Sql Data Type(name)
Sql Boolean()<edge_begin><edge_end>Sql Data Type(name)
Project()<edge_begin><edge_end>Xmlns(name, value)
Project()<edge_begin><edge_end>Goal(name)
Project()<edge_begin><edge_end>Path(id, refid)
Project()<edge_begin><edge_end>Ant Property()
Project()<edge_begin><edge_end>Ant Task Def(name, classname)
Project()<edge_begin><edge_end>Pre Post Goal()
Xmlns(name, value)<edge_begin><edge_end>String()
Ant Property()<edge_begin><edge_end>Contents Goal()
Ant Property Name(name)<edge_begin><edge_end>Ant Property()
Ant Property Name(name)<edge_begin><edge_end>String()
Ant Property Value(value)<edge_begin><edge_end>Ant Property Name(name)
Ant Property Value(value)<edge_begin><edge_end>String()
Ant Property Location(location)<edge_begin><edge_end>Ant Property Name(name)
Ant Property Location(location)<edge_begin><edge_end>String()
Ant Property File(file)<edge_begin><edge_end>Ant Property()
Ant Property File(file)<edge_begin><edge_end>String()
Ant Property Env(environment)<edge_begin><edge_end>Ant Property()
Ant Property Env(environment)<edge_begin><edge_end>String()
Jelly Command()<edge_begin><edge_end>Contents Goal()
Jelly Set(var, value)<edge_begin><edge_end>Jelly Command()
Jelly Set(var, value)<edge_begin><edge_end>String()
Abstract Goal()<edge_begin><edge_end>Contents Goal()
Attain Goal()<edge_begin><edge_end>Contents Goal()
Attain Goal()<edge_begin><edge_end>Goal(name)
Pre Post Goal()<edge_begin><edge_end>Abstract Goal()
Pre Goal()<edge_begin><edge_end>Pre Post Goal()
Pre Goal()<edge_begin><edge_end>Goal(name)
Post Goal()<edge_begin><edge_end>Pre Post Goal()
Post Goal()<edge_begin><edge_end>Goal(name)
Goal(name)<edge_begin><edge_end>Abstract Goal()
Goal(name)<edge_begin><edge_end>String()
Goal(name)<edge_begin><edge_end>Pre Goal()
Goal(name)<edge_begin><edge_end>Post Goal()
Basic()<edge_begin><edge_end>Pattern()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>String()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File List(dir, files)<edge_begin><edge_end>Basic()
File List(dir, files)<edge_begin><edge_end>String()
Filter(token, value)<edge_begin><edge_end>Basic()
Filter(token, value)<edge_begin><edge_end>String()
Filters File(file)<edge_begin><edge_end>Basic()
Filters File(file)<edge_begin><edge_end>String()
Path Element(path, location)<edge_begin><edge_end>Basic()
Path Element(path, location)<edge_begin><edge_end>String()
Set()<edge_begin><edge_end>Pattern()
Pattern Set()<edge_begin><edge_end>Set()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Set(dir)<edge_begin><edge_end>Set()
File Set(dir)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File Set(dir)<edge_begin><edge_end>Includes()
File Set(dir)<edge_begin><edge_end>Excludes()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Path(id, refid)<edge_begin><edge_end>Set()
Path(id, refid)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Class Path(refid)<edge_begin><edge_end>String()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Task()<edge_begin><edge_end>Contents Goal()
Ant Task Def(name, classname)<edge_begin><edge_end>Contents Goal()
Ant Task Def(name, classname)<edge_begin><edge_end>String()
New Task()<edge_begin><edge_end>Task()
New Task()<edge_begin><edge_end>Ant Task Def(name, classname)
New Task()<edge_begin><edge_end>Attribut(name, value)
Attribut(name, value)<edge_begin><edge_end>String()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Exec(executable, dir)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>Execution Task()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Echo(message, file, append)<edge_begin><edge_end>String()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Format Tstamp(property, pattern, offset, unit, locale)<edge_begin><edge_end>String()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>String()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>String()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>String()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mkdir(dir)<edge_begin><edge_end>File Task()
Mkdir(dir)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>String()
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Packages(packageprefix, packagetype)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Commands(comprefix, comname, comtext, number)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Title(titleprefix, titletext, authortext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Styles(styleprefix, stylesnames, stylenames)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Abstracte(abstractprefix, abstracttext)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Body()
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Bibliography(bibstyle)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>Begin(beginprefix)
Document(documenttype, prefix, fontsize, papertype)<edge_begin><edge_end>End(endprefix)
Title(titleprefix, titletext, authortext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Abstracte(abstractprefix, abstracttext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Body()<edge_begin><edge_end>Section(sectionprefix, sectionname, sectiontext)
Body()<edge_begin><edge_end>Figures(figprefix, figcaption, figname)
Body()<edge_begin><edge_end>Enumerate(enumprefix, enumtext)
Bibliography(bibstyle)<edge_begin><edge_end>General(genprefix, genname, gentext)
Bibliography(bibstyle)<edge_begin><edge_end>bibitem(bibprefix, bibtext)
Bibliography(bibstyle)<edge_begin><edge_end>Beginbib(Beginbibprefix)
Bibliography(bibstyle)<edge_begin><edge_end>Endbib(Endbibprefix)
Section(sectionprefix, sectionname, sectiontext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Section(sectionprefix, sectionname, sectiontext)<edge_begin><edge_end>Subsection(subsectionprefix, subsectionname, subsectiontext)
Subsection(subsectionprefix, subsectionname, subsectiontext)<edge_begin><edge_end>Subsection(subsectionprefix, subsectionname, subsectiontext)
Subsection(subsectionprefix, subsectionname, subsectiontext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Figures(figprefix, figcaption, figname)<edge_begin><edge_end>General(genprefix, genname, gentext)
Enumerate(enumprefix, enumtext)<edge_begin><edge_end>General(genprefix, genname, gentext)
Ided Element(id)<edge_begin><edge_end>String()
URI(value)<edge_begin><edge_end>String()
Any Element(name, text)<edge_begin><edge_end>String()
PNML Document()<edge_begin><edge_end>URI(value)
PNML Document()<edge_begin><edge_end>Net Element()
Net Element()<edge_begin><edge_end>Ided Element(id)
Net Element()<edge_begin><edge_end>URI(value)
Net Element()<edge_begin><edge_end>PNML Document()
Net Element()<edge_begin><edge_end>Net Content()
Net Element()<edge_begin><edge_end>Tool Specific(tool, version)
Net Element()<edge_begin><edge_end>Net Graphics()
Net Element()<edge_begin><edge_end>Name()
Net Content()<edge_begin><edge_end>Net Element()
Net Content()<edge_begin><edge_end>Name()
Net Content()<edge_begin><edge_end>Page()
Tool Specific(tool, version)<edge_begin><edge_end>String()
Tool Specific(tool, version)<edge_begin><edge_end>Any Element(name, text)
Tool Specific(tool, version)<edge_begin><edge_end>Net Element()
Tool Specific(tool, version)<edge_begin><edge_end>Arc()
Tool Specific(tool, version)<edge_begin><edge_end>Node()
Tool Specific(tool, version)<edge_begin><edge_end>Page()
Labeled Element()<edge_begin><edge_end>Label(text)
Labeled Element()<edge_begin><edge_end>Annotation Graphics()
Label(text)<edge_begin><edge_end>String()
Label(text)<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Labeled Element()
Name()<edge_begin><edge_end>Net Element()
Name()<edge_begin><edge_end>Net Content()
Inscription()<edge_begin><edge_end>Labeled Element()
Inscription()<edge_begin><edge_end>Arc()
Initial Marking()<edge_begin><edge_end>Labeled Element()
Initial Marking()<edge_begin><edge_end>Place()
Net Content Element()<edge_begin><edge_end>Net Content()
Net Content Element()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Net Content()
Arc()<edge_begin><edge_end>Ided Element(id)
Arc()<edge_begin><edge_end>Net Content Element()
Arc()<edge_begin><edge_end>Tool Specific(tool, version)
Arc()<edge_begin><edge_end>Edge Graphics()
Arc()<edge_begin><edge_end>Inscription()
Page()<edge_begin><edge_end>Net Content()
Page()<edge_begin><edge_end>Ided Element(id)
Page()<edge_begin><edge_end>Tool Specific(tool, version)
Page()<edge_begin><edge_end>Page Graphics()
Reference()<edge_begin><edge_end>Node()
Reference Place()<edge_begin><edge_end>Net Content()
Reference Place()<edge_begin><edge_end>Reference()
Reference Transition()<edge_begin><edge_end>Net Content()
Reference Transition()<edge_begin><edge_end>Reference()
Node()<edge_begin><edge_end>Ided Element(id)
Node()<edge_begin><edge_end>Net Content Element()
Node()<edge_begin><edge_end>Tool Specific(tool, version)
Node()<edge_begin><edge_end>Node Graphics()
Place()<edge_begin><edge_end>Net Content Element()
Place()<edge_begin><edge_end>Initial Marking()
Transition()<edge_begin><edge_end>Net Content Element()
Net Graphics()<edge_begin><edge_end>Graphics()
Net Graphics()<edge_begin><edge_end>Net Element()
Node Graphics()<edge_begin><edge_end>Graphics()
Node Graphics()<edge_begin><edge_end>Node()
Node Graphics()<edge_begin><edge_end>Position()
Node Graphics()<edge_begin><edge_end>Dimension(width, height)
Node Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Node Graphics()<edge_begin><edge_end>Line(width, shape, style)
Edge Graphics()<edge_begin><edge_end>Graphics()
Edge Graphics()<edge_begin><edge_end>Arc()
Edge Graphics()<edge_begin><edge_end>Position()
Edge Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Edge Graphics()<edge_begin><edge_end>Line(width, shape, style)
Annotation Graphics()<edge_begin><edge_end>Graphics()
Annotation Graphics()<edge_begin><edge_end>Labeled Element()
Annotation Graphics()<edge_begin><edge_end>Offset()
Annotation Graphics()<edge_begin><edge_end>Font(family, style, weight, size, decoration, align, rotation)
Annotation Graphics()<edge_begin><edge_end>Fill(gradientrotation)
Annotation Graphics()<edge_begin><edge_end>Line(width, shape, style)
Page Graphics()<edge_begin><edge_end>Graphics()
Page Graphics()<edge_begin><edge_end>Page()
Coordinate(x, y)<edge_begin><edge_end>Integer()
Position()<edge_begin><edge_end>Coordinate(x, y)
Position()<edge_begin><edge_end>Node Graphics()
Position()<edge_begin><edge_end>Edge Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Offset()<edge_begin><edge_end>Annotation Graphics()
Dimension(width, height)<edge_begin><edge_end>Integer()
Dimension(width, height)<edge_begin><edge_end>Node Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Color()
Fill(gradientrotation)<edge_begin><edge_end>URI(value)
Fill(gradientrotation)<edge_begin><edge_end>Node Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Edge Graphics()
Fill(gradientrotation)<edge_begin><edge_end>Annotation Graphics()
Line(width, shape, style)<edge_begin><edge_end>Color()
Line(width, shape, style)<edge_begin><edge_end>Integer()
Line(width, shape, style)<edge_begin><edge_end>Node Graphics()
Line(width, shape, style)<edge_begin><edge_end>Edge Graphics()
Line(width, shape, style)<edge_begin><edge_end>Annotation Graphics()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>String()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Integer()
Font(family, style, weight, size, decoration, align, rotation)<edge_begin><edge_end>Annotation Graphics()
Model()<edge_begin><edge_end>Build Entry()
Entry()<edge_begin><edge_end>Variable()
Entry()<edge_begin><edge_end>Assign Extra()
If()<edge_begin><edge_end>Shell Cmd(name)
Assign()<edge_begin><edge_end>Assign Extra()
Values()<edge_begin><edge_end>Assign()
Values()<edge_begin><edge_end>Value()
Variable()<edge_begin><edge_end>If()
Variable()<edge_begin><edge_end>Var Slash Sym(name)
Shell Cmd(name)<edge_begin><edge_end>Shell Part()
Shell Part()<edge_begin><edge_end>Var Slash Sym(name)
Shell Part()<edge_begin><edge_end>Shell Cmd(name)
If Eq()<edge_begin><edge_end>Build Entry()
If N Eq()<edge_begin><edge_end>Build Entry()
Ifndef(name)<edge_begin><edge_end>Build Entry()
Host Program(name)<edge_begin><edge_end>Build Entry()
Host Program(name)<edge_begin><edge_end>Variable()
Host Program(name)<edge_begin><edge_end>Assign()
Object()<edge_begin><edge_end>Build Entry()
Target()<edge_begin><edge_end>Build Entry()
Target()<edge_begin><edge_end>Values()
My Variable(name)<edge_begin><edge_end>Build Entry()
My Variable(name)<edge_begin><edge_end>Variable()
Obj y()<edge_begin><edge_end>Object Y()
Obj y()<edge_begin><edge_end>Assign Extra()
Obj m()<edge_begin><edge_end>Object M()
Obj m()<edge_begin><edge_end>Assign Extra()
Object File()<edge_begin><edge_end>Value()
Object Single File(name)<edge_begin><edge_end>Value()
Object Variable(additional)<edge_begin><edge_end>Value()
Object Variable(additional)<edge_begin><edge_end>Variable()
Object Shell Cmd()<edge_begin><edge_end>Value()
Object Shell Cmd()<edge_begin><edge_end>Shell Cmd(name)
Object String()<edge_begin><edge_end>Value()
Object Shell Char(value)<edge_begin><edge_end>Value()
Object Dir()<edge_begin><edge_end>Value()
Include()<edge_begin><edge_end>Shell Cmd(name)
Schema(name)<edge_begin><edge_end>Table(name)
Schema(name)<edge_begin><edge_end>Domain(name)
Schema(name)<edge_begin><edge_end>Constraint(name, description)
Table(name)<edge_begin><edge_end>Candidate Key(name)
Table(name)<edge_begin><edge_end>Attribute(name, type, nullable, multiplicity)
Table(name)<edge_begin><edge_end>Foreign Key()
Attribute(name, type, nullable, multiplicity)<edge_begin><edge_end>Domain(name)
Domain(name)<edge_begin><edge_end>Constraint(name, description)
Candidate Key(name)<edge_begin><edge_end>Attribute(name, type, nullable, multiplicity)
Foreign Key()<edge_begin><edge_end>Candidate Key(name)
Foreign Key()<edge_begin><edge_end>Table(name)
Primitive Type()<edge_begin><edge_end>Domain(name)
Enumeration Type()<edge_begin><edge_end>Domain(name)
Enumeration Type()<edge_begin><edge_end>Enumerated Literal(name)
Synchronisation()<edge_begin><edge_end>Expression()
Send Synchronisation()<edge_begin><edge_end>Synchronisation()
Receive Synchronisation()<edge_begin><edge_end>Synchronisation()
Expression()<edge_begin><edge_end>Commentable(comment)
Constant Expression(value)<edge_begin><edge_end>Expression()
Variable Expression()<edge_begin><edge_end>Expression()
Variable Expression()<edge_begin><edge_end>Identifier(name)
Array Variable Expression()<edge_begin><edge_end>Expression()
Inc Dec Expression(before Expression, increment)<edge_begin><edge_end>Expression()
Grouping Expression()<edge_begin><edge_end>Expression()
Binary Expression(operator)<edge_begin><edge_end>Expression()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Unary Expression(operator)<edge_begin><edge_end>Expression()
Simple If Expression()<edge_begin><edge_end>Expression()
Identifier Expression()<edge_begin><edge_end>Expression()
Identifier Expression()<edge_begin><edge_end>Identifier(name)
With Arguments Expression()<edge_begin><edge_end>Expression()
Point Expression()<edge_begin><edge_end>Expression()
Point Expression()<edge_begin><edge_end>Identifier(name)
Forall Expression()<edge_begin><edge_end>Expression()
Forall Expression()<edge_begin><edge_end>Identifier(name)
Forall Expression()<edge_begin><edge_end>Type(prefix)
Exists Expression()<edge_begin><edge_end>Expression()
Exists Expression()<edge_begin><edge_end>Type(prefix)
Fixed Expression(type)<edge_begin><edge_end>Expression()
Selection()<edge_begin><edge_end>Identifier(name)
Declaration()<edge_begin><edge_end>Commentable(comment)
Variable Declaration()<edge_begin><edge_end>Declaration()
Variable Declaration()<edge_begin><edge_end>Type(prefix)
Variable Declaration()<edge_begin><edge_end>Variable Identifier()
Variable Identifier()<edge_begin><edge_end>Identifier(name)
Variable Identifier()<edge_begin><edge_end>Array Declaration Type()
Variable Identifier()<edge_begin><edge_end>Initialiser()
Type Declaration()<edge_begin><edge_end>Declaration()
Type Declaration()<edge_begin><edge_end>Type(prefix)
Type Declaration()<edge_begin><edge_end>Array Declaration()
Function Declaration()<edge_begin><edge_end>Declaration()
Function Declaration()<edge_begin><edge_end>Type(prefix)
Function Declaration()<edge_begin><edge_end>Identifier(name)
Function Declaration()<edge_begin><edge_end>TA Parameter()
Function Declaration()<edge_begin><edge_end>Block()
Channel Priority Declaration()<edge_begin><edge_end>Declaration()
Channel Priority Declaration()<edge_begin><edge_end>Channel Priority()
Field Declaration()<edge_begin><edge_end>Type(prefix)
Field Declaration()<edge_begin><edge_end>Array Declaration()
Array Declaration()<edge_begin><edge_end>Identifier(name)
Array Declaration()<edge_begin><edge_end>Array Declaration Type()
Array Expression Type()<edge_begin><edge_end>Array Declaration Type()
Array Expression Type()<edge_begin><edge_end>Expression()
Array Type Type()<edge_begin><edge_end>Array Declaration Type()
Array Type Type()<edge_begin><edge_end>Type(prefix)
Expression Initialiser()<edge_begin><edge_end>Initialiser()
Expression Initialiser()<edge_begin><edge_end>Expression()
Array Initialiser()<edge_begin><edge_end>Initialiser()
TA Parameter()<edge_begin><edge_end>Type(prefix)
TA Parameter()<edge_begin><edge_end>Array Declaration()
Call By Value Parameter()<edge_begin><edge_end>TA Parameter()
Call By Reference Parameter()<edge_begin><edge_end>TA Parameter()
Block()<edge_begin><edge_end>Declaration()
Block()<edge_begin><edge_end>Statement()
Block Statement()<edge_begin><edge_end>Statement()
Block Statement()<edge_begin><edge_end>Block()
Expression Statement()<edge_begin><edge_end>Statement()
Expression Statement()<edge_begin><edge_end>Expression()
For Loop Statement()<edge_begin><edge_end>Statement()
For Loop Statement()<edge_begin><edge_end>Expression()
Iteration Statement()<edge_begin><edge_end>Statement()
Iteration Statement()<edge_begin><edge_end>Identifier(name)
Iteration Statement()<edge_begin><edge_end>Type(prefix)
While Loop Statement()<edge_begin><edge_end>Statement()
While Loop Statement()<edge_begin><edge_end>Expression()
Do While Loop Statement()<edge_begin><edge_end>Statement()
Do While Loop Statement()<edge_begin><edge_end>Expression()
If Statement()<edge_begin><edge_end>Statement()
If Statement()<edge_begin><edge_end>Expression()
Return Statement()<edge_begin><edge_end>Statement()
Return Statement()<edge_begin><edge_end>Expression()
Default Channel Priority()<edge_begin><edge_end>Channel Priority()
Simple Channel Priority()<edge_begin><edge_end>Channel Priority()
Simple Channel Priority()<edge_begin><edge_end>Channel Expression()
Complex Channel Priority(channel Operator)<edge_begin><edge_end>Channel Priority()
Complex Channel Priority(channel Operator)<edge_begin><edge_end>Channel Expression()
Identifier Channel Expression()<edge_begin><edge_end>Channel Expression()
Identifier Channel Expression()<edge_begin><edge_end>Identifier(name)
Expression Channel Expression()<edge_begin><edge_end>Channel Expression()
Expression Channel Expression()<edge_begin><edge_end>Expression()
Identifier Type()<edge_begin><edge_end>Type(prefix)
Identifier Type()<edge_begin><edge_end>Identifier(name)
Simple Type(type)<edge_begin><edge_end>Type(prefix)
Integer Range()<edge_begin><edge_end>Type(prefix)
Integer Range()<edge_begin><edge_end>Expression()
Scalar()<edge_begin><edge_end>Type(prefix)
Scalar()<edge_begin><edge_end>Expression()
Struct()<edge_begin><edge_end>Type(prefix)
Struct()<edge_begin><edge_end>Field Declaration()
Project(id)<edge_begin><edge_end>TA Element()
Project(id)<edge_begin><edge_end>Declaration()
Project(id)<edge_begin><edge_end>Template()
Project(id)<edge_begin><edge_end>System Definition()
Template()<edge_begin><edge_end>TA Element()
Template()<edge_begin><edge_end>Nameable(name)
Template()<edge_begin><edge_end>Identifyable(id)
Template()<edge_begin><edge_end>Declaration()
Template()<edge_begin><edge_end>Location(urgent, committed)
Template()<edge_begin><edge_end>Edge()
Edge()<edge_begin><edge_end>TA Element()
Edge()<edge_begin><edge_end>Location(urgent, committed)
Edge()<edge_begin><edge_end>Guards()
Edge()<edge_begin><edge_end>Synchronisation()
Edge()<edge_begin><edge_end>Selections()
Edge()<edge_begin><edge_end>Updates()
TA Element()<edge_begin><edge_end>Commentable(comment)
TA Element()<edge_begin><edge_end>Nameable(name)
Location(urgent, committed)<edge_begin><edge_end>TA Element()
Location(urgent, committed)<edge_begin><edge_end>Expression()
System Definition()<edge_begin><edge_end>Template Instantiation()
System Definition()<edge_begin><edge_end>System()
Simple System()<edge_begin><edge_end>System()
Simple System()<edge_begin><edge_end>Identifier(name)
Complex System(operator)<edge_begin><edge_end>System()
Template Instantiation()<edge_begin><edge_end>Identifier(name)
Template Instantiation()<edge_begin><edge_end>TA Parameter()
Template Instantiation()<edge_begin><edge_end>Expression()
Selections()<edge_begin><edge_end>Selection()
Updates()<edge_begin><edge_end>Expression()
Guards()<edge_begin><edge_end>Expression()
Sql Library(database, version)<edge_begin><edge_end>Tag(name)
Sql Library(database, version)<edge_begin><edge_end>Table(name)
Sql Library(database, version)<edge_begin><edge_end>Trigger(name, time)
Sql Library(database, version)<edge_begin><edge_end>Sql Method(array, name)
Sql Type()<edge_begin><edge_end>Sql Expr()
Table(name)<edge_begin><edge_end>Tag(name)
Table(name)<edge_begin><edge_end>Column(name, null, primary Key)
Table(name)<edge_begin><edge_end>Table Constraint()
Column(name, null, primary Key)<edge_begin><edge_end>Sql Type()
Column(name, null, primary Key)<edge_begin><edge_end>Sql Expr()
Unique Table Constraint(name)<edge_begin><edge_end>Table Constraint()
Unique Table Constraint(name)<edge_begin><edge_end>Column(name, null, primary Key)
Sql Method(array, name)<edge_begin><edge_end>Tag(name)
Sql Method(array, name)<edge_begin><edge_end>Table(name)
Sql Method(array, name)<edge_begin><edge_end>Sql Sentence()
Ordering Term(asc, desc)<edge_begin><edge_end>Sql Expr()
Result Column(name)<edge_begin><edge_end>Sql Expr()
Select List()<edge_begin><edge_end>Result Column(name)
Select(all)<edge_begin><edge_end>Sql Sentence()
Select(all)<edge_begin><edge_end>Select List()
Select(all)<edge_begin><edge_end>Table Ref(alias)
Select(all)<edge_begin><edge_end>Sql Expr()
Select(all)<edge_begin><edge_end>Ordering Term(asc, desc)
Table Ref(alias)<edge_begin><edge_end>Table(name)
Sql Function()<edge_begin><edge_end>Sql Expr()
Insert()<edge_begin><edge_end>Sql Sentence()
Insert()<edge_begin><edge_end>Table(name)
Insert Statement()<edge_begin><edge_end>Sql Sentence()
Insert Statement()<edge_begin><edge_end>Table(name)
Insert Statement()<edge_begin><edge_end>Column(name, null, primary Key)
Insert Statement()<edge_begin><edge_end>Sql Expr()
Delete()<edge_begin><edge_end>Sql Sentence()
Delete()<edge_begin><edge_end>Table(name)
Delete()<edge_begin><edge_end>Sql Expr()
Update()<edge_begin><edge_end>Sql Sentence()
Update()<edge_begin><edge_end>Table(name)
Update()<edge_begin><edge_end>Update Column Expression()
Update()<edge_begin><edge_end>Sql Expr()
Update Column Expression()<edge_begin><edge_end>Column(name, null, primary Key)
Update Column Expression()<edge_begin><edge_end>Sql Expr()
Get()<edge_begin><edge_end>Sql Sentence()
Get()<edge_begin><edge_end>Table(name)
Trigger(name, time)<edge_begin><edge_end>Tag(name)
Trigger(name, time)<edge_begin><edge_end>Trigger Action()
Trigger(name, time)<edge_begin><edge_end>Table(name)
Trigger(name, time)<edge_begin><edge_end>Sql Sentence()
Enum()<edge_begin><edge_end>Enum Element(name, text)
Type Def()<edge_begin><edge_end>Sql Type()
Sql Binary Expr(op)<edge_begin><edge_end>Sql Expr()
Sql Placeholder()<edge_begin><edge_end>Sql Expr()
New Column()<edge_begin><edge_end>Sql Expr()
New Column()<edge_begin><edge_end>Column(name, null, primary Key)
Old Column()<edge_begin><edge_end>Sql Expr()
Old Column()<edge_begin><edge_end>Column(name, null, primary Key)
Sql Nested()<edge_begin><edge_end>Sql Expr()
Column Ref()<edge_begin><edge_end>Sql Expr()
Column Ref()<edge_begin><edge_end>Table Ref(alias)
Column Ref()<edge_begin><edge_end>Column(name, null, primary Key)
Sql Param(name)<edge_begin><edge_end>Sql Expr()
Sql String Literal(value)<edge_begin><edge_end>Sql Expr()
Sql Number Literal(value)<edge_begin><edge_end>Sql Expr()
Sql Method Ref()<edge_begin><edge_end>Sql Sentence()
Sql Method Ref()<edge_begin><edge_end>Sql Method(array, name)
Delete Table()<edge_begin><edge_end>Sql Sentence()
Delete Table()<edge_begin><edge_end>Table(name)
Trigger Insert()<edge_begin><edge_end>Trigger Action()
Trigger Delete()<edge_begin><edge_end>Trigger Action()
Trigger Update()<edge_begin><edge_end>Trigger Action()
Trigger Update()<edge_begin><edge_end>Column(name, null, primary Key)
PT Marking(text)<edge_begin><edge_end>Annotation()
PT Marking(text)<edge_begin><edge_end>Natural()
PT Marking(text)<edge_begin><edge_end>Place()
PT Arc Annotation(text)<edge_begin><edge_end>Annotation()
PT Arc Annotation(text)<edge_begin><edge_end>Positive Integer()
PT Arc Annotation(text)<edge_begin><edge_end>Arc()
Petri Net Doc(xmlns)<edge_begin><edge_end>Petri Net(id, type)
Petri Net(id, type)<edge_begin><edge_end>Page()
Petri Net(id, type)<edge_begin><edge_end>Name(text)
Petri Net(id, type)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Petri Net(id, type)<edge_begin><edge_end>Petri Net Doc(xmlns)
Page()<edge_begin><edge_end>Pn Object(id)
Page()<edge_begin><edge_end>Petri Net(id, type)
Page()<edge_begin><edge_end>Node Graphics()
Pn Object(id)<edge_begin><edge_end>Name(text)
Pn Object(id)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Pn Object(id)<edge_begin><edge_end>Page()
Name(text)<edge_begin><edge_end>Annotation()
Name(text)<edge_begin><edge_end>Petri Net(id, type)
Name(text)<edge_begin><edge_end>Pn Object(id)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Long String()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>URI()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Petri Net(id, type)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Pn Object(id)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Label()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Any Object()
Label()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Node Graphics()<edge_begin><edge_end>Graphics()
Node Graphics()<edge_begin><edge_end>Position()
Node Graphics()<edge_begin><edge_end>Dimension()
Node Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Node Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Node Graphics()<edge_begin><edge_end>Node()
Node Graphics()<edge_begin><edge_end>Page()
Position()<edge_begin><edge_end>Coordinate(x, y)
Position()<edge_begin><edge_end>Arc Graphics()
Position()<edge_begin><edge_end>Node Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Offset()<edge_begin><edge_end>Annotation Graphics()
Dimension()<edge_begin><edge_end>Coordinate(x, y)
Dimension()<edge_begin><edge_end>Node Graphics()
Annotation Graphics()<edge_begin><edge_end>Graphics()
Annotation Graphics()<edge_begin><edge_end>Offset()
Annotation Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Annotation Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Annotation Graphics()<edge_begin><edge_end>Font(align, decoration, family, rotation, size, style, weight)
Annotation Graphics()<edge_begin><edge_end>Annotation()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>URI()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Node Graphics()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Annotation Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Node Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Arc Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Annotation Graphics()
Arc Graphics()<edge_begin><edge_end>Graphics()
Arc Graphics()<edge_begin><edge_end>Position()
Arc Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Arc Graphics()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Pn Object(id)
Arc()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Arc Graphics()
Arc()<edge_begin><edge_end>PT Arc Annotation(text)
Node()<edge_begin><edge_end>Pn Object(id)
Node()<edge_begin><edge_end>Arc()
Node()<edge_begin><edge_end>Node Graphics()
Font(align, decoration, family, rotation, size, style, weight)<edge_begin><edge_end>Annotation Graphics()
Place Node()<edge_begin><edge_end>Node()
Place Node()<edge_begin><edge_end>Ref Place()
Transition Node()<edge_begin><edge_end>Node()
Transition Node()<edge_begin><edge_end>Ref Transition()
Place()<edge_begin><edge_end>Place Node()
Place()<edge_begin><edge_end>PT Marking(text)
Ref Transition()<edge_begin><edge_end>Transition Node()
Transition()<edge_begin><edge_end>Transition Node()
Ref Place()<edge_begin><edge_end>Place Node()
Attribute()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>Annotation Graphics()
Any Object()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Attachment(id, name, size, version, page Id, page Version, mime Type, author, author Name, date, xwiki Relative Url, xwiki Absolute Url)<edge_begin><edge_end>Link Collection()
Attachments Type()<edge_begin><edge_end>Link Collection()
Attachments Type()<edge_begin><edge_end>Attachment(id, name, size, version, page Id, page Version, mime Type, author, author Name, date, xwiki Relative Url, xwiki Absolute Url)
Attribute(name, value)<edge_begin><edge_end>Link Collection()
Class(id, name)<edge_begin><edge_end>Link Collection()
Class(id, name)<edge_begin><edge_end>Property(value, name, type)
Classes Type()<edge_begin><edge_end>Link Collection()
Classes Type()<edge_begin><edge_end>Class(id, name)
Comment(id, page Id, author, author Name, date, highlight, text, reply To)<edge_begin><edge_end>Link Collection()
Comments Type()<edge_begin><edge_end>Link Collection()
Comments Type()<edge_begin><edge_end>Comment(id, page Id, author, author Name, date, highlight, text, reply To)
Document Root(mixed)<edge_begin><edge_end>Attachment(id, name, size, version, page Id, page Version, mime Type, author, author Name, date, xwiki Relative Url, xwiki Absolute Url)
Document Root(mixed)<edge_begin><edge_end>Attachments Type()
Document Root(mixed)<edge_begin><edge_end>Class(id, name)
Document Root(mixed)<edge_begin><edge_end>Classes Type()
Document Root(mixed)<edge_begin><edge_end>Comment(id, page Id, author, author Name, date, highlight, text, reply To)
Document Root(mixed)<edge_begin><edge_end>Comments Type()
Document Root(mixed)<edge_begin><edge_end>History Type()
Document Root(mixed)<edge_begin><edge_end>Object()
Document Root(mixed)<edge_begin><edge_end>Objects Type()
Document Root(mixed)<edge_begin><edge_end>Object Summary(id, guid, page Id, page Version, wiki, space, page Name, page Author, page Author Name, class Name, number, headline)
Document Root(mixed)<edge_begin><edge_end>Page(language, major Version, minor Version, created, creator, creator Name, modified, modifier, modifier Name, comment, content)
Document Root(mixed)<edge_begin><edge_end>Pages Type()
Document Root(mixed)<edge_begin><edge_end>Properties Type()
Document Root(mixed)<edge_begin><edge_end>Property(value, name, type)
Document Root(mixed)<edge_begin><edge_end>Search Result(type, id, page Full Name, title, wiki, space, page Name, modified, author, author Name, version, language, class Name, object Number, filename, score)
Document Root(mixed)<edge_begin><edge_end>Search Results Type(template)
Document Root(mixed)<edge_begin><edge_end>Space(id, wiki, name, home, xwiki Relative Url, xwiki Absolute Url)
Document Root(mixed)<edge_begin><edge_end>Spaces Type()
Document Root(mixed)<edge_begin><edge_end>Syntaxes(syntax)
Document Root(mixed)<edge_begin><edge_end>Tag(name)
Document Root(mixed)<edge_begin><edge_end>Tags Type()
Document Root(mixed)<edge_begin><edge_end>Translations(default)
Document Root(mixed)<edge_begin><edge_end>Wiki(id, name, description, owner)
Document Root(mixed)<edge_begin><edge_end>Wikis Type()
Document Root(mixed)<edge_begin><edge_end>X Wiki(version)
History Summary(page Id, wiki, space, name, version, major Version, minor Version, modified, modifier, modifier Name, language, comment)<edge_begin><edge_end>Link Collection()
History Type()<edge_begin><edge_end>Link Collection()
History Type()<edge_begin><edge_end>History Summary(page Id, wiki, space, name, version, major Version, minor Version, modified, modifier, modifier Name, language, comment)
Link Collection()<edge_begin><edge_end>Link(href, href Lang, rel, type)
Object()<edge_begin><edge_end>Object Summary(id, guid, page Id, page Version, wiki, space, page Name, page Author, page Author Name, class Name, number, headline)
Object()<edge_begin><edge_end>Property(value, name, type)
Objects Type()<edge_begin><edge_end>Link Collection()
Objects Type()<edge_begin><edge_end>Object Summary(id, guid, page Id, page Version, wiki, space, page Name, page Author, page Author Name, class Name, number, headline)
Object Summary(id, guid, page Id, page Version, wiki, space, page Name, page Author, page Author Name, class Name, number, headline)<edge_begin><edge_end>Link Collection()
Page(language, major Version, minor Version, created, creator, creator Name, modified, modifier, modifier Name, comment, content)<edge_begin><edge_end>Page Summary(id, full Name, wiki, space, name, title, parent, parent Id, version, author, author Name, xwiki Relative Url, xwiki Absolute Url, syntax)
Pages Type()<edge_begin><edge_end>Link Collection()
Pages Type()<edge_begin><edge_end>Page Summary(id, full Name, wiki, space, name, title, parent, parent Id, version, author, author Name, xwiki Relative Url, xwiki Absolute Url, syntax)
Page Summary(id, full Name, wiki, space, name, title, parent, parent Id, version, author, author Name, xwiki Relative Url, xwiki Absolute Url, syntax)<edge_begin><edge_end>Link Collection()
Page Summary(id, full Name, wiki, space, name, title, parent, parent Id, version, author, author Name, xwiki Relative Url, xwiki Absolute Url, syntax)<edge_begin><edge_end>Translations(default)
Properties Type()<edge_begin><edge_end>Link Collection()
Properties Type()<edge_begin><edge_end>Property(value, name, type)
Property(value, name, type)<edge_begin><edge_end>Link Collection()
Property(value, name, type)<edge_begin><edge_end>Attribute(name, value)
Search Result(type, id, page Full Name, title, wiki, space, page Name, modified, author, author Name, version, language, class Name, object Number, filename, score)<edge_begin><edge_end>Link Collection()
Search Result(type, id, page Full Name, title, wiki, space, page Name, modified, author, author Name, version, language, class Name, object Number, filename, score)<edge_begin><edge_end>Object()
Search Results Type(template)<edge_begin><edge_end>Link Collection()
Search Results Type(template)<edge_begin><edge_end>Search Result(type, id, page Full Name, title, wiki, space, page Name, modified, author, author Name, version, language, class Name, object Number, filename, score)
Space(id, wiki, name, home, xwiki Relative Url, xwiki Absolute Url)<edge_begin><edge_end>Link Collection()
Spaces Type()<edge_begin><edge_end>Link Collection()
Spaces Type()<edge_begin><edge_end>Space(id, wiki, name, home, xwiki Relative Url, xwiki Absolute Url)
Syntaxes(syntax)<edge_begin><edge_end>Link Collection()
Tag(name)<edge_begin><edge_end>Link Collection()
Tags Type()<edge_begin><edge_end>Link Collection()
Tags Type()<edge_begin><edge_end>Tag(name)
Translation(language)<edge_begin><edge_end>Link Collection()
Translations(default)<edge_begin><edge_end>Link Collection()
Translations(default)<edge_begin><edge_end>Translation(language)
Wiki(id, name, description, owner)<edge_begin><edge_end>Link Collection()
Wikis Type()<edge_begin><edge_end>Link Collection()
Wikis Type()<edge_begin><edge_end>Wiki(id, name, description, owner)
X Wiki(version)<edge_begin><edge_end>Link Collection()
X Wiki(version)<edge_begin><edge_end>Syntaxes(syntax)
Located Element(location)<edge_begin><edge_end>String()
X Asm File()<edge_begin><edge_end>Located Element(location)
X Asm Spec()<edge_begin><edge_end>X Asm File()
X Asm Spec()<edge_begin><edge_end>Asm(return Type)
Asm(return Type)<edge_begin><edge_end>Located Element(location)
Asm(return Type)<edge_begin><edge_end>Signature(is Main, name)
Asm(return Type)<edge_begin><edge_end>String()
Asm(return Type)<edge_begin><edge_end>Meta Information(used As)
Asm(return Type)<edge_begin><edge_end>Body()
Signature(is Main, name)<edge_begin><edge_end>Located Element(location)
Signature(is Main, name)<edge_begin><edge_end>Boolean()
Signature(is Main, name)<edge_begin><edge_end>String()
Signature(is Main, name)<edge_begin><edge_end>Argument(type)
Argument(type)<edge_begin><edge_end>Variable Decl()
Argument(type)<edge_begin><edge_end>String()
Body()<edge_begin><edge_end>X Asm File()
Body()<edge_begin><edge_end>Declaration()
Body()<edge_begin><edge_end>Initialization()
Body()<edge_begin><edge_end>Rule(in Sequence)
Meta Information(used As)<edge_begin><edge_end>Located Element(location)
Meta Information(used As)<edge_begin><edge_end>Signature(is Main, name)
Meta Information(used As)<edge_begin><edge_end>Access Update Function(type)
Access Update Function(type)<edge_begin><edge_end>Located Element(location)
Access Update Function(type)<edge_begin><edge_end>Function(return Type, is External)
Declaration()<edge_begin><edge_end>Located Element(location)
Function(return Type, is External)<edge_begin><edge_end>Declaration()
Function(return Type, is External)<edge_begin><edge_end>Element Decl(name)
Function(return Type, is External)<edge_begin><edge_end>Parameter(name, type)
Function(return Type, is External)<edge_begin><edge_end>String()
Function(return Type, is External)<edge_begin><edge_end>Term()
Function(return Type, is External)<edge_begin><edge_end>Boolean()
Parameter(name, type)<edge_begin><edge_end>Located Element(location)
Parameter(name, type)<edge_begin><edge_end>String()
Universe(name, contents)<edge_begin><edge_end>Declaration()
Universe(name, contents)<edge_begin><edge_end>String()
Universe(name, contents)<edge_begin><edge_end>Universe(name, contents)
Initialization()<edge_begin><edge_end>Located Element(location)
Initialization()<edge_begin><edge_end>Rule(in Sequence)
Term()<edge_begin><edge_end>Located Element(location)
Constant()<edge_begin><edge_end>Term()
Function Or Variable Term()<edge_begin><edge_end>Term()
Function Or Variable Term()<edge_begin><edge_end>Element Decl(name)
Operator Term(op Name)<edge_begin><edge_end>Term()
Operator Term(op Name)<edge_begin><edge_end>String()
Boolean Constant(value)<edge_begin><edge_end>Constant()
Boolean Constant(value)<edge_begin><edge_end>Boolean()
Integer Constant(value)<edge_begin><edge_end>Constant()
Integer Constant(value)<edge_begin><edge_end>Integer()
String Constant(value)<edge_begin><edge_end>Constant()
String Constant(value)<edge_begin><edge_end>String()
Undef Constant()<edge_begin><edge_end>Constant()
Rule(in Sequence)<edge_begin><edge_end>Located Element(location)
Rule(in Sequence)<edge_begin><edge_end>Boolean()
Skip Rule()<edge_begin><edge_end>Rule(in Sequence)
Asm Invocation(asm Name)<edge_begin><edge_end>Rule(in Sequence)
Asm Invocation(asm Name)<edge_begin><edge_end>String()
Asm Invocation(asm Name)<edge_begin><edge_end>Term()
Update Rule()<edge_begin><edge_end>Rule(in Sequence)
Update Rule()<edge_begin><edge_end>Function Or Variable Term()
Update Rule()<edge_begin><edge_end>Term()
Choose Rule()<edge_begin><edge_end>Rule(in Sequence)
Choose Rule()<edge_begin><edge_end>Variable Decl()
Choose Rule()<edge_begin><edge_end>Universe(name, contents)
Choose Rule()<edge_begin><edge_end>Term()
Do Forall Rule()<edge_begin><edge_end>Rule(in Sequence)
Do Forall Rule()<edge_begin><edge_end>Variable Decl()
Do Forall Rule()<edge_begin><edge_end>Universe(name, contents)
Do Forall Rule()<edge_begin><edge_end>Term()
Conditional Rule()<edge_begin><edge_end>Rule(in Sequence)
Conditional Rule()<edge_begin><edge_end>Term()
Conditional Rule()<edge_begin><edge_end>Else If()
Else If()<edge_begin><edge_end>Located Element(location)
Else If()<edge_begin><edge_end>Term()
Else If()<edge_begin><edge_end>Rule(in Sequence)
Else If()<edge_begin><edge_end>Else If()
Extend Rule()<edge_begin><edge_end>Rule(in Sequence)
Extend Rule()<edge_begin><edge_end>Extension()
Element Decl(name)<edge_begin><edge_end>Located Element(location)
Element Decl(name)<edge_begin><edge_end>String()
Variable Decl()<edge_begin><edge_end>Element Decl(name)
Extension()<edge_begin><edge_end>Located Element(location)
Extension()<edge_begin><edge_end>Variable Decl()
Extension()<edge_begin><edge_end>Universe(name, contents)
Return Rule()<edge_begin><edge_end>Rule(in Sequence)
Return Rule()<edge_begin><edge_end>Term()
PNML Document(location)<edge_begin><edge_end>Net Element(name)
Place Element(name, tokens)<edge_begin><edge_end>Element(id, location)
Transition Element(name)<edge_begin><edge_end>Element(id, location)
Arc Place2Transition()<edge_begin><edge_end>Element(id, location)
Arc Place2Transition()<edge_begin><edge_end>Place Element(name, tokens)
Arc Place2Transition()<edge_begin><edge_end>Transition Element(name)
Arc Transition2Place()<edge_begin><edge_end>Element(id, location)
Arc Transition2Place()<edge_begin><edge_end>Place Element(name, tokens)
Arc Transition2Place()<edge_begin><edge_end>Transition Element(name)
Net Element(name)<edge_begin><edge_end>Element(id, location)
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>Personal Review History()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Reviewer()<edge_begin><edge_end>External Reviewer()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference Chair()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference Member()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Document()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>article()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Author()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Integer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Co-author()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Decision()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>String()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Administrator()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Account()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
User()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Thing()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Document()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>String()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Inforamtion()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Account()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Activity()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Organization()
Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference document()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Invited Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity()
Activity()<edge_begin><edge_end>Thing()
Activity()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity()
Registration()<edge_begin><edge_end>Activity()
Full Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Research Topic()<edge_begin><edge_end>Event Setup()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Committee member()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Track()<edge_begin><edge_end>Conference part()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>activity()
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>activity()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>activity()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>intensity()
activity()<edge_begin><edge_end>article()
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>activity()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>activity()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>activity()
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>activity()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>activity()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>activity()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>activity()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
University()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Workshop()<edge_begin><edge_end>Academic Event()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Conference part()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member()<edge_begin><edge_end>Participant(early Registration)
Participant(early Registration)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Student()<edge_begin><edge_end>Participant(early Registration)
Science Worker()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Assistant()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Volunteer()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Regular()<edge_begin><edge_end>Participant(early Registration)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
chair()<edge_begin><edge_end>Reviewer()
chair()<edge_begin><edge_end>program()
abstract()<edge_begin><edge_end>Document()
abstract()<edge_begin><edge_end>article()
article()<edge_begin><edge_end>Document()
article()<edge_begin><edge_end>activity()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
article()<edge_begin><edge_end>Author()
article()<edge_begin><edge_end>Reviewer()
article()<edge_begin><edge_end>abstract()
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer()
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>activity()
participant()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
program()<edge_begin><edge_end>chair()
program()<edge_begin><edge_end>session()
Slide Set()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document()
Meal Menu()<edge_begin><edge_end>Meal Event()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Topic()<edge_begin><edge_end>Working event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Author()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Author()<edge_begin><edge_end>article()
Dining Place()<edge_begin><edge_end>Place()
Presenter()<edge_begin><edge_end>Author()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Published Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Attendee()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
TPC Member()<edge_begin><edge_end>Person(email, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name)
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer()
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Dfa()<edge_begin><edge_end>Named Element(name)
Dfa()<edge_begin><edge_end>Language()
Dfa()<edge_begin><edge_end>Regular State()
Dfa()<edge_begin><edge_end>Initial State()
Dfa()<edge_begin><edge_end>Final State()
State(description)<edge_begin><edge_end>Named Element(name)
Initial State()<edge_begin><edge_end>Regular State()
Final State()<edge_begin><edge_end>State(description)
Transition()<edge_begin><edge_end>State(description)
Transition()<edge_begin><edge_end>Symbol(literal, description, direction)
Language()<edge_begin><edge_end>Named Element(name)
Language()<edge_begin><edge_end>Symbol(literal, description, direction)
Regular State()<edge_begin><edge_end>State(description)
Regular State()<edge_begin><edge_end>Transition()
Place()<edge_begin><edge_end>Place()
Place()<edge_begin><edge_end>Ontology Member()
Ontology Document(iri, path)<edge_begin><edge_end>Pragmatics Ontology(manager)
Pragmatics Ontology(manager)<edge_begin><edge_end>Ontology Document(iri, path)
Pragmatics Ontology(manager)<edge_begin><edge_end>Petri Net()
Pragmatics Ontology(manager)<edge_begin><edge_end>Ontology Manager()
Petri Net()<edge_begin><edge_end>Petri Net()
Petri Net()<edge_begin><edge_end>Pragmatics Ontology(manager)
Ontology Member()<edge_begin><edge_end>Pragma(text)
Transition()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Ontology Member()
Arc()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Ontology Member()
Page()<edge_begin><edge_end>Page()
Page()<edge_begin><edge_end>Ontology Member()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
Value Type()<edge_begin><edge_end>Data()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Number Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Error Value()<edge_begin><edge_end>Value Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Smart Tags Collection()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Workbook()<edge_begin><edge_end>Worksheet(name)
Worksheet(name)<edge_begin><edge_end>Workbook()
Worksheet(name)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Worksheet(name)<edge_begin><edge_end>String()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Table Element(index)<edge_begin><edge_end>Styled Element()
Table Element(index)<edge_begin><edge_end>Integer()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Comment(author, show Always)
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Comment(author, show Always)<edge_begin><edge_end>Data()
Comment(author, show Always)<edge_begin><edge_end>String()
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Data()<edge_begin><edge_end>Comment(author, show Always)
Data()<edge_begin><edge_end>Value Type()
State Machine()<edge_begin><edge_end>Named Element(name)
State Machine()<edge_begin><edge_end>State(initial Time, final Time)
State Machine()<edge_begin><edge_end>Transition(initial Time, final Time)
State Machine()<edge_begin><edge_end>Variable(name, value)
State(initial Time, final Time)<edge_begin><edge_end>Named Element(name)
State(initial Time, final Time)<edge_begin><edge_end>Transition(initial Time, final Time)
State(initial Time, final Time)<edge_begin><edge_end>State Machine()
State(initial Time, final Time)<edge_begin><edge_end>Composite State()
Final State()<edge_begin><edge_end>State(initial Time, final Time)
Initial State()<edge_begin><edge_end>State(initial Time, final Time)
Transition(initial Time, final Time)<edge_begin><edge_end>Named Element(name)
Transition(initial Time, final Time)<edge_begin><edge_end>State(initial Time, final Time)
Transition(initial Time, final Time)<edge_begin><edge_end>Trigger(expression)
Transition(initial Time, final Time)<edge_begin><edge_end>State Machine()
Transition(initial Time, final Time)<edge_begin><edge_end>Guard(expression)
Transition(initial Time, final Time)<edge_begin><edge_end>Action(variable, value)
Timed Transition(duration)<edge_begin><edge_end>Transition(initial Time, final Time)
Pseudostate()<edge_begin><edge_end>State(initial Time, final Time)
Fork()<edge_begin><edge_end>Pseudostate()
Join()<edge_begin><edge_end>Pseudostate()
Composite State()<edge_begin><edge_end>State(initial Time, final Time)
Composite State()<edge_begin><edge_end>Region()
Region()<edge_begin><edge_end>State(initial Time, final Time)
Region()<edge_begin><edge_end>Composite State()
Choice()<edge_begin><edge_end>Pseudostate()
Style Container()<edge_begin><edge_end>Style Container Element(name, description)
Style()<edge_begin><edge_end>Style Container Element(name, description)
Style()<edge_begin><edge_end>Style()
Style()<edge_begin><edge_end>Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)
Gradient()<edge_begin><edge_end>Style Container Element(name, description)
Gradient()<edge_begin><edge_end>Gradient Layout()
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Color Or Gradient()
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Highlighting Values()
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Color With Transparency()
Style Layout(transparency, gradient orientation, line Width, line Style, font Name, font Size, font Italic, font Bold)<edge_begin><edge_end>Color()
Gradient Layout()<edge_begin><edge_end>Gradient Color Area(offset)
Highlighting Values()<edge_begin><edge_end>Color Or Gradient()
Gradient Color Area(offset)<edge_begin><edge_end>Color()
Color()<edge_begin><edge_end>Color Or Gradient()
Color()<edge_begin><edge_end>Color With Transparency()
RGB Color(red, green, blue)<edge_begin><edge_end>Color()
Gradient Ref()<edge_begin><edge_end>Color Or Gradient()
Gradient Ref()<edge_begin><edge_end>Gradient()
Color Constant Ref(value)<edge_begin><edge_end>Color()
Transparent(transparent)<edge_begin><edge_end>Color Or Gradient()
Transparent(transparent)<edge_begin><edge_end>Color With Transparency()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference Chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Conference Member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Conference Member()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Account()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
User()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Thing()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>String()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Organization()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Conference document()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Document()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Inforamtion()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Account()
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)<edge_begin><edge_end>Activity()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Document()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>User()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity()
Activity()<edge_begin><edge_end>article()
Activity()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity()
Registration()<edge_begin><edge_end>Activity()
Full Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Research Topic()<edge_begin><edge_end>Thing()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Committee member()<edge_begin><edge_end>Committee()
Abstract()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Abstract()<edge_begin><edge_end>Document()
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>article()
Abstract()<edge_begin><edge_end>Thing()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Track()<edge_begin><edge_end>Conference part()
Track()<edge_begin><edge_end>Scientific Event()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>activity()
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
article()<edge_begin><edge_end>Document()
article()<edge_begin><edge_end>Author()
article()<edge_begin><edge_end>Reviewer()
article()<edge_begin><edge_end>Abstract()
article()<edge_begin><edge_end>activity()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>activity()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>activity()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>intensity()
activity()<edge_begin><edge_end>article()
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>activity()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>activity()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>activity()
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>activity()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>activity()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>activity()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>activity()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Scientific Event()
Workshop()<edge_begin><edge_end>Academic Event()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Workshop()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Individual Presentation()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member()<edge_begin><edge_end>Participant(early Registration)
Participant(early Registration)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Student()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Science Worker()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Assistant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Volunteer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Regular()<edge_begin><edge_end>Participant(early Registration)
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Author()<edge_begin><edge_end>article()
Author()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
chair()<edge_begin><edge_end>Reviewer()
chair()<edge_begin><edge_end>program()
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Review()<edge_begin><edge_end>Possible Reviewer()
Review()<edge_begin><edge_end>Reviewer()
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>activity()
participant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
participant()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
program()<edge_begin><edge_end>chair()
program()<edge_begin><edge_end>session()
Slide Set()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document()
Meal Menu()<edge_begin><edge_end>Meal Event()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Topic()<edge_begin><edge_end>Working event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Dining Place()<edge_begin><edge_end>Place()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Published Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Attendee()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Reviewer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Personal Review History()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
TPC Member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Two Level Conference()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer()
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Evaluated Paper()<edge_begin><edge_end>Review()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Positive Review()<edge_begin><edge_end>Review()
Workshop Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Document()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>article()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Integer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Author()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Review()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Co-author()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Decision()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>String()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Administrator()
Paper(full paper size, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Conference Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Industrial Session()<edge_begin><edge_end>Conference Session()
Conference Session()<edge_begin><edge_end>Session()
Regular Session()<edge_begin><edge_end>Session()
Poster Session()<edge_begin><edge_end>Session()
Demo Session()<edge_begin><edge_end>Session()
Session()<edge_begin><edge_end>Scientific Event()
Paper Author()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Conference Trip()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference Participant()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Submitted Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Assigned Paper()<edge_begin><edge_end>Submitted Paper()
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Negative Review()<edge_begin><edge_end>Review()
Neutral Review()<edge_begin><edge_end>Review()
Organising Agency()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Organisation()<edge_begin><edge_end>Thing()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Regular Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Demo Paper()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Research Institute()<edge_begin><edge_end>Academic Institution()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Agency Staff Member()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Workshop Session()<edge_begin><edge_end>Session()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Document()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>PC Member()
PC Chair()<edge_begin><edge_end>Conference Participant()
PC Chair()<edge_begin><edge_end>PC Member()
PC Member()<edge_begin><edge_end>Possible Reviewer()
OC Member()<edge_begin><edge_end>Conference Participant()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Programme Brochure()<edge_begin><edge_end>Document()
Flyer()<edge_begin><edge_end>Document()
Web Site()<edge_begin><edge_end>Document()
Multi-author Volume()<edge_begin><edge_end>Document()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Individual Presentation()<edge_begin><edge_end>Document()
OC Chair()<edge_begin><edge_end>OC Member()
Conference Banquet()<edge_begin><edge_end>Social Event()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Workshop Chair()<edge_begin><edge_end>PC Member()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Session Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
University()<edge_begin><edge_end>Academic Institution()
University()<edge_begin><edge_end>Organization()
Possible Reviewer()<edge_begin><edge_end>Person(has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, email)
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, paper ID, title)
Invited Speaker()<edge_begin><edge_end>Presenter()
Presenter()<edge_begin><edge_end>Author()
Presenter()<edge_begin><edge_end>Conference Participant()
SC Member()<edge_begin><edge_end>PC Member()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Versioned Capability(version)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>I Required Capability Container()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>I Provided Capability Container()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>I Builder(unit Type)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Synchronization()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Repository(name, documentation, handler Type)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Container Configuration(documentation, name)
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>First Found Unit Provider()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>I Build Unit Container()
Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)<edge_begin><edge_end>Fragment Host()
I Builder(unit Type)<edge_begin><edge_end>I Provided Capability Container()
I Builder(unit Type)<edge_begin><edge_end>Builder Input()
I Builder(unit Type)<edge_begin><edge_end>Path Group()
I Builder(unit Type)<edge_begin><edge_end>Unit Parameter Declaration()
Versioned Capability(version)<edge_begin><edge_end>Capability(name Space)
Versioned Capability(version)<edge_begin><edge_end>Version()
Path Group()<edge_begin><edge_end>Conditional Path Vector()
Builder Input Decorator()<edge_begin><edge_end>Builder Input()
Builder Call(builder Name)<edge_begin><edge_end>Builder Input()
Required Capability(version Range, greedy, max, min)<edge_begin><edge_end>Capability(name Space)
Required Capability(version Range, greedy, max, min)<edge_begin><edge_end>Version Range()
Conditional Path Vector()<edge_begin><edge_end>Path Vector(paths, base Path)
Synchronization()<edge_begin><edge_end>Builder Query()
Repository Unit Provider()<edge_begin><edge_end>Unit Provider(documentation)
Repository Unit Provider()<edge_begin><edge_end>Repository(name, documentation, handler Type)
Repository Unit Provider()<edge_begin><edge_end>Repo Option(name)
Repository Unit Provider()<edge_begin><edge_end>I Build Unit Repository()
Compound Unit Provider()<edge_begin><edge_end>Unit Provider(documentation)
First Found Unit Provider()<edge_begin><edge_end>Compound Unit Provider()
Best Found Unit Provider()<edge_begin><edge_end>Compound Unit Provider()
Build Concern Context(default Properties Removals)<edge_begin><edge_end>I Provided Capability Container()
Requires Predicate(meta)<edge_begin><edge_end>Capability Predicate(version Range)
Capability Predicate(version Range)<edge_begin><edge_end>Version Range()
Provides Predicate()<edge_begin><edge_end>Capability Predicate(version Range)
Unit Name Predicate()<edge_begin><edge_end>Capability Predicate(version Range)
Input Predicate()<edge_begin><edge_end>Capability Predicate(version Range)
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Build Concern Context(default Properties Removals)
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>I Required Capability Container()
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Requires Predicate(meta)
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Provides Predicate()
Unit Concern Context(source Location, output Location)<edge_begin><edge_end>Capability Predicate(version Range)
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Build Concern Context(default Properties Removals)
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Builder Input()
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Input Predicate()
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Conditional Path Vector()
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Output Predicate()
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Provides Predicate()
Builder Concern Context(var Args, match Parameters, remove Pre Condition, remove Post Condition, remove Post Input Condition, output Annotations Removals, source Annotations Removals)<edge_begin><edge_end>Source Predicate()
Path Group Predicate()<edge_begin><edge_end>Path Vector(paths, base Path)
Aliased Required Capability(alias)<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
I Required Capability Container()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
I Required Capability Container()<edge_begin><edge_end>Capability Predicate(version Range)
I Provided Capability Container()<edge_begin><edge_end>Capability(name Space)
Builder()<edge_begin><edge_end>I Builder(unit Type)
Builder Java()<edge_begin><edge_end>I Builder(unit Type)
Builder Wrapper(input Advised, output Advised, unit Type Advised, provides Advised, default Properties Advised, source Advised)<edge_begin><edge_end>I Builder(unit Type)
Bee Model()<edge_begin><edge_end>I Build Unit Container()
Bee Model()<edge_begin><edge_end>Repository(name, documentation, handler Type)
Bee Model()<edge_begin><edge_end>First Found Unit Provider()
Bee Hive(resolutions)<edge_begin><edge_end>Bee Model()
Bee Hive(resolutions)<edge_begin><edge_end>Bee Hive(resolutions)
Resolution Info(status)<edge_begin><edge_end>I Status()
Effective Facade()<edge_begin><edge_end>I Effective Facade()
Effective Unit Facade()<edge_begin><edge_end>Effective Facade()
Effective Unit Facade()<edge_begin><edge_end>Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)
Effective Unit Facade()<edge_begin><edge_end>Effective Capability Facade()
Effective Unit Facade()<edge_begin><edge_end>Effective Requirement Facade()
Effective Requirement Facade()<edge_begin><edge_end>Effective Facade()
Effective Requirement Facade()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Effective Capability Facade()<edge_begin><edge_end>Effective Facade()
Effective Capability Facade()<edge_begin><edge_end>Capability(name Space)
Builder Call Facade(aliases)<edge_begin><edge_end>Builder Call(builder Name)
Builder Call Facade(aliases)<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Build Set(value Map, path Iterator)<edge_begin><edge_end>Path Vector(paths, base Path)
Build Set(value Map, path Iterator)<edge_begin><edge_end>Path Iterator()
Output Predicate()<edge_begin><edge_end>Path Group Predicate()
Source Predicate()<edge_begin><edge_end>Path Group Predicate()
Build Unit Repository()<edge_begin><edge_end>I Build Unit Repository()
Compound Build Unit Repository()<edge_begin><edge_end>Build Unit Repository()
Compound Build Unit Repository()<edge_begin><edge_end>I Build Unit Repository()
Compound First Found Repository()<edge_begin><edge_end>Compound Build Unit Repository()
Execution Stack Repository()<edge_begin><edge_end>Build Unit Repository()
Bee Model Repository()<edge_begin><edge_end>Build Unit Repository()
Bee Model Repository()<edge_begin><edge_end>Bee Model()
Unit Resolution Info()<edge_begin><edge_end>Resolution Info(status)
Unit Resolution Info()<edge_begin><edge_end>Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)
Switch Unit Provider()<edge_begin><edge_end>Unit Provider(documentation)
Repository(name, documentation, handler Type)<edge_begin><edge_end>Branch(name, documentation, branch Point Type, merge Strategy, checkout, accept Dirty, update, replace)
Repository(name, documentation, handler Type)<edge_begin><edge_end>Repo Option(name)
Repository(name, documentation, handler Type)<edge_begin><edge_end>I Build Unit Repository()
Delegating Unit Provider()<edge_begin><edge_end>Unit Provider(documentation)
Unit Repository Description(evaluated Options)<edge_begin><edge_end>Build Unit Repository()
Unit Repository Description(evaluated Options)<edge_begin><edge_end>Repository(name, documentation, handler Type)
Build Call On Selected Requirements()<edge_begin><edge_end>Build Call Multiple()
Build Call On Selected Requirements()<edge_begin><edge_end>Capability Predicate(version Range)
Builder Input Name Decorator()<edge_begin><edge_end>Builder Input Decorator()
Builder Input Context Decorator()<edge_begin><edge_end>Builder Input Decorator()
Builder Input Condition()<edge_begin><edge_end>Builder Input Decorator()
Build Call Multiple()<edge_begin><edge_end>Builder Call(builder Name)
Build Call Single()<edge_begin><edge_end>Builder Call(builder Name)
Build Call Single()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Build Call On Declared Requirement()<edge_begin><edge_end>Build Call Single()
Build Call On Declared Requirement()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Build Call On Referenced Requirement()<edge_begin><edge_end>Build Call Single()
Build Call On Referenced Requirement()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Builder Input Group()<edge_begin><edge_end>Builder Input Decorator()
Effective Builder Call Facade()<edge_begin><edge_end>Builder Call Facade(aliases)
Effective Builder Call Facade()<edge_begin><edge_end>I Effective Facade()
I Build Unit Container()<edge_begin><edge_end>Build Unit(documentation, execution Mode, source Location, output Location, platform Filter)
Fragment Host()<edge_begin><edge_end>Required Capability(version Range, greedy, max, min)
Scenario(name)<edge_begin><edge_end>When()
Scenario(name)<edge_begin><edge_end>Then()
Scenario(name)<edge_begin><edge_end>Given(dashboard)
Given(dashboard)<edge_begin><edge_end>Data(type, location Type, quantifier, location)
When()<edge_begin><edge_end>View(name, desc)
Loading(new)<edge_begin><edge_end>When()
Interaction(action, target)<edge_begin><edge_end>When()
Project(name)<edge_begin><edge_end>Feature(name, desc)
Project(name)<edge_begin><edge_end>Background(dashboard)
Update(do)<edge_begin><edge_end>Then()
Update(do)<edge_begin><edge_end>View(name, desc)
Goal(function, data)<edge_begin><edge_end>Then()
Feature(name, desc)<edge_begin><edge_end>Scenario(name)
Background(dashboard)<edge_begin><edge_end>View(name, desc)
Sparql Queries()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Sparql Queries()<edge_begin><edge_end>Prologue()
Sparql Queries()<edge_begin><edge_end>Query()
Prologue()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Prologue()<edge_begin><edge_end>Base Decl()
Prologue()<edge_begin><edge_end>Prefix Decl()
Base Decl()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Base Decl()<edge_begin><edge_end>IRI REF(iri ref)
Prefix Decl()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Prefix Decl()<edge_begin><edge_end>PNAME NS(pn prefix)
Prefix Decl()<edge_begin><edge_end>IRI REF(iri ref)
Query()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Select Query()<edge_begin><edge_end>Query()
Select Query()<edge_begin><edge_end>Solutions Display NE()
Select Query()<edge_begin><edge_end>Var(varname)
Select Query()<edge_begin><edge_end>Dataset Clause()
Select Query()<edge_begin><edge_end>Where Clause()
Select Query()<edge_begin><edge_end>Solution Modifier()
Construct Query()<edge_begin><edge_end>Query()
Construct Query()<edge_begin><edge_end>Construct Template()
Construct Query()<edge_begin><edge_end>Dataset Clause()
Construct Query()<edge_begin><edge_end>Where Clause()
Construct Query()<edge_begin><edge_end>Solution Modifier()
Describe Query()<edge_begin><edge_end>Query()
Describe Query()<edge_begin><edge_end>Var Or IR Iref()
Describe Query()<edge_begin><edge_end>Dataset Clause()
Describe Query()<edge_begin><edge_end>Where Clause()
Describe Query()<edge_begin><edge_end>Solution Modifier()
Ask Query()<edge_begin><edge_end>Query()
Ask Query()<edge_begin><edge_end>Dataset Clause()
Ask Query()<edge_begin><edge_end>Where Clause()
Construct Template()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Construct Template()<edge_begin><edge_end>Triples Same Subject()
Solution Modifier()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Solution Modifier()<edge_begin><edge_end>Order Clause()
Solution Modifier()<edge_begin><edge_end>Limit Offset Clauses()
Order Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Order Clause()<edge_begin><edge_end>Order Condition()
Order Condition()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Order Condition Left NE()<edge_begin><edge_end>Order Condition()
Order Condition Left NE()<edge_begin><edge_end>Asc Or Decs()
Order Condition Left NE()<edge_begin><edge_end>Bracketted Expression()
Order Condition Right NE()<edge_begin><edge_end>Order Condition()
Limit Offset Clauses()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Limit Offset Clauses Left NE()<edge_begin><edge_end>Limit Offset Clauses()
Limit Offset Clauses Left NE()<edge_begin><edge_end>Limit Clause()
Limit Offset Clauses Left NE()<edge_begin><edge_end>Offset Clause()
Limit Offset Clauses Right NE()<edge_begin><edge_end>Limit Offset Clauses()
Limit Offset Clauses Right NE()<edge_begin><edge_end>Offset Clause()
Limit Offset Clauses Right NE()<edge_begin><edge_end>Limit Clause()
Limit Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Limit Clause()<edge_begin><edge_end>INTEGER(integer)
Offset Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Offset Clause()<edge_begin><edge_end>INTEGER(integer)
Solutions Display NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Distinct NE()<edge_begin><edge_end>Solutions Display NE()
Reduced NE()<edge_begin><edge_end>Solutions Display NE()
Variables NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
All Variables NE()<edge_begin><edge_end>Variables NE()
Some Variables NE()<edge_begin><edge_end>Variables NE()
Some Variables NE()<edge_begin><edge_end>Var(varname)
Var Or IR Iref()<edge_begin><edge_end>Verb()
Var(varname)<edge_begin><edge_end>Var Or IR Iref()
Var(varname)<edge_begin><edge_end>Primary Expression()
Var(varname)<edge_begin><edge_end>Var Or Term()
Var(varname)<edge_begin><edge_end>Order Condition Right NE()
IR Ireference()<edge_begin><edge_end>Var Or IR Iref()
IR Ireference()<edge_begin><edge_end>Graph Term()
IR Ireference()<edge_begin><edge_end>Source Selector()
Prefixed Name()<edge_begin><edge_end>IR Ireference()
Dataset Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Dataset Clause()<edge_begin><edge_end>Graph Clause NE()
Graph Clause NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Default Graph Clause()<edge_begin><edge_end>Graph Clause NE()
Default Graph Clause()<edge_begin><edge_end>Source Selector()
Named Graph Clause()<edge_begin><edge_end>Graph Clause NE()
Named Graph Clause()<edge_begin><edge_end>Source Selector()
Source Selector()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Where Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Where Clause()<edge_begin><edge_end>Where Literal()
Where Clause()<edge_begin><edge_end>Group Graph Pattern()
Group Graph Pattern()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Group Graph Pattern()<edge_begin><edge_end>Triples Block()
Group Graph Pattern()<edge_begin><edge_end>Additional GGP Element()
Additional GGP Element()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional GGP Element()<edge_begin><edge_end>Pattern Or Filter NE()
Additional GGP Element()<edge_begin><edge_end>Triples Block()
Triples Block()<edge_begin><edge_end>Triples Same Subject()
Graph Pattern Not Triples()<edge_begin><edge_end>Pattern Or Filter NE()
Optional Graph Pattern()<edge_begin><edge_end>Graph Pattern Not Triples()
Optional Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Group Or Union Graph Pattern()<edge_begin><edge_end>Graph Pattern Not Triples()
Group Or Union Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Graph Graph Pattern()<edge_begin><edge_end>Graph Pattern Not Triples()
Graph Graph Pattern()<edge_begin><edge_end>Var Or IR Iref()
Graph Graph Pattern()<edge_begin><edge_end>Group Graph Pattern()
Filter()<edge_begin><edge_end>Pattern Or Filter NE()
Filter()<edge_begin><edge_end>Constraint()
Triples Same Subject()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Triples Same Subject Left NE()<edge_begin><edge_end>Triples Same Subject()
Triples Same Subject Left NE()<edge_begin><edge_end>Var Or Term()
Triples Same Subject Left NE()<edge_begin><edge_end>Property List Not Empty()
Triples Same Subject Right NE()<edge_begin><edge_end>Triples Same Subject()
Triples Same Subject Right NE()<edge_begin><edge_end>Triples Node()
Triples Same Subject Right NE()<edge_begin><edge_end>Property List Not Empty()
Var Or Term()<edge_begin><edge_end>Graph Node()
Property List Not Empty()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Property List Not Empty()<edge_begin><edge_end>Verb()
Property List Not Empty()<edge_begin><edge_end>Object List()
Verb()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Verb ANE(the A)<edge_begin><edge_end>Verb()
Object List()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Object List()<edge_begin><edge_end>Object()
Object()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Object()<edge_begin><edge_end>Graph Node()
Graph Node()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Triples Node()<edge_begin><edge_end>Graph Node()
Collection()<edge_begin><edge_end>Triples Node()
Collection()<edge_begin><edge_end>Graph Node()
Blank Node Property List()<edge_begin><edge_end>Triples Node()
Blank Node Property List()<edge_begin><edge_end>Property List Not Empty()
Graph Term()<edge_begin><edge_end>Var Or Term()
Blank Node()<edge_begin><edge_end>Graph Term()
Constraint()<edge_begin><edge_end>Order Condition Right NE()
Bracketted Expression()<edge_begin><edge_end>Constraint()
Bracketted Expression()<edge_begin><edge_end>Primary Expression()
Bracketted Expression()<edge_begin><edge_end>Expression()
Built In Call()<edge_begin><edge_end>Constraint()
Built In Call()<edge_begin><edge_end>Primary Expression()
Str Built In Call NE()<edge_begin><edge_end>Built In Call()
Str Built In Call NE()<edge_begin><edge_end>Expression()
Lang Built In Call NE()<edge_begin><edge_end>Built In Call()
Lang Built In Call NE()<edge_begin><edge_end>Expression()
Langmatches Built In Call NE()<edge_begin><edge_end>Built In Call()
Langmatches Built In Call NE()<edge_begin><edge_end>Expression()
Langmatches Built In Call NE()<edge_begin><edge_end>Additional Expression NE()
Datatype Built In Call NE()<edge_begin><edge_end>Built In Call()
Datatype Built In Call NE()<edge_begin><edge_end>Expression()
Bound Built In Call NE()<edge_begin><edge_end>Built In Call()
Bound Built In Call NE()<edge_begin><edge_end>Var(varname)
Same Term Built In Call NE()<edge_begin><edge_end>Built In Call()
Same Term Built In Call NE()<edge_begin><edge_end>Expression()
Same Term Built In Call NE()<edge_begin><edge_end>Additional Expression NE()
Is IRI Built In Call NE()<edge_begin><edge_end>Built In Call()
Is IRI Built In Call NE()<edge_begin><edge_end>Expression()
Is URI Built In Call NE()<edge_begin><edge_end>Built In Call()
Is URI Built In Call NE()<edge_begin><edge_end>Expression()
Is Blank Built In Call NE()<edge_begin><edge_end>Built In Call()
Is Blank Built In Call NE()<edge_begin><edge_end>Expression()
Is Literal Built In Call NE()<edge_begin><edge_end>Built In Call()
Is Literal Built In Call NE()<edge_begin><edge_end>Expression()
Regex Expression()<edge_begin><edge_end>Built In Call()
Regex Expression()<edge_begin><edge_end>Expression()
Regex Expression()<edge_begin><edge_end>Additional Expression NE()
Function Call()<edge_begin><edge_end>Constraint()
Function Call()<edge_begin><edge_end>IR Ireference()
Function Call()<edge_begin><edge_end>Arg List()
Arg List()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Arg List NILNE()<edge_begin><edge_end>Arg List()
Arg List NILNE()<edge_begin><edge_end>Not In List()
Arg List Expression NE()<edge_begin><edge_end>Arg List()
Arg List Expression NE()<edge_begin><edge_end>Expression()
Arg List Expression NE()<edge_begin><edge_end>Additional Expression NE()
Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Expression()<edge_begin><edge_end>Conditional Or Expression()
Additional Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional Expression NE()<edge_begin><edge_end>Conditional Or Expression()
Conditional Or Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Conditional Or Expression()<edge_begin><edge_end>Conditional And Expression()
Conditional Or Expression()<edge_begin><edge_end>Additional Conditional And Expression NE()
Additional Conditional And Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional Conditional And Expression NE()<edge_begin><edge_end>Conditional And Expression()
Conditional And Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Conditional And Expression()<edge_begin><edge_end>Value Logical()
Conditional And Expression()<edge_begin><edge_end>Additional Value Logical NE()
Value Logical()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Value Logical()<edge_begin><edge_end>Relational Expression()
Additional Value Logical NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional Value Logical NE()<edge_begin><edge_end>Relational Expression()
Relational Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Relational Expression()<edge_begin><edge_end>Numeric Expression()
Relational Expression()<edge_begin><edge_end>Additional Numeric Expression NE()
Numeric Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Numeric Expression()<edge_begin><edge_end>Additive Expression()
Additional Numeric Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Equals Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Equals Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Not Equal Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Not Equal Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Smaller Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Smaller Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Bigger Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Bigger Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Smaller Or Equal Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Smaller Or Equal Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Bigger Or Equal Numeric Expression NE()<edge_begin><edge_end>Additional Numeric Expression NE()
Bigger Or Equal Numeric Expression NE()<edge_begin><edge_end>Additive Expression()
Additive Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additive Expression()<edge_begin><edge_end>Multiplicative Expression()
Additive Expression()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Multiplicative Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Multiplicative Expression()<edge_begin><edge_end>Unary Expression()
Multiplicative Expression()<edge_begin><edge_end>Additional Unary Expression NE()
Additional Multiplicative Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Plus Multiplicative Expression NE()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Plus Multiplicative Expression NE()<edge_begin><edge_end>Multiplicative Expression()
Minus Multiplicative Expression NE()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Minus Multiplicative Expression NE()<edge_begin><edge_end>Multiplicative Expression()
Numeric Literal Positive()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Numeric Literal Positive()<edge_begin><edge_end>Numeric Literal()
Numeric Literal Negative()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Numeric Literal Negative()<edge_begin><edge_end>Numeric Literal()
Unary Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Additional Unary Expression NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Times Additional Unary Expression NE()<edge_begin><edge_end>Additional Unary Expression NE()
Times Additional Unary Expression NE()<edge_begin><edge_end>Unary Expression()
Divided By Additional Unary Expression NE()<edge_begin><edge_end>Additional Unary Expression NE()
Divided By Additional Unary Expression NE()<edge_begin><edge_end>Unary Expression()
Not Primary Expression NE()<edge_begin><edge_end>Unary Expression()
Not Primary Expression NE()<edge_begin><edge_end>Primary Expression()
Plus Primary Expression NE()<edge_begin><edge_end>Unary Expression()
Plus Primary Expression NE()<edge_begin><edge_end>Primary Expression()
Minus Primary Expression NE()<edge_begin><edge_end>Unary Expression()
Minus Primary Expression NE()<edge_begin><edge_end>Primary Expression()
Primary Expression()<edge_begin><edge_end>Unary Expression()
IR Iref Or Function()<edge_begin><edge_end>Primary Expression()
IR Iref Or Function()<edge_begin><edge_end>IR Ireference()
IR Iref Or Function()<edge_begin><edge_end>Arg List()
RDF Literal()<edge_begin><edge_end>Primary Expression()
RDF Literal()<edge_begin><edge_end>Graph Term()
RDF Literal()<edge_begin><edge_end>String Literal()
RDF Literal()<edge_begin><edge_end>LANGTAG Or IR Iref NE()
LANGTAG Or IR Iref NE()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Up IR Iref NE()<edge_begin><edge_end>LANGTAG Or IR Iref NE()
Up IR Iref NE()<edge_begin><edge_end>IR Ireference()
Numeric Literal()<edge_begin><edge_end>Primary Expression()
Numeric Literal()<edge_begin><edge_end>Graph Term()
Numeric Literal()<edge_begin><edge_end>Additional Multiplicative Expression NE()
Numeric Literal Unsigned()<edge_begin><edge_end>Numeric Literal()
Boolean Literal()<edge_begin><edge_end>Primary Expression()
Boolean Literal()<edge_begin><edge_end>Graph Term()
True Boolean Literal NE()<edge_begin><edge_end>Boolean Literal()
False Boolean Literal NE()<edge_begin><edge_end>Boolean Literal()
VAR1()<edge_begin><edge_end>VARNAME(varname)
VAR2()<edge_begin><edge_end>VARNAME(varname)
VARNAME(varname)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
IRI REF(iri ref)<edge_begin><edge_end>IR Ireference()
IRI REF(iri ref)<edge_begin><edge_end>Var Or IR Iref()
PNAME NS(pn prefix)<edge_begin><edge_end>Prefixed Name()
PNAME NS(pn prefix)<edge_begin><edge_end>Var Or IR Iref()
PNAME LN()<edge_begin><edge_end>Prefixed Name()
PNAME LN()<edge_begin><edge_end>Var Or IR Iref()
PNAME LN()<edge_begin><edge_end>PN LOCAL(pn local)
Not In List()<edge_begin><edge_end>Graph Term()
Not In List()<edge_begin><edge_end>WS(ws)
INTEGER(integer)<edge_begin><edge_end>Numeric Literal()
DECIMAL(decimal)<edge_begin><edge_end>Numeric Literal()
DOUBLE(double)<edge_begin><edge_end>Numeric Literal()
STRING LITERAL1(string)<edge_begin><edge_end>String Literal()
STRING LITERAL2(string)<edge_begin><edge_end>String Literal()
STRING LITERAL LONG1(string)<edge_begin><edge_end>String Literal()
STRING LITERAL LONG2(string)<edge_begin><edge_end>String Literal()
BLANK NODE LABEL(pn local)<edge_begin><edge_end>Blank Node()
ANON()<edge_begin><edge_end>Blank Node()
ANON()<edge_begin><edge_end>WS(ws)
LANGTAG(langtag)<edge_begin><edge_end>LANGTAG Or IR Iref NE()
PN PREFIX(pn prefix)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
PN LOCAL(pn local)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
WS(ws)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Ascending Literal()<edge_begin><edge_end>Asc Or Decs()
Descending Literal()<edge_begin><edge_end>Asc Or Decs()
Single String JDOQL()<edge_begin><edge_end>Select Clause(is Unique)
Single String JDOQL()<edge_begin><edge_end>From Clause(candidate Class Name, is Exclude Subclasses)
Single String JDOQL()<edge_begin><edge_end>Where Clause()
Single String JDOQL()<edge_begin><edge_end>Variables Clause()
Single String JDOQL()<edge_begin><edge_end>Parameters Clause()
Single String JDOQL()<edge_begin><edge_end>Import Clause(import Declarations)
Single String JDOQL()<edge_begin><edge_end>Group By Clause()
Single String JDOQL()<edge_begin><edge_end>Order By Clause()
Single String JDOQL()<edge_begin><edge_end>Range Clause()
Subquery()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Subquery()<edge_begin><edge_end>Subquery Select Clause()
Subquery()<edge_begin><edge_end>Subquery From Clause(candidate Class Name, is Exclude Subclasses)
Subquery()<edge_begin><edge_end>Where Clause()
Subquery()<edge_begin><edge_end>Variables Clause()
Subquery()<edge_begin><edge_end>Parameters Clause()
Subquery()<edge_begin><edge_end>Import Clause(import Declarations)
Select Clause(is Unique)<edge_begin><edge_end>Subquery Select Clause()
Select Clause(is Unique)<edge_begin><edge_end>Into Clause(result Class Name)
Result Clause(is Distinct)<edge_begin><edge_end>Result Spec()
Subquery Result Clause(is Distinct)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Subquery From Clause(candidate Class Name, is Exclude Subclasses)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Subquery From Clause(candidate Class Name, is Exclude Subclasses)<edge_begin><edge_end>Alias(identifier)
Where Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Variables Clause()<edge_begin><edge_end>Variable Declaration(type, variable Name)
Parameters Clause()<edge_begin><edge_end>Parameter Declaration(type, declared Parameter Name)
Group By Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Group By Clause()<edge_begin><edge_end>Having Clause()
Having Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Order By Clause()<edge_begin><edge_end>Order By Spec()
Range Clause()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)<edge_begin><edge_end>Result Spec()
Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)<edge_begin><edge_end>Order By Spec()
Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)<edge_begin><edge_end>Result Naming(identifier)
Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Conditional Or Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Conditional And Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Simple Or Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Simple And Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Comparison Operator Expression(operator)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Addition Expression(operator)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Multiplication Expression(operator)<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
Field Access Expression()<edge_begin><edge_end>Expression(direction, cast Type, unary Operator, literal, this, id, parameter Name, name, is Distinct)
String Property()<edge_begin><edge_end>String Type(val)
String Type(val)<edge_begin><edge_end>String()
Word Document()<edge_begin><edge_end>String Property()
Word Document()<edge_begin><edge_end>Body Elt()
Body Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Block Level Elt()
Block Level Elt()<edge_begin><edge_end>Body Elt()
Block Level Elt()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Block Level Chunk Elt()<edge_begin><edge_end>Block Level Elt()
Para Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Para Elt()<edge_begin><edge_end>Para Content Elt()
Para Content Elt()<edge_begin><edge_end>Para Elt()
Run Elt()<edge_begin><edge_end>Para Content Elt()
Run Elt()<edge_begin><edge_end>Run Content Elt()
Run Content Elt()<edge_begin><edge_end>Run Elt()
Break Elt(type)<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>String Type(val)
Del Text()<edge_begin><edge_end>Run Content Elt()
Del Text()<edge_begin><edge_end>String Type(val)
Instr Text()<edge_begin><edge_end>Run Content Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
Del Instr Text()<edge_begin><edge_end>Run Content Elt()
Del Instr Text()<edge_begin><edge_end>String Type(val)
No Break Hyphen()<edge_begin><edge_end>Run Content Elt()
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Annotation Ref()<edge_begin><edge_end>Run Content Elt()
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Endnote Ref()<edge_begin><edge_end>Run Content Elt()
Separator()<edge_begin><edge_end>Run Content Elt()
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Pg Num()<edge_begin><edge_end>Run Content Elt()
Cr()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Endnote()<edge_begin><edge_end>Run Content Elt()
Endnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Note Elt(type, suppress Ref)<edge_begin><edge_end>Block Level Elt()
Picture()<edge_begin><edge_end>Run Content Elt()
Symbol()<edge_begin><edge_end>Run Content Elt()
Symbol()<edge_begin><edge_end>Sym Elt()
Sym Elt()<edge_begin><edge_end>String Type(val)
Tab()<edge_begin><edge_end>Run Content Elt()
Fld Char()<edge_begin><edge_end>Run Content Elt()
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Table Change()<edge_begin><edge_end>DB Diff()
Add Table()<edge_begin><edge_end>Table Change()
Remove Table()<edge_begin><edge_end>Table Change()
Alter Table()<edge_begin><edge_end>Table Change()
Rename Table Change()<edge_begin><edge_end>Table Change()
Update Table Comment Change()<edge_begin><edge_end>Table Change()
Column Change()<edge_begin><edge_end>DB Diff()
Add Column Change()<edge_begin><edge_end>Column Change()
Remove Column Change()<edge_begin><edge_end>Column Change()
Rename Column Change()<edge_begin><edge_end>Column Change()
Update Column Change()<edge_begin><edge_end>Column Change()
Update Column Comment Change()<edge_begin><edge_end>Column Change()
Primary Key Change()<edge_begin><edge_end>DB Diff()
Add Primary Key()<edge_begin><edge_end>Primary Key Change()
Remove Primary Key()<edge_begin><edge_end>Primary Key Change()
Update Primary Key()<edge_begin><edge_end>Primary Key Change()
Index Change()<edge_begin><edge_end>DB Diff()
Add Index()<edge_begin><edge_end>Index Change()
Remove Index()<edge_begin><edge_end>Index Change()
Update Index()<edge_begin><edge_end>Index Change()
Foreign Key Change()<edge_begin><edge_end>DB Diff()
Add Foreign Key()<edge_begin><edge_end>Foreign Key Change()
Remove Foreign Key()<edge_begin><edge_end>Foreign Key Change()
Update Foreign Key()<edge_begin><edge_end>Foreign Key Change()
Constraint Change()<edge_begin><edge_end>DB Diff()
Add Constraint()<edge_begin><edge_end>Constraint Change()
Remove Constraint()<edge_begin><edge_end>Constraint Change()
Update Constraint()<edge_begin><edge_end>Constraint Change()
Sequence Change()<edge_begin><edge_end>DB Diff()
Add Sequence()<edge_begin><edge_end>Sequence Change()
Remove Sequence()<edge_begin><edge_end>Sequence Change()
Update Sequence()<edge_begin><edge_end>Sequence Change()
Schema Change()<edge_begin><edge_end>DB Diff()
Add Schema()<edge_begin><edge_end>Schema Change()
Remove Schema()<edge_begin><edge_end>Schema Change()
Alter Schema()<edge_begin><edge_end>Schema Change()
Rename Schema Change()<edge_begin><edge_end>Schema Change()
Update Schema Comment Change()<edge_begin><edge_end>Schema Change()
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Column Set()
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Schema()
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Access Pattern()
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Catalog()
Table(system, cardinality, supports Update, materialized)<edge_begin><edge_end>Logical Relationship End(multiplicity)
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Relational Entity(name, name In Source)
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Unique Key()
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Index(filter Condition, nullable, auto Update, unique)
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Access Pattern()
Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)<edge_begin><edge_end>Column Set()
Schema()<edge_begin><edge_end>Relational Entity(name, name In Source)
Schema()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Schema()<edge_begin><edge_end>Catalog()
Schema()<edge_begin><edge_end>Procedure(function, update Count)
Schema()<edge_begin><edge_end>Index(filter Condition, nullable, auto Update, unique)
Schema()<edge_begin><edge_end>Logical Relationship()
Primary Key()<edge_begin><edge_end>Unique Key()
Primary Key()<edge_begin><edge_end>Base Table()
Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)<edge_begin><edge_end>Relationship()
Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)<edge_begin><edge_end>Unique Key()
Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)<edge_begin><edge_end>Base Table()
Unique Key()<edge_begin><edge_end>Relational Entity(name, name In Source)
Unique Key()<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
Unique Key()<edge_begin><edge_end>Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)
View()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Catalog()<edge_begin><edge_end>Relational Entity(name, name In Source)
Catalog()<edge_begin><edge_end>Schema()
Catalog()<edge_begin><edge_end>Procedure(function, update Count)
Catalog()<edge_begin><edge_end>Index(filter Condition, nullable, auto Update, unique)
Catalog()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Catalog()<edge_begin><edge_end>Logical Relationship()
Procedure(function, update Count)<edge_begin><edge_end>Relational Entity(name, name In Source)
Procedure(function, update Count)<edge_begin><edge_end>Schema()
Procedure(function, update Count)<edge_begin><edge_end>Procedure Parameter(direction, default Value, native Type, length, precision, scale, nullable, radix)
Procedure(function, update Count)<edge_begin><edge_end>Catalog()
Procedure(function, update Count)<edge_begin><edge_end>Procedure Result()
Index(filter Condition, nullable, auto Update, unique)<edge_begin><edge_end>Relational Entity(name, name In Source)
Index(filter Condition, nullable, auto Update, unique)<edge_begin><edge_end>Schema()
Index(filter Condition, nullable, auto Update, unique)<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
Index(filter Condition, nullable, auto Update, unique)<edge_begin><edge_end>Catalog()
Procedure Parameter(direction, default Value, native Type, length, precision, scale, nullable, radix)<edge_begin><edge_end>Relational Entity(name, name In Source)
Procedure Parameter(direction, default Value, native Type, length, precision, scale, nullable, radix)<edge_begin><edge_end>Procedure(function, update Count)
Unique Constraint()<edge_begin><edge_end>Unique Key()
Unique Constraint()<edge_begin><edge_end>Base Table()
Access Pattern()<edge_begin><edge_end>Relational Entity(name, name In Source)
Access Pattern()<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
Access Pattern()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Relationship()<edge_begin><edge_end>Relational Entity(name, name In Source)
Logical Relationship()<edge_begin><edge_end>Relationship()
Logical Relationship()<edge_begin><edge_end>Catalog()
Logical Relationship()<edge_begin><edge_end>Schema()
Logical Relationship()<edge_begin><edge_end>Logical Relationship End(multiplicity)
Logical Relationship End(multiplicity)<edge_begin><edge_end>Relational Entity(name, name In Source)
Logical Relationship End(multiplicity)<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Logical Relationship End(multiplicity)<edge_begin><edge_end>Logical Relationship()
Base Table()<edge_begin><edge_end>Table(system, cardinality, supports Update, materialized)
Base Table()<edge_begin><edge_end>Foreign Key(foreign Key Multiplicity, primary Key Multiplicity)
Base Table()<edge_begin><edge_end>Primary Key()
Base Table()<edge_begin><edge_end>Unique Constraint()
Column Set()<edge_begin><edge_end>Relational Entity(name, name In Source)
Column Set()<edge_begin><edge_end>Column(native Type, length, fixed Length, precision, scale, nullable, auto Incremented, default Value, minimum Value, maximum Value, format, character Set Name, collation Name, selectable, updateable, case Sensitive, searchability, currency, radix, signed, distinct Value Count, null Value Count)
Procedure Result()<edge_begin><edge_end>Column Set()
Procedure Result()<edge_begin><edge_end>Procedure(function, update Count)
Project()<edge_begin><edge_end>Xmlns(name, value)
Project()<edge_begin><edge_end>Goal(name)
Project()<edge_begin><edge_end>Path(id, refid)
Project()<edge_begin><edge_end>Ant Property()
Project()<edge_begin><edge_end>Ant Task Def(name, classname)
Project()<edge_begin><edge_end>Pre Post Goal()
Xmlns(name, value)<edge_begin><edge_end>String()
Ant Property()<edge_begin><edge_end>Contents Goal()
Ant Property Name(name)<edge_begin><edge_end>Ant Property()
Ant Property Name(name)<edge_begin><edge_end>String()
Ant Property Value(value)<edge_begin><edge_end>Ant Property Name(name)
Ant Property Value(value)<edge_begin><edge_end>String()
Ant Property Location(location)<edge_begin><edge_end>Ant Property Name(name)
Ant Property Location(location)<edge_begin><edge_end>String()
Ant Property File(file)<edge_begin><edge_end>Ant Property()
Ant Property File(file)<edge_begin><edge_end>String()
Ant Property Env(environment)<edge_begin><edge_end>Ant Property()
Ant Property Env(environment)<edge_begin><edge_end>String()
Jelly Command()<edge_begin><edge_end>Contents Goal()
Jelly Set(var, value)<edge_begin><edge_end>Jelly Command()
Jelly Set(var, value)<edge_begin><edge_end>String()
Jelly For Each(items, var, index Var)<edge_begin><edge_end>Jelly Command()
Jelly For Each(items, var, index Var)<edge_begin><edge_end>String()
Jelly For Each(items, var, index Var)<edge_begin><edge_end>Contents Goal()
Abstract Goal()<edge_begin><edge_end>Contents Goal()
Attain Goal()<edge_begin><edge_end>Contents Goal()
Attain Goal()<edge_begin><edge_end>Goal(name)
Pre Post Goal()<edge_begin><edge_end>Abstract Goal()
Pre Goal()<edge_begin><edge_end>Pre Post Goal()
Pre Goal()<edge_begin><edge_end>Goal(name)
Post Goal()<edge_begin><edge_end>Pre Post Goal()
Post Goal()<edge_begin><edge_end>Goal(name)
Goal(name)<edge_begin><edge_end>Abstract Goal()
Goal(name)<edge_begin><edge_end>String()
Goal(name)<edge_begin><edge_end>Pre Goal()
Goal(name)<edge_begin><edge_end>Post Goal()
Basic()<edge_begin><edge_end>Pattern()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>String()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File List(dir, files)<edge_begin><edge_end>Basic()
File List(dir, files)<edge_begin><edge_end>String()
Filter(token, value)<edge_begin><edge_end>Basic()
Filter(token, value)<edge_begin><edge_end>String()
Filters File(file)<edge_begin><edge_end>Basic()
Filters File(file)<edge_begin><edge_end>String()
Path Element(path, location)<edge_begin><edge_end>Basic()
Path Element(path, location)<edge_begin><edge_end>String()
Set()<edge_begin><edge_end>Pattern()
Pattern Set()<edge_begin><edge_end>Set()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Set(dir)<edge_begin><edge_end>Set()
File Set(dir)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File Set(dir)<edge_begin><edge_end>Includes()
File Set(dir)<edge_begin><edge_end>Excludes()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Path(id, refid)<edge_begin><edge_end>Set()
Path(id, refid)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Class Path(refid)<edge_begin><edge_end>String()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Task()<edge_begin><edge_end>Contents Goal()
Ant Task Def(name, classname)<edge_begin><edge_end>Contents Goal()
Ant Task Def(name, classname)<edge_begin><edge_end>String()
New Task()<edge_begin><edge_end>Task()
New Task()<edge_begin><edge_end>Ant Task Def(name, classname)
New Task()<edge_begin><edge_end>Attribut(name, value)
Attribut(name, value)<edge_begin><edge_end>String()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>Execution Task()
Exec(executable, dir)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>Execution Task()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Echo(message, file, append)<edge_begin><edge_end>String()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Format Tstamp(property, pattern, offset, unit, locale)<edge_begin><edge_end>String()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>String()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>String()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>String()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mkdir(dir)<edge_begin><edge_end>File Task()
Mkdir(dir)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>String()
Document Include(var Name)<edge_begin><edge_end>Lunifera Doc Document()
Lunifera Doc Document()<edge_begin><edge_end>Named Document(name)
Entity Document(entity Class)<edge_begin><edge_end>Lunifera Doc Document()
Entity Document(entity Class)<edge_begin><edge_end>Entity Description()
Entity Document(entity Class)<edge_begin><edge_end>Entity Fields()
Entity Description()<edge_begin><edge_end>Rich String()
Entity Fields()<edge_begin><edge_end>Entity Field(name, type, length, pk, nullable)
Entity Field(name, type, length, pk, nullable)<edge_begin><edge_end>Rich String()
DTO Document(dto Class)<edge_begin><edge_end>Lunifera Doc Document()
DTO Document(dto Class)<edge_begin><edge_end>DTO Description()
DTO Document(dto Class)<edge_begin><edge_end>DTO Properties()
DTO Description()<edge_begin><edge_end>Rich String()
DTO Properties()<edge_begin><edge_end>DTO Property(name)
DTO Property(name)<edge_begin><edge_end>Rich String()
BPM Process Document(process)<edge_begin><edge_end>Lunifera Doc Document()
BPM Process Document(process)<edge_begin><edge_end>BPM Process Description()
BPM Process Description()<edge_begin><edge_end>Rich String()
BPM Human Task Document(task)<edge_begin><edge_end>Lunifera Doc Document()
BPM Human Task Document(task)<edge_begin><edge_end>BPM Human Task Description()
BPM Human Task Description()<edge_begin><edge_end>Rich String()
Vaaclipse View Document(view)<edge_begin><edge_end>Lunifera Doc Document()
Vaaclipse View Document(view)<edge_begin><edge_end>Vaaclipse View Description()
Vaaclipse View Description()<edge_begin><edge_end>Rich String()
UI Document(ui)<edge_begin><edge_end>Lunifera Doc Document()
UI Document(ui)<edge_begin><edge_end>UI Description()
UI Description()<edge_begin><edge_end>Rich String()
General Document()<edge_begin><edge_end>Lunifera Doc Layout()
General Document()<edge_begin><edge_end>Document Include(var Name)
Lunifera Doc Layout()<edge_begin><edge_end>Named Document(name)
Lunifera Doc Layout()<edge_begin><edge_end>Rich String()
Entity Layout()<edge_begin><edge_end>Lunifera Doc Layout()
DTO Layout()<edge_begin><edge_end>Lunifera Doc Layout()
BPM Process Layout()<edge_begin><edge_end>Lunifera Doc Layout()
BPM Human Task Layout()<edge_begin><edge_end>Lunifera Doc Layout()
Vaaclipse View Layout()<edge_begin><edge_end>Lunifera Doc Layout()
UI Layout()<edge_begin><edge_end>Lunifera Doc Layout()
Rich String If()<edge_begin><edge_end>Rich String Else If()
Rich String Example()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String H1()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String H2()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String H3()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String H4()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String H5()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String H6()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Chapter(name)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Section(name)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Subsection(name)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String URL(location)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Ref(ref Id)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Bold()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Underline()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Italic()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Img(src, alt, width, height)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Mailto(email)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Skype(target)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Movie(src, width, height, type)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Code(lang)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Table()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Table()<edge_begin><edge_end>Rich String Table Row()
Rich String Table Row()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Table Row()<edge_begin><edge_end>Rich String Table Data()
Rich String Table Data()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Open View(view Id)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Start Process(process Id)<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Entity Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Entity Ref()<edge_begin><edge_end>Entity Document(entity Class)
Rich String DTO Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String DTO Ref()<edge_begin><edge_end>DTO Document(dto Class)
Rich String Process Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Process Ref()<edge_begin><edge_end>BPM Process Document(process)
Rich String Task Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Task Ref()<edge_begin><edge_end>BPM Human Task Document(task)
Rich String View Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String View Ref()<edge_begin><edge_end>Vaaclipse View Document(view)
Rich String UI Ref()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String UI Ref()<edge_begin><edge_end>UI Document(ui)
Rich String List()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String List()<edge_begin><edge_end>Rich String List Element()
Rich String Ordered List()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Ordered List()<edge_begin><edge_end>Rich String List Element()
Rich String List Element()<edge_begin><edge_end>Rich String Markup(id, style Class)
Rich String Span()<edge_begin><edge_end>Rich String Markup(id, style Class)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phases(name)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Keyword(description)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Progress(percent)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication System()<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Publication Structure()
Publication System()<edge_begin><edge_end>Position(description)
Publication System()<edge_begin><edge_end>Keyword(description)
Position(description)<edge_begin><edge_end>Named(name)
Position(description)<edge_begin><edge_end>Position(description)
Keyword(description)<edge_begin><edge_end>Named(name)
column(kind, name, o ID, type)<edge_begin><edge_end>referenced Keys(group)
column(kind, name, o ID, type)<edge_begin><edge_end>has Foreign Keys(group)
columns(group)<edge_begin><edge_end>column(kind, name, o ID, type)
Document Root(mixed)<edge_begin><edge_end>column(kind, name, o ID, type)
Document Root(mixed)<edge_begin><edge_end>columns(group)
Document Root(mixed)<edge_begin><edge_end>foreign Key(kind, name, o ID, owner, refers To)
Document Root(mixed)<edge_begin><edge_end>foreign Keys(group)
Document Root(mixed)<edge_begin><edge_end>has Foreign Keys(group)
Document Root(mixed)<edge_begin><edge_end>key(kind, name, o ID)
Document Root(mixed)<edge_begin><edge_end>key2()
Document Root(mixed)<edge_begin><edge_end>o ID(o ID)
Document Root(mixed)<edge_begin><edge_end>RDBMS()
Document Root(mixed)<edge_begin><edge_end>referenced Columns(group)
Document Root(mixed)<edge_begin><edge_end>referenced Keys(group)
Document Root(mixed)<edge_begin><edge_end>schema(kind, name, o ID)
Document Root(mixed)<edge_begin><edge_end>schemas(group)
Document Root(mixed)<edge_begin><edge_end>table(kind, name, o ID)
Document Root(mixed)<edge_begin><edge_end>tables(group)
foreign Key(kind, name, o ID, owner, refers To)<edge_begin><edge_end>referenced Columns(group)
foreign Keys(group)<edge_begin><edge_end>foreign Key(kind, name, o ID, owner, refers To)
has Foreign Keys(group)<edge_begin><edge_end>o ID(o ID)
key(kind, name, o ID)<edge_begin><edge_end>referenced Columns(group)
key2()<edge_begin><edge_end>key(kind, name, o ID)
RDBMS()<edge_begin><edge_end>schemas(group)
referenced Columns(group)<edge_begin><edge_end>o ID(o ID)
referenced Keys(group)<edge_begin><edge_end>o ID(o ID)
schema(kind, name, o ID)<edge_begin><edge_end>tables(group)
schema(kind, name, o ID)<edge_begin><edge_end>foreign Keys(group)
schemas(group)<edge_begin><edge_end>schema(kind, name, o ID)
table(kind, name, o ID)<edge_begin><edge_end>columns(group)
table(kind, name, o ID)<edge_begin><edge_end>key2()
tables(group)<edge_begin><edge_end>table(kind, name, o ID)
Meta-Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>User()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Organizer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Speaker()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Personal Review History()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Double Blind Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>External Reviewer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Research Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper Review(Comments for Author, Comments for Program Committee)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>String()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Pending Proposed Conflict()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Comitee Chair()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Administrator()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Thing()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Inforamtion()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Document(Document ID)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Account()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Place()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>String()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Organization()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Conference document()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Item()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Presenter city()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Time()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>System()
Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Program Committee()<edge_begin><edge_end>Thing()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Bid()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Organizing Committee()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Location()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Program Comitee Chair()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Topic()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>ACM SIGKDD()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference Member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Administrator()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>String()
Author Not Reviewer()<edge_begin><edge_end>Author()
Chairman()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Domain Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Document(Document ID)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>article()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Integer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Review()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Research Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Paper Status()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Paper Abstract()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Program Comitee Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Program Comitee()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Committee Member()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Co-author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Author()<edge_begin><edge_end>Speaker()
Author()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Author()<edge_begin><edge_end>article()
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Author()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Author()<edge_begin><edge_end>Award()
Author()<edge_begin><edge_end>Deadline Author notification()
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Administrator()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Administrator()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Meta-Review()<edge_begin><edge_end>Review()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Account()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
User()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
User()<edge_begin><edge_end>Document(Document ID)
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Document(Document ID)<edge_begin><edge_end>Thing()
Document(Document ID)<edge_begin><edge_end>Item()
Document(Document ID)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Document(Document ID)<edge_begin><edge_end>Document(Document ID)
Document(Document ID)<edge_begin><edge_end>String()
Document(Document ID)<edge_begin><edge_end>Speaker()
Document(Document ID)<edge_begin><edge_end>Deadline(Date)
Document(Document ID)<edge_begin><edge_end>User()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>Document(Document ID)
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>Administrator()
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>String()
Short Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Approval Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Template()<edge_begin><edge_end>Document(Document ID)
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Thing()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Time()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>date Time()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>human(e-mail, last name, first name)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>intensity()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>article()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Topic()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Integer()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Registration()<edge_begin><edge_end>Conference activity()
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Research Topic()<edge_begin><edge_end>Thing()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Committee member()<edge_begin><edge_end>Committee()
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Abstract()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Abstract()<edge_begin><edge_end>Document(Document ID)
Abstract()<edge_begin><edge_end>Thing()
Abstract()<edge_begin><edge_end>article()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Proceedings()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Conference activity()
Presentation()<edge_begin><edge_end>Active conference participant()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Chair()<edge_begin><edge_end>Output Document()
Chair()<edge_begin><edge_end>Thing()
Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Chair()<edge_begin><edge_end>Session(room)
Chair()<edge_begin><edge_end>Committee()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Topic()<edge_begin><edge_end>Thing()
Topic()<edge_begin><edge_end>Working event()
Topic()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Organizer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
conference()<edge_begin><edge_end>Thing()
conference()<edge_begin><edge_end>phase of conference()
bidding of reviewer()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Company()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Member(Web address)<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Member(Web address)<edge_begin><edge_end>String()
Participant(early Registration)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Chair PC()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Student()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Science Worker()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Assistant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Volunteer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Regular()<edge_begin><edge_end>Participant(early Registration)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
chair()<edge_begin><edge_end>program()
article()<edge_begin><edge_end>Document(Document ID)
article()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
article()<edge_begin><edge_end>Author()
article()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
article()<edge_begin><edge_end>Abstract()
participant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
participant()<edge_begin><edge_end>conference()
program()<edge_begin><edge_end>chair()
program()<edge_begin><edge_end>session()
Slide Set()<edge_begin><edge_end>Document(Document ID)
Programme()<edge_begin><edge_end>Document(Document ID)
Programme()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document(Document ID)
Meal Menu()<edge_begin><edge_end>Meal Event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Dining Place()<edge_begin><edge_end>Place()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Published Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Attendee()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
TPC Member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Evaluated Paper()<edge_begin><edge_end>Review()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Positive Review()<edge_begin><edge_end>Review()
Workshop Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Industrial Session()<edge_begin><edge_end>Conference Session()
Conference Session()<edge_begin><edge_end>Session(room)
Regular Session()<edge_begin><edge_end>Session(room)
Poster Session()<edge_begin><edge_end>Session(room)
Demo Session()<edge_begin><edge_end>Session(room)
Paper Author()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference Trip()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference Participant()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Assigned Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Negative Review()<edge_begin><edge_end>Review()
Review()<edge_begin><edge_end>Document(Document ID)
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Primary Reviewer()
Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Review()<edge_begin><edge_end>Possible Reviewer()
Review()<edge_begin><edge_end>Evaluation()
Neutral Review()<edge_begin><edge_end>Review()
Organising Agency()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Organisation()<edge_begin><edge_end>Thing()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Demo Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Research Institute()<edge_begin><edge_end>Academic Institution()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Agency Staff Member()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Workshop Session()<edge_begin><edge_end>Session(room)
Track()<edge_begin><edge_end>Scientific Event()
Track()<edge_begin><edge_end>Conference part()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Workshop()<edge_begin><edge_end>Scientific Event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Academic Event()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Workshop()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Tutorial()<edge_begin><edge_end>Individual Presentation()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Document(Document ID)
Demo Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>PC Member()
PC Chair()<edge_begin><edge_end>Conference Participant()
PC Chair()<edge_begin><edge_end>PC Member()
PC Member()<edge_begin><edge_end>Possible Reviewer()
OC Member()<edge_begin><edge_end>Conference Participant()
Programme Brochure()<edge_begin><edge_end>Document(Document ID)
Flyer()<edge_begin><edge_end>Document(Document ID)
Web Site()<edge_begin><edge_end>Document(Document ID)
Multi-author Volume()<edge_begin><edge_end>Document(Document ID)
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Individual Presentation()<edge_begin><edge_end>Document(Document ID)
OC Chair()<edge_begin><edge_end>OC Member()
Conference Banquet()<edge_begin><edge_end>Social Event()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Workshop Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
University()<edge_begin><edge_end>Academic Institution()
University()<edge_begin><edge_end>Organization()
Possible Reviewer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Invited Speaker()<edge_begin><edge_end>Speaker()
Presenter()<edge_begin><edge_end>Conference Participant()
Presenter()<edge_begin><edge_end>Author()
SC Member()<edge_begin><edge_end>PC Member()
Presenter house()<edge_begin><edge_end>Building()
Building()<edge_begin><edge_end>Place()
Presenter state()<edge_begin><edge_end>State()
Delegate()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Presenter city()<edge_begin><edge_end>City()
Hotel registration form()<edge_begin><edge_end>Form()
Deadline hotel reservation()<edge_begin><edge_end>Deadline(Date)
Form()<edge_begin><edge_end>Document(Document ID)
Car()<edge_begin><edge_end>Transport vehicle()
Transport vehicle()<edge_begin><edge_end>Item()
Mailing list()<edge_begin><edge_end>Document(Document ID)
Renting()<edge_begin><edge_end>Activity before conference()
Activity before conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Dinner banquet()<edge_begin><edge_end>Social program()
One day presenter()<edge_begin><edge_end>Delegate()
Social program()<edge_begin><edge_end>Conference activity()
Power Point presentation()<edge_begin><edge_end>Presentation()
Conference restaurant()<edge_begin><edge_end>Building()
Conference city()<edge_begin><edge_end>City()
Conference state()<edge_begin><edge_end>State()
Submissions deadline()<edge_begin><edge_end>Deadline(Date)
Deadline(Date)<edge_begin><edge_end>Time()
Deadline(Date)<edge_begin><edge_end>ACM SIGKDD()
Deadline(Date)<edge_begin><edge_end>date Time()
Deadline(Date)<edge_begin><edge_end>date()
Simulating()<edge_begin><edge_end>Research()
Research()<edge_begin><edge_end>Activity before conference()
Technic activity()<edge_begin><edge_end>Conference activity()
Conference activity()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Technical commitee()<edge_begin><edge_end>Delegate()
Place()<edge_begin><edge_end>Thing()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Place()<edge_begin><edge_end>Item()
Author cd proceedings included()<edge_begin><edge_end>Author()
Cd proceening()<edge_begin><edge_end>Publication()
Trip day()<edge_begin><edge_end>Time()
Record of attendance()<edge_begin><edge_end>Document(Document ID)
Listener()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Session room()<edge_begin><edge_end>Place()
Brief introduction for Session chair()<edge_begin><edge_end>Document(Document ID)
Session chair()<edge_begin><edge_end>Delegate()
Invitation letter()<edge_begin><edge_end>Document(Document ID)
Registration form()<edge_begin><edge_end>Form()
Viza()<edge_begin><edge_end>Document(Document ID)
Conference days()<edge_begin><edge_end>Time()
Conference building()<edge_begin><edge_end>Building()
Departure()<edge_begin><edge_end>Activity after conference()
Activity after conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference airport()<edge_begin><edge_end>Building()
Worker lecturer()<edge_begin><edge_end>Lecturer()
Lecturer()<edge_begin><edge_end>Author()
Transparency()<edge_begin><edge_end>Document(Document ID)
City()<edge_begin><edge_end>Thing()
Card()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Item()<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Item()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Time()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Book proceeding()<edge_begin><edge_end>Publication()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Audiovisual equipment()<edge_begin><edge_end>Item()
Video presentation()<edge_begin><edge_end>Presentation()
Hotel room()<edge_begin><edge_end>Place()
Hotel presenter()<edge_begin><edge_end>Delegate()
Conference hotel()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Item()
Money()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Money()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Thing()
Money()<edge_begin><edge_end>Money()
Introduction()<edge_begin><edge_end>Conference activity()
Welcome address()<edge_begin><edge_end>Conference activity()
Value added tax()<edge_begin><edge_end>Tax()
Tax()<edge_begin><edge_end>Money()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Final manuscript()<edge_begin><edge_end>Submission()
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Submission()<edge_begin><edge_end>Document(Document ID)
Sponsor city()<edge_begin><edge_end>City()
Sponsor()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Introduction of speaker()<edge_begin><edge_end>Introduction()
Conference hall()<edge_begin><edge_end>Place()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Plenary lecture speaker()<edge_begin><edge_end>Author()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline(Date)
Tutorial speaker()<edge_begin><edge_end>Author()
Registation deadline()<edge_begin><edge_end>Deadline(Date)
Single hotel room()<edge_begin><edge_end>Hotel room()
Non speaker()<edge_begin><edge_end>Delegate()
Author information form()<edge_begin><edge_end>Form()
Nonmember registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
IASTED non member()<edge_begin><edge_end>Delegate()
Hotel fee()<edge_begin><edge_end>Fee()
Fee()<edge_begin><edge_end>Money()
Publication()<edge_begin><edge_end>Item()
Taxi()<edge_begin><edge_end>Transport vehicle()
Sponsor state()<edge_begin><edge_end>State()
Modelling()<edge_begin><edge_end>Research()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Payment document()<edge_begin><edge_end>Document(Document ID)
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline(Date)
One conference day()<edge_begin><edge_end>Conference days()
Fee for extra trip()<edge_begin><edge_end>Fee()
Full day tour()<edge_begin><edge_end>Activity after conference()
Conference Hiker()<edge_begin><edge_end>Delegate()
Computer()<edge_begin><edge_end>Audiovisual equipment()
IASTED member()<edge_begin><edge_end>Delegate()
Memeber registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Author book proceedings included()<edge_begin><edge_end>Author()
Sponsor company house()<edge_begin><edge_end>Building()
Sponzorship()<edge_begin><edge_end>Money()
Student lecturer()<edge_begin><edge_end>Lecturer()
Trip city()<edge_begin><edge_end>City()
Cheque()<edge_begin><edge_end>Payment document()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Student non speaker()<edge_begin><edge_end>Non speaker()
Student registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Tip()<edge_begin><edge_end>Money()
Credit card()<edge_begin><edge_end>Card()
Van()<edge_begin><edge_end>Transport vehicle()
Main office()<edge_begin><edge_end>Place()
Presenter university()<edge_begin><edge_end>Building()
Departure tax()<edge_begin><edge_end>Tax()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Double hotel room()<edge_begin><edge_end>Hotel room()
Initial manuscipt()<edge_begin><edge_end>Submission()
Coffee break()<edge_begin><edge_end>Conference activity()
Bank transfer()<edge_begin><edge_end>Payment document()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Speaker lecture()<edge_begin><edge_end>Session(room)
Coctail reception()<edge_begin><edge_end>Conference activity()
Organizing Committee()<edge_begin><edge_end>Thing()
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Outside Referee()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Lecture(has Acronym)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Lecture(has Acronym)<edge_begin><edge_end>String()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Double Blind Review()<edge_begin><edge_end>Thing()
Double Blind Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
External Reviewer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
External Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Contact Author()<edge_begin><edge_end>Author()
Contact Author()<edge_begin><edge_end>Paper Abstract()
Conference Program()<edge_begin><edge_end>Thing()
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Paper Status()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Slot(ends At, begins At)<edge_begin><edge_end>Thing()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Slot(ends At, begins At)<edge_begin><edge_end>time()
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Slot(ends At, begins At)<edge_begin><edge_end>Session(room)
Session(room)<edge_begin><edge_end>Thing()
Session(room)<edge_begin><edge_end>Lecture(has Acronym)
Session(room)<edge_begin><edge_end>Scientific Event()
Session(room)<edge_begin><edge_end>Accepted Paper()
Session(room)<edge_begin><edge_end>String()
Session(room)<edge_begin><edge_end>Slot(ends At, begins At)
Session(room)<edge_begin><edge_end>Chair()
Research Topic()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Chair()
Criterion(has Weight)<edge_begin><edge_end>Thing()
Criterion(has Weight)<edge_begin><edge_end>double()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Accepted Paper()<edge_begin><edge_end>Session(room)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Boolean()
Evaluation()<edge_begin><edge_end>Document(Document ID)
Evaluation()<edge_begin><edge_end>Review()
Paper Abstract()<edge_begin><edge_end>Document(Document ID)
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Paper Abstract()<edge_begin><edge_end>Contact Author()
Review Question()<edge_begin><edge_end>Question()
Paper Question()<edge_begin><edge_end>Question()
CD-ROM()<edge_begin><edge_end>Output Document()
Index Of Authors()<edge_begin><edge_end>Output Document()
External Reviewers List()<edge_begin><edge_end>Output Document()
Proceedings()<edge_begin><edge_end>Output Document()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Proceedings()<edge_begin><edge_end>Thing()
Program()<edge_begin><edge_end>Output Document()
PC Members List()<edge_begin><edge_end>Output Document()
List Of Abstracts()<edge_begin><edge_end>Output Document()
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
RFC()<edge_begin><edge_end>Topics()
Topics()<edge_begin><edge_end>Value Partition()
Classic Papers()<edge_begin><edge_end>Topics()
Networking()<edge_begin><edge_end>Topics()
Humour()<edge_begin><edge_end>Topics()
Programming()<edge_begin><edge_end>Topics()
Computer Science()<edge_begin><edge_end>Topics()
Format()<edge_begin><edge_end>Value Partition()
Adobe PDF()<edge_begin><edge_end>Format()
MS Word()<edge_begin><edge_end>Format()
Corel Word Perfect()<edge_begin><edge_end>Format()
HTML()<edge_begin><edge_end>Format()
Post Script()<edge_begin><edge_end>Format()
RTF()<edge_begin><edge_end>Format()
Text()<edge_begin><edge_end>Format()
High()<edge_begin><edge_end>Reviewer Famliliarity()
Reviewer Famliliarity()<edge_begin><edge_end>Review Values()
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Marginal Tend to Reject()<edge_begin><edge_end>Reccommendation()
Reccommendation()<edge_begin><edge_end>Review Values()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
Portable Reject()<edge_begin><edge_end>Reccommendation()
Must Accept()<edge_begin><edge_end>Reccommendation()
Clear Reject()<edge_begin><edge_end>Reccommendation()
Clear Accept()<edge_begin><edge_end>Reccommendation()
Program chair()<edge_begin><edge_end>Member(Web address)
Program chair()<edge_begin><edge_end>Conference Program()
Conference Program()<edge_begin><edge_end>Domain Topic()
Conference Program()<edge_begin><edge_end>Program chair()
Conference Program()<edge_begin><edge_end>Planed Paper()
Program Committee()<edge_begin><edge_end>Committee()
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Planed Paper()<edge_begin><edge_end>Conference Program()
Valuable Confirmation of Present Knowledge()<edge_begin><edge_end>Overall Value()
Other()<edge_begin><edge_end>Overall Value()
Not Much()<edge_begin><edge_end>Overall Value()
New Information()<edge_begin><edge_end>Overall Value()
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Overall Value()<edge_begin><edge_end>Review Values()
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Paper Categorization()<edge_begin><edge_end>Review Values()
Tends Towards Practical()<edge_begin><edge_end>Paper Categorization()
Balanced Theory and Practice()<edge_begin><edge_end>Paper Categorization()
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
Highly Practical()<edge_begin><edge_end>Paper Categorization()
Reviewed Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper File()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Contact Author(Alternate Email)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Integer()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Long bool()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Overall Value()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reccommendation()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Long bool()<edge_begin><edge_end>Value Partition()
Review Values()<edge_begin><edge_end>Value Partition()
Review Committee()<edge_begin><edge_end>Committees()
Committees()<edge_begin><edge_end>Domain Topic()
Paper File()<edge_begin><edge_end>Domain Topic()
Paper File()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Paper File()<edge_begin><edge_end>Format()
Advocate()<edge_begin><edge_end>Member(Web address)
Advocate()<edge_begin><edge_end>Advocated Paper()
Advocated Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Advocated Paper()<edge_begin><edge_end>Advocate()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Contact Author(Alternate Email)<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Contact Author(Alternate Email)<edge_begin><edge_end>String()
Result of Advocate()<edge_begin><edge_end>Value Partition()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>Domain Topic()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Source Archive()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Camera Ready Copy()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Slides()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Contribution File(has Contribution File Status)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Program Comitee()<edge_begin><edge_end>Thing()
Program Comitee()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>String()
Conflict Of Interest()<edge_begin><edge_end>Thing()
Conflict Rules()<edge_begin><edge_end>Thing()
Program Comitee Meeting()<edge_begin><edge_end>Thing()
Setup Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Camera Ready Copy Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Assignment Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Blocked Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Abstract And Paper Submission Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Invitation Of Reviewers Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Review Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Closed Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Bidding Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Speaker()<edge_begin><edge_end>Delegate()
Speaker()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Speaker()<edge_begin><edge_end>Document(Document ID)
Program Comitee Chair()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Program Comitee Chair()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Comitee Chair()<edge_begin><edge_end>Program Comitee()
Program Comitee Chair()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Program Comitee Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Program Comitee Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Confirmed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Pending Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Pending Proposed Conflict()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Hidden Conflict()<edge_begin><edge_end>Conflict Of Interest()
Deleted Conflict()<edge_begin><edge_end>Conflict Of Interest()
Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Proposed Conflict()<edge_begin><edge_end>Thing()
Self Conflict()<edge_begin><edge_end>Conflict Of Interest()
Co-Author()<edge_begin><edge_end>Author()
Main Author()<edge_begin><edge_end>Author()
Bidding And Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
Bidding Without Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
E-mail PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
External Reviewer()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Accepted paper(Score)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Accepted paper(Score)<edge_begin><edge_end>Thing()
Secondary Reviewer()<edge_begin><edge_end>Committee Member()
Committee Member()<edge_begin><edge_end>Conference Member()
Committee Member()<edge_begin><edge_end>Organizer()
Committee Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Committee Member()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Information()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
CD()<edge_begin><edge_end>Electronic proceeding()
Invitation()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Web site()<edge_begin><edge_end>Electronic proceeding()
Rejected paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Title, Summary, paper ID, title)
Primary Reviewer()<edge_begin><edge_end>Committee Member()
Primary Reviewer()<edge_begin><edge_end>Review()
Hotel()<edge_begin><edge_end>Place()
Deadline Abstract Submission()<edge_begin><edge_end>Deadline(Date)
Best Applications Paper Award()<edge_begin><edge_end>Award()
Award()<edge_begin><edge_end>Organizator()
Deadline Paper Submission()<edge_begin><edge_end>Deadline(Date)
Deadline Author notification()<edge_begin><edge_end>Deadline(Date)
Webmaster()<edge_begin><edge_end>Organizator()
Organizator()<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Author of paper student()<edge_begin><edge_end>Author()
Best Student Paper Award()<edge_begin><edge_end>Award()
ACM SIGKDD()<edge_begin><edge_end>Thing()
ACM SIGKDD()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, Name of conference, Start of conference, City of conference, End of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
ACM SIGKDD()<edge_begin><edge_end>Sponzor(Name of sponsor)
ACM SIGKDD()<edge_begin><edge_end>Deadline(Date)
Sponzor(Name of sponsor)<edge_begin><edge_end>ACM SIGKDD()
Sponzor(Name of sponsor)<edge_begin><edge_end>String()
Exhibitor()<edge_begin><edge_end>Sponzor(Name of sponsor)
Registration SIGMOD Member()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Registration fee(Date, Price, Currency)<edge_begin><edge_end>Fee()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>ACM SIGKDD()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>date Time()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>Person(Nation, Name, has Email, has Name, has Affiliation, has First Name, has Last Name, has Mail, works For Company, has First Name, has Biography, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has an email, has the first name, has gender, has the last name, E-mail, email)
Registration fee(Date, Price, Currency)<edge_begin><edge_end>Integer()
Registration fee(Date, Price, Currency)<edge_begin><edge_end>String()
Bronze Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Platinum Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Best Paper Awards Committee()<edge_begin><edge_end>Committee()
Program Chair()<edge_begin><edge_end>Organizator()
Registration Non-Member()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Sponzor fee()<edge_begin><edge_end>Fee()
Registration SIGKDD Member()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
General Chair()<edge_begin><edge_end>Organizator()
Gold Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Registration Student()<edge_begin><edge_end>Registration fee(Date, Price, Currency)
Organizing Committee()<edge_begin><edge_end>Committee()
Program Committee member()<edge_begin><edge_end>Organizator()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
Best Research Paper Award()<edge_begin><edge_end>Award()
Best Student Paper Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Silver Supporter()<edge_begin><edge_end>Sponzor(Name of sponsor)
Organizing Committee member()<edge_begin><edge_end>Organizator()
Author of paper()<edge_begin><edge_end>Author()
Trigger Expression()<edge_begin><edge_end>Expression()
Trigger Expression()<edge_begin><edge_end>Trigger()
Guard Expression()<edge_begin><edge_end>Expression()
Guard Expression()<edge_begin><edge_end>Boolean Or Expression()
Action Expression()<edge_begin><edge_end>Expression()
Action Expression()<edge_begin><edge_end>Statement()
Trigger()<edge_begin><edge_end>Event()
Signal Event(identifier)<edge_begin><edge_end>Event()
Time Event()<edge_begin><edge_end>Event()
Time Event()<edge_begin><edge_end>Time Expression()
Variable Reference()<edge_begin><edge_end>Time Expression()
Variable Reference()<edge_begin><edge_end>Primary Expression()
Variable Reference()<edge_begin><edge_end>Variable(identifier)
Time Constant(value, unit)<edge_begin><edge_end>Time Expression()
Variable Assignment(operator)<edge_begin><edge_end>Statement()
Variable Assignment(operator)<edge_begin><edge_end>Variable Reference()
Variable Assignment(operator)<edge_begin><edge_end>Conditional Expression()
Procedure Call()<edge_begin><edge_end>Statement()
Procedure Call()<edge_begin><edge_end>Procedure(identifier)
Event Raising()<edge_begin><edge_end>Statement()
Event Raising()<edge_begin><edge_end>Signal Event(identifier)
Boolean Or Expression()<edge_begin><edge_end>Boolean And Expression()
Boolean And Expression()<edge_begin><edge_end>Bitwise Xor Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Bitwise Or Expression()
Bitwise Or Expression()<edge_begin><edge_end>Bitwise And Expression()
Bitwise And Expression()<edge_begin><edge_end>Equality Expression(operator)
Equality Expression(operator)<edge_begin><edge_end>Relational Expression(operator)
Relational Expression(operator)<edge_begin><edge_end>Shift Expression(operator)
Conditional Expression()<edge_begin><edge_end>Boolean Or Expression()
Conditional Expression()<edge_begin><edge_end>Shift Expression(operator)
Shift Expression(operator)<edge_begin><edge_end>Additive Expression(operator)
Additive Expression(operator)<edge_begin><edge_end>Multiplicative Expression(operator)
Multiplicative Expression(operator)<edge_begin><edge_end>Unary Expression(operator)
Unary Expression(operator)<edge_begin><edge_end>Primary Expression()
Nested Expression()<edge_begin><edge_end>Primary Expression()
Nested Expression()<edge_begin><edge_end>Conditional Expression()
Literal Value(value)<edge_begin><edge_end>Primary Expression()
Pseudostate()<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Region()
Vertex()<edge_begin><edge_end>Transition()
Region()<edge_begin><edge_end>Vertex()
Region()<edge_begin><edge_end>Composite Element()
Transition()<edge_begin><edge_end>Specification Element(specification)
Transition()<edge_begin><edge_end>Reaction()
Transition()<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Regular State()
Variable()<edge_begin><edge_end>Declaration()
Event()<edge_begin><edge_end>Declaration()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Statechart(domain ID)<edge_begin><edge_end>Specification Element(specification)
Statechart(domain ID)<edge_begin><edge_end>Reactive Element()
Statechart(domain ID)<edge_begin><edge_end>Scoped Element(namespace)
Statechart(domain ID)<edge_begin><edge_end>Composite Element()
Statechart(domain ID)<edge_begin><edge_end>Import(imported Namespace)
Entry(kind)<edge_begin><edge_end>Pseudostate()
Exit()<edge_begin><edge_end>Pseudostate()
Reactive Element()<edge_begin><edge_end>Reaction()
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Effect()
Reaction()<edge_begin><edge_end>Reaction Property()
Scope()<edge_begin><edge_end>Declaration()
Scope()<edge_begin><edge_end>Event()
Scope()<edge_begin><edge_end>Variable()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart(domain ID)
Regular State()<edge_begin><edge_end>Vertex()
Composite Element()<edge_begin><edge_end>Region()
Import Declaration()<edge_begin><edge_end>Declaration()
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Specification()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Guard()<edge_begin><edge_end>Expression()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Regular Event Spec()<edge_begin><edge_end>Expression()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
Time Event Spec(type, unit)<edge_begin><edge_end>Expression()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Bool Literal(value)<edge_begin><edge_end>Literal()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
String Literal(value)<edge_begin><edge_end>Literal()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Guard()
Reaction Effect()<edge_begin><edge_end>Expression()
Event Raising Expression()<edge_begin><edge_end>Expression()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Element Reference Expression(operation Call)<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Parenthesized Expression()<edge_begin><edge_end>Expression()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
Table(border, style, class)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Table(border, style, class)<edge_begin><edge_end>Integer()
Table(border, style, class)<edge_begin><edge_end>String()
Table(border, style, class)<edge_begin><edge_end>Caption(content)
Table(border, style, class)<edge_begin><edge_end>Row()
Caption(content)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Caption(content)<edge_begin><edge_end>String()
Row()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Row()<edge_begin><edge_end>Cell(is Heading, align, style, content)
Cell(is Heading, align, style, content)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Cell(is Heading, align, style, content)<edge_begin><edge_end>Boolean()
Cell(is Heading, align, style, content)<edge_begin><edge_end>String()
Query Statement()<edge_begin><edge_end>SQL Query Object()
Query Delete Statement()<edge_begin><edge_end>Query Change Statement()
Query Delete Statement()<edge_begin><edge_end>Cursor Reference()
Query Delete Statement()<edge_begin><edge_end>Query Search Condition(negated Condition)
Query Delete Statement()<edge_begin><edge_end>Table In Database()
Query Insert Statement()<edge_begin><edge_end>Query Change Statement()
Query Insert Statement()<edge_begin><edge_end>Query Expression Root()
Query Insert Statement()<edge_begin><edge_end>Values Row()
Query Insert Statement()<edge_begin><edge_end>Table In Database()
Query Insert Statement()<edge_begin><edge_end>Value Expression Column()
Query Select Statement()<edge_begin><edge_end>Query Statement()
Query Select Statement()<edge_begin><edge_end>Query Expression Root()
Query Select Statement()<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Query Select Statement()<edge_begin><edge_end>Updatability Expression(updatability Type)
Query Update Statement()<edge_begin><edge_end>Query Change Statement()
Query Update Statement()<edge_begin><edge_end>Update Assignment Expression()
Query Update Statement()<edge_begin><edge_end>Cursor Reference()
Query Update Statement()<edge_begin><edge_end>Query Search Condition(negated Condition)
Query Update Statement()<edge_begin><edge_end>Table In Database()
Update Assignment Expression()<edge_begin><edge_end>SQL Query Object()
Update Assignment Expression()<edge_begin><edge_end>Query Update Statement()
Update Assignment Expression()<edge_begin><edge_end>Value Expression Column()
Update Assignment Expression()<edge_begin><edge_end>Update Source()
Update Assignment Expression()<edge_begin><edge_end>Merge Update Specification()
Cursor Reference()<edge_begin><edge_end>SQL Query Object()
Cursor Reference()<edge_begin><edge_end>Query Update Statement()
Cursor Reference()<edge_begin><edge_end>Query Delete Statement()
Query Search Condition(negated Condition)<edge_begin><edge_end>SQL Query Object()
Query Search Condition(negated Condition)<edge_begin><edge_end>Query Update Statement()
Query Search Condition(negated Condition)<edge_begin><edge_end>Query Delete Statement()
Query Search Condition(negated Condition)<edge_begin><edge_end>Table Joined(join Operator)
Query Search Condition(negated Condition)<edge_begin><edge_end>Search Condition Combined(combined Operator)
Query Search Condition(negated Condition)<edge_begin><edge_end>Query Select(distinct)
Query Search Condition(negated Condition)<edge_begin><edge_end>Value Expression Case Search Content()
Query Search Condition(negated Condition)<edge_begin><edge_end>Search Condition Nested()
Query Search Condition(negated Condition)<edge_begin><edge_end>Merge On Condition()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Table Expression()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Query Expression Root()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Query Combined(combined Operator)
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Predicate Exists()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Update Source Query()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>With Table Specification()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Query Nested()
Query Expression Body(row Fetch Limit)<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Query Value Expression(unary Operator)<edge_begin><edge_end>SQL Query Object()
Query Value Expression(unary Operator)<edge_begin><edge_end>Values Row()
Query Value Expression(unary Operator)<edge_begin><edge_end>Order By Value Expression()
Query Value Expression(unary Operator)<edge_begin><edge_end>Result Column()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Basic(comparison Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Like(not Like)
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Is Null(not Null)
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate In Value List()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate In Value Row Select()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate In Value Select()
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Quantified Row Select(quantified Type)
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Quantified Value Select(quantified Type, comparison Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>Predicate Between(not Between)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Cast()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Function(special Register, distinct, column Function)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Combined(combined Operator)
Query Value Expression(unary Operator)<edge_begin><edge_end>Grouping Expression()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Case Else()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Case Simple()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Case Simple Content()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Case Search Content()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Labeled Duration(labeled Duration Type)
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Nested()
Query Value Expression(unary Operator)<edge_begin><edge_end>Update Source Expr List()
Query Value Expression(unary Operator)<edge_begin><edge_end>Table Function()
Query Value Expression(unary Operator)<edge_begin><edge_end>Value Expression Row()
Query Value Expression(unary Operator)<edge_begin><edge_end>Call Statement()
Query Expression Root()<edge_begin><edge_end>SQL Query Object()
Query Expression Root()<edge_begin><edge_end>Query Insert Statement()
Query Expression Root()<edge_begin><edge_end>Query Select Statement()
Query Expression Root()<edge_begin><edge_end>With Table Specification()
Query Expression Root()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Expression Root()<edge_begin><edge_end>Predicate In Value Row Select()
Query Expression Root()<edge_begin><edge_end>Predicate In Value Select()
Query Expression Root()<edge_begin><edge_end>Predicate Quantified Row Select(quantified Type)
Query Expression Root()<edge_begin><edge_end>Predicate Quantified Value Select(quantified Type, comparison Operator)
Query Expression Root()<edge_begin><edge_end>Value Expression Scalar Select()
Values Row()<edge_begin><edge_end>SQL Query Object()
Values Row()<edge_begin><edge_end>Query Insert Statement()
Values Row()<edge_begin><edge_end>Query Value Expression(unary Operator)
Values Row()<edge_begin><edge_end>Query Values()
Query Values()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Values()<edge_begin><edge_end>Values Row()
Table Reference()<edge_begin><edge_end>SQL Query Object()
Table Reference()<edge_begin><edge_end>Table Joined(join Operator)
Table Reference()<edge_begin><edge_end>Query Select(distinct)
Table Reference()<edge_begin><edge_end>Table Nested()
Table Reference()<edge_begin><edge_end>Merge Source Table()
Table Expression()<edge_begin><edge_end>Table Reference()
Table Expression()<edge_begin><edge_end>Value Expression Column()
Table Expression()<edge_begin><edge_end>Table Correlation()
Table Expression()<edge_begin><edge_end>Result Table All Columns()
Table Expression()<edge_begin><edge_end>Merge Target Table()
Table Joined(join Operator)<edge_begin><edge_end>Table Reference()
Table Joined(join Operator)<edge_begin><edge_end>Query Search Condition(negated Condition)
With Table Specification()<edge_begin><edge_end>SQL Query Object()
With Table Specification()<edge_begin><edge_end>Query Expression Root()
With Table Specification()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
With Table Specification()<edge_begin><edge_end>With Table Reference()
With Table Specification()<edge_begin><edge_end>Column Name()
Predicate(negated Predicate, has Selectivity, selectivity Value)<edge_begin><edge_end>Query Search Condition(negated Condition)
Search Condition Combined(combined Operator)<edge_begin><edge_end>Query Search Condition(negated Condition)
Order By Value Expression()<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Order By Value Expression()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Combined(combined Operator)<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Select(distinct)<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Query Select(distinct)<edge_begin><edge_end>Query Search Condition(negated Condition)
Query Select(distinct)<edge_begin><edge_end>Grouping Specification()
Query Select(distinct)<edge_begin><edge_end>Query Result Specification()
Query Select(distinct)<edge_begin><edge_end>Table Reference()
Query Select(distinct)<edge_begin><edge_end>Value Expression Variable()
Grouping Specification()<edge_begin><edge_end>SQL Query Object()
Grouping Specification()<edge_begin><edge_end>Query Select(distinct)
Query Result Specification()<edge_begin><edge_end>SQL Query Object()
Query Result Specification()<edge_begin><edge_end>Query Select(distinct)
Result Table All Columns()<edge_begin><edge_end>Query Result Specification()
Result Table All Columns()<edge_begin><edge_end>Table Expression()
Result Column()<edge_begin><edge_end>Query Result Specification()
Result Column()<edge_begin><edge_end>Query Value Expression(unary Operator)
Result Column()<edge_begin><edge_end>Order By Result Column()
Predicate Basic(comparison Operator)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Predicate Basic(comparison Operator)<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Quantified()<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Predicate Between(not Between)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Predicate Between(not Between)<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Exists()<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Predicate Exists()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Predicate In(not In)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Predicate Like(not Like)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Predicate Like(not Like)<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Is Null(not Null)<edge_begin><edge_end>Predicate(negated Predicate, has Selectivity, selectivity Value)
Predicate Is Null(not Null)<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Quantified Value Select(quantified Type, comparison Operator)<edge_begin><edge_end>Predicate Quantified()
Predicate Quantified Value Select(quantified Type, comparison Operator)<edge_begin><edge_end>Query Expression Root()
Predicate Quantified Value Select(quantified Type, comparison Operator)<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate Quantified Row Select(quantified Type)<edge_begin><edge_end>Predicate Quantified()
Predicate Quantified Row Select(quantified Type)<edge_begin><edge_end>Query Expression Root()
Predicate Quantified Row Select(quantified Type)<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate In Value Select()<edge_begin><edge_end>Predicate In(not In)
Predicate In Value Select()<edge_begin><edge_end>Query Expression Root()
Predicate In Value Select()<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate In Value List()<edge_begin><edge_end>Predicate In(not In)
Predicate In Value List()<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate In Value Row Select()<edge_begin><edge_end>Predicate In(not In)
Predicate In Value Row Select()<edge_begin><edge_end>Query Value Expression(unary Operator)
Predicate In Value Row Select()<edge_begin><edge_end>Query Expression Root()
Value Expression Simple(value)<edge_begin><edge_end>Value Expression Atomic()
Value Expression Column()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Column()<edge_begin><edge_end>Update Assignment Expression()
Value Expression Column()<edge_begin><edge_end>Table Expression()
Value Expression Column()<edge_begin><edge_end>Query Insert Statement()
Value Expression Column()<edge_begin><edge_end>Table In Database()
Value Expression Column()<edge_begin><edge_end>Merge Insert Specification()
Value Expression Variable()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Variable()<edge_begin><edge_end>Query Select(distinct)
Value Expression Scalar Select()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Scalar Select()<edge_begin><edge_end>Query Expression Root()
Value Expression Labeled Duration(labeled Duration Type)<edge_begin><edge_end>Value Expression Atomic()
Value Expression Labeled Duration(labeled Duration Type)<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Case()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Case()<edge_begin><edge_end>Value Expression Case Else()
Value Expression Cast()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Cast()<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Null Value()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Default Value()<edge_begin><edge_end>Value Expression Atomic()
Value Expression Function(special Register, distinct, column Function)<edge_begin><edge_end>Value Expression Atomic()
Value Expression Function(special Register, distinct, column Function)<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Combined(combined Operator)<edge_begin><edge_end>Query Value Expression(unary Operator)
Grouping Sets()<edge_begin><edge_end>Grouping Specification()
Grouping Sets()<edge_begin><edge_end>Grouping Sets Element()
Grouping()<edge_begin><edge_end>Grouping Specification()
Grouping()<edge_begin><edge_end>Grouping Sets Element Expression()
Grouping Sets Element()<edge_begin><edge_end>SQL Query Object()
Grouping Sets Element()<edge_begin><edge_end>Grouping Sets()
Grouping Sets Element Sublist()<edge_begin><edge_end>Grouping Sets Element()
Grouping Sets Element Sublist()<edge_begin><edge_end>Grouping Sets Element Expression()
Grouping Sets Element Expression()<edge_begin><edge_end>Grouping Sets Element()
Grouping Sets Element Expression()<edge_begin><edge_end>Grouping Sets Element Sublist()
Grouping Sets Element Expression()<edge_begin><edge_end>Grouping()
Super Group(super Group Type)<edge_begin><edge_end>Grouping()
Super Group(super Group Type)<edge_begin><edge_end>Super Group Element()
Grouping Expression()<edge_begin><edge_end>Grouping()
Grouping Expression()<edge_begin><edge_end>Query Value Expression(unary Operator)
Grouping Expression()<edge_begin><edge_end>Super Group Element Expression()
Super Group Element()<edge_begin><edge_end>SQL Query Object()
Super Group Element()<edge_begin><edge_end>Super Group(super Group Type)
Super Group Element Sublist()<edge_begin><edge_end>Super Group Element()
Super Group Element Sublist()<edge_begin><edge_end>Super Group Element Expression()
Super Group Element Expression()<edge_begin><edge_end>Super Group Element()
Super Group Element Expression()<edge_begin><edge_end>Super Group Element Sublist()
Super Group Element Expression()<edge_begin><edge_end>Grouping Expression()
Value Expression Case Search()<edge_begin><edge_end>Value Expression Case()
Value Expression Case Search()<edge_begin><edge_end>Value Expression Case Search Content()
Value Expression Case Simple()<edge_begin><edge_end>Value Expression Case()
Value Expression Case Simple()<edge_begin><edge_end>Value Expression Case Simple Content()
Value Expression Case Simple()<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Case Else()<edge_begin><edge_end>SQL Query Object()
Value Expression Case Else()<edge_begin><edge_end>Value Expression Case()
Value Expression Case Else()<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Case Search Content()<edge_begin><edge_end>SQL Query Object()
Value Expression Case Search Content()<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Case Search Content()<edge_begin><edge_end>Query Search Condition(negated Condition)
Value Expression Case Search Content()<edge_begin><edge_end>Value Expression Case Search()
Value Expression Case Simple Content()<edge_begin><edge_end>SQL Query Object()
Value Expression Case Simple Content()<edge_begin><edge_end>Value Expression Case Simple()
Value Expression Case Simple Content()<edge_begin><edge_end>Query Value Expression(unary Operator)
Table In Database()<edge_begin><edge_end>Table Expression()
Table In Database()<edge_begin><edge_end>Query Update Statement()
Table In Database()<edge_begin><edge_end>Query Delete Statement()
Table In Database()<edge_begin><edge_end>Query Insert Statement()
Table In Database()<edge_begin><edge_end>Value Expression Column()
Table Function()<edge_begin><edge_end>Table Expression()
Table Function()<edge_begin><edge_end>Query Value Expression(unary Operator)
Query Change Statement()<edge_begin><edge_end>Query Statement()
Column Name()<edge_begin><edge_end>SQL Query Object()
Column Name()<edge_begin><edge_end>Table Correlation()
Column Name()<edge_begin><edge_end>With Table Specification()
Table Nested()<edge_begin><edge_end>Table Reference()
Query Merge Statement()<edge_begin><edge_end>Query Change Statement()
Query Merge Statement()<edge_begin><edge_end>Merge Target Table()
Query Merge Statement()<edge_begin><edge_end>Merge Source Table()
Query Merge Statement()<edge_begin><edge_end>Merge On Condition()
Query Merge Statement()<edge_begin><edge_end>Merge Operation Specification()
Search Condition Nested()<edge_begin><edge_end>Query Search Condition(negated Condition)
Value Expression Nested()<edge_begin><edge_end>Query Value Expression(unary Operator)
Value Expression Atomic()<edge_begin><edge_end>Query Value Expression(unary Operator)
Order By Specification(descending, Ordering Spec Option, Null Ordering Option)<edge_begin><edge_end>SQL Query Object()
Order By Specification(descending, Ordering Spec Option, Null Ordering Option)<edge_begin><edge_end>Query Select Statement()
Order By Specification(descending, Ordering Spec Option, Null Ordering Option)<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Order By Ordinal(ordinal Value)<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Table Correlation()<edge_begin><edge_end>SQL Query Object()
Table Correlation()<edge_begin><edge_end>Table Expression()
Table Correlation()<edge_begin><edge_end>Column Name()
Update Source()<edge_begin><edge_end>SQL Query Object()
Update Source()<edge_begin><edge_end>Update Assignment Expression()
Update Source Expr List()<edge_begin><edge_end>Update Source()
Update Source Expr List()<edge_begin><edge_end>Query Value Expression(unary Operator)
Update Source Query()<edge_begin><edge_end>Update Source()
Update Source Query()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Order By Result Column()<edge_begin><edge_end>Order By Specification(descending, Ordering Spec Option, Null Ordering Option)
Order By Result Column()<edge_begin><edge_end>Result Column()
With Table Reference()<edge_begin><edge_end>Table Expression()
With Table Reference()<edge_begin><edge_end>With Table Specification()
Query Nested()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Value Expression Row()<edge_begin><edge_end>Query Value Expression(unary Operator)
Merge Target Table()<edge_begin><edge_end>SQL Query Object()
Merge Target Table()<edge_begin><edge_end>Query Merge Statement()
Merge Target Table()<edge_begin><edge_end>Table Expression()
Merge Source Table()<edge_begin><edge_end>SQL Query Object()
Merge Source Table()<edge_begin><edge_end>Query Merge Statement()
Merge Source Table()<edge_begin><edge_end>Table Reference()
Merge On Condition()<edge_begin><edge_end>SQL Query Object()
Merge On Condition()<edge_begin><edge_end>Query Merge Statement()
Merge On Condition()<edge_begin><edge_end>Query Search Condition(negated Condition)
Merge Update Specification()<edge_begin><edge_end>Merge Operation Specification()
Merge Update Specification()<edge_begin><edge_end>Update Assignment Expression()
Merge Insert Specification()<edge_begin><edge_end>Merge Operation Specification()
Merge Insert Specification()<edge_begin><edge_end>Value Expression Column()
Merge Insert Specification()<edge_begin><edge_end>Values Row()
Merge Operation Specification()<edge_begin><edge_end>SQL Query Object()
Merge Operation Specification()<edge_begin><edge_end>Query Merge Statement()
Update Of Column()<edge_begin><edge_end>SQL Query Object()
Update Of Column()<edge_begin><edge_end>Updatability Expression(updatability Type)
Updatability Expression(updatability Type)<edge_begin><edge_end>SQL Query Object()
Updatability Expression(updatability Type)<edge_begin><edge_end>Update Of Column()
Updatability Expression(updatability Type)<edge_begin><edge_end>Query Select Statement()
Call Statement()<edge_begin><edge_end>SQL Query Object()
Call Statement()<edge_begin><edge_end>Query Value Expression(unary Operator)
Call Statement()<edge_begin><edge_end>Procedure Reference()
Procedure Reference()<edge_begin><edge_end>SQL Query Object()
Procedure Reference()<edge_begin><edge_end>Call Statement()
Table Query Lateral()<edge_begin><edge_end>Table Expression()
Table Query Lateral()<edge_begin><edge_end>Query Expression Body(row Fetch Limit)
Named Element(name)<edge_begin><edge_end>String()
Data Base()<edge_begin><edge_end>Named Element(name)
Data Base()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>Named Element(name)
Table()<edge_begin><edge_end>Column(type, is Primary Key, null, default Value, comment)
Table()<edge_begin><edge_end>Data Base()
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>Named Element(name)
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>String()
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>Boolean()
Column(type, is Primary Key, null, default Value, comment)<edge_begin><edge_end>Table()
Integer Column(is Auto Increment)<edge_begin><edge_end>Column(type, is Primary Key, null, default Value, comment)
Integer Column(is Auto Increment)<edge_begin><edge_end>Boolean()
Enum Column()<edge_begin><edge_end>Column(type, is Primary Key, null, default Value, comment)
Enum Column()<edge_begin><edge_end>Enum Set()
Enum Set()<edge_begin><edge_end>Enum Item()
Enum Item()<edge_begin><edge_end>Named Element(name)
Enum Item()<edge_begin><edge_end>Enum Set()
Petri Net Doc(xmlns)<edge_begin><edge_end>Petri Net(id, type)
Petri Net(id, type)<edge_begin><edge_end>Page()
Petri Net(id, type)<edge_begin><edge_end>Name(text)
Petri Net(id, type)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Petri Net(id, type)<edge_begin><edge_end>Petri Net Doc(xmlns)
Petri Net(id, type)<edge_begin><edge_end>Declaration()
Page()<edge_begin><edge_end>Pn Object(id)
Page()<edge_begin><edge_end>Petri Net(id, type)
Page()<edge_begin><edge_end>Node Graphics()
Page()<edge_begin><edge_end>Declaration()
Pn Object(id)<edge_begin><edge_end>Name(text)
Pn Object(id)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Pn Object(id)<edge_begin><edge_end>Page()
Name(text)<edge_begin><edge_end>Annotation()
Name(text)<edge_begin><edge_end>Petri Net(id, type)
Name(text)<edge_begin><edge_end>Pn Object(id)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Long String()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>URI()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Petri Net(id, type)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Pn Object(id)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Label()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Any Object()
Label()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Node Graphics()<edge_begin><edge_end>Graphics()
Node Graphics()<edge_begin><edge_end>Position()
Node Graphics()<edge_begin><edge_end>Dimension()
Node Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Node Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Node Graphics()<edge_begin><edge_end>Node()
Node Graphics()<edge_begin><edge_end>Page()
Position()<edge_begin><edge_end>Coordinate(x, y)
Position()<edge_begin><edge_end>Arc Graphics()
Position()<edge_begin><edge_end>Node Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Offset()<edge_begin><edge_end>Annotation Graphics()
Dimension()<edge_begin><edge_end>Coordinate(x, y)
Dimension()<edge_begin><edge_end>Node Graphics()
Annotation Graphics()<edge_begin><edge_end>Graphics()
Annotation Graphics()<edge_begin><edge_end>Offset()
Annotation Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Annotation Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Annotation Graphics()<edge_begin><edge_end>Font(align, decoration, family, rotation, size, style, weight)
Annotation Graphics()<edge_begin><edge_end>Annotation()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>URI()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Node Graphics()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Annotation Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Node Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Arc Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Annotation Graphics()
Arc Graphics()<edge_begin><edge_end>Graphics()
Arc Graphics()<edge_begin><edge_end>Position()
Arc Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Arc Graphics()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Pn Object(id)
Arc()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Arc Graphics()
Arc()<edge_begin><edge_end>HL Annotation()
Node()<edge_begin><edge_end>Pn Object(id)
Node()<edge_begin><edge_end>Arc()
Node()<edge_begin><edge_end>Node Graphics()
Font(align, decoration, family, rotation, size, style, weight)<edge_begin><edge_end>Annotation Graphics()
Place Node()<edge_begin><edge_end>Node()
Place Node()<edge_begin><edge_end>Ref Place()
Transition Node()<edge_begin><edge_end>Node()
Transition Node()<edge_begin><edge_end>Ref Transition()
Place()<edge_begin><edge_end>Place Node()
Place()<edge_begin><edge_end>Type()
Place()<edge_begin><edge_end>HL Marking()
Ref Transition()<edge_begin><edge_end>Transition Node()
Transition()<edge_begin><edge_end>Transition Node()
Transition()<edge_begin><edge_end>Condition()
Ref Place()<edge_begin><edge_end>Place Node()
Attribute()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>Annotation Graphics()
Any Object()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
HL Core Annotation(text)<edge_begin><edge_end>Annotation()
Type()<edge_begin><edge_end>HL Core Annotation(text)
Type()<edge_begin><edge_end>Place()
HL Marking()<edge_begin><edge_end>HL Core Annotation(text)
HL Marking()<edge_begin><edge_end>Place()
Condition()<edge_begin><edge_end>HL Core Annotation(text)
Condition()<edge_begin><edge_end>Transition()
HL Annotation()<edge_begin><edge_end>HL Core Annotation(text)
HL Annotation()<edge_begin><edge_end>Arc()
Declaration()<edge_begin><edge_end>HL Core Annotation(text)
Declaration()<edge_begin><edge_end>Petri Net(id, type)
Declaration()<edge_begin><edge_end>Page()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Identified Element(id, name, description)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Date()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Stake Holder()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Ratio()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Rationale()
Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)<edge_begin><edge_end>Actor(address, email, phone Number)
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Identified Element(id, name, description)
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Ratio()
Uncertainty(volatility, costs Impact, schedule Impact, precedence, risk Index, prop Risk Index, maturity Index)<edge_begin><edge_end>Positive Factor()
Verifiable Element(verified)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Specification(version)<edge_begin><edge_end>Verifiable Element(verified)
Specification(version)<edge_begin><edge_end>Actor(address, email, phone Number)
Specification(version)<edge_begin><edge_end>System Overview(purpose, capabilities)
Specification(version)<edge_begin><edge_end>Requirements Group()
Specification(version)<edge_begin><edge_end>Verification Activity(verification Method, passed)
Specification(version)<edge_begin><edge_end>Conflict(degree)
System Overview(purpose, capabilities)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
System Overview(purpose, capabilities)<edge_begin><edge_end>Goal(priority)
System Overview(purpose, capabilities)<edge_begin><edge_end>System Context()
System Overview(purpose, capabilities)<edge_begin><edge_end>Variable(type)
System Context()<edge_begin><edge_end>Identified Element(id, name, description)
System Context()<edge_begin><edge_end>Actor(address, email, phone Number)
System Context()<edge_begin><edge_end>Variable(type)
Actor(address, email, phone Number)<edge_begin><edge_end>Identified Element(id, name, description)
Actor(address, email, phone Number)<edge_begin><edge_end>Interaction(direction)
Interaction(direction)<edge_begin><edge_end>Identified Element(id, name, description)
Goal(priority)<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Goal(priority)<edge_begin><edge_end>Conflict(degree)
Goal(priority)<edge_begin><edge_end>Ratio()
Conflict(degree)<edge_begin><edge_end>Identified Element(id, name, description)
Conflict(degree)<edge_begin><edge_end>Goal(priority)
Conflict(degree)<edge_begin><edge_end>Ratio()
Stake Holder()<edge_begin><edge_end>Actor(address, email, phone Number)
Stake Holder()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Stake Holder()<edge_begin><edge_end>Rationale()
Requirements Group()<edge_begin><edge_end>Verifiable Element(verified)
Requirements Group()<edge_begin><edge_end>Abstract Requirement(risk)
Requirements Group()<edge_begin><edge_end>Specification(version)
Abstract Requirement(risk)<edge_begin><edge_end>Verifiable Element(verified)
Abstract Requirement(risk)<edge_begin><edge_end>Abstract Requirement(risk)
Abstract Requirement(risk)<edge_begin><edge_end>Verification Activity(verification Method, passed)
Abstract Requirement(risk)<edge_begin><edge_end>Requirements Group()
Abstract Requirement(risk)<edge_begin><edge_end>Variable(type)
Requirement()<edge_begin><edge_end>Abstract Requirement(risk)
Requirement()<edge_begin><edge_end>Requirement()
Requirement()<edge_begin><edge_end>Assumption(type)
Requirement()<edge_begin><edge_end>Requirements Container(type)
Assumption(type)<edge_begin><edge_end>Abstract Requirement(risk)
Assumption(type)<edge_begin><edge_end>Requirement()
Verification Activity(verification Method, passed)<edge_begin><edge_end>Identified Element(id, name, description)
Verification Activity(verification Method, passed)<edge_begin><edge_end>Abstract Requirement(risk)
Ref Expression Collected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Ref User Selected Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Referenced Model Elements(agregation Type)<edge_begin><edge_end>Identified Element(id, name, description)
Referenced Model Elements(agregation Type)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Identified Element(id, name, description)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Model Element Reference(weight, verifies, satisfaction Level, reason)<edge_begin><edge_end>Ratio()
Trace()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Trace()<edge_begin><edge_end>Specification(version)
Trace Model Element Reference(container)<edge_begin><edge_end>Model Element Reference(weight, verifies, satisfaction Level, reason)
Trace Model Element Reference(container)<edge_begin><edge_end>Requirements Coverage Data(nb Requirements, verification Level)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Identified Element(id, name, description)
Requirements Coverage Data(nb Requirements, verification Level)<edge_begin><edge_end>Ratio()
Variable(type)<edge_begin><edge_end>Identified Element(id, name, description)
Ref Derived Model Elements()<edge_begin><edge_end>Referenced Model Elements(agregation Type)
Rationale()<edge_begin><edge_end>Identified Element(id, name, description)
Rationale()<edge_begin><edge_end>Contractual Element(sources, origin Date, schedule Date, dropped, dropping Reason, satisfaction Level, time Criticality)
Requirements Container(type)<edge_begin><edge_end>Identified Element(id, name, description)
Requirements Container(type)<edge_begin><edge_end>Requirement()
Artifact(relative Path)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build State()
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Status()
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Artifact(relative Path)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Change Set(kind)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Server(location, connector Kind, repository Url)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Test Result(duration, fail Count, pass Count, ignored Count, error Count)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>User(id, email)
Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)<edge_begin><edge_end>Build Cause(description)
Build Cause(description)<edge_begin><edge_end>Build Reference(plan, build)
Build Cause(description)<edge_begin><edge_end>User(id, email)
Build Element(url, name, operations, element Status, refresh Date)<edge_begin><edge_end>I Operation()
Build Element(url, name, operations, element Status, refresh Date)<edge_begin><edge_end>I Status()
Build Element(url, name, operations, element Status, refresh Date)<edge_begin><edge_end>String To String Map(key, value)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build Server(location, connector Kind, repository Url)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build State()
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build Status()
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Parameter Definition(name, description)
Build Plan(health, id, info, selected, summary, state, status, description, flags)<edge_begin><edge_end>Health Report(health, description)
Build Model()<edge_begin><edge_end>Build Server(location, connector Kind, repository Url)
Build Model()<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
Build Model()<edge_begin><edge_end>Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)
Build Server(location, connector Kind, repository Url)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Build Server(location, connector Kind, repository Url)<edge_begin><edge_end>Repository Location()
Change(message, date, revision)<edge_begin><edge_end>Change Artifact(file, relative Path, prev Revision, revision, dead, edit Type)
Change(message, date, revision)<edge_begin><edge_end>User(id, email)
Change Set(kind)<edge_begin><edge_end>Change(message, date, revision)
Change Artifact(file, relative Path, prev Revision, revision, dead, edit Type)<edge_begin><edge_end>Edit Type()
User(id, email)<edge_begin><edge_end>Build Element(url, name, operations, element Status, refresh Date)
Parameter Definition(name, description)<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
Choice Parameter Definition(options, default Value)<edge_begin><edge_end>Parameter Definition(name, description)
Boolean Parameter Definition(default Value)<edge_begin><edge_end>Parameter Definition(name, description)
File Parameter Definition()<edge_begin><edge_end>Parameter Definition(name, description)
Plan Parameter Definition()<edge_begin><edge_end>Parameter Definition(name, description)
Password Parameter Definition(default Value)<edge_begin><edge_end>Parameter Definition(name, description)
Build Parameter Definition(build Plan Id)<edge_begin><edge_end>Parameter Definition(name, description)
Build Parameter Definition(build Plan Id)<edge_begin><edge_end>Build Plan(health, id, info, selected, summary, state, status, description, flags)
String Parameter Definition(default Value)<edge_begin><edge_end>Parameter Definition(name, description)
Test Result(duration, fail Count, pass Count, ignored Count, error Count)<edge_begin><edge_end>Build(id, build Number, timestamp, duration, display Name, state, status, label, summary)
Test Result(duration, fail Count, pass Count, ignored Count, error Count)<edge_begin><edge_end>Test Suite()
Test Suite()<edge_begin><edge_end>Test Element(label, duration, error Output, output)
Test Suite()<edge_begin><edge_end>Test Case(class Name, skipped, status, message, stack Trace)
Test Suite()<edge_begin><edge_end>Test Result(duration, fail Count, pass Count, ignored Count, error Count)
Test Case(class Name, skipped, status, message, stack Trace)<edge_begin><edge_end>Test Element(label, duration, error Output, output)
Test Case(class Name, skipped, status, message, stack Trace)<edge_begin><edge_end>Test Suite()
Styling Model(mode Name)<edge_begin><edge_end>Case Style()
Styling Model(mode Name)<edge_begin><edge_end>Default()
Styling Predicate()<edge_begin><edge_end>Case Style()
Segment()<edge_begin><edge_end>Style(applied Fonts, color)
Segment()<edge_begin><edge_end>Pattern()
Case Style()<edge_begin><edge_end>Segment()
Case Style()<edge_begin><edge_end>Icon(image)
Default()<edge_begin><edge_end>Case Style()
Styling()<edge_begin><edge_end>Styling Model(mode Name)
Constant Pattern(value)<edge_begin><edge_end>Pattern()
Model Pattern(attribute Name)<edge_begin><edge_end>Pattern()
Operation Pattern(operation)<edge_begin><edge_end>Pattern()
Operation Pattern(operation)<edge_begin><edge_end>Parameter(name)
Int Parameter(value)<edge_begin><edge_end>Parameter(name)
Boolean Parameter(value)<edge_begin><edge_end>Parameter(name)
String Parameter(value)<edge_begin><edge_end>Parameter(name)
E Object Parameter()<edge_begin><edge_end>Parameter(name)
Procedure(schema Name)<edge_begin><edge_end>Compilation Unit()
Procedure(schema Name)<edge_begin><edge_end>Name Declaration(name)
Procedure(schema Name)<edge_begin><edge_end>Parameter Sequence()
Procedure(schema Name)<edge_begin><edge_end>Procedure Invoker Rights Clause(right)
Procedure(schema Name)<edge_begin><edge_end>Procedure Content()
Package(schema Name, end Name)<edge_begin><edge_end>Compilation Unit()
Package(schema Name, end Name)<edge_begin><edge_end>Name Declaration(name)
Package(schema Name, end Name)<edge_begin><edge_end>Procedure Invoker Rights Clause(right)
Package(schema Name, end Name)<edge_begin><edge_end>Item()
Procedure Declaration(name)<edge_begin><edge_end>Item()
Procedure Declaration(name)<edge_begin><edge_end>Parameter Sequence()
Procedure Definition()<edge_begin><edge_end>Item()
Procedure Definition()<edge_begin><edge_end>Name Declaration(name)
Procedure Definition()<edge_begin><edge_end>Parameter Sequence()
Procedure Definition()<edge_begin><edge_end>Procedure Implementation()
Function(schema Name, return Type)<edge_begin><edge_end>Compilation Unit()
Function(schema Name, return Type)<edge_begin><edge_end>Name Declaration(name)
Function(schema Name, return Type)<edge_begin><edge_end>Parameter Sequence()
Function(schema Name, return Type)<edge_begin><edge_end>Function Clause()
Function(schema Name, return Type)<edge_begin><edge_end>Function Content()
Parameter Sequence()<edge_begin><edge_end>Parameter Declaration(behavior, data Type)
Parameter Declaration(behavior, data Type)<edge_begin><edge_end>Name Declaration(name)
Parameter Declaration(behavior, data Type)<edge_begin><edge_end>Parameter Value()
Parameter Value()<edge_begin><edge_end>Expression()
Function Invoker Rights Clause(right)<edge_begin><edge_end>Function Clause()
Pragma()<edge_begin><edge_end>Item()
Pragma Restrict References(restrictions)<edge_begin><edge_end>Pragma()
Pragma Timestamp(timestamp)<edge_begin><edge_end>Pragma()
Procedure Implementation()<edge_begin><edge_end>Procedure Content()
Procedure Implementation()<edge_begin><edge_end>Declare Section()
Procedure Implementation()<edge_begin><edge_end>Statement Body(end Name)
Function Implementation()<edge_begin><edge_end>Function Content()
Function Implementation()<edge_begin><edge_end>Declare Section()
Function Implementation()<edge_begin><edge_end>Statement Body(end Name)
Deterministic Clause()<edge_begin><edge_end>Function Clause()
Result Cache Clause(data Sources)<edge_begin><edge_end>Function Clause()
Pipelined Clause()<edge_begin><edge_end>Function Clause()
Statement Body(end Name)<edge_begin><edge_end>Statement()
Declare Section()<edge_begin><edge_end>Item()
Item Declaration()<edge_begin><edge_end>Item()
External Procedure Declaration()<edge_begin><edge_end>Procedure Content()
Variable Declaration(is Constant, data Type, is Not Null)<edge_begin><edge_end>Item Declaration()
Variable Declaration(is Constant, data Type, is Not Null)<edge_begin><edge_end>Name Declaration(name)
Variable Declaration(is Constant, data Type, is Not Null)<edge_begin><edge_end>Variable Value()
Variable Value()<edge_begin><edge_end>Expression()
Int Literal Expression(value)<edge_begin><edge_end>Expression()
String Literal Expression(value)<edge_begin><edge_end>Expression()
Boolean Literal Expression(value)<edge_begin><edge_end>Expression()
Null Literal Expression()<edge_begin><edge_end>Expression()
Variable Ref Expression()<edge_begin><edge_end>Expression()
Variable Ref Expression()<edge_begin><edge_end>Variable Ref(is Host Ref)
Statement()<edge_begin><edge_end>Label(name)
Assignment Statement()<edge_begin><edge_end>Statement()
Assignment Statement()<edge_begin><edge_end>Assignment Target()
Assignment Statement()<edge_begin><edge_end>Expression()
Variable Assignment Target()<edge_begin><edge_end>Assignment Target()
Variable Assignment Target()<edge_begin><edge_end>Variable Ref(is Host Ref)
Block Statement()<edge_begin><edge_end>Statement()
Block Statement()<edge_begin><edge_end>Declare Section()
Block Statement()<edge_begin><edge_end>Statement Body(end Name)
Case Statement(end Label)<edge_begin><edge_end>Statement()
Case Statement(end Label)<edge_begin><edge_end>Expression()
Case Statement(end Label)<edge_begin><edge_end>Case Statement When Branch()
Case Statement(end Label)<edge_begin><edge_end>Case Statement Else Branch()
Case Statement When Branch()<edge_begin><edge_end>Expression()
Case Statement When Branch()<edge_begin><edge_end>Statement()
Case Statement Else Branch()<edge_begin><edge_end>Statement()
Close Statement()<edge_begin><edge_end>Statement()
Close Statement()<edge_begin><edge_end>Variable Ref(is Host Ref)
Continue Statement(label Name)<edge_begin><edge_end>Statement()
Continue Statement(label Name)<edge_begin><edge_end>Expression()
Exit Statement(label Name)<edge_begin><edge_end>Statement()
Exit Statement(label Name)<edge_begin><edge_end>Expression()
Fetch Statement()<edge_begin><edge_end>Statement()
Fetch Statement()<edge_begin><edge_end>Variable Ref(is Host Ref)
Fetch Statement()<edge_begin><edge_end>Fetch Statement Into Clause()
Fetch Statement Into Clause()<edge_begin><edge_end>Variable Ref(is Host Ref)
Fetch Statement Single Into Clause()<edge_begin><edge_end>Fetch Statement Into Clause()
Fetch Statement Bulk Into Clause()<edge_begin><edge_end>Fetch Statement Into Clause()
Fetch Statement Bulk Into Clause()<edge_begin><edge_end>Expression()
Goto Statement()<edge_begin><edge_end>Statement()
Goto Statement()<edge_begin><edge_end>Label(name)
If Statement()<edge_begin><edge_end>Statement()
If Statement()<edge_begin><edge_end>Expression()
If Statement()<edge_begin><edge_end>If Statement Elsif Branch()
If Statement()<edge_begin><edge_end>If Statement Else Branch()
If Statement Elsif Branch()<edge_begin><edge_end>Expression()
If Statement Elsif Branch()<edge_begin><edge_end>Statement()
If Statement Else Branch()<edge_begin><edge_end>Statement()
Loop Statement(end Label)<edge_begin><edge_end>Statement()
Basic Loop Statement()<edge_begin><edge_end>Loop Statement(end Label)
While Loop Statement()<edge_begin><edge_end>Loop Statement(end Label)
While Loop Statement()<edge_begin><edge_end>Expression()
For Loop Statement()<edge_begin><edge_end>Loop Statement(end Label)
For Loop Statement()<edge_begin><edge_end>Loop Variable Declaration()
For Loop Statement()<edge_begin><edge_end>Expression()
Return Statement()<edge_begin><edge_end>Statement()
Return Statement()<edge_begin><edge_end>Expression()
Null Statement()<edge_begin><edge_end>Statement()
Raise Statement(exception Name)<edge_begin><edge_end>Statement()
Variable Ref(is Host Ref)<edge_begin><edge_end>Qualified Name()
Qualified Name()<edge_begin><edge_end>Name()
Name()<edge_begin><edge_end>Name Declaration(name)
Loop Variable Declaration()<edge_begin><edge_end>Name Declaration(name)
State Machine(name)<edge_begin><edge_end>Abstract State(name)
State Machine(name)<edge_begin><edge_end>Transition()
Abstract State(name)<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>Abstract State(name)
State()<edge_begin><edge_end>Program()
Transition()<edge_begin><edge_end>Trigger(expression)
Transition()<edge_begin><edge_end>Abstract State(name)
Transition()<edge_begin><edge_end>Statement()
Transition()<edge_begin><edge_end>Constraint()
Pseudostate(kind)<edge_begin><edge_end>Abstract State(name)
Final State()<edge_begin><edge_end>State()
Relational Constraint()<edge_begin><edge_end>Constraint()
Relational Constraint()<edge_begin><edge_end>Expression()
Program()<edge_begin><edge_end>Statement()
Conditional()<edge_begin><edge_end>Statement()
Conditional()<edge_begin><edge_end>Expression()
Conditional()<edge_begin><edge_end>Program()
Loop()<edge_begin><edge_end>Statement()
Loop()<edge_begin><edge_end>Expression()
Loop()<edge_begin><edge_end>Program()
Var Decl(key)<edge_begin><edge_end>Statement()
Var Decl(key)<edge_begin><edge_end>Expression()
Literal()<edge_begin><edge_end>Expression()
Integer Lit(value)<edge_begin><edge_end>Literal()
String Lit(value)<edge_begin><edge_end>Literal()
Bool Lit(value)<edge_begin><edge_end>Literal()
Arithmetic Expression(operator)<edge_begin><edge_end>Expression()
Relational Expression(operator)<edge_begin><edge_end>Expression()
Var Reference(key)<edge_begin><edge_end>Expression()
Console Output(input)<edge_begin><edge_end>Statement()
Println()<edge_begin><edge_end>Console Output(input)
Print()<edge_begin><edge_end>Console Output(input)
Assignation()<edge_begin><edge_end>Statement()
Assignation()<edge_begin><edge_end>Var Decl(key)
Assignation()<edge_begin><edge_end>Expression()
Wait(miliseconds)<edge_begin><edge_end>Statement()
Requirement(name, identifier, priority, mandatory)<edge_begin><edge_end>Description()
Requirement(name, identifier, priority, mandatory)<edge_begin><edge_end>Dependency()
Functional Requirement()<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Quality Requirement()<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Text Description(text)<edge_begin><edge_end>Description()
Category(name)<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Category(name)<edge_begin><edge_end>Category(name)
Specification(name)<edge_begin><edge_end>Category(name)
Specification(name)<edge_begin><edge_end>Person(first Name, last Name)
Person(first Name, last Name)<edge_begin><edge_end>Category(name)
Person(first Name, last Name)<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Unary Operator(name)<edge_begin><edge_end>Term()
Requires(name)<edge_begin><edge_end>Dependency()
Requires(name)<edge_begin><edge_end>Term()
Simple Dependency(name)<edge_begin><edge_end>Dependency()
Simple Dependency(name)<edge_begin><edge_end>Requirement Term()
C Value()<edge_begin><edge_end>Simple Dependency(name)
Refines()<edge_begin><edge_end>Simple Dependency(name)
I Cost()<edge_begin><edge_end>Simple Dependency(name)
Not Operator()<edge_begin><edge_end>Unary Operator(name)
Binary Operator()<edge_begin><edge_end>Unary Operator(name)
Binary Operator()<edge_begin><edge_end>Term()
And Operartor()<edge_begin><edge_end>Binary Operator()
Or Operator()<edge_begin><edge_end>Binary Operator()
Requirement Term()<edge_begin><edge_end>Term()
Requirement Term()<edge_begin><edge_end>Requirement(name, identifier, priority, mandatory)
Makefile(name)<edge_begin><edge_end>String()
Makefile(name)<edge_begin><edge_end>Comment(text)
Makefile(name)<edge_begin><edge_end>Element(name)
Element(name)<edge_begin><edge_end>String()
Rule()<edge_begin><edge_end>Element(name)
Rule()<edge_begin><edge_end>Dependency()
Rule()<edge_begin><edge_end>Shell Line(command, display)
Macro(value)<edge_begin><edge_end>Element(name)
Macro(value)<edge_begin><edge_end>String()
Shell Line(command, display)<edge_begin><edge_end>String()
Shell Line(command, display)<edge_begin><edge_end>Boolean()
Shell Line(command, display)<edge_begin><edge_end>Rule()
Comment(text)<edge_begin><edge_end>String()
Rule Dep()<edge_begin><edge_end>Dependency()
Rule Dep()<edge_begin><edge_end>Rule()
File Dep(name)<edge_begin><edge_end>Dependency()
File Dep(name)<edge_begin><edge_end>String()
Meta-Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>User()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Organizer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Speaker()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Personal Review History()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Double Blind Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>External Reviewer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Research Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper Review(Comments for Author, Comments for Program Committee)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>String()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Pending Proposed Conflict()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Comitee Chair()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Administrator()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Bid()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Organizing Committee()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Location()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Program Comitee Chair()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Topic()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Conference Member()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
External Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Chairman()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Domain Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Document(Document ID)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>article()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Integer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Review()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Research Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Paper Status()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Paper Abstract()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Program Comitee Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Program Comitee()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Committee Member()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Co-Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Author()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Author()<edge_begin><edge_end>Speaker()
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Author()<edge_begin><edge_end>article()
Author()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Administrator()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Administrator()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Meta-Review()<edge_begin><edge_end>Review()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Account()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
User()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
User()<edge_begin><edge_end>Document(Document ID)
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Document(Document ID)<edge_begin><edge_end>Thing()
Document(Document ID)<edge_begin><edge_end>Item()
Document(Document ID)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Document(Document ID)<edge_begin><edge_end>Document(Document ID)
Document(Document ID)<edge_begin><edge_end>String()
Document(Document ID)<edge_begin><edge_end>User()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Short Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Approval Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Template()<edge_begin><edge_end>Document(Document ID)
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Thing()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Topic()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Integer()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>human(e-mail, last name, first name)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>intensity()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>article()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Time()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>date Time()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Registration()<edge_begin><edge_end>Conference activity()
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Research Topic()<edge_begin><edge_end>Thing()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Thing()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>System()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Document(Document ID)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>String()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Organization()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Item()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Presenter city()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Money()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Time()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Inforamtion()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Account()
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)<edge_begin><edge_end>Conference document()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Committee member()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Committees()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Document(Document ID)
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Review()<edge_begin><edge_end>Possible Reviewer()
Review()<edge_begin><edge_end>Evaluation()
Review()<edge_begin><edge_end>Primary Reviewer()
Review()<edge_begin><edge_end>Reviewed contribution()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
article()<edge_begin><edge_end>Document(Document ID)
article()<edge_begin><edge_end>Author()
article()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
article()<edge_begin><edge_end>Abstract()
article()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Company()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Tutorial()<edge_begin><edge_end>Individual Presentation()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Member(Web address)<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Member(Web address)<edge_begin><edge_end>String()
Participant(early Registration)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Participant(early Registration)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Chair PC()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Student()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Science Worker()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Assistant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Volunteer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Regular()<edge_begin><edge_end>Participant(early Registration)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
chair()<edge_begin><edge_end>Committee member()
chair()<edge_begin><edge_end>Committee()
chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
chair()<edge_begin><edge_end>program()
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Abstract()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Abstract()<edge_begin><edge_end>Document(Document ID)
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Thing()
Abstract()<edge_begin><edge_end>article()
program()<edge_begin><edge_end>chair()
program()<edge_begin><edge_end>session()
Slide Set()<edge_begin><edge_end>Document(Document ID)
Programme()<edge_begin><edge_end>Document(Document ID)
Programme()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document(Document ID)
Meal Menu()<edge_begin><edge_end>Meal Event()
Topic()<edge_begin><edge_end>Thing()
Topic()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Topic()<edge_begin><edge_end>Working event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Dining Place()<edge_begin><edge_end>Place()
Presenter()<edge_begin><edge_end>Author()
Presenter()<edge_begin><edge_end>Conference Participant()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Published Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Attendee()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
TPC Member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Evaluated Paper()<edge_begin><edge_end>Review()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Positive Review()<edge_begin><edge_end>Review()
Workshop Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Industrial Session()<edge_begin><edge_end>Conference Session()
Conference Session()<edge_begin><edge_end>Session(room)
Regular Session()<edge_begin><edge_end>Session(room)
Poster Session()<edge_begin><edge_end>Session(room)
Demo Session()<edge_begin><edge_end>Session(room)
Paper Author()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Conference Trip()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference Participant()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Assigned Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Negative Review()<edge_begin><edge_end>Review()
Neutral Review()<edge_begin><edge_end>Review()
Organising Agency()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Organisation()<edge_begin><edge_end>Thing()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Demo Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Research Institute()<edge_begin><edge_end>Academic Institution()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Agency Staff Member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Workshop Session()<edge_begin><edge_end>Session(room)
Track()<edge_begin><edge_end>Scientific Event()
Track()<edge_begin><edge_end>Conference part()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Workshop()<edge_begin><edge_end>Scientific Event()
Workshop()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Workshop()<edge_begin><edge_end>Academic Event()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Document(Document ID)
Demo Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>PC Member()
PC Chair()<edge_begin><edge_end>Conference Participant()
PC Chair()<edge_begin><edge_end>PC Member()
PC Member()<edge_begin><edge_end>Possible Reviewer()
OC Member()<edge_begin><edge_end>Conference Participant()
Programme Brochure()<edge_begin><edge_end>Document(Document ID)
Flyer()<edge_begin><edge_end>Document(Document ID)
Web Site()<edge_begin><edge_end>Document(Document ID)
Multi-author Volume()<edge_begin><edge_end>Document(Document ID)
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Individual Presentation()<edge_begin><edge_end>Document(Document ID)
OC Chair()<edge_begin><edge_end>OC Member()
Conference Banquet()<edge_begin><edge_end>Social Event()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Workshop Chair()<edge_begin><edge_end>PC Member()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Session Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
University()<edge_begin><edge_end>Academic Institution()
University()<edge_begin><edge_end>Organization()
Possible Reviewer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Invited Speaker()<edge_begin><edge_end>Presenter()
SC Member()<edge_begin><edge_end>PC Member()
Presenter house()<edge_begin><edge_end>Building()
Building()<edge_begin><edge_end>Place()
Presenter state()<edge_begin><edge_end>State()
Delegate()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Presenter city()<edge_begin><edge_end>City()
Hotel registration form()<edge_begin><edge_end>Form()
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
Form()<edge_begin><edge_end>Document(Document ID)
Car()<edge_begin><edge_end>Transport vehicle()
Transport vehicle()<edge_begin><edge_end>Item()
Mailing list()<edge_begin><edge_end>Document(Document ID)
Renting()<edge_begin><edge_end>Activity before conference()
Activity before conference()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Dinner banquet()<edge_begin><edge_end>Social program()
One day presenter()<edge_begin><edge_end>Delegate()
Social program()<edge_begin><edge_end>Conference activity()
Power Point presentation()<edge_begin><edge_end>Presentation()
Presentation()<edge_begin><edge_end>Conference activity()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Conference restaurant()<edge_begin><edge_end>Building()
Conference city()<edge_begin><edge_end>City()
Conference state()<edge_begin><edge_end>State()
Submissions deadline()<edge_begin><edge_end>Deadline()
Deadline()<edge_begin><edge_end>Time()
Deadline()<edge_begin><edge_end>date()
Simulating()<edge_begin><edge_end>Research()
Research()<edge_begin><edge_end>Activity before conference()
Technic activity()<edge_begin><edge_end>Conference activity()
Conference activity()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Technical commitee()<edge_begin><edge_end>Delegate()
Place()<edge_begin><edge_end>Thing()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Place()<edge_begin><edge_end>Item()
Author cd proceedings included()<edge_begin><edge_end>Author()
Cd proceening()<edge_begin><edge_end>Publication()
Trip day()<edge_begin><edge_end>Time()
Record of attendance()<edge_begin><edge_end>Document(Document ID)
Listener()<edge_begin><edge_end>Delegate()
Session room()<edge_begin><edge_end>Place()
Brief introduction for Session chair()<edge_begin><edge_end>Document(Document ID)
Session chair()<edge_begin><edge_end>Delegate()
Invitation letter()<edge_begin><edge_end>Document(Document ID)
Registration form()<edge_begin><edge_end>Form()
Viza()<edge_begin><edge_end>Document(Document ID)
Conference days()<edge_begin><edge_end>Time()
Conference building()<edge_begin><edge_end>Building()
Registration fee()<edge_begin><edge_end>Fee()
Departure()<edge_begin><edge_end>Activity after conference()
Activity after conference()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Conference airport()<edge_begin><edge_end>Building()
Worker lecturer()<edge_begin><edge_end>Lecturer()
Lecturer()<edge_begin><edge_end>Author()
Transparency()<edge_begin><edge_end>Document(Document ID)
City()<edge_begin><edge_end>Thing()
Card()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Item()<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Item()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Time()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Book proceeding()<edge_begin><edge_end>Publication()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Audiovisual equipment()<edge_begin><edge_end>Item()
Video presentation()<edge_begin><edge_end>Presentation()
Hotel room()<edge_begin><edge_end>Place()
Hotel presenter()<edge_begin><edge_end>Delegate()
Conference hotel()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Item()
Money()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Money()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Thing()
Money()<edge_begin><edge_end>Money()
Introduction()<edge_begin><edge_end>Conference activity()
Welcome address()<edge_begin><edge_end>Conference activity()
Value added tax()<edge_begin><edge_end>Tax()
Tax()<edge_begin><edge_end>Money()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Final manuscript()<edge_begin><edge_end>Submission(remark, abstract, contact Email, has Keyword, has Title)
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Document(Document ID)
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Submission(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Sponsor city()<edge_begin><edge_end>City()
Sponsor()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Introduction of speaker()<edge_begin><edge_end>Introduction()
Conference hall()<edge_begin><edge_end>Place()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Plenary lecture speaker()<edge_begin><edge_end>Author()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Tutorial speaker()<edge_begin><edge_end>Author()
Registation deadline()<edge_begin><edge_end>Deadline()
Single hotel room()<edge_begin><edge_end>Hotel room()
Non speaker()<edge_begin><edge_end>Delegate()
Author information form()<edge_begin><edge_end>Form()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
IASTED non member()<edge_begin><edge_end>Delegate()
Hotel fee()<edge_begin><edge_end>Fee()
Fee()<edge_begin><edge_end>Money()
Publication()<edge_begin><edge_end>Item()
Taxi()<edge_begin><edge_end>Transport vehicle()
Sponsor state()<edge_begin><edge_end>State()
Modelling()<edge_begin><edge_end>Research()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Payment document()<edge_begin><edge_end>Document(Document ID)
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
One conference day()<edge_begin><edge_end>Conference days()
Fee for extra trip()<edge_begin><edge_end>Fee()
Full day tour()<edge_begin><edge_end>Activity after conference()
Conference Hiker()<edge_begin><edge_end>Delegate()
Computer()<edge_begin><edge_end>Audiovisual equipment()
IASTED member()<edge_begin><edge_end>Delegate()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Author book proceedings included()<edge_begin><edge_end>Author()
Sponsor company house()<edge_begin><edge_end>Building()
Sponzorship()<edge_begin><edge_end>Money()
Student lecturer()<edge_begin><edge_end>Lecturer()
Trip city()<edge_begin><edge_end>City()
Cheque()<edge_begin><edge_end>Payment document()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Student non speaker()<edge_begin><edge_end>Non speaker()
Student registration fee()<edge_begin><edge_end>Registration fee()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Tip()<edge_begin><edge_end>Money()
Credit card()<edge_begin><edge_end>Card()
Van()<edge_begin><edge_end>Transport vehicle()
Main office()<edge_begin><edge_end>Place()
Presenter university()<edge_begin><edge_end>Building()
Departure tax()<edge_begin><edge_end>Tax()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Double hotel room()<edge_begin><edge_end>Hotel room()
Initial manuscipt()<edge_begin><edge_end>Submission(remark, abstract, contact Email, has Keyword, has Title)
Coffee break()<edge_begin><edge_end>Conference activity()
Bank transfer()<edge_begin><edge_end>Payment document()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Speaker lecture()<edge_begin><edge_end>Session(room)
Coctail reception()<edge_begin><edge_end>Conference activity()
Organizing Committee()<edge_begin><edge_end>Thing()
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Organizer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Organizer()<edge_begin><edge_end>Thing()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Outside Referee()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Lecture(has Acronym)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Lecture(has Acronym)<edge_begin><edge_end>String()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Double Blind Review()<edge_begin><edge_end>Thing()
Double Blind Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Administrator()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>String()
Contact Author()<edge_begin><edge_end>Author()
Contact Author()<edge_begin><edge_end>Paper Abstract()
Conference Program()<edge_begin><edge_end>Thing()
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Paper Status()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Slot(ends At, begins At)<edge_begin><edge_end>Thing()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Slot(ends At, begins At)<edge_begin><edge_end>time()
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Slot(ends At, begins At)<edge_begin><edge_end>Session(room)
Session(room)<edge_begin><edge_end>Thing()
Session(room)<edge_begin><edge_end>Lecture(has Acronym)
Session(room)<edge_begin><edge_end>Scientific Event()
Session(room)<edge_begin><edge_end>Accepted Paper()
Session(room)<edge_begin><edge_end>String()
Session(room)<edge_begin><edge_end>Slot(ends At, begins At)
Session(room)<edge_begin><edge_end>Chair()
Research Topic()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Chair()
Program Committee()<edge_begin><edge_end>Thing()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Criterion(has Weight)<edge_begin><edge_end>Thing()
Criterion(has Weight)<edge_begin><edge_end>double()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Accepted Paper()<edge_begin><edge_end>Session(room)
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Chair()<edge_begin><edge_end>Output Document()
Chair()<edge_begin><edge_end>Thing()
Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Chair()<edge_begin><edge_end>Session(room)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Boolean()
Evaluation()<edge_begin><edge_end>Document(Document ID)
Evaluation()<edge_begin><edge_end>Review()
Paper Abstract()<edge_begin><edge_end>Document(Document ID)
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Paper Abstract()<edge_begin><edge_end>Contact Author()
Review Question()<edge_begin><edge_end>Question()
Paper Question()<edge_begin><edge_end>Question()
CD-ROM()<edge_begin><edge_end>Output Document()
Index Of Authors()<edge_begin><edge_end>Output Document()
External Reviewers List()<edge_begin><edge_end>Output Document()
Proceedings()<edge_begin><edge_end>Output Document()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Proceedings()<edge_begin><edge_end>Thing()
Program()<edge_begin><edge_end>Output Document()
PC Members List()<edge_begin><edge_end>Output Document()
List Of Abstracts()<edge_begin><edge_end>Output Document()
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
RFC()<edge_begin><edge_end>Topics()
Topics()<edge_begin><edge_end>Value Partition()
Classic Papers()<edge_begin><edge_end>Topics()
Networking()<edge_begin><edge_end>Topics()
Humour()<edge_begin><edge_end>Topics()
Programming()<edge_begin><edge_end>Topics()
Computer Science()<edge_begin><edge_end>Topics()
Format()<edge_begin><edge_end>Value Partition()
Adobe PDF()<edge_begin><edge_end>Format()
MS Word()<edge_begin><edge_end>Format()
Corel Word Perfect()<edge_begin><edge_end>Format()
HTML()<edge_begin><edge_end>Format()
Post Script()<edge_begin><edge_end>Format()
RTF()<edge_begin><edge_end>Format()
Text()<edge_begin><edge_end>Format()
High()<edge_begin><edge_end>Reviewer Famliliarity()
Reviewer Famliliarity()<edge_begin><edge_end>Review Values()
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Marginal Tend to Reject()<edge_begin><edge_end>Reccommendation()
Reccommendation()<edge_begin><edge_end>Review Values()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
Portable Reject()<edge_begin><edge_end>Reccommendation()
Must Accept()<edge_begin><edge_end>Reccommendation()
Clear Reject()<edge_begin><edge_end>Reccommendation()
Clear Accept()<edge_begin><edge_end>Reccommendation()
Program chair()<edge_begin><edge_end>Member(Web address)
Program chair()<edge_begin><edge_end>Conference Program()
Conference Program()<edge_begin><edge_end>Domain Topic()
Conference Program()<edge_begin><edge_end>Program chair()
Conference Program()<edge_begin><edge_end>Planed Paper()
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Planed Paper()<edge_begin><edge_end>Conference Program()
Valuable Confirmation of Present Knowledge()<edge_begin><edge_end>Overall Value()
Other()<edge_begin><edge_end>Overall Value()
Not Much()<edge_begin><edge_end>Overall Value()
New Information()<edge_begin><edge_end>Overall Value()
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Overall Value()<edge_begin><edge_end>Review Values()
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Paper Categorization()<edge_begin><edge_end>Review Values()
Tends Towards Practical()<edge_begin><edge_end>Paper Categorization()
Balanced Theory and Practice()<edge_begin><edge_end>Paper Categorization()
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
Highly Practical()<edge_begin><edge_end>Paper Categorization()
Reviewed Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper File()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Contact Author(Alternate Email)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Long bool()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Overall Value()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reccommendation()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Long bool()<edge_begin><edge_end>Value Partition()
Review Values()<edge_begin><edge_end>Value Partition()
Review Committee()<edge_begin><edge_end>Committees()
Committees()<edge_begin><edge_end>Domain Topic()
Advocate()<edge_begin><edge_end>Member(Web address)
Advocate()<edge_begin><edge_end>Advocated Paper()
Advocated Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Advocated Paper()<edge_begin><edge_end>Advocate()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Contact Author(Alternate Email)<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Contact Author(Alternate Email)<edge_begin><edge_end>String()
Result of Advocate()<edge_begin><edge_end>Value Partition()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>Domain Topic()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Source Archive()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Camera Ready Copy()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Paper File()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Paper File()<edge_begin><edge_end>Domain Topic()
Paper File()<edge_begin><edge_end>Format()
Slides()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Contribution File(has Contribution File Status)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)
Program Comitee()<edge_begin><edge_end>Thing()
Program Comitee()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title, has Contribution Status)<edge_begin><edge_end>String()
Conflict Of Interest()<edge_begin><edge_end>Thing()
Conflict Rules()<edge_begin><edge_end>Thing()
Program Comitee Meeting()<edge_begin><edge_end>Thing()
Setup Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Camera Ready Copy Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Assignment Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Blocked Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Abstract And Paper Submission Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Invitation Of Reviewers Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Review Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Closed Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Bidding Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Speaker()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Speaker()<edge_begin><edge_end>Delegate()
Program Comitee Chair()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Program Comitee Chair()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Comitee Chair()<edge_begin><edge_end>Program Comitee()
Program Comitee Chair()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Program Comitee Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Program Comitee Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Confirmed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Pending Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Pending Proposed Conflict()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Hidden Conflict()<edge_begin><edge_end>Conflict Of Interest()
Deleted Conflict()<edge_begin><edge_end>Conflict Of Interest()
Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Proposed Conflict()<edge_begin><edge_end>Thing()
Self Conflict()<edge_begin><edge_end>Conflict Of Interest()
Co-Author()<edge_begin><edge_end>Author()
Co-Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Main Author()<edge_begin><edge_end>Author()
Bidding And Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
Bidding Without Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
E-mail PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
External Reviewer()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Accepted paper(Score)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Accepted paper(Score)<edge_begin><edge_end>Thing()
Secondary Reviewer()<edge_begin><edge_end>Committee Member()
Committee Member()<edge_begin><edge_end>Conference Member()
Committee Member()<edge_begin><edge_end>Organizer()
Committee Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Committee Member()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>Document(Document ID)
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>Administrator()
Email(Receiver of email, Message of email, Subject of email)<edge_begin><edge_end>String()
Conference Member()<edge_begin><edge_end>Person(E-mail, has Mail, works For Company, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name, has Affiliation, has First Name, has Last Name, has Email, has Name, email, has an email, has the first name, has gender, has the last name)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, Web Site, Topic of conference, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Information()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
CD()<edge_begin><edge_end>Electronic proceeding()
Invitation()<edge_begin><edge_end>Email(Receiver of email, Message of email, Subject of email)
Web site()<edge_begin><edge_end>Electronic proceeding()
Rejected paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, Summary, paper ID, title)
Primary Reviewer()<edge_begin><edge_end>Committee Member()
Primary Reviewer()<edge_begin><edge_end>Review()
Data Base()<edge_begin><edge_end>Table(storage Engine, collation)
Table(storage Engine, collation)<edge_begin><edge_end>Named Element(name)
Table(storage Engine, collation)<edge_begin><edge_end>Data Base()
Table(storage Engine, collation)<edge_begin><edge_end>Column(type, nullable, default, length, collation)
Table(storage Engine, collation)<edge_begin><edge_end>Index()
Table(storage Engine, collation)<edge_begin><edge_end>Primary Key()
Table(storage Engine, collation)<edge_begin><edge_end>Unique()
Column(type, nullable, default, length, collation)<edge_begin><edge_end>Named Element(name)
Primary Key()<edge_begin><edge_end>Index()
Index()<edge_begin><edge_end>Named Element(name)
Index()<edge_begin><edge_end>Column(type, nullable, default, length, collation)
Unique()<edge_begin><edge_end>Index()
HTML()<edge_begin><edge_end>HEAD()
HTML()<edge_begin><edge_end>BODY(background, bgcolor, text, link, alink, vlink)
HTML Element(value)<edge_begin><edge_end>HTML Element(value)
HEAD()<edge_begin><edge_end>HTML Element(value)
HEAD()<edge_begin><edge_end>HEAD Element()
HEAD()<edge_begin><edge_end>HTML()
HEAD Element()<edge_begin><edge_end>HTML Element(value)
HEAD Element()<edge_begin><edge_end>HEAD()
LINK(rel, title, ahref, type)<edge_begin><edge_end>HEAD Element()
TITLE()<edge_begin><edge_end>HEAD Element()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML Element(value)
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>BODY Element()
BODY(background, bgcolor, text, link, alink, vlink)<edge_begin><edge_end>HTML()
BODY Element()<edge_begin><edge_end>HTML Element(value)
BODY Element()<edge_begin><edge_end>BODY(background, bgcolor, text, link, alink, vlink)
H1()<edge_begin><edge_end>BODY Element()
H2()<edge_begin><edge_end>BODY Element()
H3()<edge_begin><edge_end>BODY Element()
H4()<edge_begin><edge_end>BODY Element()
EM()<edge_begin><edge_end>BODY Element()
STRONG()<edge_begin><edge_end>BODY Element()
B()<edge_begin><edge_end>BODY Element()
I()<edge_begin><edge_end>BODY Element()
TT()<edge_begin><edge_end>BODY Element()
PRE()<edge_begin><edge_end>BODY Element()
BIG()<edge_begin><edge_end>BODY Element()
SMALL()<edge_begin><edge_end>BODY Element()
SUB()<edge_begin><edge_end>BODY Element()
SUP()<edge_begin><edge_end>BODY Element()
STRIKE()<edge_begin><edge_end>BODY Element()
FONT(color, face, size)<edge_begin><edge_end>BODY Element()
IMG(src, width, height, alt, align, vspace, hspace, ismap, usemap, border)<edge_begin><edge_end>BODY Element()
BR(clear)<edge_begin><edge_end>BODY Element()
MAP()<edge_begin><edge_end>BODY Element()
AREA(shape, coords, ahref)<edge_begin><edge_end>BODY Element()
STYLE()<edge_begin><edge_end>BODY Element()
EMBED(src, width, height, align, vspace, hspace, border)<edge_begin><edge_end>BODY Element()
NOEMBED()<edge_begin><edge_end>BODY Element()
SPAN(style)<edge_begin><edge_end>BODY Element()
A(ahref, name, id)<edge_begin><edge_end>BODY Element()
DIV(align)<edge_begin><edge_end>BODY Element()
P()<edge_begin><edge_end>BODY Element()
TABLE Element(bgcolor, background)<edge_begin><edge_end>BODY Element()
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TABLE(border, width, cellspacing, cellpadding)<edge_begin><edge_end>TR(valign, align)
TR(valign, align)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TR(valign, align)<edge_begin><edge_end>TABLE(border, width, cellspacing, cellpadding)
TR(valign, align)<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TABLE Element(bgcolor, background)
TD(colspan, rowspan, valign, align, width)<edge_begin><edge_end>TR(valign, align)
TH()<edge_begin><edge_end>TD(colspan, rowspan, valign, align, width)
OL(start)<edge_begin><edge_end>List Element(type)
UL()<edge_begin><edge_end>List Element(type)
LI(li Value)<edge_begin><edge_end>List Element(type)
IFRAME()<edge_begin><edge_end>FRAME(src, name, marginwidth, marginheight, scrolling, noresize)
Non Functionnel Requirement()<edge_begin><edge_end>Requirement()
Non Functionnel Requirement()<edge_begin><edge_end>Use Case()
Functionnel Requirement()<edge_begin><edge_end>Requirement()
Functionnel Requirement()<edge_begin><edge_end>Use Case()
Use Case()<edge_begin><edge_end>Scenario Description()
Use Case()<edge_begin><edge_end>Condition()
Use Case()<edge_begin><edge_end>Role()
Use Case()<edge_begin><edge_end>Functionnel Requirement()
Use Case()<edge_begin><edge_end>Non Functionnel Requirement()
Use Case()<edge_begin><edge_end>Goal()
Goal()<edge_begin><edge_end>Use Case()
Role()<edge_begin><edge_end>Use Case()
Human Role()<edge_begin><edge_end>Role()
System Role()<edge_begin><edge_end>Role()
Event Role()<edge_begin><edge_end>Role()
Manage()<edge_begin><edge_end>Use Case()
Manage()<edge_begin><edge_end>Resource()
Scenario Description()<edge_begin><edge_end>Use Case()
Condition()<edge_begin><edge_end>Use Case()
Pre()<edge_begin><edge_end>Condition()
Post()<edge_begin><edge_end>Condition()
Arc()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Finished(text)
Arc()<edge_begin><edge_end>Keep Anim(text)
Arc()<edge_begin><edge_end>ident(text)
Place()<edge_begin><edge_end>Place()
Place()<edge_begin><edge_end>Tokens(text)
Place()<edge_begin><edge_end>Can Change(text)
Place()<edge_begin><edge_end>Shape(text)
Place()<edge_begin><edge_end>Activities()
Place()<edge_begin><edge_end>Geometry(text)
Transition()<edge_begin><edge_end>Transition()
FSM()<edge_begin><edge_end>State(name)
FSM()<edge_begin><edge_end>Initial State()
State(name)<edge_begin><edge_end>Super State()
State(name)<edge_begin><edge_end>Action(entry Label)
State(name)<edge_begin><edge_end>e Action(exit Label)
Steady State()<edge_begin><edge_end>State(name)
Transient State()<edge_begin><edge_end>State(name)
Transition(guard, action)<edge_begin><edge_end>State(name)
Transition(guard, action)<edge_begin><edge_end>Super State()
Initial State()<edge_begin><edge_end>Super State()
Super State()<edge_begin><edge_end>Transition(guard, action)
Assignment Statement()<edge_begin><edge_end>Statement()
Assignment Statement()<edge_begin><edge_end>Expression()
Exit Statement()<edge_begin><edge_end>Statement()
Goto Statement()<edge_begin><edge_end>Statement()
Goto Statement()<edge_begin><edge_end>Named Element(name)
Case Statement()<edge_begin><edge_end>Statement()
If Statement()<edge_begin><edge_end>Statement()
If Statement()<edge_begin><edge_end>Expression()
If Statement()<edge_begin><edge_end>If Statement()
Loop Statement()<edge_begin><edge_end>Statement()
For Statement()<edge_begin><edge_end>Loop Statement()
For Statement()<edge_begin><edge_end>Variable Declaration(constant, notnull, default)
For Statement()<edge_begin><edge_end>Expression()
Null Statement()<edge_begin><edge_end>Statement()
Raise Statement(exception)<edge_begin><edge_end>Statement()
Return Statement()<edge_begin><edge_end>Statement()
Return Statement()<edge_begin><edge_end>Expression()
Block Statement()<edge_begin><edge_end>Statement()
Block Statement()<edge_begin><edge_end>Declaration()
Block Statement()<edge_begin><edge_end>Exception Section(exception Names)
Function Call Statement()<edge_begin><edge_end>Statement()
Function Call Statement()<edge_begin><edge_end>Named Element(name)
Function Call Statement()<edge_begin><edge_end>Expression()
Function Call Statement()<edge_begin><edge_end>Function Call Parameter()
SQL Statement()<edge_begin><edge_end>Statement()
Control SQL Statement()<edge_begin><edge_end>SQL Statement()
Close Statement()<edge_begin><edge_end>Control SQL Statement()
Close Statement()<edge_begin><edge_end>Cursor Declaration()
Commit Statement()<edge_begin><edge_end>Control SQL Statement()
Fetch Statement()<edge_begin><edge_end>Control SQL Statement()
Fetch Statement()<edge_begin><edge_end>Cursor Declaration()
Fetch Statement()<edge_begin><edge_end>Var Ref Expression()
Lock Table Statement()<edge_begin><edge_end>Control SQL Statement()
Open Statement()<edge_begin><edge_end>Control SQL Statement()
Open Statement()<edge_begin><edge_end>Cursor Declaration()
Open Statement()<edge_begin><edge_end>Expression()
Rollback Statement()<edge_begin><edge_end>Control SQL Statement()
Savepoint Statement()<edge_begin><edge_end>Control SQL Statement()
Modify SQL Statement()<edge_begin><edge_end>SQL Statement()
Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)<edge_begin><edge_end>Modify SQL Statement()
Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)<edge_begin><edge_end>Var Ref Expression()
Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)<edge_begin><edge_end>SQL Condition()
Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)<edge_begin><edge_end>Expression()
Insert Statement(into, columns)<edge_begin><edge_end>Modify SQL Statement()
Insert Statement(into, columns)<edge_begin><edge_end>Expression()
Update Statement(table)<edge_begin><edge_end>Modify SQL Statement()
Update Statement(table)<edge_begin><edge_end>Update Pair(column)
Update Statement(table)<edge_begin><edge_end>SQL Condition()
Update Pair(column)<edge_begin><edge_end>Expression()
Delete Statement()<edge_begin><edge_end>Modify SQL Statement()
Set Transaction Statement()<edge_begin><edge_end>Modify SQL Statement()
Exception Section(exception Names)<edge_begin><edge_end>Statement()
Boolean Expression(type)<edge_begin><edge_end>Expression()
Boolean Expression(type)<edge_begin><edge_end>SQL Condition()
Not Expression()<edge_begin><edge_end>Expression()
Is Null Expression()<edge_begin><edge_end>Expression()
In Range Expression()<edge_begin><edge_end>Expression()
Like Expression()<edge_begin><edge_end>Expression()
Found Expression()<edge_begin><edge_end>Expression()
Found Expression()<edge_begin><edge_end>Cursor Declaration()
Var Ref Expression()<edge_begin><edge_end>Expression()
Forms Var Ref(reference)<edge_begin><edge_end>Var Ref Expression()
SQL Variable()<edge_begin><edge_end>Var Ref Expression()
SQL Variable()<edge_begin><edge_end>Variable Declaration(constant, notnull, default)
SQL Cursor()<edge_begin><edge_end>Var Ref Expression()
SQL Cursor()<edge_begin><edge_end>Cursor Declaration()
Property Access(property Name)<edge_begin><edge_end>Expression()
String Operation()<edge_begin><edge_end>Expression()
Literal Expression(type, value)<edge_begin><edge_end>Expression()
Function Call Parameter()<edge_begin><edge_end>Named Element(name)
Function Call Parameter()<edge_begin><edge_end>Expression()
Arithmetic Expression(type)<edge_begin><edge_end>Expression()
Concat String()<edge_begin><edge_end>String Operation()
Concat String()<edge_begin><edge_end>Expression()
Datatype(name, range)<edge_begin><edge_end>Type()
Indirect Type(identifier, rowtype, type, range)<edge_begin><edge_end>Type()
Generic Type()<edge_begin><edge_end>Type()
Typed Element()<edge_begin><edge_end>Type()
Boolean Condition(type)<edge_begin><edge_end>SQL Condition()
Not Condition()<edge_begin><edge_end>SQL Condition()
Condition Comparison(type)<edge_begin><edge_end>SQL Condition()
Condition Comparison(type)<edge_begin><edge_end>Expression()
Variable Declaration(constant, notnull, default)<edge_begin><edge_end>Declaration()
Variable Declaration(constant, notnull, default)<edge_begin><edge_end>Typed Element()
Variable Declaration(constant, notnull, default)<edge_begin><edge_end>Expression()
Cursor Declaration()<edge_begin><edge_end>Declaration()
Cursor Declaration()<edge_begin><edge_end>Argument(in, out, default)
Cursor Declaration()<edge_begin><edge_end>Select Statement(distinct, unique, all, select List, bulk, collect, from, is Count)
Declaration()<edge_begin><edge_end>Named Element(name)
Procedure Declaration()<edge_begin><edge_end>Declaration()
Procedure Declaration()<edge_begin><edge_end>Argument(in, out, default)
Procedure Declaration()<edge_begin><edge_end>Statement()
Function Declaration()<edge_begin><edge_end>Typed Element()
Function Declaration()<edge_begin><edge_end>Declaration()
Function Declaration()<edge_begin><edge_end>Argument(in, out, default)
Function Declaration()<edge_begin><edge_end>Statement()
Function Declaration()<edge_begin><edge_end>Exception Section(exception Names)
Argument(in, out, default)<edge_begin><edge_end>Named Element(name)
Argument(in, out, default)<edge_begin><edge_end>Typed Element()
Argument(in, out, default)<edge_begin><edge_end>Expression()
Package()<edge_begin><edge_end>Named Element(name)
Package()<edge_begin><edge_end>Declaration()
Package()<edge_begin><edge_end>Statement()
Trigger Block()<edge_begin><edge_end>Named Element(name)
Trigger Block()<edge_begin><edge_end>Block Statement()
PLSQL Definition()<edge_begin><edge_end>Trigger Block()
Mga Object(name, position)<edge_begin><edge_end>String()
Transition()<edge_begin><edge_end>Mga Object(name, position)
Transition()<edge_begin><edge_end>State Machine()
Transition()<edge_begin><edge_end>Association State State()
State()<edge_begin><edge_end>Mga Object(name, position)
State()<edge_begin><edge_end>State Machine()
State()<edge_begin><edge_end>Association State State()
State Machine()<edge_begin><edge_end>Mga Object(name, position)
State Machine()<edge_begin><edge_end>Root Folder(name)
State Machine()<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>Transition()
Root Folder(name)<edge_begin><edge_end>String()
Root Folder(name)<edge_begin><edge_end>Root Folder(name)
Root Folder(name)<edge_begin><edge_end>State Machine()
Association State State()<edge_begin><edge_end>Transition()
Association State State()<edge_begin><edge_end>State()
Query Expression(expresssion)<edge_begin><edge_end>String()
Check Constraint()<edge_begin><edge_end>Column(precision, scale, is Nullable, length, collection Name, character Set Name)
Check Constraint()<edge_begin><edge_end>Table(is Temporary, temporary Scope, is System)
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Integer()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Boolean()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>String()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Check Constraint()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>SQL Data Type(type Number)
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Column Set()
Column(precision, scale, is Nullable, length, collection Name, character Set Name)<edge_begin><edge_end>Named Column Set()
Column Set()<edge_begin><edge_end>Column(precision, scale, is Nullable, length, collection Name, character Set Name)
Named Column Set()<edge_begin><edge_end>Column Set()
Named Column Set()<edge_begin><edge_end>Column(precision, scale, is Nullable, length, collection Name, character Set Name)
Named Column Set()<edge_begin><edge_end>Trigger()
Query Column Set()<edge_begin><edge_end>Column Set()
Query Column Set()<edge_begin><edge_end>Query Expression(expresssion)
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>Named Column Set()
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>Boolean()
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>String()
Table(is Temporary, temporary Scope, is System)<edge_begin><edge_end>Check Constraint()
View(is Read Only, check Option)<edge_begin><edge_end>Named Column Set()
View(is Read Only, check Option)<edge_begin><edge_end>Boolean()
View(is Read Only, check Option)<edge_begin><edge_end>Query Expression(expresssion)
Trigger()<edge_begin><edge_end>Named Column Set()
SQL Data Type(type Number)<edge_begin><edge_end>Integer()
SQL Data Type(type Number)<edge_begin><edge_end>Column(precision, scale, is Nullable, length, collection Name, character Set Name)
SQL Distinct Type(length, precision, scale)<edge_begin><edge_end>SQL Data Type(type Number)
SQL Distinct Type(length, precision, scale)<edge_begin><edge_end>Integer()
SQL Distinct Type(length, precision, scale)<edge_begin><edge_end>SQL Simple Type(character Maximum Length, character Octet Length, numeric Precision, numeric Precision Radix, numeric Scale, date Time Precision)
SQL Simple Type(character Maximum Length, character Octet Length, numeric Precision, numeric Precision Radix, numeric Scale, date Time Precision)<edge_begin><edge_end>SQL Data Type(type Number)
SQL Simple Type(character Maximum Length, character Octet Length, numeric Precision, numeric Precision Radix, numeric Scale, date Time Precision)<edge_begin><edge_end>Integer()
SQL Simple Type(character Maximum Length, character Octet Length, numeric Precision, numeric Precision Radix, numeric Scale, date Time Precision)<edge_begin><edge_end>SQL Distinct Type(length, precision, scale)
State Machine Behavioral Model()<edge_begin><edge_end>State Machine()
State Machine()<edge_begin><edge_end>Named Element(name)
State Machine()<edge_begin><edge_end>State(is Initial, is Active)
State Machine()<edge_begin><edge_end>Transition(is Enabled, is Fireable)
State Machine()<edge_begin><edge_end>Trigger()
State Machine()<edge_begin><edge_end>Guard()
State Machine()<edge_begin><edge_end>Action()
State(is Initial, is Active)<edge_begin><edge_end>Named Element(name)
State(is Initial, is Active)<edge_begin><edge_end>Transition(is Enabled, is Fireable)
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Named Element(name)
Transition(is Enabled, is Fireable)<edge_begin><edge_end>State(is Initial, is Active)
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Trigger()
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Guard()
Transition(is Enabled, is Fireable)<edge_begin><edge_end>Action()
Composite State()<edge_begin><edge_end>State(is Initial, is Active)
Composite State()<edge_begin><edge_end>State Machine()
Trigger()<edge_begin><edge_end>Named Element(name)
Guard()<edge_begin><edge_end>Named Element(name)
Action()<edge_begin><edge_end>Named Element(name)
Change Train Heading Speed(new Heading Speed)<edge_begin><edge_end>Action Expression(expression)
Change Signal Allowed Speed(new Allowed Speed)<edge_begin><edge_end>Action Expression(expression)
Change Turnout Direction(new Turnout Direction)<edge_begin><edge_end>Action Expression(expression)
Change Train Current Track Element()<edge_begin><edge_end>Action Expression(expression)
Train Current Heading Speed(current Heading Speed)<edge_begin><edge_end>Guard Expression(expression)
Train Currently Stands On()<edge_begin><edge_end>Guard Expression(expression)
Turnout Current Direction(current Turnout Direction)<edge_begin><edge_end>Guard Expression(expression)
Signal Current Allowed Speed(current Allowed Speed)<edge_begin><edge_end>Guard Expression(expression)
Train Heading Speed Changed(new Heading Speed)<edge_begin><edge_end>Trigger Expression(expression)
Train Track Element Changed()<edge_begin><edge_end>Trigger Expression(expression)
Signal Allowed Speed Changed(new Allowed Speed)<edge_begin><edge_end>Trigger Expression(expression)
Turnout Direction Changed(new Turnout Direction)<edge_begin><edge_end>Trigger Expression(expression)
Next Track Element Is()<edge_begin><edge_end>Guard Expression(expression)
Turnout Has Desired Direction()<edge_begin><edge_end>Guard Expression(expression)
Action Expression(expression)<edge_begin><edge_end>Action()
Guard Expression(expression)<edge_begin><edge_end>Guard()
Trigger Expression(expression)<edge_begin><edge_end>Trigger()
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Position(description)
Position(description)<edge_begin><edge_end>Named(name)
Position(description)<edge_begin><edge_end>Position(description)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Petri Net Doc(xmlns)<edge_begin><edge_end>Petri Net(id, type)
Petri Net(id, type)<edge_begin><edge_end>Page()
Petri Net(id, type)<edge_begin><edge_end>Name(text)
Petri Net(id, type)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Petri Net(id, type)<edge_begin><edge_end>Petri Net Doc(xmlns)
Page()<edge_begin><edge_end>Pn Object(id)
Page()<edge_begin><edge_end>Petri Net(id, type)
Page()<edge_begin><edge_end>Node Graphics()
Pn Object(id)<edge_begin><edge_end>Name(text)
Pn Object(id)<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Pn Object(id)<edge_begin><edge_end>Page()
Name(text)<edge_begin><edge_end>Annotation()
Name(text)<edge_begin><edge_end>Petri Net(id, type)
Name(text)<edge_begin><edge_end>Pn Object(id)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Long String()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>URI()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Petri Net(id, type)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Pn Object(id)
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Label()
Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)<edge_begin><edge_end>Any Object()
Label()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Node Graphics()<edge_begin><edge_end>Graphics()
Node Graphics()<edge_begin><edge_end>Position()
Node Graphics()<edge_begin><edge_end>Dimension()
Node Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Node Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Node Graphics()<edge_begin><edge_end>Node()
Node Graphics()<edge_begin><edge_end>Page()
Position()<edge_begin><edge_end>Coordinate(x, y)
Position()<edge_begin><edge_end>Node Graphics()
Position()<edge_begin><edge_end>Arc Graphics()
Offset()<edge_begin><edge_end>Coordinate(x, y)
Offset()<edge_begin><edge_end>Annotation Graphics()
Dimension()<edge_begin><edge_end>Coordinate(x, y)
Dimension()<edge_begin><edge_end>Node Graphics()
Annotation Graphics()<edge_begin><edge_end>Graphics()
Annotation Graphics()<edge_begin><edge_end>Offset()
Annotation Graphics()<edge_begin><edge_end>Fill(color, gradientcolor, gradientrotation, image)
Annotation Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Annotation Graphics()<edge_begin><edge_end>Font(align, decoration, family, rotation, size, style, weight)
Annotation Graphics()<edge_begin><edge_end>Annotation()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>URI()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Node Graphics()
Fill(color, gradientcolor, gradientrotation, image)<edge_begin><edge_end>Annotation Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Node Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Arc Graphics()
Line(color, shape, width, style)<edge_begin><edge_end>Annotation Graphics()
Arc Graphics()<edge_begin><edge_end>Graphics()
Arc Graphics()<edge_begin><edge_end>Position()
Arc Graphics()<edge_begin><edge_end>Line(color, shape, width, style)
Arc Graphics()<edge_begin><edge_end>Arc()
Arc()<edge_begin><edge_end>Pn Object(id)
Arc()<edge_begin><edge_end>Node()
Arc()<edge_begin><edge_end>Arc Graphics()
Node()<edge_begin><edge_end>Pn Object(id)
Node()<edge_begin><edge_end>Arc()
Node()<edge_begin><edge_end>Node Graphics()
Font(align, decoration, family, rotation, size, style, weight)<edge_begin><edge_end>Annotation Graphics()
Place Node()<edge_begin><edge_end>Node()
Place Node()<edge_begin><edge_end>Ref Place()
Transition Node()<edge_begin><edge_end>Node()
Transition Node()<edge_begin><edge_end>Ref Transition()
Place()<edge_begin><edge_end>Place Node()
Ref Transition()<edge_begin><edge_end>Transition Node()
Transition()<edge_begin><edge_end>Transition Node()
Ref Place()<edge_begin><edge_end>Place Node()
Attribute()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>Label()
Annotation()<edge_begin><edge_end>Annotation Graphics()
Any Object()<edge_begin><edge_end>Tool Info(tool, version, formatted XML Buffer, tool Info Grammar URI)
Table(name)<edge_begin><edge_end>Ref Table()
Table(name)<edge_begin><edge_end>Ref Column()
Table(name)<edge_begin><edge_end>Ref P Key()
Table(name)<edge_begin><edge_end>Ref F Key()
F Key(name)<edge_begin><edge_end>Ref F Key()
F Key(name)<edge_begin><edge_end>Column(name)
F Key(name)<edge_begin><edge_end>Ref Table()
Column(name)<edge_begin><edge_end>Ref Column()
Column(name)<edge_begin><edge_end>Ref Type()
Database(name)<edge_begin><edge_end>Ref Database()
Database(name)<edge_begin><edge_end>Ref Table()
Database(name)<edge_begin><edge_end>Ref Procedure()
Procedure(name)<edge_begin><edge_end>Ref Procedure()
Procedure(name)<edge_begin><edge_end>Ref Parameter()
Procedure(name)<edge_begin><edge_end>Ref Type()
Parameter(name)<edge_begin><edge_end>Ref Parameter()
Parameter(name)<edge_begin><edge_end>Ref Type()
Type(name)<edge_begin><edge_end>Ref Type()
P Key(name)<edge_begin><edge_end>Ref P Key()
P Key(name)<edge_begin><edge_end>Column(name)
Database Versions(package Name, file Name)<edge_begin><edge_end>Database Version()
Database Version()<edge_begin><edge_end>Database()
Database Version()<edge_begin><edge_end>Database Version()
Database Version()<edge_begin><edge_end>Table Mapping()
Database Version()<edge_begin><edge_end>Column Mapping()
Database()<edge_begin><edge_end>Name Provider(name)
Database()<edge_begin><edge_end>Table()
Database()<edge_begin><edge_end>View()
Database()<edge_begin><edge_end>Trigger()
Database()<edge_begin><edge_end>Index()
Table Mapping()<edge_begin><edge_end>String To Table Mapping Entry Map(key)
Column Mapping()<edge_begin><edge_end>String To Column Mapping Entry Map(key)
Table()<edge_begin><edge_end>Name Provider(name)
Table()<edge_begin><edge_end>Database()
Table()<edge_begin><edge_end>Column(type)
Table()<edge_begin><edge_end>Table Constraint(name)
Table Constraint(name)<edge_begin><edge_end>Table()
Primary Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Primary Key Table Constraint()<edge_begin><edge_end>Indexed Column()
Unique Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Unique Table Constraint()<edge_begin><edge_end>Indexed Column()
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Check Table Constraint()<edge_begin><edge_end>Expression()
Foreign Key Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Foreign Key Table Constraint()<edge_begin><edge_end>Column(type)
Foreign Key Table Constraint()<edge_begin><edge_end>Table()
Column(type)<edge_begin><edge_end>Name Provider(name)
Column(type)<edge_begin><edge_end>Table()
Column(type)<edge_begin><edge_end>Column Constraint(name)
Indexed Column()<edge_begin><edge_end>Column(type)
Column Constraint(name)<edge_begin><edge_end>Column(type)
Primary Key Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Not Null Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Unique Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Check Column Constraint()<edge_begin><edge_end>Column Constraint(name)
Check Column Constraint()<edge_begin><edge_end>Expression()
Default Value Column Constraint()<edge_begin><edge_end>Column Constraint(name)
View()<edge_begin><edge_end>Name Provider(name)
View()<edge_begin><edge_end>Database()
Index()<edge_begin><edge_end>Database()
Trigger()<edge_begin><edge_end>Name Provider(name)
Trigger()<edge_begin><edge_end>Database()
Conference(name)<edge_begin><edge_end>Track(name)
Conference(name)<edge_begin><edge_end>Person(name, organisation)
Conference(name)<edge_begin><edge_end>Day(name)
Conference(name)<edge_begin><edge_end>Location(name)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Person(name, organisation)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Subject(description, is Done)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Story(name)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Day(name)
Talk(name, abstract, duration, time)<edge_begin><edge_end>Location(name)
Person(name, organisation)<edge_begin><edge_end>Talk(name, abstract, duration, time)
Person(name, organisation)<edge_begin><edge_end>Track(name)
Track(name)<edge_begin><edge_end>Talk(name, abstract, duration, time)
Track(name)<edge_begin><edge_end>Person(name, organisation)
Day(name)<edge_begin><edge_end>Task(name)
Day(name)<edge_begin><edge_end>Participant(age, attitude)
Location(name)<edge_begin><edge_end>Talk(name, abstract, duration, time)
Story(name)<edge_begin><edge_end>Day(name)
Task(name)<edge_begin><edge_end>Participant(age, attitude)
Participant(age, attitude)<edge_begin><edge_end>Person(name, organisation)
Commented Element(comment)<edge_begin><edge_end>Element()
Named Element(name)<edge_begin><edge_end>Commented Element(comment)
Application()<edge_begin><edge_end>Named Element(name)
Application()<edge_begin><edge_end>Database()
Application()<edge_begin><edge_end>Server()
Application()<edge_begin><edge_end>Client()
Database()<edge_begin><edge_end>Named Element(name)
Database()<edge_begin><edge_end>Database Element()
Database Element()<edge_begin><edge_end>Named Element(name)
Attribute(type, max Length)<edge_begin><edge_end>Named Element(name)
Entity()<edge_begin><edge_end>Database Element()
Entity()<edge_begin><edge_end>Primary Property()
Entity()<edge_begin><edge_end>Property(is Nullable, default Value)
Entity()<edge_begin><edge_end>Relationship(type, is Nullable, is Containment)
Entity()<edge_begin><edge_end>Entity()
Abstract Entity()<edge_begin><edge_end>Entity()
Persistent Entity()<edge_begin><edge_end>Entity()
Computed Entity()<edge_begin><edge_end>Entity()
Relationship(type, is Nullable, is Containment)<edge_begin><edge_end>Named Element(name)
Relationship(type, is Nullable, is Containment)<edge_begin><edge_end>Entity()
Relationship(type, is Nullable, is Containment)<edge_begin><edge_end>Property(is Nullable, default Value)
Event()<edge_begin><edge_end>Database Element()
Parameter()<edge_begin><edge_end>Named Element(name)
Data Parameter(type)<edge_begin><edge_end>Parameter()
Entity Parameter()<edge_begin><edge_end>Parameter()
Entity Parameter()<edge_begin><edge_end>Entity()
Function(return Type)<edge_begin><edge_end>Database Element()
Function(return Type)<edge_begin><edge_end>Data Parameter(type)
Operation()<edge_begin><edge_end>Database Element()
Operation()<edge_begin><edge_end>Parameter()
Query()<edge_begin><edge_end>Database Element()
Server()<edge_begin><edge_end>Named Element(name)
Server()<edge_begin><edge_end>Server Element()
Server Element()<edge_begin><edge_end>Named Element(name)
Service()<edge_begin><edge_end>Server Element()
Entity Service()<edge_begin><edge_end>Service()
Entity Service()<edge_begin><edge_end>Entity()
Query Service()<edge_begin><edge_end>Service()
Query Service()<edge_begin><edge_end>Query()
Operation Service()<edge_begin><edge_end>Service()
Operation Service()<edge_begin><edge_end>Operation()
Custom Service()<edge_begin><edge_end>Service()
Client()<edge_begin><edge_end>Named Element(name)
Client()<edge_begin><edge_end>Client Element()
Client Element()<edge_begin><edge_end>Named Element(name)
Form()<edge_begin><edge_end>Client Element()
Entity Form(type)<edge_begin><edge_end>Form()
Entity Form(type)<edge_begin><edge_end>Entity()
Entity Containment Form()<edge_begin><edge_end>Form()
Custom Form()<edge_begin><edge_end>Form()
Primary Property()<edge_begin><edge_end>Attribute(type, max Length)
Property(is Nullable, default Value)<edge_begin><edge_end>Attribute(type, max Length)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Cell Type(unit, formula, err, value)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Integer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>String()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Boolean()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Colors Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Print Setup()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Fonts Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Face Names Table()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Style Sheets Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Document Sheet()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Masters Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Pages Collection()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Windows Info()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Event List()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Header Footer()
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>VB Project Data(data)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Email Routing Data(data, size)
Visio Document(start, key, metric, buildnum, version, doc Lang Id)<edge_begin><edge_end>Solution XML()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Custom Properties Collection()
Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Properties Collection()<edge_begin><edge_end>Document Properties Collection(title, subject, creator, manager, company, category, keywords, description, hyperlink Base href, alternate Names, template, build Number Created, build Number Edited)
Custom Properties Collection()<edge_begin><edge_end>Custom Property(name, data Type)
Custom Property(name, data Type)<edge_begin><edge_end>Custom Properties Collection()
Custom Property(name, data Type)<edge_begin><edge_end>String()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Style Sheet()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Integer()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Snap Angles Collection()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>Boolean()
Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)<edge_begin><edge_end>String()
Snap Angles Collection()<edge_begin><edge_end>Document Settings Elt(glue Settings, snap Settings, snap Extensions, dynamic Grid Enabled, protect Styles, protect Shapes, protect Masters, protect Bkgnds, custom Menus File, custom Toolbars File, attached Toolbars)
Snap Angles Collection()<edge_begin><edge_end>Snap Angle(angle Value)
Snap Angle(angle Value)<edge_begin><edge_end>Snap Angles Collection()
Snap Angle(angle Value)<edge_begin><edge_end>Double()
Colors Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Colors Table()<edge_begin><edge_end>Color Entry(rgb)
Color Entry(rgb)<edge_begin><edge_end>I Xrequired Elt(i X)
Color Entry(rgb)<edge_begin><edge_end>Colors Table()
Color Entry(rgb)<edge_begin><edge_end>String()
Print Setup()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Fonts Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Fonts Table()<edge_begin><edge_end>Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Identified Elt(ID)
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Fonts Table()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>String()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Integer()
Font Entry(name, char Set, pitch And Family, attributes, weight, unicode)<edge_begin><edge_end>Boolean()
Face Names Table()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Face Names Table()<edge_begin><edge_end>Face Name(name, unicode Ranges, char Set, panos, flags)
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Identified Elt(ID)
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Face Names Table()
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>String()
Face Name(name, unicode Ranges, char Set, panos, flags)<edge_begin><edge_end>Integer()
VB Project Data(data)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
VB Project Data(data)<edge_begin><edge_end>String()
Email Routing Data(data, size)<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Email Routing Data(data, size)<edge_begin><edge_end>String()
Email Routing Data(data, size)<edge_begin><edge_end>Integer()
Style Sheets Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Style Sheets Collection()<edge_begin><edge_end>Style Sheet()
Style Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Style Sheet()<edge_begin><edge_end>Identified Elt(ID)
Style Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Style Sheet()<edge_begin><edge_end>Style Sheets Collection()
Document Sheet()<edge_begin><edge_end>Page Sheet()
Document Sheet()<edge_begin><edge_end>Named Elt(name, name U)
Document Sheet()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Page Sheet()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Page Sheet()<edge_begin><edge_end>Unique Id Elt(Unique ID)
Page Sheet()<edge_begin><edge_end>Master Elt()
Page Sheet()<edge_begin><edge_end>Page Elt()
Named Elt(name, name U)<edge_begin><edge_end>String()
Identified Elt(ID)<edge_begin><edge_end>Integer()
Unique Id Elt(Unique ID)<edge_begin><edge_end>String()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shapes Collection()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Integer()
Shape(line Style, fill Style, text Style)<edge_begin><edge_end>Shape Elt()
Shape Elt()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
IX Elt(i X)<edge_begin><edge_end>Integer()
Del Elt(del)<edge_begin><edge_end>Boolean()
Geom()<edge_begin><edge_end>Shape Elt()
Geom()<edge_begin><edge_end>IX Elt(i X)
Geom()<edge_begin><edge_end>Del Elt(del)
Geom()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Geom()<edge_begin><edge_end>Line To()
Geom()<edge_begin><edge_end>Move To()
Geom()<edge_begin><edge_end>Arc To()
Geom()<edge_begin><edge_end>Spline Knot()
Geom()<edge_begin><edge_end>Polyline To()
Geom()<edge_begin><edge_end>Infinite Line()
Geom()<edge_begin><edge_end>Ellipse()
Geom()<edge_begin><edge_end>Elliptical Arc To()
Geom()<edge_begin><edge_end>Spline Start()
Geom()<edge_begin><edge_end>NURBS To()
XY Elt()<edge_begin><edge_end>IX Elt(i X)
XY Elt()<edge_begin><edge_end>Del Elt(del)
XY Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Line To()<edge_begin><edge_end>XY Elt()
Line To()<edge_begin><edge_end>Geom()
Move To()<edge_begin><edge_end>XY Elt()
Move To()<edge_begin><edge_end>Geom()
XYA Elt()<edge_begin><edge_end>XY Elt()
XYA Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Arc To()<edge_begin><edge_end>XYA Elt()
Arc To()<edge_begin><edge_end>Geom()
Spline Knot()<edge_begin><edge_end>XYA Elt()
Spline Knot()<edge_begin><edge_end>Geom()
Polyline To()<edge_begin><edge_end>XYA Elt()
Polyline To()<edge_begin><edge_end>Geom()
XYAB Elt()<edge_begin><edge_end>XYA Elt()
XYAB Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Infinite Line()<edge_begin><edge_end>XYAB Elt()
Infinite Line()<edge_begin><edge_end>Geom()
XYABCD Elt()<edge_begin><edge_end>XYAB Elt()
XYABCD Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Ellipse()<edge_begin><edge_end>XYABCD Elt()
Ellipse()<edge_begin><edge_end>Geom()
Elliptical Arc To()<edge_begin><edge_end>XYABCD Elt()
Elliptical Arc To()<edge_begin><edge_end>Geom()
Spline Start()<edge_begin><edge_end>XYABCD Elt()
Spline Start()<edge_begin><edge_end>Geom()
XYABCDE Elt()<edge_begin><edge_end>XYABCD Elt()
XYABCDE Elt()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
NURBS To()<edge_begin><edge_end>XYABCDE Elt()
NURBS To()<edge_begin><edge_end>Geom()
Text()<edge_begin><edge_end>Shape Elt()
Text()<edge_begin><edge_end>Text Elt()
Text Elt()<edge_begin><edge_end>Text()
I Xrequired Elt(i X)<edge_begin><edge_end>Integer()
Cp()<edge_begin><edge_end>I Xrequired Elt(i X)
Cp()<edge_begin><edge_end>Text Elt()
Pp()<edge_begin><edge_end>I Xrequired Elt(i X)
Pp()<edge_begin><edge_end>Text Elt()
Tp()<edge_begin><edge_end>I Xrequired Elt(i X)
Tp()<edge_begin><edge_end>Text Elt()
Fld()<edge_begin><edge_end>I Xrequired Elt(i X)
Fld()<edge_begin><edge_end>Text Elt()
String Elt(value)<edge_begin><edge_end>Text Elt()
String Elt(value)<edge_begin><edge_end>String()
Char()<edge_begin><edge_end>Shape Elt()
Char()<edge_begin><edge_end>IX Elt(i X)
Char()<edge_begin><edge_end>Del Elt(del)
Char()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Para()<edge_begin><edge_end>Shape Elt()
Para()<edge_begin><edge_end>IX Elt(i X)
Para()<edge_begin><edge_end>Del Elt(del)
Para()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Tabs Collection()<edge_begin><edge_end>Shape Elt()
Tabs Collection()<edge_begin><edge_end>IX Elt(i X)
Tabs Collection()<edge_begin><edge_end>Del Elt(del)
Tabs Collection()<edge_begin><edge_end>Tab()
Tab()<edge_begin><edge_end>IX Elt(i X)
Tab()<edge_begin><edge_end>Tabs Collection()
Tab()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Field()<edge_begin><edge_end>Shape Elt()
Field()<edge_begin><edge_end>IX Elt(i X)
Field()<edge_begin><edge_end>Del Elt(del)
Field()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
X Form()<edge_begin><edge_end>Shape Elt()
X Form()<edge_begin><edge_end>Del Elt(del)
X Form()<edge_begin><edge_end>Cell Type(unit, formula, err, value)
Masters Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Masters Collection()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Masters Collection()<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Masters Collection()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Integer()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>String()
Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)<edge_begin><edge_end>Icon(value)
Icon(value)<edge_begin><edge_end>Master Elt()
Icon(value)<edge_begin><edge_end>Master Short Cut(icon Size, pattern Flags, prompt, shortcut URL, shortcut Help, align Name)
Icon(value)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Identified Elt(ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Unique Id Elt(Unique ID)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Named Elt(name, name U)
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Masters Collection()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>String()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Boolean()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Integer()
Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Master Elt()
Shapes Collection()<edge_begin><edge_end>Page Elt()
Shapes Collection()<edge_begin><edge_end>Shape(line Style, fill Style, text Style)
Connects Collection()<edge_begin><edge_end>Master Elt()
Connects Collection()<edge_begin><edge_end>Page Elt()
Connects Collection()<edge_begin><edge_end>Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Connects Collection()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>Integer()
Connect(from Sheet, to Sheet, from Cell, to Cell, from Part, to Part)<edge_begin><edge_end>String()
Master Elt()<edge_begin><edge_end>Master(base ID, match By Name, icon Size, pattern Flags, prompt, hidden, icon Update, align Name)
Pages Collection()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Pages Collection()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Identified Elt(ID)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Named Elt(name, name U)
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Pages Collection()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Boolean()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Integer()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Double()
Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)<edge_begin><edge_end>Page Elt()
Page Elt()<edge_begin><edge_end>Page(background, back Page, view Scale, view Center X, View Center Y, reviewer ID, associated Page)
Windows Info()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Event List()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Header Footer()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Solution XML()<edge_begin><edge_end>Visio Document(start, key, metric, buildnum, version, doc Lang Id)
Statemachine(associated Tree, associated Attribute)<edge_begin><edge_end>Named(name)
Statemachine(associated Tree, associated Attribute)<edge_begin><edge_end>Abstract State()
Abstract State()<edge_begin><edge_end>Named(name)
Abstract State()<edge_begin><edge_end>Abstract Transition()
Abstract Transition()<edge_begin><edge_end>Named(name)
Abstract Transition()<edge_begin><edge_end>Abstract State()
Abstract Transition()<edge_begin><edge_end>State Change()
Initial State()<edge_begin><edge_end>Abstract State()
Final State()<edge_begin><edge_end>Abstract State()
State(state Color)<edge_begin><edge_end>Abstract State()
Transition()<edge_begin><edge_end>Abstract Transition()
Conditional Transition()<edge_begin><edge_end>Abstract Transition()
State Attribute(type, value)<edge_begin><edge_end>State Attribute(type, value)
Conditional State(and Expression, conditions Organization)<edge_begin><edge_end>Abstract State()
Conditional State(and Expression, conditions Organization)<edge_begin><edge_end>Abstract Condition(is Not Condition)
State Change()<edge_begin><edge_end>State Attribute(type, value)
State Change()<edge_begin><edge_end>State Value(type, value)
Abstract Condition(is Not Condition)<edge_begin><edge_end>State Value(type, value)
Field Condition(field Name)<edge_begin><edge_end>Abstract Condition(is Not Condition)
Attribute Condition()<edge_begin><edge_end>Abstract Condition(is Not Condition)
Attribute Condition()<edge_begin><edge_end>State Attribute(type, value)
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Connection(version, Context Mode, Context Id)<edge_begin><edge_end>Queries Connection()
Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)<edge_begin><edge_end>Map()
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, length, precision, original Field, pattern, display Field)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Ebcdic Connection(Mid File, Data File)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)<edge_begin><edge_end>CDC Connection()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Input SAP Function Parameter Table()
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion)
SAP Function Unit(Name, Output Type, Output Table Name, Document)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Name, Parameter Type, Structure Or Table Name, Data Type, Length, Description, Value)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>List()
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out)<edge_begin><edge_end>List()
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, Schema, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Name, Output Type, Output Table Name, Document)
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Concept(Loop Expression, Loop Limit)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit)
HL7Connection(Start Char, End Char)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Task()<edge_begin><edge_end>Service()
User()<edge_begin><edge_end>Use Case()
User()<edge_begin><edge_end>Actor()
Actor()<edge_begin><edge_end>Use Case()
Actor()<edge_begin><edge_end>Goal()
Actor()<edge_begin><edge_end>User()
Goal()<edge_begin><edge_end>Service()
Goal()<edge_begin><edge_end>Actor()
Use Case()<edge_begin><edge_end>Context()
Use Case()<edge_begin><edge_end>Service()
Use Case()<edge_begin><edge_end>User()
Use Case()<edge_begin><edge_end>Actor()
Service()<edge_begin><edge_end>Use Case()
Service()<edge_begin><edge_end>Goal()
Service()<edge_begin><edge_end>Task()
Context()<edge_begin><edge_end>Pre Condition()
Context()<edge_begin><edge_end>Post Condition()
Context()<edge_begin><edge_end>Use Case()
Pre Condition()<edge_begin><edge_end>Context()
Post Condition()<edge_begin><edge_end>Context()
Episode()<edge_begin><edge_end>Event()
Event()<edge_begin><edge_end>Episode()
Action()<edge_begin><edge_end>Event()
Responce()<edge_begin><edge_end>Event()
Responce()<edge_begin><edge_end>Parameter()
Stimilus()<edge_begin><edge_end>Event()
Stimilus()<edge_begin><edge_end>Parameter()
Parameter()<edge_begin><edge_end>Stimilus()
Parameter()<edge_begin><edge_end>Responce()
Metadata()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata()<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Connection(version, Context Mode, Context Id, context Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Connection(version, Context Mode, Context Id, context Name)<edge_begin><edge_end>Queries Connection()
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)<edge_begin><edge_end>Map()
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Metadata Table(source Name, table Type, attached CDC, activated CDC)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Delimited File Connection(Field Separator Type, split Record)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Positional File Connection()<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Ebcdic Connection(Mid File, Data File)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
MDM Connection(Username, Password, Port, Server, Universe, Datamodel, Datacluster, protocol, context)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)<edge_begin><edge_end>CDC Connection()
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)<edge_begin><edge_end>SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Input SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Output SAP Function Parameter Table()
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)
SAP Function Unit(Output Type, Output Table Name)<edge_begin><edge_end>SAP Test Input Parameter Table()
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAPI Doc Unit(program Id, gateway Service, use Xml Output, xml File, use Html Output, html File)<edge_begin><edge_end>SAP Connection(Host, Username, Password, Client, System Number, Language, current Fucntion, jco Version)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)<edge_begin><edge_end>SAP Function Parameter Table()
SAP Function Parameter Table()<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Column(Parameter Type, Structure Or Table Name, Data Type, Length, Value)
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Input SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
Output SAP Function Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Regexp File Connection(Field Separator Type)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Schema Target(Relative X Path Query, Tag Name)<edge_begin><edge_end>Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)
Queries Connection()<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Queries Connection()<edge_begin><edge_end>Query(value, context Mode)
Query(value, context Mode)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Query(value, context Mode)<edge_begin><edge_end>Queries Connection()
Ldif File Connection(value, File Path, Limit Entry, Use Limit, Server)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
File Excel Connection(Sheet Name, sheet Columns, first Column, last Column, thousand Separator, decimal Separator, advanced Spearator, select All Sheets, sheet List)<edge_begin><edge_end>List()
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Xml File Connection(Xsd File Path, Xml File Path, Guess, Mask X Pattern, Encoding, input Model, output File Path, file Content)
Xml X Path Loop Descriptor(Limit Boucle, Absolute X Path Query)<edge_begin><edge_end>Schema Target(Relative X Path Query, Tag Name)
Generic Schema Connection(mapping Type Used, mapping Type Id)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
LDAP Schema Connection(Host, Port, Protocol, Filter, Separator, Use Advanced, Store Path, Use Limit, Use Authen, Bind Principal, Bind Password, Limit Value, Encryption Method Name, Value, Save Password, Aliases, Referrals, Count Limit, Time Out Limit, Base D Ns, Get Base D Ns From Root, Return Attributes, Selected DN)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>List()
WSDL Schema Connection(WSDL, need Auth, method Name, parameters, User Name, Password, use Proxy, proxy Host, proxy Port, proxy User, proxy Password, Value, Endpoint URI, Encoding, time Out, is Input Model, server Name Space, server Name, port Name Space, port Name)<edge_begin><edge_end>WSDL Parameter(Element, source, Column, Expression, Parameter Info, Parameter Info Parent)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)<edge_begin><edge_end>Salesforce Module Unit(module Name)
CDC Connection()<edge_begin><edge_end>Database Connection(Database Type, Driver Jar Path, Driver Class, URL, db Version String, Port, Username, Password, Server Name, Datasource Name, File Field Name, SID, Sql Synthax, String Quote, Null Char, Dbms Id, Product Id, DB Root Path, Additional Params, Standard SQL, System SQL, cdc Type Mode, SQL Mode, Ui Schema)
CDC Connection()<edge_begin><edge_end>CDC Type(link DB, journal Name)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
CDC Type(link DB, journal Name)<edge_begin><edge_end>Subscriber Table(system)
CDC Type(link DB, journal Name)<edge_begin><edge_end>CDC Connection()
Subscriber Table(system)<edge_begin><edge_end>Td Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Parameter Table()
SAP Test Input Parameter Table()<edge_begin><edge_end>SAP Function Unit(Output Type, Output Table Name)
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>Td Table()
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>Concept Target(target Name, Relative Loop Expression)
Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Concept Target(target Name, Relative Loop Expression)<edge_begin><edge_end>Concept(Loop Expression, Loop Limit, input Model, concept Type, x Path Prefix)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>File Connection(Server, File Path, Format, Encoding, Field Separator Value, Row Separator Type, Row Separator Value, Text Identifier, Use Header, Header Value, Use Footer, Footer Value, Use Limit, Limit Value, First Line Caption, Remove Empty Row, Escape Type, Escape Char, Text Enclosure, Csv Option)
HL7Connection(Start Char, End Char, output File Path)<edge_begin><edge_end>HL7File Node(File Path, Order, Attribute, Default Value, Related Column, Repeatable)
Header Footer Connection(is Header, imports, main Code, libraries)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
FTP Connection(Host, Port, Username, Password, Mode, Ecoding, SFTP, FTPS, Method, Keystore File, Keystore Password, Usesocks, Proxyhost, Proxyport, Proxyuser, Proxypassword, Custom Encode)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
BRMS Connection(xml Field, url Name, tac Webapp Name, class Name, module Used, package)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
BRMS Connection(xml Field, url Name, tac Webapp Name, class Name, module Used, package)<edge_begin><edge_end>XML File Node(XML Path, Related Column, Default Value, Attribute, Order, Type)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Condition Type(input Column, function, operator, value)
Validation Rules Connection(is Select, is Insert, is Update, is Delete, type, base Schema, base Column Names, ref Schema, ref Column Names, java Condition, sql Condition, logical Operator, is Disallow, is Reject Link)<edge_begin><edge_end>Inner Join Map(key, value)
EDIFACT Connection(Xml Name, File Name, Xml Path)<edge_begin><edge_end>Connection(version, Context Mode, Context Id, context Name)
EDIFACT Column(EDI Column Name, EDI Xpath)<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Abstract Metadata Object(properties, id, comment, label, read Only, synchronised, divergency)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Salesforce Module Unit(module Name)<edge_begin><edge_end>Salesforce Schema Connection(web Service Url, user Name, password, module Name, query Condition, use Custom Module Name, use Proxy, proxy Host, proxy Port, proxy Username, proxy Password, batch Size, use Http Proxy, use Alphbet, time Out)
Td Table()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Td View()<edge_begin><edge_end>Metadata Table(source Name, table Type, attached CDC, activated CDC)
Td Column()<edge_begin><edge_end>Metadata Column(source Type, default Value, talend Type, key, nullable, original Field, pattern, display Field, original Length, related Entity, relationship Type)
Td Column()<edge_begin><edge_end>Td Sql Data Type(java Data Type, nullable, unsigned Attribute, case Sensitive, auto Increment, local Type Name, searchable)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Schema(xsd File Path)
Td Xml Element Type(java Type)<edge_begin><edge_end>Td Xml Content()
Td Xml Content()<edge_begin><edge_end>Td Xml Element Type(java Type)
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Definition()
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Declaration()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Statement()
Event Derivation()<edge_begin><edge_end>Expression()
Local Reaction()<edge_begin><edge_end>Reaction Properties()
Transition Reaction()<edge_begin><edge_end>Transition Statement()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Reaction Priority(priority)<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Time Event Spec(value, unit)<edge_begin><edge_end>Event Spec()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Assignment(operator)<edge_begin><edge_end>Statement()
Assignment(operator)<edge_begin><edge_end>Expression()
Event Raising()<edge_begin><edge_end>Statement()
Event Raising()<edge_begin><edge_end>Expression()
Expression()<edge_begin><edge_end>Statement()
Event Definition(direction, type)<edge_begin><edge_end>Event Derivation()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Reaction Effect()<edge_begin><edge_end>Statement()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression(value)<edge_begin><edge_end>Expression()
Element Reference Expression()<edge_begin><edge_end>Expression()
Operation Call()<edge_begin><edge_end>Expression()
Operation Call()<edge_begin><edge_end>Operation(param Types, type)
Db Model(name, mtype, kuda Type, kobe Type, version, do All)<edge_begin><edge_end>Import(imported Namespace)
Db Model(name, mtype, kuda Type, kobe Type, version, do All)<edge_begin><edge_end>Subject(name)
Db Model(name, mtype, kuda Type, kobe Type, version, do All)<edge_begin><edge_end>Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)
Db Model(name, mtype, kuda Type, kobe Type, version, do All)<edge_begin><edge_end>Duplicate()
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Class Or Duplicate(name, abbrev, reps)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Subject(name)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Primkey()
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Index(kuko, name, unique)
Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)<edge_begin><edge_end>Pdb(name, lock Schema, table Partitioning)
Duplicate()<edge_begin><edge_end>Class Or Duplicate(name, abbrev, reps)
Duplicate()<edge_begin><edge_end>Class(descr, no D Bio, publish, vmaj, vmin, pubspec, pubname, whereclause, a Name, archiv Index)
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Ltype()
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Struct Share()
Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)<edge_begin><edge_end>Struct Override(altname)
Primkey()<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Index(kuko, name, unique)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Index Ref(is Primkey, clustered)<edge_begin><edge_end>Index(kuko, name, unique)
Index Ref(is Primkey, clustered)<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Pdb(name, lock Schema, table Partitioning)<edge_begin><edge_end>Index Ref(is Primkey, clustered)
Struct Share()<edge_begin><edge_end>Attribute(name, descr, foreign, exttable, extattr, immutable, null OK, kuko, kukoindex, kukoonly, shared, is Public, optional, archiv, a Name, sybident, is In DB)
Petri Net(name)<edge_begin><edge_end>Transition(name)
Petri Net(name)<edge_begin><edge_end>Arc PT(inscription)
Petri Net(name)<edge_begin><edge_end>Arc TP(inscription)
Petri Net(name)<edge_begin><edge_end>Place(name, token)
Transition(name)<edge_begin><edge_end>Arc PT(inscription)
Transition(name)<edge_begin><edge_end>Arc TP(inscription)
Arc PT(inscription)<edge_begin><edge_end>Transition(name)
Arc PT(inscription)<edge_begin><edge_end>Place(name, token)
Arc TP(inscription)<edge_begin><edge_end>Place(name, token)
Arc TP(inscription)<edge_begin><edge_end>Transition(name)
Place(name, token)<edge_begin><edge_end>Arc TP(inscription)
Place(name, token)<edge_begin><edge_end>Arc PT(inscription)
State(is Simple, is Composite)<edge_begin><edge_end>Vertex()
State(is Simple, is Composite)<edge_begin><edge_end>Named Element(name, id)
State(is Simple, is Composite)<edge_begin><edge_end>Region()
State(is Simple, is Composite)<edge_begin><edge_end>Trigger()
State(is Simple, is Composite)<edge_begin><edge_end>Behaviour(body, language)
Region()<edge_begin><edge_end>Named Element(name, id)
Region()<edge_begin><edge_end>State(is Simple, is Composite)
Region()<edge_begin><edge_end>Vertex()
Region()<edge_begin><edge_end>State Machine()
Region()<edge_begin><edge_end>Transition(kind)
State Machine()<edge_begin><edge_end>Named Element(name, id)
State Machine()<edge_begin><edge_end>Region()
Vertex()<edge_begin><edge_end>Named Element(name, id)
Vertex()<edge_begin><edge_end>Transition(kind)
Transition(kind)<edge_begin><edge_end>Named Element(name, id)
Transition(kind)<edge_begin><edge_end>Vertex()
Transition(kind)<edge_begin><edge_end>Trigger()
Transition(kind)<edge_begin><edge_end>Constraint()
Transition(kind)<edge_begin><edge_end>Behaviour(body, language)
Final State()<edge_begin><edge_end>State(is Simple, is Composite)
Constraint()<edge_begin><edge_end>Opaque Expression(body)
Trigger()<edge_begin><edge_end>Named Element(name, id)
Trigger()<edge_begin><edge_end>Event(body)
State Model()<edge_begin><edge_end>Named Element(name, id)
Pseudo State(kind)<edge_begin><edge_end>Vertex()
D Table(header Column Width)<edge_begin><edge_end>Line Container()
D Table(header Column Width)<edge_begin><edge_end>D Column(label, visible, width)
D Table(header Column Width)<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
D Table Element()<edge_begin><edge_end>Table Mapping(semantic Elements)
Line Container()<edge_begin><edge_end>D Line(label, visible, collapsed)
D Line(label, visible, collapsed)<edge_begin><edge_end>Line Container()
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element()
D Line(label, visible, collapsed)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
D Line(label, visible, collapsed)<edge_begin><edge_end>D Cell(label)
D Line(label, visible, collapsed)<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style, foreground Color, background Color)
D Cell(label)<edge_begin><edge_end>D Table Element()
D Cell(label)<edge_begin><edge_end>D Line(label, visible, collapsed)
D Cell(label)<edge_begin><edge_end>D Column(label, visible, width)
D Cell(label)<edge_begin><edge_end>D Cell Style()
D Cell(label)<edge_begin><edge_end>Cell Updater(can Edit)
D Cell(label)<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
D Cell Style()<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style, foreground Color, background Color)
D Cell Style()<edge_begin><edge_end>Table Mapping(semantic Elements)
D Column(label, visible, width)<edge_begin><edge_end>D Table Element()
D Column(label, visible, width)<edge_begin><edge_end>D Cell(label)
D Column(label, visible, width)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
D Column(label, visible, width)<edge_begin><edge_end>D Table(header Column Width)
D Column(label, visible, width)<edge_begin><edge_end>D Table Element Style(label Size, label Format, default Foreground Style, default Background Style, foreground Color, background Color)
D Target Column()<edge_begin><edge_end>D Column(label, visible, width)
D Feature Column(feature Name)<edge_begin><edge_end>D Column(label, visible, width)
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Table Description(precondition Expression, domain Class, initial Header Column Width)<edge_begin><edge_end>Create Line Tool()
Edition Table Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Edition Table Description()<edge_begin><edge_end>Feature Column Mapping(feature Name, label Expression, feature Parent Expression)
Cross Table Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Cross Table Description()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Cross Table Description()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Cross Table Description()<edge_begin><edge_end>Create Cross Column Tool()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Table Mapping(semantic Elements)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Style Updater()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Create Line Tool()
Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)<edge_begin><edge_end>Delete Line Tool()
Column Mapping(header Label Expression, initial Width)<edge_begin><edge_end>Table Mapping(semantic Elements)
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Style Updater()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Create Column Tool()
Element Column Mapping(domain Class, semantic Candidates Expression)<edge_begin><edge_end>Delete Column Tool()
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Cell Updater(can Edit)
Feature Column Mapping(feature Name, label Expression, feature Parent Expression)<edge_begin><edge_end>Style Updater()
Cell Updater(can Edit)<edge_begin><edge_end>Label Edit Tool()
Style Updater()<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
Style Updater()<edge_begin><edge_end>Foreground Conditional Style(predicate Expression)
Style Updater()<edge_begin><edge_end>Background Style Description()
Style Updater()<edge_begin><edge_end>Background Conditional Style(predicate Expression)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Table Mapping(semantic Elements)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Cell Updater(can Edit)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Style Updater()
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Column Mapping(header Label Expression, initial Width)
Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)<edge_begin><edge_end>Create Cell Tool()
Table Tool()<edge_begin><edge_end>Table Variable(documentation)
Label Edit Tool()<edge_begin><edge_end>Table Tool()
Create Tool()<edge_begin><edge_end>Table Tool()
Create Column Tool()<edge_begin><edge_end>Create Tool()
Create Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Create Cross Column Tool()<edge_begin><edge_end>Create Tool()
Create Cross Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Create Line Tool()<edge_begin><edge_end>Create Tool()
Create Line Tool()<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Create Cell Tool()<edge_begin><edge_end>Table Tool()
Create Cell Tool()<edge_begin><edge_end>Intersection Mapping(label Expression, use Domain Class, column Finder Expression, line Finder Expression, semantic Candidates Expression, domain Class, precondition Expression)
Delete Tool()<edge_begin><edge_end>Table Tool()
Delete Column Tool()<edge_begin><edge_end>Delete Tool()
Delete Column Tool()<edge_begin><edge_end>Element Column Mapping(domain Class, semantic Candidates Expression)
Delete Line Tool()<edge_begin><edge_end>Delete Tool()
Delete Line Tool()<edge_begin><edge_end>Line Mapping(domain Class, semantic Candidates Expression, header Label Expression)
Foreground Conditional Style(predicate Expression)<edge_begin><edge_end>Foreground Style Description(label Size, label Format)
Background Conditional Style(predicate Expression)<edge_begin><edge_end>Background Style Description()
Table Creation Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Table Navigation Description()<edge_begin><edge_end>Table Description(precondition Expression, domain Class, initial Header Column Width)
Package()<edge_begin><edge_end>Named Element(name)
Package()<edge_begin><edge_end>Packable Element()
Packable Element()<edge_begin><edge_end>Named Element(name)
Has Inheritance()<edge_begin><edge_end>Packable Element()
Has Inheritance()<edge_begin><edge_end>Generalization()
Generalization()<edge_begin><edge_end>Packable Element()
Generalization()<edge_begin><edge_end>Has Inheritance()
Comment()<edge_begin><edge_end>Packable Element()
Use Case()<edge_begin><edge_end>Has Inheritance()
Use Case()<edge_begin><edge_end>Include()
Use Case()<edge_begin><edge_end>Extend()
Actor()<edge_begin><edge_end>Has Inheritance()
Relation()<edge_begin><edge_end>Packable Element()
Directed Association(target Name)<edge_begin><edge_end>Relation()
Association(target Name, source Name)<edge_begin><edge_end>Relation()
Include()<edge_begin><edge_end>Packable Element()
Include()<edge_begin><edge_end>Use Case()
Extend()<edge_begin><edge_end>Packable Element()
Extend()<edge_begin><edge_end>Use Case()
Transformation Actor()<edge_begin><edge_end>Actor()
Requirement Use Case()<edge_begin><edge_end>Use Case()
Constraint Comment()<edge_begin><edge_end>Comment()
Located Element(location, comments Before, comments After)<edge_begin><edge_end>String()
SQL Root()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
SQL Root()<edge_begin><edge_end>Statement()
Statement()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
View Statement(name)<edge_begin><edge_end>Statement()
View Statement(name)<edge_begin><edge_end>String()
View Statement(name)<edge_begin><edge_end>Column Exp(alias)
View Statement(name)<edge_begin><edge_end>Query Stmt()
Insert Stmt(table Name)<edge_begin><edge_end>Statement()
Insert Stmt(table Name)<edge_begin><edge_end>String()
Insert Stmt(table Name)<edge_begin><edge_end>Expression()
Query Stmt()<edge_begin><edge_end>Statement()
Query Stmt()<edge_begin><edge_end>Table(alias)
Query Stmt()<edge_begin><edge_end>Where Clause()
Query Stmt Col()<edge_begin><edge_end>Query Stmt()
Query Stmt Col()<edge_begin><edge_end>Expression()
Query Stmt All Col()<edge_begin><edge_end>Query Stmt()
Named Element(name)<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Named Element(name)<edge_begin><edge_end>String()
Table(alias)<edge_begin><edge_end>Named Element(name)
Table(alias)<edge_begin><edge_end>String()
Where Clause()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Where Clause()<edge_begin><edge_end>Expression()
Expression()<edge_begin><edge_end>Located Element(location, comments Before, comments After)
Binary Exp(op Name)<edge_begin><edge_end>Expression()
Binary Exp(op Name)<edge_begin><edge_end>String()
Or Exp()<edge_begin><edge_end>Binary Exp(op Name)
And Exp()<edge_begin><edge_end>Binary Exp(op Name)
Not Exp(op Name)<edge_begin><edge_end>Expression()
Not Exp(op Name)<edge_begin><edge_end>String()
Like Exp(column Name)<edge_begin><edge_end>Expression()
Like Exp(column Name)<edge_begin><edge_end>String()
Like Exp(column Name)<edge_begin><edge_end>String Value Exp(a Value)
In Exp(column Name)<edge_begin><edge_end>Expression()
In Exp(column Name)<edge_begin><edge_end>String()
In Exp(column Name)<edge_begin><edge_end>Predicate()
Operation Exp(opt Name)<edge_begin><edge_end>Binary Exp(op Name)
Operation Exp(opt Name)<edge_begin><edge_end>String()
Predicate()<edge_begin><edge_end>Expression()
Query Predicate()<edge_begin><edge_end>Expression()
Query Predicate()<edge_begin><edge_end>Query Stmt()
Column Exp(alias)<edge_begin><edge_end>Predicate()
Column Exp(alias)<edge_begin><edge_end>Named Element(name)
Column Exp(alias)<edge_begin><edge_end>String()
Column Exp(alias)<edge_begin><edge_end>Data Type()
Value Exp()<edge_begin><edge_end>Predicate()
Value Exp()<edge_begin><edge_end>Data Type()
String Value Exp(a Value)<edge_begin><edge_end>Value Exp()
String Value Exp(a Value)<edge_begin><edge_end>String()
Integer Value Exp(a Value)<edge_begin><edge_end>Value Exp()
Integer Value Exp(a Value)<edge_begin><edge_end>Integer()
List Exp()<edge_begin><edge_end>Predicate()
List Exp()<edge_begin><edge_end>Expression()
Function Exp(name)<edge_begin><edge_end>Predicate()
Function Exp(name)<edge_begin><edge_end>Expression()
Function Exp(name)<edge_begin><edge_end>String()
Data Type()<edge_begin><edge_end>Named Element(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Named(name)
Publication Process(min Time, max Time)<edge_begin><edge_end>Phase(name)
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Researcher(name, for Name)<edge_begin><edge_end>Position(description)
Researcher(name, for Name)<edge_begin><edge_end>Collaboration(ratio)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Progress(percent)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Paper Keyword(weight)
Paper()<edge_begin><edge_end>Paper()
Paper()<edge_begin><edge_end>State(id, kind, name)
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Progress(percent)<edge_begin><edge_end>Labelled(lname)
Progress(percent)<edge_begin><edge_end>Publication Process(min Time, max Time)
Progress(percent)<edge_begin><edge_end>Paper()
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Knowledge Manager()
Publication Structure()<edge_begin><edge_end>Publication Status(label)
Publication System()<edge_begin><edge_end>Named(name)
Publication System()<edge_begin><edge_end>Publication Process(min Time, max Time)
Publication System()<edge_begin><edge_end>Publication Structure()
Publication System()<edge_begin><edge_end>Position(description)
Position(description)<edge_begin><edge_end>Named(name)
Position(description)<edge_begin><edge_end>Position(description)
Keyword(word)<edge_begin><edge_end>Named(name)
Keyword(word)<edge_begin><edge_end>Paper()
Knowledge Manager()<edge_begin><edge_end>Named(name)
Knowledge Manager()<edge_begin><edge_end>Keyword(word)
Paper Keyword(weight)<edge_begin><edge_end>Keyword(word)
Collaboration(ratio)<edge_begin><edge_end>Paper()
Publication Status(label)<edge_begin><edge_end>State Machine Variable()
Publication Status(label)<edge_begin><edge_end>State(id, kind, name)
Transition(guard Label, guard Expression)<edge_begin><edge_end>State Machine Object(label)
Transition(guard Label, guard Expression)<edge_begin><edge_end>Action(action Label, action Statement)
Transition(guard Label, guard Expression)<edge_begin><edge_end>State(id, kind, name)
State(id, kind, name)<edge_begin><edge_end>State Machine Object(label)
State(id, kind, name)<edge_begin><edge_end>Transition(guard Label, guard Expression)
State(id, kind, name)<edge_begin><edge_end>Action(action Label, action Statement)
Action(action Label, action Statement)<edge_begin><edge_end>Action(action Label, action Statement)
Stakeholder()<edge_begin><edge_end>Urml Model Element()
Stakeholder()<edge_begin><edge_end>Goal(soft, type)
Goal(soft, type)<edge_begin><edge_end>Urml Model Element()
Goal(soft, type)<edge_begin><edge_end>Stakeholder()
Goal(soft, type)<edge_begin><edge_end>Abstract Feature()
Goal(soft, type)<edge_begin><edge_end>Application Domain Use Case()
Goal(soft, type)<edge_begin><edge_end>Goal(soft, type)
Goal(soft, type)<edge_begin><edge_end>Goal Reference(weight)
Goal Reference(weight)<edge_begin><edge_end>Urml Model Element()
Goal Reference(weight)<edge_begin><edge_end>Goal(soft, type)
Requirement(terminal)<edge_begin><edge_end>Mitigation()
Requirement(terminal)<edge_begin><edge_end>Service()
Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Functional Requirement()<edge_begin><edge_end>Abstract Feature()
Functional Requirement()<edge_begin><edge_end>Functional Requirement()
Non Functional Requirement()<edge_begin><edge_end>Requirement(terminal)
Non Functional Requirement()<edge_begin><edge_end>Abstract Feature()
Non Functional Requirement()<edge_begin><edge_end>Non Functional Requirement()
Use Case()<edge_begin><edge_end>Urml Model Element()
Use Case()<edge_begin><edge_end>Actor()
Application Domain Use Case()<edge_begin><edge_end>Use Case()
Application Domain Use Case()<edge_begin><edge_end>Goal(soft, type)
Solution Domain Use Case()<edge_begin><edge_end>Use Case()
Solution Domain Use Case()<edge_begin><edge_end>Abstract Feature()
Actor()<edge_begin><edge_end>Asset()
Actor()<edge_begin><edge_end>Use Case()
Service()<edge_begin><edge_end>Asset()
Service()<edge_begin><edge_end>Requirement(terminal)
Service()<edge_begin><edge_end>Service()
Asset()<edge_begin><edge_end>Urml Model Element()
Asset()<edge_begin><edge_end>Danger()
Danger()<edge_begin><edge_end>Urml Model Element()
Danger()<edge_begin><edge_end>Asset()
Danger()<edge_begin><edge_end>Mitigation()
Mitigation()<edge_begin><edge_end>Urml Model Element()
Mitigation()<edge_begin><edge_end>Danger()
Procedural Mitigation(mitigation Procedure)<edge_begin><edge_end>Mitigation()
Abstract Feature()<edge_begin><edge_end>Urml Model Element()
Abstract Feature()<edge_begin><edge_end>Goal(soft, type)
Abstract Feature()<edge_begin><edge_end>Functional Requirement()
Abstract Feature()<edge_begin><edge_end>Non Functional Requirement()
Abstract Feature()<edge_begin><edge_end>Solution Domain Use Case()
Abstract Feature()<edge_begin><edge_end>Abstract Feature()
Abstract Feature()<edge_begin><edge_end>Variation Point(multiplicity)
Abstract Feature()<edge_begin><edge_end>Variation Point Instance()
Feature()<edge_begin><edge_end>Abstract Feature()
Feature()<edge_begin><edge_end>Product()
Variation Point(multiplicity)<edge_begin><edge_end>Abstract Feature()
Variation Point(multiplicity)<edge_begin><edge_end>Variation Point Instance()
Variation Point Instance()<edge_begin><edge_end>Urml Model Element()
Variation Point Instance()<edge_begin><edge_end>Variation Point(multiplicity)
Variation Point Instance()<edge_begin><edge_end>Product()
Variation Point Instance()<edge_begin><edge_end>Abstract Feature()
Product()<edge_begin><edge_end>Urml Model Element()
Product()<edge_begin><edge_end>Variation Point Instance()
Product()<edge_begin><edge_end>Feature()
State(label)<edge_begin><edge_end>Transition()
State(label)<edge_begin><edge_end>Event Token()
State(label)<edge_begin><edge_end>Time Constraint(type)
Transition()<edge_begin><edge_end>State(label)
Transition()<edge_begin><edge_end>Guard()
Final State()<edge_begin><edge_end>State(label)
Init State()<edge_begin><edge_end>State(label)
Trap State()<edge_begin><edge_end>State(label)
State Machine(priority, context)<edge_begin><edge_end>State(label)
Internal Execution Model(context)<edge_begin><edge_end>State Machine(priority, context)
Internal Execution Model(context)<edge_begin><edge_end>Event Token()
Event Token()<edge_begin><edge_end>State(label)
Time Constraint(type)<edge_begin><edge_end>Time Constraint Specification(id, expected Length, start Timestamp, stop Timestamp)
State Machine()<edge_begin><edge_end>Composite State()
State Machine()<edge_begin><edge_end>Transition()
State Machine()<edge_begin><edge_end>Event(name)
State Machine()<edge_begin><edge_end>Variable(name)
State(name, is Active)<edge_begin><edge_end>Composite State()
State(name, is Active)<edge_begin><edge_end>Operation()
Composite State()<edge_begin><edge_end>State(name, is Active)
Composite State()<edge_begin><edge_end>Initial State()
Initial State()<edge_begin><edge_end>State(name, is Active)
Transition()<edge_begin><edge_end>State(name, is Active)
Transition()<edge_begin><edge_end>Event(name)
Transition()<edge_begin><edge_end>Expression(operator, name)
Expression(operator, name)<edge_begin><edge_end>Expression Element()
Data()<edge_begin><edge_end>Expression Element()
Boolean Data(value)<edge_begin><edge_end>Data()
Integer Data(value)<edge_begin><edge_end>Data()
Variable(name)<edge_begin><edge_end>Data()
Boolean Variable()<edge_begin><edge_end>Variable(name)
Integer Variable()<edge_begin><edge_end>Variable(name)
Operation()<edge_begin><edge_end>Assignment( name)
Assignment( name)<edge_begin><edge_end>Expression Element()
Assignment( name)<edge_begin><edge_end>Variable(name)
Variable Reference( name)<edge_begin><edge_end>Expression Element()
Variable Reference( name)<edge_begin><edge_end>Variable(name)
Database Alias(alias, id)<edge_begin><edge_end>Non Empty No Spaces()
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Non Empty No Spaces()
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Java Name()
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Server Address()
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Sql Properties()
Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)<edge_begin><edge_end>Property(key, value)
Database Properties List Type()<edge_begin><edge_end>Database Properties(id, driver Class Name, dialect, server URL, d BMS, port, database Name, username, password, namespace, persistence Unit Name)
Database Properties List Type()<edge_begin><edge_end>Database Alias(alias, id)
Document Root(mixed)<edge_begin><edge_end>Database Properties List Type()
Document Root(mixed)<edge_begin><edge_end>Sql Properties()
Property(key, value)<edge_begin><edge_end>Non Empty No Spaces()
Specific DBMS Properties(d BMS)<edge_begin><edge_end>Sql Query(query String)
Specific DBMS Properties(d BMS)<edge_begin><edge_end>Sql File(file Path)
Sql(id, hql Query)<edge_begin><edge_end>Non Empty No Spaces()
Sql(id, hql Query)<edge_begin><edge_end>Sql Parameter(index, name, type)
Sql File(file Path)<edge_begin><edge_end>Sql(id, hql Query)
Sql Group(id, description)<edge_begin><edge_end>Non Empty No Spaces()
Sql Group(id, description)<edge_begin><edge_end>Sql Query(query String)
Sql Group(id, description)<edge_begin><edge_end>Sql File(file Path)
Sql Group(id, description)<edge_begin><edge_end>Specific DBMS Properties(d BMS)
Sql Properties()<edge_begin><edge_end>Sql Group(id, description)
Sql Query(query String)<edge_begin><edge_end>Sql(id, hql Query)
Model(attrs)<edge_begin><edge_end>Database(url, port, db Name, name)
Model(attrs)<edge_begin><edge_end>Where Entry()
Expression Where Entry(name)<edge_begin><edge_end>Where Entry()
Single Expression Where Entry(operator)<edge_begin><edge_end>Expression Where Entry(name)
Single Expression Where Entry(operator)<edge_begin><edge_end>Expression()
Replacable Value(value)<edge_begin><edge_end>Expression()
Double Expression(value)<edge_begin><edge_end>Expression()
Long Expression(value)<edge_begin><edge_end>Expression()
String Expression(value)<edge_begin><edge_end>Expression()
Null Expression(value)<edge_begin><edge_end>Expression()
Date Expression(value)<edge_begin><edge_end>Expression()
Boolean Expression(true)<edge_begin><edge_end>Expression()
Multi Expression Where Entry(operator)<edge_begin><edge_end>Expression Where Entry(name)
Multi Expression Where Entry(operator)<edge_begin><edge_end>Array Expression()
Double Array Expression(values)<edge_begin><edge_end>Array Expression()
Long Array Expression(values)<edge_begin><edge_end>Array Expression()
String Array Expression(values)<edge_begin><edge_end>Array Expression()
Null Array Expression(values)<edge_begin><edge_end>Array Expression()
Date Array Expression(values)<edge_begin><edge_end>Array Expression()
Boolean Array Expression(values)<edge_begin><edge_end>Array Expression()
Or Where Entry()<edge_begin><edge_end>Where Entry()
And Where Entry()<edge_begin><edge_end>Where Entry()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Person(email)<edge_begin><edge_end>Document()
Person(email)<edge_begin><edge_end>String()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Conference Member()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Member()<edge_begin><edge_end>Person(email)
Conference Member()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(paper ID, title)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Author()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(paper ID, title)
User()<edge_begin><edge_end>Person(email)
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Conference(date, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Thing(id)<edge_begin><edge_end>Named Element(name)
Thing(id)<edge_begin><edge_end>Related To(since)
Related To(since)<edge_begin><edge_end>Named Element(name)
Related To(since)<edge_begin><edge_end>Thing(id)
Variable(type, value)<edge_begin><edge_end>Thing(id)
Transition(expression)<edge_begin><edge_end>Named Element(name)
Transition(expression)<edge_begin><edge_end>State(label, type, activity)
State(label, type, activity)<edge_begin><edge_end>Named Element(name)
State(label, type, activity)<edge_begin><edge_end>State(label, type, activity)
State(label, type, activity)<edge_begin><edge_end>Variable(type, value)
State(label, type, activity)<edge_begin><edge_end>Transition(expression)
Animations Type1(group, presentation Animation Elements Group)<edge_begin><edge_end>Animation Group Type(presentation Animation Elements Group)
Dim Type(color, shape Id)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Event Listener Type(action, actuate, direction, effect, event Name, href, show, speed, start Scale, type, verb)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Hide Shape Type(delay, direction, effect, path Id, shape Id, speed, start Scale)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Hide Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Notes Type(shape, page Layout Name, style Name, use Date Time Name, use Footer Name, use Header Name)<edge_begin><edge_end>Style Name Type()
Settings Type(animations, endless, force Manual, full Screen, mouse As Pen, mouse Visible, pause, show1, show End Of Presentation Slide, show Logo, start Page, start With Navigator, stay On Top, transition On Click)<edge_begin><edge_end>Show Type(name, pages)
Show Shape Type(delay, direction, effect, path Id, shape Id, speed, start Scale)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Show Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Animation Group Type(presentation Animation Elements Group)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Animations Type1(group, presentation Animation Elements Group)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Date Time Type()
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Date Time Decl Type(mixed, data Style Name, name, source)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Dim Type(color, shape Id)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Event Listener Type(action, actuate, direction, effect, event Name, href, show, speed, start Scale, type, verb)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Footer Type()
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Footer Decl Type(mixed, name)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Header Type()
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Header Decl Type(mixed, name)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Hide Shape Type(delay, direction, effect, path Id, shape Id, speed, start Scale)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Hide Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Notes Type(shape, page Layout Name, style Name, use Date Time Name, use Footer Name, use Header Name)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Placeholder Type(height, object, width, x, y)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Play Type(shape Id, speed)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Settings Type(animations, endless, force Manual, full Screen, mouse As Pen, mouse Visible, pause, show1, show End Of Presentation Slide, show Logo, start Page, start With Navigator, stay On Top, transition On Click)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Show Type(name, pages)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Show Shape Type(delay, direction, effect, path Id, shape Id, speed, start Scale)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Show Text Type(delay, direction, effect, path Id, shape Id, speed, start Scale)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Sound Type(actuate, href, play Full, show, type)
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Presentation Page Layout Name Type()
Document Root(mixed, action, animations1, background Objects Visible, background Visible, class, class Names, delay, direction, display Date Time, display Footer, display Header, display Page Number, duration, effect, endless, force Manual, full Screen, group Id, master Element, mouse As Pen, mouse Visible, name, node Type, pages, path Id, pause, placeholder1, play Full, presentation Page Layout Name, preset Class, preset Id, preset Sub Type, show1, show End Of Presentation Slide, show Logo, source, speed, start Page, start Scale, start With Navigator, stay On Top, style Name, transition On Click, transition Speed, transition Style, transition Type, use Date Time Name, use Footer Name, use Header Name, user Transformed, verb, visibility)<edge_begin><edge_end>Style Name Type()
Meta-Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Conference Member()
Reviewer()<edge_begin><edge_end>User()
Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Reviewer()<edge_begin><edge_end>Reviewer()
Reviewer()<edge_begin><edge_end>Thing()
Reviewer()<edge_begin><edge_end>Administrator()
Reviewer()<edge_begin><edge_end>Bid()
Reviewer()<edge_begin><edge_end>Paper(paper ID, title)
Reviewer()<edge_begin><edge_end>Review()
Reviewer()<edge_begin><edge_end>External Reviewer()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Thing()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Inforamtion()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Document()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Account()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Event(starts on, ends on)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Activity()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Conference document()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>String()
Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)<edge_begin><edge_end>Organization()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers)
Bid()<edge_begin><edge_end>Reviewer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on)
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Conference Member()
Conference Chair()<edge_begin><edge_end>Chairman()
Conference Member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Conference Member()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Program Committee Member(max Papers)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers)<edge_begin><edge_end>Administrator()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
External Reviewer()<edge_begin><edge_end>Reviewer()
Chairman()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(paper ID, title)<edge_begin><edge_end>Document()
Paper(paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(paper ID, title)<edge_begin><edge_end>Co-author()
Paper(paper ID, title)<edge_begin><edge_end>Bid()
Paper(paper ID, title)<edge_begin><edge_end>Decision()
Paper(paper ID, title)<edge_begin><edge_end>Reviewer()
Paper(paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(paper ID, title)<edge_begin><edge_end>String()
Paper(paper ID, title)<edge_begin><edge_end>Author()
Paper(paper ID, title)<edge_begin><edge_end>Administrator()
Paper(paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Author()<edge_begin><edge_end>Paper(paper ID, title)
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(paper ID, title)
Paper Abstract()<edge_begin><edge_end>Paper(paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Administrator()<edge_begin><edge_end>Event(starts on, ends on)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer()
Administrator()<edge_begin><edge_end>Paper(paper ID, title)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers)
Meta-Review()<edge_begin><edge_end>Review()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on)
Event(starts on, ends on)<edge_begin><edge_end>Thing()
Event(starts on, ends on)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on)<edge_begin><edge_end>Administrator()
Event(starts on, ends on)<edge_begin><edge_end>String()
Account()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
User()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Symposium()<edge_begin><edge_end>Event(starts on, ends on)
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Invited Paper()<edge_begin><edge_end>Paper(paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on)
URL()<edge_begin><edge_end>Thing()
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity()
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on)
Rejection Email()<edge_begin><edge_end>Email()
Submission()<edge_begin><edge_end>Document()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity()
Activity()<edge_begin><edge_end>Thing()
Activity()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity()
Registration()<edge_begin><edge_end>Activity()
Full Paper()<edge_begin><edge_end>Paper(paper ID, title)
Research Topic()<edge_begin><edge_end>Event Setup()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Committee member()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Integer()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Track()<edge_begin><edge_end>Conference part()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Organizer()<edge_begin><edge_end>Thing()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>paper(full paper size)
paper(full paper size)<edge_begin><edge_end>article()
paper(full paper size)<edge_begin><edge_end>Integer()
paper(full paper size)<edge_begin><edge_end>human(e-mail, last name, first name)
Rejected Paper()<edge_begin><edge_end>paper(full paper size)
Undecided Paper()<edge_begin><edge_end>paper(full paper size)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>activity()
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
article()<edge_begin><edge_end>document()
article()<edge_begin><edge_end>author()
article()<edge_begin><edge_end>reviewer()
article()<edge_begin><edge_end>abstract()
article()<edge_begin><edge_end>activity()
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
conference()<edge_begin><edge_end>Thing()
conference()<edge_begin><edge_end>event(has startdate, has enddate)
conference()<edge_begin><edge_end>program()
conference()<edge_begin><edge_end>phase of conference()
bidding of reviewer()<edge_begin><edge_end>activity()
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>activity()
activity()<edge_begin><edge_end>human(e-mail, last name, first name)
activity()<edge_begin><edge_end>intensity()
activity()<edge_begin><edge_end>article()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>activity()
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>activity()
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>activity()
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>activity()
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>activity()
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>activity()
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>activity()
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>activity()
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social event()
Social event()<edge_begin><edge_end>Event(starts on, ends on)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
University()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Conference part()
Working event()<edge_begin><edge_end>Event(starts on, ends on)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member()<edge_begin><edge_end>Participant(early Registration)
Participant(early Registration)<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Student()<edge_begin><edge_end>Participant(early Registration)
Science Worker()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Assistant()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Volunteer()<edge_begin><edge_end>Person(has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, email)
Regular()<edge_begin><edge_end>Participant(early Registration)
author()<edge_begin><edge_end>person()
author()<edge_begin><edge_end>article()
pc meeting()<edge_begin><edge_end>event(has startdate, has enddate)
event(has startdate, has enddate)<edge_begin><edge_end>date Time()
session()<edge_begin><edge_end>event(has startdate, has enddate)
chair()<edge_begin><edge_end>person()
chair()<edge_begin><edge_end>reviewer()
chair()<edge_begin><edge_end>program()
abstract()<edge_begin><edge_end>document()
abstract()<edge_begin><edge_end>article()
review()<edge_begin><edge_end>document()
review()<edge_begin><edge_end>article()
review()<edge_begin><edge_end>classification()
review()<edge_begin><edge_end>activity()
review()<edge_begin><edge_end>reviewer()
participant()<edge_begin><edge_end>person()
participant()<edge_begin><edge_end>conference()
program()<edge_begin><edge_end>chair()
program()<edge_begin><edge_end>session()
reviewer()<edge_begin><edge_end>person()
reviewer()<edge_begin><edge_end>review()
State Machine(name, package)<edge_begin><edge_end>Event(name)
State Machine(name, package)<edge_begin><edge_end>State(name)
State Machine(name, package)<edge_begin><edge_end>Document Field(name)
State Machine(name, package)<edge_begin><edge_end>Role(name)
State(name)<edge_begin><edge_end>Trans()
State(name)<edge_begin><edge_end>Field State(state)
State(name)<edge_begin><edge_end>Trans Set()
Trans()<edge_begin><edge_end>Event(name)
Trans()<edge_begin><edge_end>State(name)
Field State(state)<edge_begin><edge_end>Document Field(name)
Trans Set()<edge_begin><edge_end>Trans()
Trans Set()<edge_begin><edge_end>Role(name)
Petri Net()<edge_begin><edge_end>Element(name)
Petri Net()<edge_begin><edge_end>Arc(weight, name)
Element(name)<edge_begin><edge_end>String()
Place()<edge_begin><edge_end>Element(name)
Transition()<edge_begin><edge_end>Element(name)
Arc(weight, name)<edge_begin><edge_end>Integer()
Arc(weight, name)<edge_begin><edge_end>String()
Place To Transition()<edge_begin><edge_end>Arc(weight, name)
Place To Transition()<edge_begin><edge_end>Place()
Place To Transition()<edge_begin><edge_end>Transition()
Transition To Place()<edge_begin><edge_end>Arc(weight, name)
Transition To Place()<edge_begin><edge_end>Transition()
Transition To Place()<edge_begin><edge_end>Place()
SQL Script()<edge_begin><edge_end>Statement()
Direct SQL Statement()<edge_begin><edge_end>Statement()
Separator()<edge_begin><edge_end>Statement()
Comment(value)<edge_begin><edge_end>Separator()
Simple Comment()<edge_begin><edge_end>Comment(value)
Bracketed Comment()<edge_begin><edge_end>Comment(value)
Date Type()<edge_begin><edge_end>Datetime Type()
Time Type(precision, with Time Zone)<edge_begin><edge_end>Datetime Type()
Time Type(precision, with Time Zone)<edge_begin><edge_end>Unsigned Integer()
Timestamp Type(precision, with Time Zone)<edge_begin><edge_end>Datetime Type()
Timestamp Type(precision, with Time Zone)<edge_begin><edge_end>Unsigned Integer()
General Literal()<edge_begin><edge_end>Literal()
Character String Literal()<edge_begin><edge_end>National Character String Literal(values)
Character String Literal()<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
National Character String Literal(values)<edge_begin><edge_end>General Literal()
National Character String Literal(values)<edge_begin><edge_end>Separator()
Datetime Literal()<edge_begin><edge_end>General Literal()
Boolean Literal(value)<edge_begin><edge_end>General Literal()
Date Literal(value)<edge_begin><edge_end>Datetime Literal()
Date Literal(value)<edge_begin><edge_end>Date Type()
Time Literal(value)<edge_begin><edge_end>Datetime Literal()
Time Literal(value)<edge_begin><edge_end>Time Type(precision, with Time Zone)
Timestamp Literal(value)<edge_begin><edge_end>Datetime Literal()
Timestamp Literal(value)<edge_begin><edge_end>Timestamp Type(precision, with Time Zone)
Exact Numeric Literal(value)<edge_begin><edge_end>Numeric Literal()
Approximate Numeric Literal(value)<edge_begin><edge_end>Numeric Literal()
Numeric Literal()<edge_begin><edge_end>Literal()
Predefined Type()<edge_begin><edge_end>Data Type()
Character String Type(kind, length)<edge_begin><edge_end>Predefined Type()
Character String Type(kind, length)<edge_begin><edge_end>Unsigned Integer()
Character String Type(kind, length)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
National Character String Type(kind, length)<edge_begin><edge_end>Predefined Type()
National Character String Type(kind, length)<edge_begin><edge_end>Unsigned Integer()
National Character String Type(kind, length)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Binary Large Object String Type(kind)<edge_begin><edge_end>Predefined Type()
Binary Large Object String Type(kind)<edge_begin><edge_end>Large Object Length(value, multiplier, units)
Numeric Type()<edge_begin><edge_end>Predefined Type()
Boolean Type()<edge_begin><edge_end>Predefined Type()
Datetime Type()<edge_begin><edge_end>Predefined Type()
Exact Numeric Type(kind, precision, scale)<edge_begin><edge_end>Numeric Type()
Exact Numeric Type(kind, precision, scale)<edge_begin><edge_end>Unsigned Integer()
Approximate Numeric Type(kind, precision)<edge_begin><edge_end>Numeric Type()
Approximate Numeric Type(kind, precision)<edge_begin><edge_end>Unsigned Integer()
Large Object Length(value, multiplier, units)<edge_begin><edge_end>Unsigned Integer()
Datetime Value Function(kind, precision)<edge_begin><edge_end>Unsigned Integer()
Null Specification()<edge_begin><edge_end>Implicitly Typed Value Specification()
Table Definition(label, scope)<edge_begin><edge_end>SQL Schema Definition Statement()
Table Definition(label, scope)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Table Definition(label, scope)<edge_begin><edge_end>Table Contents Source()
Table Element List()<edge_begin><edge_end>Table Contents Source()
Table Element List()<edge_begin><edge_end>Table Element()
Table Element()<edge_begin><edge_end>Table Element List()
Column(name)<edge_begin><edge_end>Table Element()
Column(name)<edge_begin><edge_end>Data Type()
Column(name)<edge_begin><edge_end>Default Option()
Column(name)<edge_begin><edge_end>Column Constraint()
Column(name)<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Table Constraint()<edge_begin><edge_end>Table Element()
Table Constraint()<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Table Contents Source()<edge_begin><edge_end>Table Definition(label, scope)
Default Option()<edge_begin><edge_end>Column(name)
Column Constraint()<edge_begin><edge_end>Column(name)
Column Constraint()<edge_begin><edge_end>Schema Qualified Name(catalog Name, schema Name, name)
Not Null Column Constraint()<edge_begin><edge_end>Column Constraint()
Unique Column Constraint()<edge_begin><edge_end>Unique Constraint(kind)
Unique Column Constraint()<edge_begin><edge_end>Column Constraint()
Referential Column Constraint()<edge_begin><edge_end>Referential Constraint()
Referential Column Constraint()<edge_begin><edge_end>Column Constraint()
SQL Schema Statement()<edge_begin><edge_end>Direct SQL Statement()
SQL Schema Definition Statement()<edge_begin><edge_end>SQL Schema Statement()
Literal Default Option()<edge_begin><edge_end>Default Option()
Literal Default Option()<edge_begin><edge_end>Literal()
Datetime Value Function Default Option()<edge_begin><edge_end>Default Option()
Datetime Value Function Default Option()<edge_begin><edge_end>Datetime Value Function(kind, precision)
Implicitly Typed Value Specification Default Option()<edge_begin><edge_end>Default Option()
Implicitly Typed Value Specification Default Option()<edge_begin><edge_end>Implicitly Typed Value Specification()
Unique Table Constraint()<edge_begin><edge_end>Unique Constraint(kind)
Unique Table Constraint()<edge_begin><edge_end>Table Columns Constraint()
Referential Table Constraint()<edge_begin><edge_end>Referential Constraint()
Referential Table Constraint()<edge_begin><edge_end>Table Columns Constraint()
Referential Constraint()<edge_begin><edge_end>Column(name)
Referential Constraint()<edge_begin><edge_end>Table Reference(catalog Name, schema Name)
Table Reference(catalog Name, schema Name)<edge_begin><edge_end>Table Definition(label, scope)
Table Columns Constraint()<edge_begin><edge_end>Table Constraint()
Table Columns Constraint()<edge_begin><edge_end>Column(name)
Petri Net()<edge_begin><edge_end>Resource(name)
Petri Net()<edge_begin><edge_end>Place(name)
Petri Net()<edge_begin><edge_end>Transaction(name)
Place(name)<edge_begin><edge_end>Storage(count, capacity)
Storage(count, capacity)<edge_begin><edge_end>Resource(name)
Transaction(name)<edge_begin><edge_end>Assure Statement(count)
Transaction(name)<edge_begin><edge_end>Take Statement(count)
Transaction(name)<edge_begin><edge_end>Put Statement(count)
Assure Statement(count)<edge_begin><edge_end>Resource(name)
Assure Statement(count)<edge_begin><edge_end>Place(name)
Take Statement(count)<edge_begin><edge_end>Resource(name)
Take Statement(count)<edge_begin><edge_end>Place(name)
Put Statement(count)<edge_begin><edge_end>Resource(name)
Put Statement(count)<edge_begin><edge_end>Place(name)
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
Value Type()<edge_begin><edge_end>Data()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Number Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Error Value()<edge_begin><edge_end>Value Type()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Workbook()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Workbook()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Workbook()
Smart Tags Collection()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
Workbook()<edge_begin><edge_end>Smart Tags Collection()
Workbook()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Workbook()<edge_begin><edge_end>Custom Document Properties Collection()
Workbook()<edge_begin><edge_end>Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)
Workbook()<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Workbook()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Worksheet(name, protected, right To Left)<edge_begin><edge_end>String()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Boolean()
Worksheet(name, protected, right To Left)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Styled Element()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Column(auto Fit Width, width)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Row(auto Fit Height, height)
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Double()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Integer()
Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)<edge_begin><edge_end>Boolean()
Table Element(index)<edge_begin><edge_end>Styled Element()
Table Element(index)<edge_begin><edge_end>Integer()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Column(auto Fit Width, width)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row(auto Fit Height, height)<edge_begin><edge_end>Table(default Column Width, default Row Height, expanded Column Count, expanded Row Count, left Cell, top Cell, full Columns, full Rows)
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Smart Tags Collection()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Comment(author, show Always)
Comment(author, show Always)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Comment(author, show Always)<edge_begin><edge_end>Data()
Comment(author, show Always)<edge_begin><edge_end>String()
Comment(author, show Always)<edge_begin><edge_end>Boolean()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Data()<edge_begin><edge_end>Comment(author, show Always)
Data()<edge_begin><edge_end>Value Type()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Workbook()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Integer()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Boolean()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>Double()
Excel Workbook(selected Sheets, window Hidden, hide Horizontal Scroll Bar, hide Vertical Scroll Bar, hide Workbook Tabs, window Height, window Width, window Top X, window Top Y, active Sheet, active Chart, first Visible Sheet, hide Pivot Table Field List, protect Structure, protect Windows, display Ink Notes, embed Save Smart Tags, future Ver, tab Ratio, window Iconic, display Drawing Objects, create Backup, calculation, do Not Calculate Before Save, date1904, ref Mode R1C1, iteration, max Iterations, max Change, precision As Displayed, do Not Save Link Values, no Auto Recover, accept Labels In Formulas, uncalced)<edge_begin><edge_end>String()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Worksheet(name, protected, right To Left)
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Boolean()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>String()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Integer()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Page Setup()
Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)<edge_begin><edge_end>Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)
Page Setup()<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Page Setup()<edge_begin><edge_end>Layout(orientation, center Horizontal, center Vertical, start Page Number)
Page Setup()<edge_begin><edge_end>Header()
Page Setup()<edge_begin><edge_end>Footer()
Page Setup()<edge_begin><edge_end>Page Margins Info(left, right, top, bottom)
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>Page Setup()
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>Boolean()
Layout(orientation, center Horizontal, center Vertical, start Page Number)<edge_begin><edge_end>String()
Header Or Footer Elt(margin, data)<edge_begin><edge_end>Double()
Header Or Footer Elt(margin, data)<edge_begin><edge_end>String()
Header()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Header()<edge_begin><edge_end>Page Setup()
Footer()<edge_begin><edge_end>Header Or Footer Elt(margin, data)
Footer()<edge_begin><edge_end>Page Setup()
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Page Setup()
Page Margins Info(left, right, top, bottom)<edge_begin><edge_end>Double()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Worksheet Options Elt(fit To Page, do Not Display Col Headers, do Not Display Row Headers, gridline Color, name, excel Worksheet Type, intl Macro, unsynced, selected, code Name, display Page Break, transition Expression Evaluation, transition Formula Entry, zoom, page Break Zoom, show Page Break Zoom, default Row Height, default Column Width, standard Width, visible, left Column Visible, display Right To Left, gridline Color Index, display Formulas, do Not Display Gridlines, do Not Display Headings, do Not Display Outline, apply Automatic Outline Styles, no Summary Rows Below Detail, no Summary Columns Right Detail, do Not Display Zeros, active Row, active Column, filter On, range Selection, top Row Visible, top Row Bottom Pane, left Column Right Pane, active Pane, split Horizontal, split Vertical, freeze Panes, frozen No Split, tab Color Index, protect Contentst, protect Objects, protect Scenarios, enable Selection, allow Format Cells, allow Size Cols, allow Size Rows, allow Insert Cols, allow Insert Rows, allow Insert Hyperlinks, allow Delete Cols, allow Delete Rows, allow Sort, allow Filter, allow Use Pivot Tables)
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Integer()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>Boolean()
Print(fit Width, fit Height, left To Right, black And White, draft Quality, comments Layout, scale, print Errors, valid Printer Info, paper Size Index, horizontal Resolution, vertical Resolution, gridlines, number Of Copies, row Col Headings)<edge_begin><edge_end>String()
Contractual Element(name, title, target Description, dropped, drop Rationale, issues)<edge_begin><edge_end>When Condition()
Contractual Element(name, title, target Description, dropped, drop Rationale, issues)<edge_begin><edge_end>Requirement(exception Text, component Category, connections)
Contractual Element(name, title, target Description, dropped, drop Rationale, issues)<edge_begin><edge_end>External Document(doc Reference, doc Fragment)
Contractual Element(name, title, target Description, dropped, drop Rationale, issues)<edge_begin><edge_end>Goal()
Req Root(name, title, issues)<edge_begin><edge_end>External Document(doc Reference, doc Fragment)
Stakeholder Goals(component Category)<edge_begin><edge_end>Req Root(name, title, issues)
Stakeholder Goals(component Category)<edge_begin><edge_end>Global Constants(name)
Stakeholder Goals(component Category)<edge_begin><edge_end>Goal()
Req Document()<edge_begin><edge_end>Req Root(name, title, issues)
Requirement Set()<edge_begin><edge_end>Req Root(name, title, issues)
Requirement Set()<edge_begin><edge_end>Global Constants(name)
Requirement Set()<edge_begin><edge_end>Requirement(exception Text, component Category, connections)
Goal()<edge_begin><edge_end>Contractual Element(name, title, target Description, dropped, drop Rationale, issues)
Goal()<edge_begin><edge_end>Goal()
Requirement(exception Text, component Category, connections)<edge_begin><edge_end>Contractual Element(name, title, target Description, dropped, drop Rationale, issues)
Requirement(exception Text, component Category, connections)<edge_begin><edge_end>Req Predicate()
Requirement(exception Text, component Category, connections)<edge_begin><edge_end>Requirement(exception Text, component Category, connections)
Informal Predicate(description)<edge_begin><edge_end>Req Predicate()
Predicate()<edge_begin><edge_end>Req Predicate()
Value Predicate()<edge_begin><edge_end>Req Predicate()
Value Predicate()<edge_begin><edge_end>Desired Value(upto)
System Requirement Set()<edge_begin><edge_end>Requirement Set()
System Requirement Set()<edge_begin><edge_end>Include Global Requirement(component Category, self)
Global Requirement Set()<edge_begin><edge_end>Requirement Set()
Meta-Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Bid()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Organizing Committee()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Location()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
External Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Chairman()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Domain Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>article()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Integer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Review()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Research Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Paper Status()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Paper Abstract()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Boolean()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Co-author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Administrator()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
User()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Co-author()<edge_begin><edge_end>Author()
Co-author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Administrator()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Administrator()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Meta-Review()<edge_begin><edge_end>Review()
Account()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Registration()<edge_begin><edge_end>Conference activity()
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Research Topic()<edge_begin><edge_end>Thing()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Contribution 1th-author()<edge_begin><edge_end>Regular author()
Contribution co-author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Committee member()<edge_begin><edge_end>Committee()
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Document()
Abstract()<edge_begin><edge_end>Thing()
Abstract()<edge_begin><edge_end>article()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>article()
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
notification()<edge_begin><edge_end>article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>article()
submission process()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>article()
review form()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>article()
summary of reviews()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
Scholar()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Tutorial()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Tutorial()<edge_begin><edge_end>Individual Presentation()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Member(Web address)<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Member(Web address)<edge_begin><edge_end>String()
Participant(early Registration)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Student()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Science Worker()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Assistant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Volunteer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Regular()<edge_begin><edge_end>Participant(early Registration)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
session()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
article()<edge_begin><edge_end>Document()
article()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
article()<edge_begin><edge_end>human(e-mail, last name, first name)
article()<edge_begin><edge_end>classification()
article()<edge_begin><edge_end>Author()
article()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
article()<edge_begin><edge_end>Abstract()
participant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
program()<edge_begin><edge_end>Chair()
program()<edge_begin><edge_end>session()
Slide Set()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document()
Meal Menu()<edge_begin><edge_end>Meal Event()
Topic()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Topic()<edge_begin><edge_end>Working event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Thing()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Inforamtion()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Document()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Account()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>String()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference document()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Item()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Presenter city()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Money()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Time()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Organization()
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Dining Place()<edge_begin><edge_end>Place()
Presenter()<edge_begin><edge_end>Author()
Presenter()<edge_begin><edge_end>Conference Participant()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Published Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Attendee()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
TPC Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Evaluated Paper()<edge_begin><edge_end>Review()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Positive Review()<edge_begin><edge_end>Review()
Workshop Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Industrial Session()<edge_begin><edge_end>Conference Session()
Conference Session()<edge_begin><edge_end>Session(room)
Regular Session()<edge_begin><edge_end>Session(room)
Poster Session()<edge_begin><edge_end>Session(room)
Demo Session()<edge_begin><edge_end>Session(room)
Paper Author()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Trip()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference Participant()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper File()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Contact Author(Alternate Email)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Integer()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Assigned Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Negative Review()<edge_begin><edge_end>Review()
Neutral Review()<edge_begin><edge_end>Review()
Organising Agency()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Organisation()<edge_begin><edge_end>Thing()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Demo Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Research Institute()<edge_begin><edge_end>Academic Institution()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Agency Staff Member()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Workshop Session()<edge_begin><edge_end>Session(room)
Track()<edge_begin><edge_end>Scientific Event()
Track()<edge_begin><edge_end>Conference part()
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Workshop()<edge_begin><edge_end>Scientific Event()
Workshop()<edge_begin><edge_end>Academic Event()
Workshop()<edge_begin><edge_end>Working event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Document()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>PC Member()
PC Chair()<edge_begin><edge_end>Conference Participant()
PC Chair()<edge_begin><edge_end>PC Member()
PC Member()<edge_begin><edge_end>Possible Reviewer()
OC Member()<edge_begin><edge_end>Conference Participant()
Programme Brochure()<edge_begin><edge_end>Document()
Flyer()<edge_begin><edge_end>Document()
Web Site()<edge_begin><edge_end>Document()
Multi-author Volume()<edge_begin><edge_end>Document()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Individual Presentation()<edge_begin><edge_end>Document()
OC Chair()<edge_begin><edge_end>OC Member()
Conference Banquet()<edge_begin><edge_end>Social Event()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Workshop Chair()<edge_begin><edge_end>PC Member()
Conference Proceedings()<edge_begin><edge_end>Proceedings()
Session Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
University()<edge_begin><edge_end>Academic Institution()
University()<edge_begin><edge_end>Organization()
Possible Reviewer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Invited Speaker()<edge_begin><edge_end>Presenter()
SC Member()<edge_begin><edge_end>PC Member()
Presenter house()<edge_begin><edge_end>Building()
Building()<edge_begin><edge_end>Place()
Presenter state()<edge_begin><edge_end>State()
Delegate()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Presenter city()<edge_begin><edge_end>City()
Hotel registration form()<edge_begin><edge_end>Form()
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
Form()<edge_begin><edge_end>Document()
Car()<edge_begin><edge_end>Transport vehicle()
Transport vehicle()<edge_begin><edge_end>Item()
Mailing list()<edge_begin><edge_end>Document()
Renting()<edge_begin><edge_end>Activity before conference()
Activity before conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Dinner banquet()<edge_begin><edge_end>Social program()
One day presenter()<edge_begin><edge_end>Delegate()
Social program()<edge_begin><edge_end>Conference activity()
Power Point presentation()<edge_begin><edge_end>Presentation()
Presentation()<edge_begin><edge_end>Conference activity()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Active conference participant()
Conference restaurant()<edge_begin><edge_end>Building()
Conference city()<edge_begin><edge_end>City()
Conference state()<edge_begin><edge_end>State()
Submissions deadline()<edge_begin><edge_end>Deadline()
Deadline()<edge_begin><edge_end>Time()
Deadline()<edge_begin><edge_end>date()
Simulating()<edge_begin><edge_end>Research()
Research()<edge_begin><edge_end>Activity before conference()
Technic activity()<edge_begin><edge_end>Conference activity()
Conference activity()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Technical commitee()<edge_begin><edge_end>Delegate()
Place()<edge_begin><edge_end>Thing()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Place()<edge_begin><edge_end>Item()
Author cd proceedings included()<edge_begin><edge_end>Author()
Cd proceening()<edge_begin><edge_end>Publication()
Trip day()<edge_begin><edge_end>Time()
Record of attendance()<edge_begin><edge_end>Document()
Listener()<edge_begin><edge_end>Delegate()
Session room()<edge_begin><edge_end>Place()
Brief introduction for Session chair()<edge_begin><edge_end>Document()
Session chair()<edge_begin><edge_end>Delegate()
Invitation letter()<edge_begin><edge_end>Document()
Registration form()<edge_begin><edge_end>Form()
Viza()<edge_begin><edge_end>Document()
Conference days()<edge_begin><edge_end>Time()
Conference building()<edge_begin><edge_end>Building()
Registration fee()<edge_begin><edge_end>Fee()
Departure()<edge_begin><edge_end>Activity after conference()
Activity after conference()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Conference airport()<edge_begin><edge_end>Building()
Worker lecturer()<edge_begin><edge_end>Lecturer()
Lecturer()<edge_begin><edge_end>Author()
Transparency()<edge_begin><edge_end>Document()
Speaker()<edge_begin><edge_end>Delegate()
City()<edge_begin><edge_end>Thing()
Card()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Item()<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Item()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Time()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Book proceeding()<edge_begin><edge_end>Publication()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Audiovisual equipment()<edge_begin><edge_end>Item()
Video presentation()<edge_begin><edge_end>Presentation()
Hotel room()<edge_begin><edge_end>Place()
Hotel presenter()<edge_begin><edge_end>Delegate()
Conference hotel()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Item()
Money()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Money()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Thing()
Money()<edge_begin><edge_end>Money()
Introduction()<edge_begin><edge_end>Conference activity()
Welcome address()<edge_begin><edge_end>Conference activity()
Value added tax()<edge_begin><edge_end>Tax()
Tax()<edge_begin><edge_end>Money()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Final manuscript()<edge_begin><edge_end>Submission()
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Submission()<edge_begin><edge_end>Document()
Sponsor city()<edge_begin><edge_end>City()
Sponsor()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Introduction of speaker()<edge_begin><edge_end>Introduction()
Conference hall()<edge_begin><edge_end>Place()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Plenary lecture speaker()<edge_begin><edge_end>Author()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Tutorial speaker()<edge_begin><edge_end>Author()
Registation deadline()<edge_begin><edge_end>Deadline()
Single hotel room()<edge_begin><edge_end>Hotel room()
Non speaker()<edge_begin><edge_end>Delegate()
Author information form()<edge_begin><edge_end>Form()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
IASTED non member()<edge_begin><edge_end>Delegate()
Hotel fee()<edge_begin><edge_end>Fee()
Fee()<edge_begin><edge_end>Money()
Publication()<edge_begin><edge_end>Item()
Taxi()<edge_begin><edge_end>Transport vehicle()
Sponsor state()<edge_begin><edge_end>State()
Modelling()<edge_begin><edge_end>Research()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Payment document()<edge_begin><edge_end>Document()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
One conference day()<edge_begin><edge_end>Conference days()
Fee for extra trip()<edge_begin><edge_end>Fee()
Full day tour()<edge_begin><edge_end>Activity after conference()
Conference Hiker()<edge_begin><edge_end>Delegate()
Computer()<edge_begin><edge_end>Audiovisual equipment()
IASTED member()<edge_begin><edge_end>Delegate()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Author book proceedings included()<edge_begin><edge_end>Author()
Sponsor company house()<edge_begin><edge_end>Building()
Sponzorship()<edge_begin><edge_end>Money()
Student lecturer()<edge_begin><edge_end>Lecturer()
Trip city()<edge_begin><edge_end>City()
Cheque()<edge_begin><edge_end>Payment document()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Student non speaker()<edge_begin><edge_end>Non speaker()
Student registration fee()<edge_begin><edge_end>Registration fee()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Tip()<edge_begin><edge_end>Money()
Credit card()<edge_begin><edge_end>Card()
Van()<edge_begin><edge_end>Transport vehicle()
Main office()<edge_begin><edge_end>Place()
Presenter university()<edge_begin><edge_end>Building()
Departure tax()<edge_begin><edge_end>Tax()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Double hotel room()<edge_begin><edge_end>Hotel room()
Initial manuscipt()<edge_begin><edge_end>Submission()
Coffee break()<edge_begin><edge_end>Conference activity()
Bank transfer()<edge_begin><edge_end>Payment document()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Speaker lecture()<edge_begin><edge_end>Session(room)
Coctail reception()<edge_begin><edge_end>Conference activity()
Work Shop()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Thing()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>human(e-mail, last name, first name)
Activity(is dated on, expected Attendance)<edge_begin><edge_end>intensity()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>article()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Time()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>date Time()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Topic()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Integer()
Activity(is dated on, expected Attendance)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Organizing Committee()<edge_begin><edge_end>Thing()
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Committee Member()<edge_begin><edge_end>Organizer()
Committee Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Organizer()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Organizer()<edge_begin><edge_end>Thing()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Outside Referee()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Lecture(has Acronym)<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Lecture(has Acronym)<edge_begin><edge_end>String()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Double Blind Review()<edge_begin><edge_end>Thing()
Double Blind Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Administrator()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>String()
Contact Author()<edge_begin><edge_end>Author()
Contact Author()<edge_begin><edge_end>Paper Abstract()
Conference Program()<edge_begin><edge_end>Thing()
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Paper Status()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Slot(ends At, begins At)<edge_begin><edge_end>Thing()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Slot(ends At, begins At)<edge_begin><edge_end>time()
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Slot(ends At, begins At)<edge_begin><edge_end>Session(room)
Session(room)<edge_begin><edge_end>Thing()
Session(room)<edge_begin><edge_end>Lecture(has Acronym)
Session(room)<edge_begin><edge_end>Scientific Event()
Session(room)<edge_begin><edge_end>Accepted Paper()
Session(room)<edge_begin><edge_end>String()
Session(room)<edge_begin><edge_end>Slot(ends At, begins At)
Session(room)<edge_begin><edge_end>Chair()
Research Topic()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Chair()
Document()<edge_begin><edge_end>Item()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>User()
Document()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Document()<edge_begin><edge_end>Document()
Program Committee()<edge_begin><edge_end>Thing()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Criterion(has Weight)<edge_begin><edge_end>Thing()
Criterion(has Weight)<edge_begin><edge_end>double()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Accepted Paper()<edge_begin><edge_end>Session(room)
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Chair()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Chair()<edge_begin><edge_end>program()
Chair()<edge_begin><edge_end>Output Document()
Chair()<edge_begin><edge_end>Thing()
Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Chair()<edge_begin><edge_end>Session(room)
Review()<edge_begin><edge_end>article()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>Activity(is dated on, expected Attendance)
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Review()<edge_begin><edge_end>Possible Reviewer()
Review()<edge_begin><edge_end>Evaluation()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Boolean()
Evaluation()<edge_begin><edge_end>Document()
Evaluation()<edge_begin><edge_end>Review()
Paper Abstract()<edge_begin><edge_end>Document()
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Paper Abstract()<edge_begin><edge_end>Contact Author()
Review Question()<edge_begin><edge_end>Question()
Paper Question()<edge_begin><edge_end>Question()
CD-ROM()<edge_begin><edge_end>Output Document()
Index Of Authors()<edge_begin><edge_end>Output Document()
External Reviewers List()<edge_begin><edge_end>Output Document()
Proceedings()<edge_begin><edge_end>Output Document()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Proceedings()<edge_begin><edge_end>Thing()
Program()<edge_begin><edge_end>Output Document()
PC Members List()<edge_begin><edge_end>Output Document()
List Of Abstracts()<edge_begin><edge_end>Output Document()
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
RFC()<edge_begin><edge_end>Topics()
Topics()<edge_begin><edge_end>Value Partition()
Classic Papers()<edge_begin><edge_end>Topics()
Networking()<edge_begin><edge_end>Topics()
Humour()<edge_begin><edge_end>Topics()
Programming()<edge_begin><edge_end>Topics()
Computer Science()<edge_begin><edge_end>Topics()
Format()<edge_begin><edge_end>Value Partition()
Adobe PDF()<edge_begin><edge_end>Format()
MS Word()<edge_begin><edge_end>Format()
Corel Word Perfect()<edge_begin><edge_end>Format()
HTML()<edge_begin><edge_end>Format()
Post Script()<edge_begin><edge_end>Format()
RTF()<edge_begin><edge_end>Format()
Text()<edge_begin><edge_end>Format()
High()<edge_begin><edge_end>Reviewer Famliliarity()
Reviewer Famliliarity()<edge_begin><edge_end>Review Values()
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Marginal Tend to Reject()<edge_begin><edge_end>Reccommendation()
Reccommendation()<edge_begin><edge_end>Review Values()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
Portable Reject()<edge_begin><edge_end>Reccommendation()
Must Accept()<edge_begin><edge_end>Reccommendation()
Clear Reject()<edge_begin><edge_end>Reccommendation()
Clear Accept()<edge_begin><edge_end>Reccommendation()
Program chair()<edge_begin><edge_end>Member(Web address)
Program chair()<edge_begin><edge_end>Conference Program()
Conference Program()<edge_begin><edge_end>Domain Topic()
Conference Program()<edge_begin><edge_end>Program chair()
Conference Program()<edge_begin><edge_end>Planed Paper()
Program Committee()<edge_begin><edge_end>Committees()
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Planed Paper()<edge_begin><edge_end>Conference Program()
Valuable Confirmation of Present Knowledge()<edge_begin><edge_end>Overall Value()
Other()<edge_begin><edge_end>Overall Value()
Not Much()<edge_begin><edge_end>Overall Value()
New Information()<edge_begin><edge_end>Overall Value()
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Overall Value()<edge_begin><edge_end>Review Values()
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Paper Categorization()<edge_begin><edge_end>Review Values()
Tends Towards Practical()<edge_begin><edge_end>Paper Categorization()
Balanced Theory and Practice()<edge_begin><edge_end>Paper Categorization()
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
Highly Practical()<edge_begin><edge_end>Paper Categorization()
Reviewed Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Long bool()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Overall Value()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reccommendation()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Long bool()<edge_begin><edge_end>Value Partition()
Author()<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Author()<edge_begin><edge_end>Speaker()
Author()<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Author()<edge_begin><edge_end>Contribution(remark, abstract, contact Email, has Keyword, has Title)
Author()<edge_begin><edge_end>article()
Author()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Review Values()<edge_begin><edge_end>Value Partition()
Review Committee()<edge_begin><edge_end>Committees()
Committees()<edge_begin><edge_end>Domain Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Organizer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Speaker()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(email, has an email, has the first name, has gender, has the last name, has Mail, works For Company, has Affiliation, has First Name, has Last Name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has First Name, has Biography, has Last Name)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>User()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Administrator()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, paper ID, title)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>External Reviewer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Personal Review History()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Double Blind Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Research Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper Review(Comments for Author, Comments for Program Committee)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>String()
Paper File()<edge_begin><edge_end>Domain Topic()
Paper File()<edge_begin><edge_end>Format()
Advocate()<edge_begin><edge_end>Member(Web address)
Advocate()<edge_begin><edge_end>Advocated Paper()
Advocated Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Advocated Paper()<edge_begin><edge_end>Advocate()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Contact Author(Alternate Email)<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Contact Author(Alternate Email)<edge_begin><edge_end>String()
Result of Advocate()<edge_begin><edge_end>Value Partition()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>Domain Topic()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Place()<edge_begin><edge_end>Net()
Place()<edge_begin><edge_end>PT Arc()
Place()<edge_begin><edge_end>TP Arc()
Transition()<edge_begin><edge_end>Net()
Transition()<edge_begin><edge_end>PT Arc()
Transition()<edge_begin><edge_end>TP Arc()
Net()<edge_begin><edge_end>Place()
Net()<edge_begin><edge_end>Transition()
Arc(weight)<edge_begin><edge_end>Integer()
PT Arc()<edge_begin><edge_end>Arc(weight)
PT Arc()<edge_begin><edge_end>Transition()
PT Arc()<edge_begin><edge_end>Place()
TP Arc()<edge_begin><edge_end>Arc(weight)
TP Arc()<edge_begin><edge_end>Transition()
TP Arc()<edge_begin><edge_end>Place()
Class()<edge_begin><edge_end>Generalization()
Class()<edge_begin><edge_end>Dependency()
Dependency()<edge_begin><edge_end>State Machine()
Dependency()<edge_begin><edge_end>Class()
Dependency()<edge_begin><edge_end>Stereotype(base Class)
Stereotype(base Class)<edge_begin><edge_end>String()
Stereotype(base Class)<edge_begin><edge_end>Dependency()
State Machine()<edge_begin><edge_end>Class()
State Machine()<edge_begin><edge_end>State()
State()<edge_begin><edge_end>State Vertex()
State()<edge_begin><edge_end>State Machine()
State()<edge_begin><edge_end>Transition()
Composite State()<edge_begin><edge_end>State()
Composite State()<edge_begin><edge_end>State Vertex()
Simple State()<edge_begin><edge_end>State()
Final State()<edge_begin><edge_end>State()
State Vertex()<edge_begin><edge_end>Composite State()
Pseudo State()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Event()
Transition()<edge_begin><edge_end>State Vertex()
Petri Net Model()<edge_begin><edge_end>Petri Net Model Element()
Petri Net Model Element()<edge_begin><edge_end>Petri Net Model()
Petri Net(name)<edge_begin><edge_end>Petri Net Model Element()
Petri Net(name)<edge_begin><edge_end>Place(name, relevance)
Petri Net(name)<edge_begin><edge_end>Transition(name, relevance)
Petri Net(name)<edge_begin><edge_end>Arc(weight)
Place(name, relevance)<edge_begin><edge_end>Generic PT(label)
Place(name, relevance)<edge_begin><edge_end>Petri Net(name)
Place(name, relevance)<edge_begin><edge_end>PT Arc()
Place(name, relevance)<edge_begin><edge_end>TP Arc()
Transition(name, relevance)<edge_begin><edge_end>Generic PT(label)
Transition(name, relevance)<edge_begin><edge_end>Petri Net(name)
Transition(name, relevance)<edge_begin><edge_end>PT Arc()
Transition(name, relevance)<edge_begin><edge_end>TP Arc()
Arc(weight)<edge_begin><edge_end>Petri Net Model Element()
PT Arc()<edge_begin><edge_end>Arc(weight)
PT Arc()<edge_begin><edge_end>Place(name, relevance)
PT Arc()<edge_begin><edge_end>Transition(name, relevance)
TP Arc()<edge_begin><edge_end>Arc(weight)
TP Arc()<edge_begin><edge_end>Transition(name, relevance)
TP Arc()<edge_begin><edge_end>Place(name, relevance)
Generic PT(label)<edge_begin><edge_end>Petri Net Model Element()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Capability(namespace, name, version)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>Property Scope(unset Properties)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Generic Unit()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>Filter String()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Build Part(name)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Required Capability(namespace, name, range, filter)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>I Build Unit(filter, circularity Allowed, instance Location)
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>Part Capability()
I Build Unit(filter, circularity Allowed, instance Location)<edge_begin><edge_end>URI()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Name Space()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Name()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Version Range()
I Required Capability(namespace, name, range, filter)<edge_begin><edge_end>Filter String()
I Build Part(name)<edge_begin><edge_end>Name()
I Build Part(name)<edge_begin><edge_end>Part Capability()
I Build Part(name)<edge_begin><edge_end>I Build Unit(filter, circularity Allowed, instance Location)
I Artifacts Part()<edge_begin><edge_end>I Build Part(name)
I Artifacts Part()<edge_begin><edge_end>I Path Group(base Path, paths)
I Action Part()<edge_begin><edge_end>I Closure Part()
I Action Part()<edge_begin><edge_end>I Action Result()
I Action Part()<edge_begin><edge_end>I Up To Date Policy()
I Closure(execute Once)<edge_begin><edge_end>I Prerequisites(alias, rebase Path)
I Closure(execute Once)<edge_begin><edge_end>Property Scope(unset Properties)
I Closure(execute Once)<edge_begin><edge_end>I Advise()
I Capability(namespace, name, version)<edge_begin><edge_end>Name Space()
I Capability(namespace, name, version)<edge_begin><edge_end>Name()
I Capability(namespace, name, version)<edge_begin><edge_end>Version()
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>I Build Part(name)
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>Alias()
I Prerequisites(alias, rebase Path)<edge_begin><edge_end>Path()
I Part Group()<edge_begin><edge_end>I Closure Part()
I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)<edge_begin><edge_end>Alias()
I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)<edge_begin><edge_end>Filter String()
I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)<edge_begin><edge_end>Pattern()
Part Requirement()<edge_begin><edge_end>I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)
Part Requirement()<edge_begin><edge_end>I Build Part(name)
I Path Group(base Path, paths)<edge_begin><edge_end>Path()
I Action Result()<edge_begin><edge_end>I Action Part()
I Produced Part()<edge_begin><edge_end>I Closure Part()
I Produced Part()<edge_begin><edge_end>I Path Group(base Path, paths)
I Produced Part()<edge_begin><edge_end>I Resulting Parts()
I Resulting Parts()<edge_begin><edge_end>I Action Result()
I Resulting Parts()<edge_begin><edge_end>I Produced Part()
I Closure Part()<edge_begin><edge_end>I Closure(execute Once)
I Closure Part()<edge_begin><edge_end>I Build Part(name)
Requirement()<edge_begin><edge_end>I Requirement(member Name, alias, contributor, filter, include Pattern, exclude Pattern)
Requirement()<edge_begin><edge_end>I Required Capability(namespace, name, range, filter)
Resulting Path Group()<edge_begin><edge_end>I Action Result()
Resulting Path Group()<edge_begin><edge_end>I Path Group(base Path, paths)
Part Capability()<edge_begin><edge_end>I Capability(namespace, name, version)
Part Capability()<edge_begin><edge_end>I Build Part(name)
Property Scope(unset Properties)<edge_begin><edge_end>String Properties(key, value, immutable)
I Generic Unit()<edge_begin><edge_end>I Path Group(base Path, paths)
I Build Context()<edge_begin><edge_end>I Unit Request(name, name Space, range)
I Build Context()<edge_begin><edge_end>I Resolution()
I Build Context()<edge_begin><edge_end>I Build Unit(filter, circularity Allowed, instance Location)
I Build Context()<edge_begin><edge_end>I Advise()
I Build Context()<edge_begin><edge_end>I Resolver(fail On Error, filter)
I Resolution()<edge_begin><edge_end>I Required Capability(namespace, name, range, filter)
I Resolution()<edge_begin><edge_end>I Capability(namespace, name, version)
I Resolution()<edge_begin><edge_end>I Resolution()
I Resolution()<edge_begin><edge_end>Import Options(location, conflict Resolution, resource Path, unpack, expand, suffix)
Resolution Options(source, mutable, branch Tag Path, timestamp, revision, resolver Filter, filter Groups, overlay Path, include Parts, exclude Parts, prune)<edge_begin><edge_end>Filter String()
Resolution Options(source, mutable, branch Tag Path, timestamp, revision, resolver Filter, filter Groups, overlay Path, include Parts, exclude Parts, prune)<edge_begin><edge_end>Path()
Import Options(location, conflict Resolution, resource Path, unpack, expand, suffix)<edge_begin><edge_end>I Materializer()
Import Options(location, conflict Resolution, resource Path, unpack, expand, suffix)<edge_begin><edge_end>Path()
Build Runtime()<edge_begin><edge_end>Up To Date Extension()
Build Runtime()<edge_begin><edge_end>Materializer Extension()
Build Runtime()<edge_begin><edge_end>Meta Data Translator Factory Extension()
Build Runtime()<edge_begin><edge_end>Resolver Extension()
Up To Date Extension()<edge_begin><edge_end>I Human Selectable(label, type Name)
Up To Date Extension()<edge_begin><edge_end>I Up To Date Policy()
I Human Selectable(label, type Name)<edge_begin><edge_end>I Extension()
Materializer Extension()<edge_begin><edge_end>I Human Selectable(label, type Name)
Materializer Extension()<edge_begin><edge_end>I Materializer()
Meta Data Translator Factory Extension()<edge_begin><edge_end>I Extension()
Meta Data Translator Factory Extension()<edge_begin><edge_end>I Meta Data Translator Factory()
Resolver Extension()<edge_begin><edge_end>I Human Selectable(label, type Name)
Resolver Extension()<edge_begin><edge_end>I Resolver(fail On Error, filter)
I Resolver(fail On Error, filter)<edge_begin><edge_end>Filter()
I Resolver(fail On Error, filter)<edge_begin><edge_end>I Expr()
Resolver Group()<edge_begin><edge_end>I Resolver(fail On Error, filter)
First Choice()<edge_begin><edge_end>Resolver Group()
Best Choice()<edge_begin><edge_end>Resolver Group()
Default Resolver()<edge_begin><edge_end>I Resolver(fail On Error, filter)
Default Resolver()<edge_begin><edge_end>I Meta Data Translator()
Worspace Resolver()<edge_begin><edge_end>EFS Resolver()
EFS Resolver()<edge_begin><edge_end>Default Resolver()
EFS Resolver()<edge_begin><edge_end>IEFS Based Access()
P2Resolver()<edge_begin><edge_end>I Resolver(fail On Error, filter)
File System Materializer()<edge_begin><edge_end>I Materializer()
P2Materializer()<edge_begin><edge_end>I Materializer()
Workspace Materializer()<edge_begin><edge_end>I Materializer()
Literal(value)<edge_begin><edge_end>I Expr()
I Function()<edge_begin><edge_end>I Expr()
Property Ref()<edge_begin><edge_end>I Function()
Format(format String)<edge_begin><edge_end>I Function()
To Upper()<edge_begin><edge_end>I Function()
to Lower()<edge_begin><edge_end>I Function()
replace()<edge_begin><edge_end>I Function()
replace()<edge_begin><edge_end>Match(pattern, replacement, quote Pattern)
Match(pattern, replacement, quote Pattern)<edge_begin><edge_end>Pattern()
Split(pattern, style, limit)<edge_begin><edge_end>I Function()
Split(pattern, style, limit)<edge_begin><edge_end>Pattern()
I Unit Request(name, name Space, range)<edge_begin><edge_end>Name()
I Unit Request(name, name Space, range)<edge_begin><edge_end>Name Space()
I Unit Request(name, name Space, range)<edge_begin><edge_end>Version Range()
I Unit Request(name, name Space, range)<edge_begin><edge_end>Resolution Options(source, mutable, branch Tag Path, timestamp, revision, resolver Filter, filter Groups, overlay Path, include Parts, exclude Parts, prune)
Build Unit Command()<edge_begin><edge_end>I Unit Request(name, name Space, range)
Build Unit Command()<edge_begin><edge_end>Property Scope(unset Properties)
Build Unit Command()<edge_begin><edge_end>I Resolver(fail On Error, filter)
Build Unit Command()<edge_begin><edge_end>I Advise()
I Advise()<edge_begin><edge_end>Context Node Selector()
Import Command()<edge_begin><edge_end>Build Unit Command()
Property Advice()<edge_begin><edge_end>I Advise()
Property Advice()<edge_begin><edge_end>Property Scope(unset Properties)
String Advice(value)<edge_begin><edge_end>I Advise()
Version Advice(version)<edge_begin><edge_end>I Advise()
Version Advice(version)<edge_begin><edge_end>Version()
Version Range Advice(version Range)<edge_begin><edge_end>I Advise()
Version Range Advice(version Range)<edge_begin><edge_end>Version Range()
Boolean Advice(value)<edge_begin><edge_end>I Advise()
Unset Advice()<edge_begin><edge_end>I Advise()
New Instance Advice(clazz)<edge_begin><edge_end>Advice Group()
Invoke Command(action)<edge_begin><edge_end>Build Unit Command()
Invoke Command(action)<edge_begin><edge_end>Name()
Filter Advice(filter Op)<edge_begin><edge_end>I Advise()
Filter Advice(filter Op)<edge_begin><edge_end>I Filter()
Advice Group()<edge_begin><edge_end>I Advise()
OS Gi Based Filter()<edge_begin><edge_end>I Filter()
And Filter()<edge_begin><edge_end>Filter Group()
Or Filter()<edge_begin><edge_end>Filter Group()
Filter Group()<edge_begin><edge_end>I Filter()
Regexp Filter()<edge_begin><edge_end>Single Property Filter(property)
Single Property Filter(property)<edge_begin><edge_end>I Filter()
Simple Pattern F Ilter()<edge_begin><edge_end>Single Property Filter(property)
Bibliography()<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Publication(title, abstract, keywords, note, year)<edge_begin><edge_end>String()
Publication(title, abstract, keywords, note, year)<edge_begin><edge_end>Integer()
Article(journal, month, number, pages, volume)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Article(journal, month, number, pages, volume)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Article(journal, month, number, pages, volume)<edge_begin><edge_end>String()
Article(journal, month, number, pages, volume)<edge_begin><edge_end>Integer()
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>String()
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>Integer()
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Book(month, number, volume, series, source, address, edition, isbn, price)<edge_begin><edge_end>Organization(location, name)
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Organization(location, name)
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>String()
In Book(month, number, pages, volume, series, chapter, type, address)<edge_begin><edge_end>Integer()
Booklet(month, address, edition, howpublished)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Booklet(month, address, edition, howpublished)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Booklet(month, address, edition, howpublished)<edge_begin><edge_end>String()
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>Organization(location, name)
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>String()
In Collection(month, number, pages, address, edition, volume, series, chapter, type, booktitle)<edge_begin><edge_end>Integer()
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>String()
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>Integer()
In Proceedings(month, number, pages, address, volume, series, booktitle)<edge_begin><edge_end>Organization(location, name)
Proceedings(month, number, volume, address, series)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Proceedings(month, number, volume, address, series)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Proceedings(month, number, volume, address, series)<edge_begin><edge_end>Organization(location, name)
Proceedings(month, number, volume, address, series)<edge_begin><edge_end>String()
Manual(month, address, edition)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Manual(month, address, edition)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Manual(month, address, edition)<edge_begin><edge_end>Organization(location, name)
Manual(month, address, edition)<edge_begin><edge_end>String()
Misc(month, howpublished)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Misc(month, howpublished)<edge_begin><edge_end>String()
Unpublished(month)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Unpublished(month)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Unpublished(month)<edge_begin><edge_end>String()
Thesis(month, address, type)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Thesis(month, address, type)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Thesis(month, address, type)<edge_begin><edge_end>University()
Thesis(month, address, type)<edge_begin><edge_end>String()
Master Thesis()<edge_begin><edge_end>Thesis(month, address, type)
Ph D Thesis()<edge_begin><edge_end>Thesis(month, address, type)
Report()<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Report()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Project Report()<edge_begin><edge_end>Report()
Project Report()<edge_begin><edge_end>Project(name)
Technical Report(series)<edge_begin><edge_end>Report()
Technical Report(series)<edge_begin><edge_end>String()
Technical Report(series)<edge_begin><edge_end>Organization(location, name)
Event(name, date, event Title, location)<edge_begin><edge_end>String()
Event(name, date, event Title, location)<edge_begin><edge_end>Event(name, date, event Title, location)
Conference(series)<edge_begin><edge_end>Event(name, date, event Title, location)
Conference(series)<edge_begin><edge_end>String()
Workshop(series)<edge_begin><edge_end>Event(name, date, event Title, location)
Workshop(series)<edge_begin><edge_end>String()
Exhibition()<edge_begin><edge_end>Event(name, date, event Title, location)
Lecture()<edge_begin><edge_end>Event(name, date, event Title, location)
Lecture()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Meeting(title)<edge_begin><edge_end>Event(name, date, event Title, location)
Meeting(title)<edge_begin><edge_end>String()
Meeting(title)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Project Meeting()<edge_begin><edge_end>Meeting(title)
Person(address, name, email, fax, homepage, phone, photo)<edge_begin><edge_end>String()
Employee()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Employee()<edge_begin><edge_end>Organization(location, name)
Manager()<edge_begin><edge_end>Employee()
Administrative Staff()<edge_begin><edge_end>Employee()
Technical Staff()<edge_begin><edge_end>Employee()
Academic Staff()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Academic Staff()<edge_begin><edge_end>Academic Staff()
Academic Staff()<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Academic Staff()<edge_begin><edge_end>Project(name)
Academic Staff()<edge_begin><edge_end>Research Group()
Academic Staff()<edge_begin><edge_end>Event(name, date, event Title, location)
Academic Staff()<edge_begin><edge_end>Ph D Student()
Academic Staff()<edge_begin><edge_end>Research Topic()
Lecturer()<edge_begin><edge_end>Academic Staff()
Faculty Member()<edge_begin><edge_end>Academic Staff()
Full Professor()<edge_begin><edge_end>Faculty Member()
Assistant Professor()<edge_begin><edge_end>Faculty Member()
Associate Professor()<edge_begin><edge_end>Faculty Member()
Student()<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Student()<edge_begin><edge_end>University()
Undergraduate()<edge_begin><edge_end>Student()
Graduate()<edge_begin><edge_end>Student()
Ph D Student()<edge_begin><edge_end>Graduate()
Ph D Student()<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Ph D Student()<edge_begin><edge_end>Project(name)
Ph D Student()<edge_begin><edge_end>Academic Staff()
Organization(location, name)<edge_begin><edge_end>String()
Organization(location, name)<edge_begin><edge_end>Project(name)
Organization(location, name)<edge_begin><edge_end>Product(name)
Organization(location, name)<edge_begin><edge_end>Employee()
Organization(location, name)<edge_begin><edge_end>Publication(title, abstract, keywords, note, year)
Organization(location, name)<edge_begin><edge_end>Technical Report(series)
Research Group()<edge_begin><edge_end>Organization(location, name)
Research Group()<edge_begin><edge_end>Academic Staff()
Research Group()<edge_begin><edge_end>Employee()
Association()<edge_begin><edge_end>Organization(location, name)
Department()<edge_begin><edge_end>Organization(location, name)
Department()<edge_begin><edge_end>Institute()
Institute()<edge_begin><edge_end>Organization(location, name)
Institute()<edge_begin><edge_end>Institute()
Institute()<edge_begin><edge_end>Research Group()
Enterprise()<edge_begin><edge_end>Organization(location, name)
University()<edge_begin><edge_end>Organization(location, name)
University()<edge_begin><edge_end>Department()
University()<edge_begin><edge_end>Student()
Project(name)<edge_begin><edge_end>String()
Project(name)<edge_begin><edge_end>Organization(location, name)
Project(name)<edge_begin><edge_end>Academic Staff()
Project(name)<edge_begin><edge_end>Research Topic()
Project(name)<edge_begin><edge_end>Person(address, name, email, fax, homepage, phone, photo)
Project(name)<edge_begin><edge_end>Project Report()
Research Project()<edge_begin><edge_end>Project(name)
Development Project()<edge_begin><edge_end>Project(name)
Software Project()<edge_begin><edge_end>Project(name)
Software Project()<edge_begin><edge_end>Product(name)
Product(name)<edge_begin><edge_end>String()
Product(name)<edge_begin><edge_end>Organization(location, name)
Software Component(has Price)<edge_begin><edge_end>Product(name)
Software Component(has Price)<edge_begin><edge_end>Integer()
Topic(name)<edge_begin><edge_end>String()
Research Topic()<edge_begin><edge_end>Topic(name)
Research Topic()<edge_begin><edge_end>Project(name)
Research Topic()<edge_begin><edge_end>Academic Staff()
State Machine()<edge_begin><edge_end>Model Element(name)
State Machine()<edge_begin><edge_end>State()
State Machine()<edge_begin><edge_end>Transition()
Activity Graph()<edge_begin><edge_end>State Machine()
Activity Graph()<edge_begin><edge_end>Partition()
Partition()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Model Element(name)
State Vertex()<edge_begin><edge_end>Transition()
State()<edge_begin><edge_end>State Vertex()
Composite State()<edge_begin><edge_end>State()
Composite State()<edge_begin><edge_end>State Vertex()
Action State(is Dynamic)<edge_begin><edge_end>State()
Pseudostate(kind)<edge_begin><edge_end>State Vertex()
Object Flow State()<edge_begin><edge_end>State()
Object Flow State()<edge_begin><edge_end>Model Element(name)
Final State()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Model Element(name)
Transition()<edge_begin><edge_end>State Vertex()
Transition()<edge_begin><edge_end>Guard()
Guard()<edge_begin><edge_end>Model Element(name)
Guard()<edge_begin><edge_end>Boolean Expression(language, body)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Description Provider(description)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Status Provider()
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contribution(label)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Contact(name, email)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Custom Category(identifier, label, description)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Metadata Repository Reference(location, nature)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Description Provider(description)
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Product()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Bundle()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Feature()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Category()
Mapped Repository(mirror Artifacts, category Prefix)<edge_begin><edge_end>Map Rule()
Configuration(operating System, window System, architecture)<edge_begin><edge_end>Enabled Status Provider(enabled)
Contribution(label)<edge_begin><edge_end>Enabled Status Provider(enabled)
Contribution(label)<edge_begin><edge_end>Description Provider(description)
Contribution(label)<edge_begin><edge_end>Status Provider()
Contribution(label)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Contribution(label)<edge_begin><edge_end>Mapped Repository(mirror Artifacts, category Prefix)
Contribution(label)<edge_begin><edge_end>Contact(name, email)
Contribution(label)<edge_begin><edge_end>Maven Mapping(name Pattern, group Id, artifact Id)
Contact(name, email)<edge_begin><edge_end>Aggregator(label, build Root, packed Strategy, sendmail, type, maven Result)
Feature()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Feature()<edge_begin><edge_end>Features()
Feature()<edge_begin><edge_end>Bundles()
Feature()<edge_begin><edge_end>Fragments()
Bundle()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Mapped Unit()<edge_begin><edge_end>Installable Unit Reference()
Mapped Unit()<edge_begin><edge_end>Enabled Status Provider(enabled)
Mapped Unit()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Product()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Product()<edge_begin><edge_end>Features()
Product()<edge_begin><edge_end>Bundles()
Product()<edge_begin><edge_end>Fragments()
Category()<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type)
Category()<edge_begin><edge_end>Categories()
Category()<edge_begin><edge_end>Features()
Category()<edge_begin><edge_end>Products()
Category()<edge_begin><edge_end>Bundles()
Category()<edge_begin><edge_end>Fragments()
Category()<edge_begin><edge_end>IU Details()
Custom Category(identifier, label, description)<edge_begin><edge_end>Status Provider()
Custom Category(identifier, label, description)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Custom Category(identifier, label, description)<edge_begin><edge_end>Feature()
Map Rule()<edge_begin><edge_end>Installable Unit Reference()
Map Rule()<edge_begin><edge_end>Description Provider(description)
Installable Unit Reference()<edge_begin><edge_end>Status Provider()
Installable Unit Reference()<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Installable Unit Reference()<edge_begin><edge_end>Installable Unit()
Exclusion Rule()<edge_begin><edge_end>Map Rule()
Valid Configurations Rule()<edge_begin><edge_end>Map Rule()
Valid Configurations Rule()<edge_begin><edge_end>Configuration(operating System, window System, architecture)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Enabled Status Provider(enabled)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Status Provider()
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Metadata Repository Reference(location, nature)<edge_begin><edge_end>Metadata Repository()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Status Provider()
Maven Mapping(name Pattern, group Id, artifact Id)<edge_begin><edge_end>Infos Provider(errors, warnings, infos)
Status Provider()<edge_begin><edge_end>Status(code, message)
I Artifact Key(classifier, id, version)<edge_begin><edge_end>Version()
I Copyright(location, body)<edge_begin><edge_end>URI()
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Touchpoint Type(id, version)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>Version()
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I License(location, body, digest)
I Installable Unit(filter, id, version, resolved, singleton)<edge_begin><edge_end>I Copyright(location, body)
I Installable Unit Fragment()<edge_begin><edge_end>I Installable Unit(filter, id, version, resolved, singleton)
I License(location, body, digest)<edge_begin><edge_end>URI()
I Provided Capability(name, namespace, version)<edge_begin><edge_end>Version()
I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)<edge_begin><edge_end>Version Range()
I Touchpoint Type(id, version)<edge_begin><edge_end>Version()
I Update Descriptor(id, range, description, severity)<edge_begin><edge_end>Version Range()
Artifact Key()<edge_begin><edge_end>I Artifact Key(classifier, id, version)
Copyright()<edge_begin><edge_end>I Copyright(location, body)
Metadata Repository()<edge_begin><edge_end>I Metadata Repository()
Metadata Repository()<edge_begin><edge_end>Installable Unit()
Metadata Repository()<edge_begin><edge_end>Repository Reference(location, type, options, nickname)
Metadata Repository()<edge_begin><edge_end>Property(key, value)
Installable Unit()<edge_begin><edge_end>I Installable Unit(filter, id, version, resolved, singleton)
Installable Unit()<edge_begin><edge_end>Artifact Key()
Installable Unit()<edge_begin><edge_end>Provided Capability()
Installable Unit()<edge_begin><edge_end>Required Capability()
Installable Unit()<edge_begin><edge_end>Property(key, value)
Installable Unit()<edge_begin><edge_end>Touchpoint Data()
Installable Unit Fragment()<edge_begin><edge_end>Installable Unit()
Installable Unit Fragment()<edge_begin><edge_end>I Installable Unit Fragment()
Installable Unit Fragment()<edge_begin><edge_end>Required Capability()
License()<edge_begin><edge_end>I License(location, body, digest)
Provided Capability()<edge_begin><edge_end>I Provided Capability(name, namespace, version)
Required Capability()<edge_begin><edge_end>I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)
Touchpoint Data()<edge_begin><edge_end>I Touchpoint Data()
Touchpoint Data()<edge_begin><edge_end>Instruction Map(key)
Touchpoint Instruction()<edge_begin><edge_end>I Touchpoint Instruction(body, import Attribute)
Touchpoint Type()<edge_begin><edge_end>I Touchpoint Type(id, version)
Update Descriptor()<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
Instruction Map(key)<edge_begin><edge_end>Touchpoint Instruction()
I Metadata Repository()<edge_begin><edge_end>I Queryable()
I Metadata Repository()<edge_begin><edge_end>I Repository(location, name, type, version, description, provider, modifiable)
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>I Adaptable()
I Repository(location, name, type, version, description, provider, modifiable)<edge_begin><edge_end>URI()
Repository Reference(location, type, options, nickname)<edge_begin><edge_end>URI()
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Installable Units()
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Properties()
Metadata Repository Structured View(name, loaded)<edge_begin><edge_end>Metadata Repository()
Installable Units()<edge_begin><edge_end>Categories()
Installable Units()<edge_begin><edge_end>Features()
Installable Units()<edge_begin><edge_end>Products()
Installable Units()<edge_begin><edge_end>Bundles()
Installable Units()<edge_begin><edge_end>Fragments()
Installable Units()<edge_begin><edge_end>Miscellaneous()
Categories()<edge_begin><edge_end>Category()
Features()<edge_begin><edge_end>Feature()
Products()<edge_begin><edge_end>Product()
Bundles()<edge_begin><edge_end>Bundle()
Fragments()<edge_begin><edge_end>Fragment()
Miscellaneous()<edge_begin><edge_end>Other IU()
IU Presentation(id, version, name, label, description, type)<edge_begin><edge_end>Version()
IU Presentation(id, version, name, label, description, type)<edge_begin><edge_end>Installable Unit()
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Presentation(id, version, name, label, description, type)
IU Presentation With Details(details Resolved)<edge_begin><edge_end>IU Details()
Fragment()<edge_begin><edge_end>Bundle()
Other IU()<edge_begin><edge_end>IU Presentation With Details(details Resolved)
Properties()<edge_begin><edge_end>Property(key, value)
Required Capabilities()<edge_begin><edge_end>Required Capability Wrapper()
Provided Capabilities()<edge_begin><edge_end>Provided Capability Wrapper()
Touchpoints()<edge_begin><edge_end>I Touchpoint Type(id, version)
Touchpoints()<edge_begin><edge_end>Touchpoint Data()
IU Details()<edge_begin><edge_end>Required Capabilities()
IU Details()<edge_begin><edge_end>Provided Capabilities()
IU Details()<edge_begin><edge_end>Properties()
IU Details()<edge_begin><edge_end>Touchpoints()
IU Details()<edge_begin><edge_end>I Update Descriptor(id, range, description, severity)
IU Details()<edge_begin><edge_end>I Copyright(location, body)
IU Details()<edge_begin><edge_end>I License(location, body, digest)
Required Capability Wrapper()<edge_begin><edge_end>I Required Capability(filter, name, namespace, range, negation, selector List, multiple, optional, greedy)
Required Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Required Capability Wrapper()<edge_begin><edge_end>Required Capability()
Provided Capability Wrapper()<edge_begin><edge_end>I Provided Capability(name, namespace, version)
Provided Capability Wrapper()<edge_begin><edge_end>Label Provider(label)
Provided Capability Wrapper()<edge_begin><edge_end>Provided Capability()
Book(title)<edge_begin><edge_end>Section(title)
Paragraph()<edge_begin><edge_end>Paragraph Value()
Section(title)<edge_begin><edge_end>Section(title)
Section(title)<edge_begin><edge_end>Paragraph()
Textual Value(value)<edge_begin><edge_end>Paragraph Value()
Itemized List Value()<edge_begin><edge_end>Paragraph Value()
Itemized List Value()<edge_begin><edge_end>Itemized List Value Item()
Itemized List Value Item()<edge_begin><edge_end>Paragraph()
Emphasis Value(value, role)<edge_begin><edge_end>Paragraph Value()
X Ref Value()<edge_begin><edge_end>Paragraph Value()
X Ref Value()<edge_begin><edge_end>Section(title)
Informal Table Value()<edge_begin><edge_end>Paragraph Value()
Informal Table Value()<edge_begin><edge_end>Informal Table Value Group(cols)
Informal Table Value Group(cols)<edge_begin><edge_end>Informal Table Value Head()
Informal Table Value Group(cols)<edge_begin><edge_end>Informal Table Value Body()
Informal Table Value Head()<edge_begin><edge_end>Informal Table Value Row()
Informal Table Value Body()<edge_begin><edge_end>Informal Table Value Row()
Informal Table Value Row()<edge_begin><edge_end>Informal Table Value Entry(value)
R Model Element(kind, name)<edge_begin><edge_end>String()
Schema()<edge_begin><edge_end>R Model Element(kind, name)
Schema()<edge_begin><edge_end>Table()
Table()<edge_begin><edge_end>R Model Element(kind, name)
Table()<edge_begin><edge_end>Schema()
Table()<edge_begin><edge_end>Column(type)
Table()<edge_begin><edge_end>Key()
Table()<edge_begin><edge_end>Foreign Key()
Column(type)<edge_begin><edge_end>R Model Element(kind, name)
Column(type)<edge_begin><edge_end>String()
Column(type)<edge_begin><edge_end>Table()
Column(type)<edge_begin><edge_end>Key()
Column(type)<edge_begin><edge_end>Foreign Key()
Key()<edge_begin><edge_end>R Model Element(kind, name)
Key()<edge_begin><edge_end>Table()
Key()<edge_begin><edge_end>Column(type)
Key()<edge_begin><edge_end>Foreign Key()
Foreign Key()<edge_begin><edge_end>R Model Element(kind, name)
Foreign Key()<edge_begin><edge_end>Column(type)
Foreign Key()<edge_begin><edge_end>Table()
Foreign Key()<edge_begin><edge_end>Key()
Valued Element(value)<edge_begin><edge_end>String()
Type()<edge_begin><edge_end>Valued Element(value)
Title()<edge_begin><edge_end>Valued Element(value)
Name()<edge_begin><edge_end>Valued Element(value)
Name()<edge_begin><edge_end>Author()
Name()<edge_begin><edge_end>Organisation()
Date()<edge_begin><edge_end>Valued Element(value)
Author()<edge_begin><edge_end>Name()
Adress()<edge_begin><edge_end>Valued Element(value)
Organisation()<edge_begin><edge_end>Name()
Organisation()<edge_begin><edge_end>Adress()
Organisation()<edge_begin><edge_end>Heading()
Phone()<edge_begin><edge_end>Valued Element(value)
Fax()<edge_begin><edge_end>Valued Element(value)
E Mail()<edge_begin><edge_end>Valued Element(value)
Heading()<edge_begin><edge_end>Organisation()
Heading()<edge_begin><edge_end>Phone()
Heading()<edge_begin><edge_end>Fax()
Heading()<edge_begin><edge_end>E Mail()
Abstract()<edge_begin><edge_end>Valued Element(value)
Keywords()<edge_begin><edge_end>Valued Element(value)
Section Body()<edge_begin><edge_end>Corps()
Section Body()<edge_begin><edge_end>Section()
Corps()<edge_begin><edge_end>Section Body()
Value()<edge_begin><edge_end>Corps()
Value()<edge_begin><edge_end>Valued Element(value)
Cite()<edge_begin><edge_end>Corps()
Cite()<edge_begin><edge_end>Valued Element(value)
Path()<edge_begin><edge_end>Valued Element(value)
Label()<edge_begin><edge_end>Valued Element(value)
Figure()<edge_begin><edge_end>Corps()
Figure()<edge_begin><edge_end>Path()
Figure()<edge_begin><edge_end>Label()
Figure()<edge_begin><edge_end>Title()
Item()<edge_begin><edge_end>Valued Element(value)
Item()<edge_begin><edge_end>Items()
Item()<edge_begin><edge_end>Enumerate()
Items()<edge_begin><edge_end>Corps()
Items()<edge_begin><edge_end>Item()
Enumerate()<edge_begin><edge_end>Corps()
Enumerate()<edge_begin><edge_end>Item()
Section()<edge_begin><edge_end>Corps()
Section()<edge_begin><edge_end>Title()
Section()<edge_begin><edge_end>Section Body()
Description()<edge_begin><edge_end>Valued Element(value)
Description()<edge_begin><edge_end>Date()
Citation()<edge_begin><edge_end>Label()
Citation()<edge_begin><edge_end>Author()
Citation()<edge_begin><edge_end>Description()
Citation()<edge_begin><edge_end>Bibliography()
Bibliography()<edge_begin><edge_end>Citation()
Bibliography()<edge_begin><edge_end>Document Body()
Document Body()<edge_begin><edge_end>Section()
Document Body()<edge_begin><edge_end>Bibliography()
Document Body()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>Type()
Document()<edge_begin><edge_end>Title()
Document()<edge_begin><edge_end>Author()
Document()<edge_begin><edge_end>Date()
Document()<edge_begin><edge_end>Heading()
Document()<edge_begin><edge_end>Abstract()
Document()<edge_begin><edge_end>Keywords()
Document()<edge_begin><edge_end>Document Body()
Project(name, basedir, description)<edge_begin><edge_end>String()
Project(name, basedir, description)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Project(name, basedir, description)<edge_begin><edge_end>Path(id, refid)
Project(name, basedir, description)<edge_begin><edge_end>Property()
Project(name, basedir, description)<edge_begin><edge_end>Task Def(name, classname)
Property Name(name)<edge_begin><edge_end>Property()
Property Name(name)<edge_begin><edge_end>String()
Property Value(value)<edge_begin><edge_end>Property Name(name)
Property Value(value)<edge_begin><edge_end>String()
Property Location(location)<edge_begin><edge_end>Property Name(name)
Property Location(location)<edge_begin><edge_end>String()
Property File(file)<edge_begin><edge_end>Property()
Property File(file)<edge_begin><edge_end>String()
Property Env(environment)<edge_begin><edge_end>Property()
Property Env(environment)<edge_begin><edge_end>String()
Target(name, description, unless, if Condition)<edge_begin><edge_end>String()
Target(name, description, unless, if Condition)<edge_begin><edge_end>Target(name, description, unless, if Condition)
Target(name, description, unless, if Condition)<edge_begin><edge_end>Task()
Basic()<edge_begin><edge_end>Pattern()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>Basic()
Mapper(type, classname, classpath, classpathref, from, to)<edge_begin><edge_end>String()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>Basic()
In Excludes(name, if Condition, unless)<edge_begin><edge_end>String()
Includes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Includes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Excludes File()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File List(dir, files)<edge_begin><edge_end>Basic()
File List(dir, files)<edge_begin><edge_end>String()
Filter(token, value)<edge_begin><edge_end>Basic()
Filter(token, value)<edge_begin><edge_end>String()
Filters File(file)<edge_begin><edge_end>Basic()
Filters File(file)<edge_begin><edge_end>String()
Path Element(path, location)<edge_begin><edge_end>Basic()
Path Element(path, location)<edge_begin><edge_end>String()
Set()<edge_begin><edge_end>Pattern()
Pattern Set()<edge_begin><edge_end>Set()
Pattern Set()<edge_begin><edge_end>In Excludes(name, if Condition, unless)
File Set(dir)<edge_begin><edge_end>Set()
File Set(dir)<edge_begin><edge_end>String()
File Set(dir)<edge_begin><edge_end>Pattern Set()
File Set(dir)<edge_begin><edge_end>Includes()
File Set(dir)<edge_begin><edge_end>Excludes()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Set()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>String()
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filter(token, value)
Filter Set(starttoken, endtoken)<edge_begin><edge_end>Filters File(file)
Path(id, refid)<edge_begin><edge_end>Set()
Path(id, refid)<edge_begin><edge_end>String()
Path(id, refid)<edge_begin><edge_end>Path(id, refid)
Path(id, refid)<edge_begin><edge_end>Path Element(path, location)
Path(id, refid)<edge_begin><edge_end>File Set(dir)
Class Path(refid)<edge_begin><edge_end>Set()
Class Path(refid)<edge_begin><edge_end>String()
Class Path(refid)<edge_begin><edge_end>Path Element(path, location)
Class Path(refid)<edge_begin><edge_end>File Set(dir)
Task()<edge_begin><edge_end>Target(name, description, unless, if Condition)
Task Def(name, classname)<edge_begin><edge_end>String()
New Task()<edge_begin><edge_end>Task()
New Task()<edge_begin><edge_end>Task Def(name, classname)
New Task()<edge_begin><edge_end>Attribut(name, value)
Attribut(name, value)<edge_begin><edge_end>String()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>Task()
Pre Defined Task(id, taskname, description)<edge_begin><edge_end>String()
Execution Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Exec(executable, dir)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>String()
Java(classname, jar, fork)<edge_begin><edge_end>Class Path(refid)
Miscellaneous Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Echo(message, file, append)<edge_begin><edge_end>Miscellaneous Task()
Echo(message, file, append)<edge_begin><edge_end>String()
Tstamp()<edge_begin><edge_end>Miscellaneous Task()
Tstamp()<edge_begin><edge_end>Format Tstamp(property, pattern, offset, unit, locale)
Format Tstamp(property, pattern, offset, unit, locale)<edge_begin><edge_end>String()
Compile Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Compile Task()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>String()
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>In Excludes(name, if Condition, unless)
Javac(srcdir, destdir, debug, fork, optimize, deprecation)<edge_begin><edge_end>Class Path(refid)
Documentation Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>Documentation Task()
Javadoc(sourcepath, destdir, packagenames, defaultexcludes, author, version, use, windowtitle)<edge_begin><edge_end>String()
Archive Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>Archive Task()
Jar(jarfile, basedir, compress, encoding, manifest)<edge_begin><edge_end>String()
File Task()<edge_begin><edge_end>Pre Defined Task(id, taskname, description)
Mkdir(dir)<edge_begin><edge_end>File Task()
Mkdir(dir)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Task()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>String()
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>File Set(dir)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Filter Set(starttoken, endtoken)
Copy(file, presservelastmodified, tofile, todir, overwrite, filtering, flatten, include Empty Dirs)<edge_begin><edge_end>Mapper(type, classname, classpath, classpathref, from, to)
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>File Task()
Delete(file, dir, verbose, quiet, failonerror, include Empty Dirs, includes, includesfile, excludes, excludesfile, defaultexcludes)<edge_begin><edge_end>String()
Query Module()<edge_begin><edge_end>Query()
Query()<edge_begin><edge_end>Where Clause()
Select Statement()<edge_begin><edge_end>Query()
Select Statement()<edge_begin><edge_end>Expression Term()
Select Statement()<edge_begin><edge_end>Select From Clause()
Select Statement()<edge_begin><edge_end>Having Clause()
Select Statement()<edge_begin><edge_end>Order Clause(is Asc, is Desc)
Having Clause()<edge_begin><edge_end>Expression()
Order Clause(is Asc, is Desc)<edge_begin><edge_end>Order Item(feature)
Order Item(feature)<edge_begin><edge_end>From Entry()
Update Statement()<edge_begin><edge_end>Query()
Update Statement()<edge_begin><edge_end>Update Clause()
Update Statement()<edge_begin><edge_end>Set Clause()
Update Clause()<edge_begin><edge_end>From Entry()
Set Clause()<edge_begin><edge_end>Update Item()
Update Item()<edge_begin><edge_end>Alias Attribute Expression(attributes)
Update Item()<edge_begin><edge_end>Value()
Delete Statement()<edge_begin><edge_end>Query()
Delete Statement()<edge_begin><edge_end>Delete Clause()
Delete Clause()<edge_begin><edge_end>From Clause()
Select From Clause()<edge_begin><edge_end>Select Clause(is Distinct)
Select From Clause()<edge_begin><edge_end>From Clause()
Select Clause(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Select Expression()
Select Aggregate Expression(is Distinct)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Avg Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Max Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Min Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Sum Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Count Aggregate()<edge_begin><edge_end>Select Aggregate Expression(is Distinct)
Select Constructor Expression(name)<edge_begin><edge_end>Select Expression()
Select Constructor Expression(name)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Clause()<edge_begin><edge_end>From Entry()
From Entry()<edge_begin><edge_end>Variable Declaration(name)
From Class()<edge_begin><edge_end>From Entry()
From Class()<edge_begin><edge_end>From Join(is Fetch)
From Collection()<edge_begin><edge_end>From Entry()
From Collection()<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Join(is Fetch)<edge_begin><edge_end>Alias Attribute Expression(attributes)
From Join(is Fetch)<edge_begin><edge_end>Variable Declaration(name)
Join()<edge_begin><edge_end>From Join(is Fetch)
Left Join(is Outer)<edge_begin><edge_end>From Join(is Fetch)
Inner Join()<edge_begin><edge_end>From Join(is Fetch)
Where Clause()<edge_begin><edge_end>Expression()
Operator Expression(operator)<edge_begin><edge_end>Expression()
Operator Expression(operator)<edge_begin><edge_end>Variable()
Operator Expression(operator)<edge_begin><edge_end>Expression Term()
Exists Expression(is Not)<edge_begin><edge_end>Expression()
Exists Expression(is Not)<edge_begin><edge_end>Select Statement()
All Expression()<edge_begin><edge_end>Expression()
All Expression()<edge_begin><edge_end>Select Statement()
Any Expression()<edge_begin><edge_end>Expression()
Any Expression()<edge_begin><edge_end>Select Statement()
Some Expression()<edge_begin><edge_end>Expression()
Some Expression()<edge_begin><edge_end>Select Statement()
Collection Expression(is Not)<edge_begin><edge_end>Expression()
Collection Expression(is Not)<edge_begin><edge_end>Variable()
Collection Expression(is Not)<edge_begin><edge_end>Alias Attribute Expression(attributes)
Null Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Null Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Expression()
Empty Comparison Expression(is Not)<edge_begin><edge_end>Variable()
Like Expression(is Not, pattern)<edge_begin><edge_end>Expression()
Like Expression(is Not, pattern)<edge_begin><edge_end>Variable()
In Expression(is Not)<edge_begin><edge_end>Expression()
In Expression(is Not)<edge_begin><edge_end>Variable()
In Seq Expression()<edge_begin><edge_end>In Expression(is Not)
In Seq Expression()<edge_begin><edge_end>Variable()
In Query Expression()<edge_begin><edge_end>In Expression(is Not)
In Query Expression()<edge_begin><edge_end>Select Statement()
Between Expression(is Not)<edge_begin><edge_end>Expression()
Between Expression(is Not)<edge_begin><edge_end>Variable()
Between Expression(is Not)<edge_begin><edge_end>Value()
Variable()<edge_begin><edge_end>Expression Term()
Expression Term()<edge_begin><edge_end>Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Select Expression()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable()
Alias Attribute Expression(attributes)<edge_begin><edge_end>Variable Declaration(name)
Parameter Expression(name)<edge_begin><edge_end>Variable()
Function(name)<edge_begin><edge_end>Variable()
Value()<edge_begin><edge_end>Variable()
Integer Expression(value)<edge_begin><edge_end>Value()
String Expression(value)<edge_begin><edge_end>Value()
Null Expression(value)<edge_begin><edge_end>Value()
Boolean Expression(value)<edge_begin><edge_end>Value()
Date Time Expression(value)<edge_begin><edge_end>Value()
Or Expression()<edge_begin><edge_end>Expression()
And Expression()<edge_begin><edge_end>Expression()
Model(package Name)<edge_begin><edge_end>Database Block(name)
Database Block(name)<edge_begin><edge_end>Config Block()
Database Block(name)<edge_begin><edge_end>Init Block()
Database Block(name)<edge_begin><edge_end>Migration Block()
Config Block()<edge_begin><edge_end>Configuration Statement(name)
Init Block()<edge_begin><edge_end>DDL Statement()
Content Uri(type)<edge_begin><edge_end>Content Uri Segment(name)
Migration Block()<edge_begin><edge_end>DDL Statement()
Case()<edge_begin><edge_end>Expression()
Select Statement()<edge_begin><edge_end>DML Statement()
Select Statement()<edge_begin><edge_end>Select Core Expression()
Select Statement()<edge_begin><edge_end>Ordering Term List()
Select Statement()<edge_begin><edge_end>Expression()
Ordering Term List()<edge_begin><edge_end>Ordering Term(asc, desc)
Select List()<edge_begin><edge_end>Column Source(name)
Where Expressions()<edge_begin><edge_end>Expression()
Group By Expressions()<edge_begin><edge_end>Expression()
Having Expressions()<edge_begin><edge_end>Expression()
Ordering Term(asc, desc)<edge_begin><edge_end>Expression()
Join Source()<edge_begin><edge_end>Single Source()
Join Source()<edge_begin><edge_end>Join Statement(natural, left, outer, inner, cross)
Select Source(name)<edge_begin><edge_end>Single Source()
Single Source Join()<edge_begin><edge_end>Single Source()
Single Source Join()<edge_begin><edge_end>Join Source()
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Single Source()
Join Statement(natural, left, outer, inner, cross)<edge_begin><edge_end>Expression()
Table Definition(name)<edge_begin><edge_end>DDL Statement()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DDL Statement()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>Table Definition(name)
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>Expression()
Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)<edge_begin><edge_end>DML Statement()
Alter Table Add Column Statement()<edge_begin><edge_end>DDL Statement()
Alter Table Add Column Statement()<edge_begin><edge_end>Table Definition(name)
Alter Table Add Column Statement()<edge_begin><edge_end>Column Source(name)
Drop Table Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop Table Statement(if Exists)<edge_begin><edge_end>Table Definition(name)
Drop Trigger Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop Trigger Statement(if Exists)<edge_begin><edge_end>Create Trigger Statement(temporary, name, when, event Type, update Column Names, for Each Row)
Drop View Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop View Statement(if Exists)<edge_begin><edge_end>Create View Statement(temporary)
Create Index Statement(unique, name)<edge_begin><edge_end>DDL Statement()
Create Index Statement(unique, name)<edge_begin><edge_end>Table Definition(name)
Create Index Statement(unique, name)<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Drop Index Statement(if Exists)<edge_begin><edge_end>DDL Statement()
Drop Index Statement(if Exists)<edge_begin><edge_end>Create Index Statement(unique, name)
Unique Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Unique Table Constraint()<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Unique Table Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Primary Constraint()<edge_begin><edge_end>Table Constraint(name)
Primary Constraint()<edge_begin><edge_end>Indexed Column(collation Name, asc, desc)
Primary Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Check Table Constraint()<edge_begin><edge_end>Table Constraint(name)
Check Table Constraint()<edge_begin><edge_end>Expression()
Indexed Column(collation Name, asc, desc)<edge_begin><edge_end>Column Def(type)
Delete Statement()<edge_begin><edge_end>DML Statement()
Delete Statement()<edge_begin><edge_end>Table Definition(name)
Delete Statement()<edge_begin><edge_end>Expression()
Insert Statement(conflict Resolution)<edge_begin><edge_end>DML Statement()
Insert Statement(conflict Resolution)<edge_begin><edge_end>Table Definition(name)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Column Def(type)
Insert Statement(conflict Resolution)<edge_begin><edge_end>Expression()
Insert Statement(conflict Resolution)<edge_begin><edge_end>Select Statement()
Update Statement(conflict Resolution)<edge_begin><edge_end>DML Statement()
Update Statement(conflict Resolution)<edge_begin><edge_end>Table Definition(name)
Update Statement(conflict Resolution)<edge_begin><edge_end>Update Column Expression()
Update Statement(conflict Resolution)<edge_begin><edge_end>Expression()
Update Column Expression()<edge_begin><edge_end>Column Def(type)
Update Column Expression()<edge_begin><edge_end>Expression()
Action Statement()<edge_begin><edge_end>Configuration Statement(name)
Action Statement()<edge_begin><edge_end>Content Uri(type)
Function(all)<edge_begin><edge_end>Configuration Statement(name)
Function(all)<edge_begin><edge_end>Expression()
Function(all)<edge_begin><edge_end>Function Arg(type, name)
Function(all)<edge_begin><edge_end>DML Statement()
Content Uri Param Segment(num, text)<edge_begin><edge_end>Content Uri Segment(name)
Expr Concat(op)<edge_begin><edge_end>Expression()
Expr Mult(op)<edge_begin><edge_end>Expression()
Expr Add(op)<edge_begin><edge_end>Expression()
Expr Bit(op)<edge_begin><edge_end>Expression()
Expr Relate(op)<edge_begin><edge_end>Expression()
Expr Equal(op)<edge_begin><edge_end>Expression()
Expr And(op)<edge_begin><edge_end>Expression()
Expr Or(op)<edge_begin><edge_end>Expression()
Null Check Expression()<edge_begin><edge_end>Expression()
Is Null()<edge_begin><edge_end>Expression()
Not Null()<edge_begin><edge_end>Expression()
New Column()<edge_begin><edge_end>Expression()
New Column()<edge_begin><edge_end>Column Source(name)
Old Column()<edge_begin><edge_end>Expression()
Old Column()<edge_begin><edge_end>Column Source(name)
Column Source Ref(all)<edge_begin><edge_end>Expression()
Column Source Ref(all)<edge_begin><edge_end>Select Source(name)
Column Source Ref(all)<edge_begin><edge_end>Column Source(name)
Literal()<edge_begin><edge_end>Expression()
Literal()<edge_begin><edge_end>Literal Value()
Nested Expression()<edge_begin><edge_end>Expression()
Select Statement Expression(not, exists)<edge_begin><edge_end>Expression()
Select Statement Expression(not, exists)<edge_begin><edge_end>Select Statement()
Case Expression()<edge_begin><edge_end>Expression()
Case Expression()<edge_begin><edge_end>Case()
Cast Expression(type)<edge_begin><edge_end>Expression()
Function Argument()<edge_begin><edge_end>Expression()
Function Argument()<edge_begin><edge_end>Function Arg(type, name)
Select Core(op)<edge_begin><edge_end>Select Core Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select Core Expression()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Select List()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Join Source()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Where Expressions()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Group By Expressions()
Select Expression(distinct, all, all Columns)<edge_begin><edge_end>Having Expressions()
Single Source Table()<edge_begin><edge_end>Select Source(name)
Single Source Table()<edge_begin><edge_end>Table Definition(name)
Single Source Select Statement()<edge_begin><edge_end>Select Source(name)
Single Source Select Statement()<edge_begin><edge_end>Select Statement()
Result Column()<edge_begin><edge_end>Column Source(name)
Result Column()<edge_begin><edge_end>Expression()
Numeric Literal(number)<edge_begin><edge_end>Literal Value()
String Literal(literal)<edge_begin><edge_end>Literal Value()
Null Literal(literal)<edge_begin><edge_end>Literal Value()
Current Time Literal(literal)<edge_begin><edge_end>Literal Value()
Current Date Literal(literal)<edge_begin><edge_end>Literal Value()
Current Time Stamp Literal(literal)<edge_begin><edge_end>Literal Value()
Create Table Statement(temporary)<edge_begin><edge_end>Table Definition(name)
Create Table Statement(temporary)<edge_begin><edge_end>Column Source(name)
Create Table Statement(temporary)<edge_begin><edge_end>Table Constraint(name)
Create View Statement(temporary)<edge_begin><edge_end>Table Definition(name)
Create View Statement(temporary)<edge_begin><edge_end>Select Statement()
Alter Table Rename Statement()<edge_begin><edge_end>Table Definition(name)
Column Def(type)<edge_begin><edge_end>Column Source(name)
Column Def(type)<edge_begin><edge_end>Column Constraint()
Primary Key Column Constraint(asc, desc, autoincrement)<edge_begin><edge_end>Column Constraint()
Not Null Constraint()<edge_begin><edge_end>Column Constraint()
Not Null Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Unique Constraint()<edge_begin><edge_end>Column Constraint()
Unique Constraint()<edge_begin><edge_end>Conflict Clause(resolution)
Default Constraint()<edge_begin><edge_end>Column Constraint()
Default Constraint()<edge_begin><edge_end>Default Value()
Check Constraint()<edge_begin><edge_end>Column Constraint()
Check Constraint()<edge_begin><edge_end>Expression()
Literal Default Value()<edge_begin><edge_end>Default Value()
Literal Default Value()<edge_begin><edge_end>Literal Value()
Expression Default Value()<edge_begin><edge_end>Default Value()
Expression Default Value()<edge_begin><edge_end>Expression()
Researcher(name, for Name)<edge_begin><edge_end>Write(time Spent)
Researcher(name, for Name)<edge_begin><edge_end>Review(date)
Researcher(name, for Name)<edge_begin><edge_end>Paper()
Researcher(name, for Name)<edge_begin><edge_end>Skill(description)
Paper()<edge_begin><edge_end>Named(name)
Paper()<edge_begin><edge_end>Paragraph(content)
Paper()<edge_begin><edge_end>Researcher(name, for Name)
Paper()<edge_begin><edge_end>Paper()
Paragraph(content)<edge_begin><edge_end>Counted(id)
Paragraph(content)<edge_begin><edge_end>Named(name)
Paragraph(content)<edge_begin><edge_end>Review Note(content)
Review Note(content)<edge_begin><edge_end>Named(name)
Write(time Spent)<edge_begin><edge_end>Labelled(lname)
Write(time Spent)<edge_begin><edge_end>Paragraph(content)
Review(date)<edge_begin><edge_end>Labelled(lname)
Review(date)<edge_begin><edge_end>Review Note(content)
Publication Structure()<edge_begin><edge_end>Named(name)
Publication Structure()<edge_begin><edge_end>Researcher(name, for Name)
Publication Structure()<edge_begin><edge_end>Paper()
Publication Structure()<edge_begin><edge_end>Keyword(word)
Keyword(word)<edge_begin><edge_end>Named(name)
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Specification()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Import Scope()<edge_begin><edge_end>Statechart Scope()
Import Scope()<edge_begin><edge_end>Import(imported Namespace)
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Time Event Spec(type, unit)<edge_begin><edge_end>Event Spec()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Guard()
Petri Net()<edge_begin><edge_end>Place(token)
Petri Net()<edge_begin><edge_end>Transition()
Place(token)<edge_begin><edge_end>Named(name)
Transition()<edge_begin><edge_end>Named(name)
Transition()<edge_begin><edge_end>In Arc()
Transition()<edge_begin><edge_end>Out Arc()
In Arc()<edge_begin><edge_end>Arc(weight)
In Arc()<edge_begin><edge_end>Place(token)
Out Arc()<edge_begin><edge_end>Arc(weight)
Out Arc()<edge_begin><edge_end>Place(token)
Author()<edge_begin><edge_end>Person(first Name, second Name, last Name)
Editor()<edge_begin><edge_end>Person(first Name, second Name, last Name)
Page()<edge_begin><edge_end>Int Value(value)
Author Field()<edge_begin><edge_end>Field()
Author Field()<edge_begin><edge_end>Author()
Editor Field()<edge_begin><edge_end>Field()
Editor Field()<edge_begin><edge_end>Editor()
Title Field()<edge_begin><edge_end>Field()
Title Field()<edge_begin><edge_end>String Value(value)
Book Title Field()<edge_begin><edge_end>Field()
Book Title Field()<edge_begin><edge_end>String Value(value)
Number Field()<edge_begin><edge_end>Int Value(value)
Number Field()<edge_begin><edge_end>Field()
Year Field()<edge_begin><edge_end>Field()
Year Field()<edge_begin><edge_end>Year Value(value)
Bibtex Key Field()<edge_begin><edge_end>Field()
Bibtex Key Field()<edge_begin><edge_end>String Value(value)
Journal Field()<edge_begin><edge_end>Field()
Journal Field()<edge_begin><edge_end>String Value(value)
Volume Field()<edge_begin><edge_end>Field()
Volume Field()<edge_begin><edge_end>Int Value(value)
Page Field()<edge_begin><edge_end>Field()
Page Field()<edge_begin><edge_end>Page()
Series Field()<edge_begin><edge_end>String Value(value)
Series Field()<edge_begin><edge_end>Field()
Address Field()<edge_begin><edge_end>Field()
Address Field()<edge_begin><edge_end>String Value(value)
Month Field()<edge_begin><edge_end>Field()
Month Field()<edge_begin><edge_end>String Value(value)
Organization Field()<edge_begin><edge_end>Field()
Organization Field()<edge_begin><edge_end>String Value(value)
Note Field()<edge_begin><edge_end>Field()
Note Field()<edge_begin><edge_end>String Value(value)
Publisher Field()<edge_begin><edge_end>Field()
Publisher Field()<edge_begin><edge_end>String Value(value)
Part Field()<edge_begin><edge_end>Int Value(value)
Part Field()<edge_begin><edge_end>Field()
Eid Field()<edge_begin><edge_end>Field()
Eid Field()<edge_begin><edge_end>String Value(value)
Url Field()<edge_begin><edge_end>String Value(value)
Url Field()<edge_begin><edge_end>Field()
Keyword()<edge_begin><edge_end>String Value(value)
Keyword Field()<edge_begin><edge_end>Field()
Keyword Field()<edge_begin><edge_end>Keyword()
Abstract Field()<edge_begin><edge_end>String Value(value)
Abstract Field()<edge_begin><edge_end>Field()
Review Field()<edge_begin><edge_end>String Value(value)
Review Field()<edge_begin><edge_end>Field()
Entry()<edge_begin><edge_end>Bibtex Key Field()
Entry()<edge_begin><edge_end>Abstract Field()
Entry()<edge_begin><edge_end>Url Field()
Entry()<edge_begin><edge_end>Keyword Field()
Entry()<edge_begin><edge_end>Review Field()
In Proceedings Entry()<edge_begin><edge_end>Entry()
In Proceedings Entry()<edge_begin><edge_end>Author Field()
In Proceedings Entry()<edge_begin><edge_end>Title Field()
In Proceedings Entry()<edge_begin><edge_end>Book Title Field()
In Proceedings Entry()<edge_begin><edge_end>Year Field()
In Proceedings Entry()<edge_begin><edge_end>Editor Field()
In Proceedings Entry()<edge_begin><edge_end>Page Field()
In Proceedings Entry()<edge_begin><edge_end>Volume Field()
In Proceedings Entry()<edge_begin><edge_end>Number Field()
In Proceedings Entry()<edge_begin><edge_end>Series Field()
In Proceedings Entry()<edge_begin><edge_end>Address Field()
In Proceedings Entry()<edge_begin><edge_end>Month Field()
In Proceedings Entry()<edge_begin><edge_end>Organization Field()
In Proceedings Entry()<edge_begin><edge_end>Note Field()
In Proceedings Entry()<edge_begin><edge_end>Publisher Field()
Article Entry()<edge_begin><edge_end>Entry()
Article Entry()<edge_begin><edge_end>Author Field()
Article Entry()<edge_begin><edge_end>Title Field()
Article Entry()<edge_begin><edge_end>Year Field()
Article Entry()<edge_begin><edge_end>Journal Field()
Article Entry()<edge_begin><edge_end>Page Field()
Article Entry()<edge_begin><edge_end>Volume Field()
Article Entry()<edge_begin><edge_end>Number Field()
Article Entry()<edge_begin><edge_end>Month Field()
Article Entry()<edge_begin><edge_end>Note Field()
Article Entry()<edge_begin><edge_end>Part Field()
Article Entry()<edge_begin><edge_end>Eid Field()
Bibliography()<edge_begin><edge_end>Entry()
Named Element(name, documentation)<edge_begin><edge_end>Taggable()
Database Model()<edge_begin><edge_end>Named Element(name, documentation)
Database Model()<edge_begin><edge_end>Table()
Database Model()<edge_begin><edge_end>Data Type()
Database Model()<edge_begin><edge_end>Tag(name, documentation)
Database Model()<edge_begin><edge_end>Configuration()
Table()<edge_begin><edge_end>Named Element(name, documentation)
Table()<edge_begin><edge_end>Column(nullable, primary Key, size, scale, array Dimensions, unique)
Table()<edge_begin><edge_end>Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)
Column(nullable, primary Key, size, scale, array Dimensions, unique)<edge_begin><edge_end>Named Element(name, documentation)
Column(nullable, primary Key, size, scale, array Dimensions, unique)<edge_begin><edge_end>Data Type()
Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)<edge_begin><edge_end>Named Element(name, documentation)
Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)<edge_begin><edge_end>Column(nullable, primary Key, size, scale, array Dimensions, unique)
Foreign Key(source Lower Boundary, source Upper Boundary, target Lower Boundary, target Upper Boundary)<edge_begin><edge_end>Table()
Data Type()<edge_begin><edge_end>Named Element(name, documentation)
Taggable()<edge_begin><edge_end>Tag(name, documentation)
Pseudostate()<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Region()
Vertex()<edge_begin><edge_end>Transition()
Region()<edge_begin><edge_end>Vertex()
Region()<edge_begin><edge_end>Composite Element()
Transition()<edge_begin><edge_end>Specification Element(specification)
Transition()<edge_begin><edge_end>Reaction()
Transition()<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Regular State()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Statechart(domain ID)<edge_begin><edge_end>Specification Element(specification)
Statechart(domain ID)<edge_begin><edge_end>Reactive Element()
Statechart(domain ID)<edge_begin><edge_end>Scoped Element(namespace)
Statechart(domain ID)<edge_begin><edge_end>Composite Element()
Statechart(domain ID)<edge_begin><edge_end>Import(imported Namespace)
Entry(kind)<edge_begin><edge_end>Pseudostate()
Exit()<edge_begin><edge_end>Pseudostate()
Reactive Element()<edge_begin><edge_end>Reaction()
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Effect()
Reaction()<edge_begin><edge_end>Reaction Property()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart(domain ID)
Regular State()<edge_begin><edge_end>Vertex()
Composite Element()<edge_begin><edge_end>Region()
Action(delay, is Immediate, label)<edge_begin><edge_end>Effect()
Assignment()<edge_begin><edge_end>Effect()
Emission()<edge_begin><edge_end>Effect()
Region()<edge_begin><edge_end>Scope(id, label, interface Declaration)
Region()<edge_begin><edge_end>State(type, is Initial, is Final)
Substitution(formal, actual)<edge_begin><edge_end>Scope(id, label, interface Declaration)
State(type, is Initial, is Final)<edge_begin><edge_end>Scope(id, label, interface Declaration)
State(type, is Initial, is Final)<edge_begin><edge_end>Region()
State(type, is Initial, is Final)<edge_begin><edge_end>Transition(priority, type, is History)
Transition(priority, type, is History)<edge_begin><edge_end>Action(delay, is Immediate, label)
Transition(priority, type, is History)<edge_begin><edge_end>State(type, is Initial, is Final)
Scope(id, label, interface Declaration)<edge_begin><edge_end>Action(delay, is Immediate, label)
Scope(id, label, interface Declaration)<edge_begin><edge_end>Substitution(formal, actual)
Scope(id, label, interface Declaration)<edge_begin><edge_end>Parsable()
Text Effect()<edge_begin><edge_end>Effect()
Identity Specifier(generation Type, start Value, increment, minimum, maximum, cycle Option)<edge_begin><edge_end>SQL Object(description, label)
Typed Element()<edge_begin><edge_end>SQL Object(description, label)
Typed Element()<edge_begin><edge_end>SQL Data Type()
Typed Element()<edge_begin><edge_end>User Defined Type()
Dependency(dependency Type)<edge_begin><edge_end>SQL Object(description, label)
Schema()<edge_begin><edge_end>SQL Object(description, label)
Schema()<edge_begin><edge_end>Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)
Schema()<edge_begin><edge_end>Index(clustered, fill Factor, unique, system Generated)
Schema()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Schema()<edge_begin><edge_end>Sequence()
Schema()<edge_begin><edge_end>Database(vendor, version)
Schema()<edge_begin><edge_end>Catalog()
Schema()<edge_begin><edge_end>Assertion()
Schema()<edge_begin><edge_end>User Defined Type()
Schema()<edge_begin><edge_end>Character Set(repertoire, default Collation, encoding)
Schema()<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Schema()<edge_begin><edge_end>Authorization Identifier()
SQL Object(description, label)<edge_begin><edge_end>Dependency(dependency Type)
SQL Object(description, label)<edge_begin><edge_end>Comment(description)
SQL Object(description, label)<edge_begin><edge_end>Object Extension()
SQL Object(description, label)<edge_begin><edge_end>Privilege(grantable, action, with Hierarchy)
Sequence()<edge_begin><edge_end>Typed Element()
Sequence()<edge_begin><edge_end>Identity Specifier(generation Type, start Value, increment, minimum, maximum, cycle Option)
Sequence()<edge_begin><edge_end>Schema()
Database(vendor, version)<edge_begin><edge_end>SQL Object(description, label)
Database(vendor, version)<edge_begin><edge_end>Schema()
Database(vendor, version)<edge_begin><edge_end>Event(for, condition, action, enabled)
Database(vendor, version)<edge_begin><edge_end>Catalog()
Database(vendor, version)<edge_begin><edge_end>Authorization Identifier()
Event(for, condition, action, enabled)<edge_begin><edge_end>SQL Object(description, label)
Event(for, condition, action, enabled)<edge_begin><edge_end>Database(vendor, version)
Comment(description)<edge_begin><edge_end>SQL Object(description, label)
Catalog()<edge_begin><edge_end>SQL Object(description, label)
Catalog()<edge_begin><edge_end>Database(vendor, version)
Catalog()<edge_begin><edge_end>Schema()
Object Extension()<edge_begin><edge_end>SQL Object(description, label)
Assertion()<edge_begin><edge_end>Constraint(deferrable, initially Deferred, enforced)
Assertion()<edge_begin><edge_end>Search Condition()
Assertion()<edge_begin><edge_end>Schema()
Assertion()<edge_begin><edge_end>Base Table()
Constraint(deferrable, initially Deferred, enforced)<edge_begin><edge_end>SQL Object(description, label)
Table Constraint()<edge_begin><edge_end>Constraint(deferrable, initially Deferred, enforced)
Table Constraint()<edge_begin><edge_end>Base Table()
Reference Constraint()<edge_begin><edge_end>Table Constraint()
Reference Constraint()<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Check Constraint()<edge_begin><edge_end>Table Constraint()
Check Constraint()<edge_begin><edge_end>Search Condition()
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Reference Constraint()
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Unique Constraint(clustered)
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Index(clustered, fill Factor, unique, system Generated)
Foreign Key(match, on Update, on Delete)<edge_begin><edge_end>Base Table()
Unique Constraint(clustered)<edge_begin><edge_end>Reference Constraint()
Unique Constraint(clustered)<edge_begin><edge_end>Foreign Key(match, on Update, on Delete)
Primary Key()<edge_begin><edge_end>Unique Constraint(clustered)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>SQL Object(description, label)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>Schema()
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>Index Member(increment Type)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Index(clustered, fill Factor, unique, system Generated)<edge_begin><edge_end>Foreign Key(match, on Update, on Delete)
Index Member(increment Type)<edge_begin><edge_end>SQL Object(description, label)
Index Member(increment Type)<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Index Member(increment Type)<edge_begin><edge_end>Index Expression(sql)
Index Expression(sql)<edge_begin><edge_end>SQL Object(description, label)
User Defined Type()<edge_begin><edge_end>Data Type()
User Defined Type()<edge_begin><edge_end>Schema()
User Defined Type()<edge_begin><edge_end>User Defined Type Ordering(ordering Form, ordering Category)
Data Type()<edge_begin><edge_end>SQL Object(description, label)
Predefined Data Type(primitive Type)<edge_begin><edge_end>SQL Data Type()
Collection Data Type()<edge_begin><edge_end>Constructed Data Type()
Collection Data Type()<edge_begin><edge_end>Element Type()
Numerical Data Type(precision)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Character String Data Type(length, coercibility, fixed Length, collation Name)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Character String Data Type(length, coercibility, fixed Length, collation Name)<edge_begin><edge_end>Character Set(repertoire, default Collation, encoding)
Row Data Type()<edge_begin><edge_end>Constructed Data Type()
Row Data Type()<edge_begin><edge_end>Field(scope Check, scope Checked)
Array Data Type(max Cardinality)<edge_begin><edge_end>Collection Data Type()
Multiset Data Type()<edge_begin><edge_end>Collection Data Type()
Boolean Data Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Interval Data Type(leading Qualifier, trailing Qualifier, leading Field Precision, trailing Field Precision, fractional Seconds Precision)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Binary String Data Type(length)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Character Set(repertoire, default Collation, encoding)<edge_begin><edge_end>SQL Object(description, label)
Character Set(repertoire, default Collation, encoding)<edge_begin><edge_end>Character String Data Type(length, coercibility, fixed Length, collation Name)
Character Set(repertoire, default Collation, encoding)<edge_begin><edge_end>Schema()
Time Data Type(fractional Seconds Precision, time Zone)<edge_begin><edge_end>Predefined Data Type(primitive Type)
Distinct User Defined Type()<edge_begin><edge_end>User Defined Type()
Distinct User Defined Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Structured User Defined Type(instantiable, final)<edge_begin><edge_end>User Defined Type()
Structured User Defined Type(instantiable, final)<edge_begin><edge_end>Structured User Defined Type(instantiable, final)
Structured User Defined Type(instantiable, final)<edge_begin><edge_end>Attribute Definition(scope Check, scope Checked, default Value)
Structured User Defined Type(instantiable, final)<edge_begin><edge_end>Method(overriding, constructor)
Attribute Definition(scope Check, scope Checked, default Value)<edge_begin><edge_end>Typed Element()
Fixed Precision Data Type()<edge_begin><edge_end>Exact Numeric Data Type(scale)
Domain(default Value)<edge_begin><edge_end>Distinct User Defined Type()
Domain(default Value)<edge_begin><edge_end>Check Constraint()
Field(scope Check, scope Checked)<edge_begin><edge_end>Typed Element()
Reference Data Type()<edge_begin><edge_end>Constructed Data Type()
Reference Data Type()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Reference Data Type()<edge_begin><edge_end>Structured User Defined Type(instantiable, final)
Constructed Data Type()<edge_begin><edge_end>Data Type()
SQL Data Type()<edge_begin><edge_end>Data Type()
Data Link Data Type(length, link Control, integrity Control, read Permission, write Permission, recovery, unlink)<edge_begin><edge_end>Predefined Data Type(primitive Type)
User Defined Type Ordering(ordering Form, ordering Category)<edge_begin><edge_end>SQL Object(description, label)
User Defined Type Ordering(ordering Form, ordering Category)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Date Data Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Exact Numeric Data Type(scale)<edge_begin><edge_end>Numerical Data Type(precision)
Approximate Numeric Data Type()<edge_begin><edge_end>Numerical Data Type(precision)
Integer Data Type()<edge_begin><edge_end>Exact Numeric Data Type(scale)
XML Data Type()<edge_begin><edge_end>Predefined Data Type(primitive Type)
Element Type()<edge_begin><edge_end>Typed Element()
Element Type()<edge_begin><edge_end>Collection Data Type()
Query Expression Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
Query Expression Default(SQL)<edge_begin><edge_end>Query Expression()
Search Condition Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
Search Condition Default(SQL)<edge_begin><edge_end>Search Condition()
Value Expression Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
Value Expression Default(SQL)<edge_begin><edge_end>Value Expression()
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>SQL Object(description, label)
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>Parameter(mode, locator)
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>Source(body)
Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)<edge_begin><edge_end>Schema()
Source(body)<edge_begin><edge_end>SQL Object(description, label)
Parameter(mode, locator)<edge_begin><edge_end>Typed Element()
Parameter(mode, locator)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Parameter(mode, locator)<edge_begin><edge_end>Character String Data Type(length, coercibility, fixed Length, collation Name)
Procedure(max Result Sets, old Save Point)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Procedure(max Result Sets, old Save Point)<edge_begin><edge_end>Routine Result Table()
Function(null Call, static, transform Group, type Preserving, mutator)<edge_begin><edge_end>Routine(specific Name, language, parameter Style, deterministic, sql Data Access, creation TS, last Altered TS, authorization ID, security, external Name)
Function(null Call, static, transform Group, type Preserving, mutator)<edge_begin><edge_end>Routine Result Table()
Function(null Call, static, transform Group, type Preserving, mutator)<edge_begin><edge_end>Parameter(mode, locator)
Routine Result Table()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Method(overriding, constructor)<edge_begin><edge_end>Function(null Call, static, transform Group, type Preserving, mutator)
User Defined Function()<edge_begin><edge_end>Function(null Call, static, transform Group, type Preserving, mutator)
Built In Function()<edge_begin><edge_end>Function(null Call, static, transform Group, type Preserving, mutator)
SQL Data Statement()<edge_begin><edge_end>SQL Statement()
SQL Schema Statement()<edge_begin><edge_end>SQL Statement()
SQL Control Statement()<edge_begin><edge_end>SQL Statement()
SQL Data Change Statement()<edge_begin><edge_end>SQL Data Statement()
SQL Statement Default(SQL)<edge_begin><edge_end>SQL Object(description, label)
SQL Statement Default(SQL)<edge_begin><edge_end>SQL Statement()
SQL Connection Statement()<edge_begin><edge_end>SQL Statement()
SQL Diagnostics Statement()<edge_begin><edge_end>SQL Statement()
SQL Dynamic Statement()<edge_begin><edge_end>SQL Statement()
SQL Session Statement()<edge_begin><edge_end>SQL Statement()
SQL Transaction Statement()<edge_begin><edge_end>SQL Statement()
View Table(check Type)<edge_begin><edge_end>Derived Table()
Temporary Table(local, delete On Commit)<edge_begin><edge_end>Base Table()
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>SQL Object(description, label)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Schema()
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Structured User Defined Type(instantiable, final)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)
Table(self Ref Column Generation, insertable, updatable)<edge_begin><edge_end>Index(clustered, fill Factor, unique, system Generated)
Persistent Table()<edge_begin><edge_end>Base Table()
Derived Table()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Derived Table()<edge_begin><edge_end>Query Expression()
Base Table()<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Base Table()<edge_begin><edge_end>Table Constraint()
Base Table()<edge_begin><edge_end>Foreign Key(match, on Update, on Delete)
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Typed Element()
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Identity Specifier(generation Type, start Value, increment, minimum, maximum, cycle Option)
Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)<edge_begin><edge_end>Value Expression()
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>SQL Object(description, label)
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Schema()
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Table(self Ref Column Generation, insertable, updatable)
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>SQL Statement()
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Column(implementation Dependent, nullable, default Value, scope Check, scope Checked)
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Search Condition()
Trigger(action Granularity, time Stamp, action Time, update Type, insert Type, delete Type, old Row, new Row, old Table, new Table)<edge_begin><edge_end>Date()
Authorization Identifier()<edge_begin><edge_end>SQL Object(description, label)
Authorization Identifier()<edge_begin><edge_end>Schema()
Authorization Identifier()<edge_begin><edge_end>Database(vendor, version)
Authorization Identifier()<edge_begin><edge_end>Role Authorization(grantable)
Authorization Identifier()<edge_begin><edge_end>Privilege(grantable, action, with Hierarchy)
Privilege(grantable, action, with Hierarchy)<edge_begin><edge_end>SQL Object(description, label)
Privilege(grantable, action, with Hierarchy)<edge_begin><edge_end>Authorization Identifier()
Group()<edge_begin><edge_end>Authorization Identifier()
Group()<edge_begin><edge_end>User()
User()<edge_begin><edge_end>Authorization Identifier()
User()<edge_begin><edge_end>Group()
Role()<edge_begin><edge_end>Authorization Identifier()
Role()<edge_begin><edge_end>Role Authorization(grantable)
Role Authorization(grantable)<edge_begin><edge_end>SQL Object(description, label)
Role Authorization(grantable)<edge_begin><edge_end>Role()
Role Authorization(grantable)<edge_begin><edge_end>Authorization Identifier()
Statemachine(self Name, translation)<edge_begin><edge_end>Statemachine(self Name, translation)
Statemachine(self Name, translation)<edge_begin><edge_end>Abstract Node()
Statemachine(self Name, translation)<edge_begin><edge_end>Transition(operations)
Statemachine Owner()<edge_begin><edge_end>Statemachine(self Name, translation)
Transition(operations)<edge_begin><edge_end>Abstract Node()
Abstract Node()<edge_begin><edge_end>Transition(operations)
State(active)<edge_begin><edge_end>Abstract Node()
State(active)<edge_begin><edge_end>Statemachine Owner()
State(active)<edge_begin><edge_end>State(active)
Initial()<edge_begin><edge_end>Abstract Node()
Final()<edge_begin><edge_end>Abstract Node()
Any()<edge_begin><edge_end>Abstract Node()
Junction()<edge_begin><edge_end>Abstract Node()
Fork()<edge_begin><edge_end>Abstract Node()
Statemachine()<edge_begin><edge_end>Event(name)
Statemachine()<edge_begin><edge_end>Command(name)
Statemachine()<edge_begin><edge_end>Guard(name)
Statemachine()<edge_begin><edge_end>State(name)
State(name)<edge_begin><edge_end>Command(name)
State(name)<edge_begin><edge_end>State(name)
State(name)<edge_begin><edge_end>Self Event()
State(name)<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>Event(name)
Transition()<edge_begin><edge_end>Guard Call(parameters)
Transition()<edge_begin><edge_end>State(name)
Transition()<edge_begin><edge_end>Command(name)
Self Event()<edge_begin><edge_end>Event(name)
Self Event()<edge_begin><edge_end>Guard Call(parameters)
Self Event()<edge_begin><edge_end>Command(name)
Guard Call(parameters)<edge_begin><edge_end>Guard(name)
Guard(name)<edge_begin><edge_end>Parameter(name, type)
Schema(name)<edge_begin><edge_end>Table(name)
Schema(name)<edge_begin><edge_end>Foreign Key(name)
Table(name)<edge_begin><edge_end>Schema(name)
Table(name)<edge_begin><edge_end>Column(name, type)
Table(name)<edge_begin><edge_end>Key(name)
Table(name)<edge_begin><edge_end>Foreign Key(name)
Column(name, type)<edge_begin><edge_end>Table(name)
Column(name, type)<edge_begin><edge_end>Key(name)
Column(name, type)<edge_begin><edge_end>Foreign Key(name)
Key(name)<edge_begin><edge_end>Table(name)
Key(name)<edge_begin><edge_end>Column(name, type)
Key(name)<edge_begin><edge_end>Foreign Key(name)
Foreign Key(name)<edge_begin><edge_end>Schema(name)
Foreign Key(name)<edge_begin><edge_end>Key(name)
Foreign Key(name)<edge_begin><edge_end>Table(name)
Foreign Key(name)<edge_begin><edge_end>Column(name, type)
Database(name, url)<edge_begin><edge_end>Model Element(comment)
Database(name, url)<edge_begin><edge_end>Schema(name)
Schema(name)<edge_begin><edge_end>Model Element(comment)
Schema(name)<edge_begin><edge_end>Table(name)
Schema(name)<edge_begin><edge_end>Database(name, url)
Table(name)<edge_begin><edge_end>Model Element(comment)
Table(name)<edge_begin><edge_end>Column(name, type, is Primary Key, is Unique)
Table(name)<edge_begin><edge_end>Foreign Key(name)
Table(name)<edge_begin><edge_end>Schema(name)
Foreign Key(name)<edge_begin><edge_end>Model Element(comment)
Foreign Key(name)<edge_begin><edge_end>Table(name)
Column(name, type, is Primary Key, is Unique)<edge_begin><edge_end>Model Element(comment)
Column(name, type, is Primary Key, is Unique)<edge_begin><edge_end>Table(name)
Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Def Root()
Statechart Root()<edge_begin><edge_end>Statechart Specification()
State Root()<edge_begin><edge_end>Def Root()
State Root()<edge_begin><edge_end>State Specification()
Transition Root()<edge_begin><edge_end>Def Root()
Transition Root()<edge_begin><edge_end>Transition Specification()
Transition Specification()<edge_begin><edge_end>Transition Reaction()
Interface Scope()<edge_begin><edge_end>Statechart Scope()
Internal Scope()<edge_begin><edge_end>Statechart Scope()
Variable Definition(readonly, external)<edge_begin><edge_end>Expression()
Transition Reaction()<edge_begin><edge_end>Reaction Properties()
Reaction Properties()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Reaction Property()
Entry Point Spec()<edge_begin><edge_end>Entrypoint()
Exit Point Spec()<edge_begin><edge_end>Reaction Property()
Exit Point Spec()<edge_begin><edge_end>Exitpoint()
Regular Event Spec()<edge_begin><edge_end>Event Spec()
Regular Event Spec()<edge_begin><edge_end>Expression()
Time Event Spec(type, value, unit)<edge_begin><edge_end>Event Spec()
Builtin Event Spec()<edge_begin><edge_end>Event Spec()
Entry Event()<edge_begin><edge_end>Builtin Event Spec()
Exit Event()<edge_begin><edge_end>Builtin Event Spec()
On Cycle Event()<edge_begin><edge_end>Builtin Event Spec()
Always Event()<edge_begin><edge_end>Builtin Event Spec()
Default Event()<edge_begin><edge_end>Builtin Event Spec()
Bool Literal(value)<edge_begin><edge_end>Literal()
Int Literal(value)<edge_begin><edge_end>Literal()
Real Literal(value)<edge_begin><edge_end>Literal()
Hex Literal(value)<edge_begin><edge_end>Literal()
String Literal(value)<edge_begin><edge_end>Literal()
Reaction Trigger()<edge_begin><edge_end>Event Spec()
Reaction Trigger()<edge_begin><edge_end>Expression()
Reaction Effect()<edge_begin><edge_end>Expression()
Event Raising Expression()<edge_begin><edge_end>Expression()
Assignment Expression(operator)<edge_begin><edge_end>Expression()
Conditional Expression()<edge_begin><edge_end>Expression()
Logical Or Expression()<edge_begin><edge_end>Expression()
Logical And Expression()<edge_begin><edge_end>Expression()
Logical Not Expression()<edge_begin><edge_end>Expression()
Bitwise Xor Expression()<edge_begin><edge_end>Expression()
Bitwise Or Expression()<edge_begin><edge_end>Expression()
Bitwise And Expression()<edge_begin><edge_end>Expression()
Logical Relation Expression(operator)<edge_begin><edge_end>Expression()
Shift Expression(operator)<edge_begin><edge_end>Expression()
Numerical Add Subtract Expression(operator)<edge_begin><edge_end>Expression()
Numerical Multiply Divide Expression(operator)<edge_begin><edge_end>Expression()
Numerical Unary Expression(operator)<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Expression()
Primitive Value Expression()<edge_begin><edge_end>Literal()
Feature Call(operation Call)<edge_begin><edge_end>Expression()
Element Reference Expression(operation Call)<edge_begin><edge_end>Expression()
Event Value Reference Expression()<edge_begin><edge_end>Expression()
Active State Reference Expression()<edge_begin><edge_end>Expression()
Schema(name)<edge_begin><edge_end>Table(name)
Schema(name)<edge_begin><edge_end>Foreign Key(name)
Table(name)<edge_begin><edge_end>Schema(name)
Table(name)<edge_begin><edge_end>Column(name, type)
Table(name)<edge_begin><edge_end>Key(name)
Table(name)<edge_begin><edge_end>Foreign Key(name)
Column(name, type)<edge_begin><edge_end>Table(name)
Column(name, type)<edge_begin><edge_end>Key(name)
Column(name, type)<edge_begin><edge_end>Foreign Key(name)
Key(name)<edge_begin><edge_end>Table(name)
Key(name)<edge_begin><edge_end>Column(name, type)
Key(name)<edge_begin><edge_end>Foreign Key(name)
Foreign Key(name)<edge_begin><edge_end>Schema(name)
Foreign Key(name)<edge_begin><edge_end>Key(name)
Foreign Key(name)<edge_begin><edge_end>Table(name)
Foreign Key(name)<edge_begin><edge_end>Column(name, type)
dummy()<edge_begin><edge_end>Schema(name)
Styling Model(mode Name)<edge_begin><edge_end>Case Style()
Styling Model(mode Name)<edge_begin><edge_end>Default()
Styling Model(mode Name)<edge_begin><edge_end>Basic()
Styling Predicate()<edge_begin><edge_end>Case Style()
Segment()<edge_begin><edge_end>Style(applied Fonts, color)
Segment()<edge_begin><edge_end>Pattern()
Case Style()<edge_begin><edge_end>Segment()
Case Style()<edge_begin><edge_end>Icon(image)
Default()<edge_begin><edge_end>Case Style()
Styling()<edge_begin><edge_end>Styling Model(mode Name)
Constant Pattern(value)<edge_begin><edge_end>Pattern()
Model Pattern(attribute Name)<edge_begin><edge_end>Pattern()
Operation Pattern(operation)<edge_begin><edge_end>Pattern()
Operation Pattern(operation)<edge_begin><edge_end>Parameter(name)
Int Parameter(value)<edge_begin><edge_end>Parameter(name)
Boolean Parameter(value)<edge_begin><edge_end>Parameter(name)
String Parameter(value)<edge_begin><edge_end>Parameter(name)
E Object Parameter()<edge_begin><edge_end>Parameter(name)
Basic()<edge_begin><edge_end>Case Style()
Article(first Page, last Page)<edge_begin><edge_end>Biblio Reference()
Biblio Reference()<edge_begin><edge_end>Simple Citation(author List, date, source)
Biblio Reference()<edge_begin><edge_end>Content(body)
Biblio Reference()<edge_begin><edge_end>Indexing(keywords)
Biblio Reference Set()<edge_begin><edge_end>Simple Citation(author List, date, source)
Book(i SBN, volume, edition, series)<edge_begin><edge_end>Biblio Reference()
Book(i SBN, volume, edition, series)<edge_begin><edge_end>Book Article(section)
Book Article(section)<edge_begin><edge_end>Article(first Page, last Page)
Book Article(section)<edge_begin><edge_end>Book(i SBN, volume, edition, series)
Content(body)<edge_begin><edge_end>Biblio Reference()
Indexing(keywords)<edge_begin><edge_end>Biblio Reference()
Journal(i SSN)<edge_begin><edge_end>Biblio Reference()
Journal Article()<edge_begin><edge_end>Article(first Page, last Page)
Journal Article()<edge_begin><edge_end>Journal Issue(volume, issue, issue Supplement)
Journal Issue(volume, issue, issue Supplement)<edge_begin><edge_end>Journal(i SSN)
Journal Issue(volume, issue, issue Supplement)<edge_begin><edge_end>Journal Article()
Multimedia()<edge_begin><edge_end>Biblio Reference()
Proceeding()<edge_begin><edge_end>Biblio Reference()
Protocol()<edge_begin><edge_end>Biblio Reference()
Technical Report()<edge_begin><edge_end>Biblio Reference()
Thesis()<edge_begin><edge_end>Biblio Reference()
Web Resource(u RL)<edge_begin><edge_end>Biblio Reference()
Pseudostate()<edge_begin><edge_end>Vertex()
Vertex()<edge_begin><edge_end>Region()
Vertex()<edge_begin><edge_end>Transition()
Region()<edge_begin><edge_end>Vertex()
Region()<edge_begin><edge_end>Composite Element()
Transition()<edge_begin><edge_end>Specification Element(specification)
Transition()<edge_begin><edge_end>Reaction()
Transition()<edge_begin><edge_end>Vertex()
Final State()<edge_begin><edge_end>Regular State()
Variable()<edge_begin><edge_end>Declaration()
Event()<edge_begin><edge_end>Declaration()
Choice(kind)<edge_begin><edge_end>Pseudostate()
Statechart()<edge_begin><edge_end>Specification Element(specification)
Statechart()<edge_begin><edge_end>Reactive Element()
Statechart()<edge_begin><edge_end>Scoped Element(namespace)
Statechart()<edge_begin><edge_end>Composite Element()
Entry(kind)<edge_begin><edge_end>Pseudostate()
Exit()<edge_begin><edge_end>Pseudostate()
Reactive Element()<edge_begin><edge_end>Reaction()
Reaction()<edge_begin><edge_end>Trigger()
Reaction()<edge_begin><edge_end>Effect()
Reaction()<edge_begin><edge_end>Reaction Property()
Scope()<edge_begin><edge_end>Declaration()
Scope()<edge_begin><edge_end>Event()
Scope()<edge_begin><edge_end>Variable()
Scoped Element(namespace)<edge_begin><edge_end>Scope()
Synchronization()<edge_begin><edge_end>Pseudostate()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Specification Element(specification)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Reactive Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Scoped Element(namespace)
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Regular State()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Composite Element()
State(orthogonal, substatechart Id, subchart, simple, composite, leaf)<edge_begin><edge_end>Statechart()
Regular State()<edge_begin><edge_end>Vertex()
Composite Element()<edge_begin><edge_end>Region()
State()<edge_begin><edge_end>Transition()
Transition()<edge_begin><edge_end>State()
Transition()<edge_begin><edge_end>Abstract Guard()
Transition()<edge_begin><edge_end>Abstract Trigger()
Transition()<edge_begin><edge_end>Abstract Action()
State Machine Definition()<edge_begin><edge_end>Declaration Block()
State Machine Definition()<edge_begin><edge_end>Transition()
State Machine Definition()<edge_begin><edge_end>State()
Guard()<edge_begin><edge_end>Abstract Guard()
Trigger()<edge_begin><edge_end>Abstract Trigger()
Integer Assignement()<edge_begin><edge_end>Abstract Action()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Version Type(n, nn)<edge_begin><edge_end>Integer()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Float Value(value)<edge_begin><edge_end>Value Type()
Float Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Word Document()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>String()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Integer()
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Version Type(n, nn)
Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Custom Document Properties Collection()<edge_begin><edge_end>Word Document()
Custom Document Properties Collection()<edge_begin><edge_end>Custom Document Property(name)
Custom Document Property(name)<edge_begin><edge_end>Custom Document Properties Collection()
Custom Document Property(name)<edge_begin><edge_end>String()
Custom Document Property(name)<edge_begin><edge_end>Value Type()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>Smart Tags Collection()
Smart Tag Type(namespaceuri, name, url)<edge_begin><edge_end>String()
Smart Tags Collection()<edge_begin><edge_end>Word Document()
Smart Tags Collection()<edge_begin><edge_end>Smart Tag Type(namespaceuri, name, url)
String Property()<edge_begin><edge_end>String Type(val)
String Type(val)<edge_begin><edge_end>String()
Word Document()<edge_begin><edge_end>Smart Tags Collection()
Word Document()<edge_begin><edge_end>Document Properties Collection(title, subject, keywords, description, category, author, last Author, manager, company, hyperlink Base, revision, presentation Format, guid, app Name, total Time, pages, words, characters, characters With Spaces, bytes, lines, paragraphs)
Word Document()<edge_begin><edge_end>Custom Document Properties Collection()
Word Document()<edge_begin><edge_end>String Property()
Word Document()<edge_begin><edge_end>Fonts List Elt()
Word Document()<edge_begin><edge_end>Lists Elt()
Word Document()<edge_begin><edge_end>Styles Elt()
Word Document()<edge_begin><edge_end>Doc Pr Elt()
Word Document()<edge_begin><edge_end>Body Elt()
Doc Pr Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Word Document()
Body Elt()<edge_begin><edge_end>Block Level Elt()
Body Elt()<edge_begin><edge_end>Sect Pr Elt()
Block Level Elt()<edge_begin><edge_end>Body Elt()
Block Level Elt()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Block Level Elt()<edge_begin><edge_end>Table Cell Elt()
Block Level Chunk Elt()<edge_begin><edge_end>Block Level Elt()
Para Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Para Elt()<edge_begin><edge_end>Para Pr Elt()
Para Elt()<edge_begin><edge_end>Para Content Elt()
Para Pr Elt()<edge_begin><edge_end>Para Elt()
Para Content Elt()<edge_begin><edge_end>Para Elt()
Run Elt()<edge_begin><edge_end>Para Content Elt()
Run Elt()<edge_begin><edge_end>Run Pr Elt()
Run Elt()<edge_begin><edge_end>Run Content Elt()
Run Pr Elt()<edge_begin><edge_end>Run Elt()
Run Content Elt()<edge_begin><edge_end>Run Elt()
Break Elt(type)<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>Run Content Elt()
Text()<edge_begin><edge_end>String Type(val)
Del Text()<edge_begin><edge_end>Run Content Elt()
Del Text()<edge_begin><edge_end>String Type(val)
Instr Text()<edge_begin><edge_end>Run Content Elt()
Instr Text()<edge_begin><edge_end>String Type(val)
Del Instr Text()<edge_begin><edge_end>Run Content Elt()
Del Instr Text()<edge_begin><edge_end>String Type(val)
No Break Hyphen()<edge_begin><edge_end>Run Content Elt()
Soft Hyphen()<edge_begin><edge_end>Run Content Elt()
Annotation Ref()<edge_begin><edge_end>Run Content Elt()
Footnote Ref()<edge_begin><edge_end>Run Content Elt()
Endnote Ref()<edge_begin><edge_end>Run Content Elt()
Separator()<edge_begin><edge_end>Run Content Elt()
Continuation Separator()<edge_begin><edge_end>Run Content Elt()
Pg Num()<edge_begin><edge_end>Run Content Elt()
Cr()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Run Content Elt()
Footnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Endnote()<edge_begin><edge_end>Run Content Elt()
Endnote()<edge_begin><edge_end>Note Elt(type, suppress Ref)
Note Elt(type, suppress Ref)<edge_begin><edge_end>Block Level Elt()
Picture()<edge_begin><edge_end>Run Content Elt()
Picture()<edge_begin><edge_end>Picture Type()
Symbol()<edge_begin><edge_end>Run Content Elt()
Symbol()<edge_begin><edge_end>Sym Elt()
Sym Elt()<edge_begin><edge_end>String Type(val)
Tab()<edge_begin><edge_end>Run Content Elt()
Tab()<edge_begin><edge_end>Tab Elt()
Fld Char()<edge_begin><edge_end>Run Content Elt()
Fld Char()<edge_begin><edge_end>Fld Char Elt(fld Char Type, fld Lock)
Fld Char Elt(fld Char Type, fld Lock)<edge_begin><edge_end>String Type(val)
Table Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Table Elt()<edge_begin><edge_end>Table Pr Elt()
Table Elt()<edge_begin><edge_end>Table Grid Elt()
Table Elt()<edge_begin><edge_end>Table Content Elt()
Table Pr Elt()<edge_begin><edge_end>Table Elt()
Table Grid Elt()<edge_begin><edge_end>Table Elt()
Table Content Elt()<edge_begin><edge_end>Table Elt()
Table Content Elt()<edge_begin><edge_end>Row Elt()
Table Content Elt()<edge_begin><edge_end>Run Level Elt()
Row Elt()<edge_begin><edge_end>Table Content Elt()
Row Elt()<edge_begin><edge_end>Table Pr Ex Elt()
Row Elt()<edge_begin><edge_end>Table Row Pr Elt()
Row Elt()<edge_begin><edge_end>Row Content Elt()
Table Pr Ex Elt()<edge_begin><edge_end>Row Elt()
Table Row Pr Elt()<edge_begin><edge_end>Row Elt()
Row Content Elt()<edge_begin><edge_end>Row Elt()
Row Content Elt()<edge_begin><edge_end>Table Cell Elt()
Row Content Elt()<edge_begin><edge_end>Run Level Elt()
Table Cell Elt()<edge_begin><edge_end>Row Content Elt()
Table Cell Elt()<edge_begin><edge_end>Table Cell Pr Elt()
Table Cell Elt()<edge_begin><edge_end>Block Level Elt()
Table Cell Pr Elt()<edge_begin><edge_end>Table Cell Elt()
Fonts List Elt()<edge_begin><edge_end>Word Document()
Lists Elt()<edge_begin><edge_end>Word Document()
Styles Elt()<edge_begin><edge_end>Word Document()
Sect Pr Elt()<edge_begin><edge_end>Body Elt()
Run Level Elt()<edge_begin><edge_end>Block Level Chunk Elt()
Run Level Elt()<edge_begin><edge_end>Table Content Elt()
Run Level Elt()<edge_begin><edge_end>Row Content Elt()
Cf Chunk()<edge_begin><edge_end>Block Level Elt()
Simple Field Elt()<edge_begin><edge_end>Para Content Elt()
H Link Elt()<edge_begin><edge_end>Para Content Elt()
Sub Doc Elt()<edge_begin><edge_end>Para Content Elt()
Meta-Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Conference Member()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>User()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Member(Web address)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Organizer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Speaker()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Thing()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Personal Review History()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Double Blind Review()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>External Reviewer()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Research Topic()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Paper Review(Comments for Author, Comments for Program Committee)
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>String()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Pending Proposed Conflict()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Program Comitee Chair()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Administrator()
Reviewer(User Name, Comments to Chair, Other Areas)<edge_begin><edge_end>Bid()
Bid()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Scientific Event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Working event()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Thing()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>phase of conference()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>program()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>String()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date Time()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Country()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Organizing Committee()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Integer()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Location()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Program Comitee Chair()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Topic()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Conference Member()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Administrator()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>date()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>any URI()
Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)<edge_begin><edge_end>Boolean()
Conference Chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference Member()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Associated Chair()<edge_begin><edge_end>Conference Member()
Associated Chair()<edge_begin><edge_end>Chairman()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Conference Member()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Program Committee()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Integer()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>Administrator()
Program Committee Member(max Papers, has Password)<edge_begin><edge_end>String()
Author Not Reviewer()<edge_begin><edge_end>Author()
External Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
External Reviewer()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Chairman()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Chairman()<edge_begin><edge_end>Conference Member()
Program Committee Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Program Committee Chair()<edge_begin><edge_end>Chairman()
Program Committee Chair()<edge_begin><edge_end>Review()
Acceptance()<edge_begin><edge_end>Decision()
Rejection()<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Domain Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Article()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Regular contribution()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Document()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Integer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>human(e-mail, last name, first name)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Review()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Possible Reviewer()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Research Topic()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Paper Status()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>String()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Paper Abstract()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Program Comitee Chair()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Program Comitee()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Co-Author()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Bid()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Decision()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Subject Area()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>unsigned Long()
Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)<edge_begin><edge_end>Meta-Reviewer()
Co-Author()<edge_begin><edge_end>Author()
Co-Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Paper Full Version()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Administrator()<edge_begin><edge_end>User()
Administrator()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Administrator()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Administrator()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrator()<edge_begin><edge_end>Role()
Administrator()<edge_begin><edge_end>Thing()
Administrator()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Administrator()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Administrator()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Meta-Review()<edge_begin><edge_end>Review()
Account()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
User()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
User()<edge_begin><edge_end>Document()
User()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Thing()
Role()<edge_begin><edge_end>Administrator()
Help Request()<edge_begin><edge_end>Request()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Thing()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>String()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Conference document()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Organization()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Document()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Item()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Presenter city()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Money()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Time()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Inforamtion()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Account()
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Symposium()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Abstract()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Abstract()<edge_begin><edge_end>Document()
Abstract()<edge_begin><edge_end>Extended abstract()
Abstract()<edge_begin><edge_end>Thing()
Abstract()<edge_begin><edge_end>Article()
Document()<edge_begin><edge_end>Thing()
Document()<edge_begin><edge_end>Item()
Document()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Document()<edge_begin><edge_end>Document()
Document()<edge_begin><edge_end>User()
Invited Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Admin Role()<edge_begin><edge_end>Role()
Paper Typologies()<edge_begin><edge_end>Event Setup()
Event Setup()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event URL()<edge_begin><edge_end>URL()
Event URL()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Notification Email()<edge_begin><edge_end>Email()
Email()<edge_begin><edge_end>Document()
Short Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Author Role()<edge_begin><edge_end>Role()
Preview()<edge_begin><edge_end>Review Form()
Review Form()<edge_begin><edge_end>Event Setup()
Committe Role()<edge_begin><edge_end>Role()
Group Email()<edge_begin><edge_end>Email()
Submission Template()<edge_begin><edge_end>Event Setup()
Review Form Setup()<edge_begin><edge_end>Review Form()
Misc()<edge_begin><edge_end>Help Request()
Event Creation()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Approval Email()<edge_begin><edge_end>Email()
Approval Email()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Rejection Email()<edge_begin><edge_end>Email()
Template()<edge_begin><edge_end>Document()
Feature Request()<edge_begin><edge_end>Help Request()
Event Tracks()<edge_begin><edge_end>Event Setup()
Request()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Head Role()<edge_begin><edge_end>Role()
Detail()<edge_begin><edge_end>Thing()
Corresponding Author()<edge_begin><edge_end>Author()
Reviewer Role()<edge_begin><edge_end>Role()
Event Approval()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Registration()<edge_begin><edge_end>Conference activity()
Full Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Research Topic()<edge_begin><edge_end>Thing()
Assistance()<edge_begin><edge_end>Help Request()
Email Template()<edge_begin><edge_end>Event Setup()
Conference participant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Active conference participant()<edge_begin><edge_end>Conference contributor()
Active conference participant()<edge_begin><edge_end>Conference participant()
Active conference participant()<edge_begin><edge_end>Presentation()
Passive conference participant()<edge_begin><edge_end>Conference participant()
Review expertise(has an expertise)<edge_begin><edge_end>Thing()
Review expertise(has an expertise)<edge_begin><edge_end>Submitted contribution()
Submitted contribution()<edge_begin><edge_end>Written contribution()
Submitted contribution()<edge_begin><edge_end>Review expertise(has an expertise)
Regular author()<edge_begin><edge_end>Conference contributor()
Conference contributor()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Contribution 1th-Author()<edge_begin><edge_end>Regular author()
Contribution co-Author()<edge_begin><edge_end>Regular author()
Conference contribution()<edge_begin><edge_end>Conference document()
Conference contribution()<edge_begin><edge_end>Conference volume(has a location)
Co-chair()<edge_begin><edge_end>Committee member()
Co-chair()<edge_begin><edge_end>Committee()
Committee()<edge_begin><edge_end>User()
Committee()<edge_begin><edge_end>Committee member()
Committee()<edge_begin><edge_end>Conference volume(has a location)
Committee()<edge_begin><edge_end>Co-chair()
Committee()<edge_begin><edge_end>Chair()
Committee member()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Committee member()<edge_begin><edge_end>Committee()
Extended abstract()<edge_begin><edge_end>Regular contribution()
Important dates()<edge_begin><edge_end>date()
Important dates()<edge_begin><edge_end>Conference volume(has a location)
Invited speaker()<edge_begin><edge_end>Conference contributor()
Information for participants()<edge_begin><edge_end>Conference document()
Conference document()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference document()<edge_begin><edge_end>date()
Regular contribution()<edge_begin><edge_end>Written contribution()
Poster()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Written contribution()<edge_begin><edge_end>Conference contribution()
Conference applicant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Camera ready contribution()<edge_begin><edge_end>Accepted contribution()
Accepted contribution()<edge_begin><edge_end>Reviewed contribution()
Program committee()<edge_begin><edge_end>Committee()
Program committee()<edge_begin><edge_end>Conference volume(has a location)
Organizing committee()<edge_begin><edge_end>Committee()
Organizing committee()<edge_begin><edge_end>Conference volume(has a location)
Steering committee()<edge_begin><edge_end>Committee()
Steering committee()<edge_begin><edge_end>Conference volume(has a location)
Conference volume(has a location)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference volume(has a location)<edge_begin><edge_end>Conference part()
Conference volume(has a location)<edge_begin><edge_end>Workshop()
Conference volume(has a location)<edge_begin><edge_end>Track()
Conference volume(has a location)<edge_begin><edge_end>Tutorial()
Conference volume(has a location)<edge_begin><edge_end>Committee()
Conference volume(has a location)<edge_begin><edge_end>Steering committee()
Conference volume(has a location)<edge_begin><edge_end>Organizing committee()
Conference volume(has a location)<edge_begin><edge_end>Important dates()
Conference volume(has a location)<edge_begin><edge_end>Conference contribution()
Conference volume(has a location)<edge_begin><edge_end>String()
Conference volume(has a location)<edge_begin><edge_end>Program committee()
Call for paper()<edge_begin><edge_end>Conference document()
Conference announcement()<edge_begin><edge_end>Conference document()
Invited talk()<edge_begin><edge_end>Presentation()
Conference part()<edge_begin><edge_end>Topic()
Conference part()<edge_begin><edge_end>Conference volume(has a location)
Conference part()<edge_begin><edge_end>Track-workshop chair()
Presentation()<edge_begin><edge_end>Conference contribution()
Presentation()<edge_begin><edge_end>Conference activity()
Presentation()<edge_begin><edge_end>Active conference participant()
Track()<edge_begin><edge_end>Conference part()
Track()<edge_begin><edge_end>Scientific Event()
Workshop()<edge_begin><edge_end>Conference part()
Workshop()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Workshop()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Workshop()<edge_begin><edge_end>Scientific Event()
Workshop()<edge_begin><edge_end>Academic Event()
Workshop()<edge_begin><edge_end>Working event()
Tutorial()<edge_begin><edge_end>Conference part()
Tutorial()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Tutorial()<edge_begin><edge_end>Lecture(has Acronym)
Tutorial()<edge_begin><edge_end>Individual Presentation()
Tutorial()<edge_begin><edge_end>Working event()
Rejected contribution()<edge_begin><edge_end>Reviewed contribution()
Reviewed contribution()<edge_begin><edge_end>Submitted contribution()
Reviewed contribution()<edge_begin><edge_end>Review()
Late paid applicant()<edge_begin><edge_end>Paid applicant()
Paid applicant()<edge_begin><edge_end>Registeered applicant()
Early paid applicant()<edge_begin><edge_end>Paid applicant()
Call for participation()<edge_begin><edge_end>Conference document()
Publisher()<edge_begin><edge_end>Conference Proceedings(has an ISBN, has a volume)
Registeered applicant()<edge_begin><edge_end>Conference applicant()
Track-workshop chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Track-workshop chair()<edge_begin><edge_end>Conference part()
Conference www(has a URL)<edge_begin><edge_end>Conference document()
Conference www(has a URL)<edge_begin><edge_end>String()
Review preference(has a degree)<edge_begin><edge_end>Thing()
Review preference(has a degree)<edge_begin><edge_end>Integer()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Evaluated Paper()
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Evaluated Paper()
Undecided Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Manual Paper Assignment()<edge_begin><edge_end>paper assignment()
Manual Paper Assignment()<edge_begin><edge_end>Program Committee member()
Program Committee member()<edge_begin><edge_end>human(e-mail, last name, first name)
paper assignment()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
paper assignment()<edge_begin><edge_end>Program Committee member()
paper assignment()<edge_begin><edge_end>human(e-mail, last name, first name)
start date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
camera-ready submission date()<edge_begin><edge_end>date()
date of notification()<edge_begin><edge_end>date()
date()<edge_begin><edge_end>Thing()
Article()<edge_begin><edge_end>Document()
Article()<edge_begin><edge_end>Author()
Article()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Article()<edge_begin><edge_end>Abstract()
Article()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Article()<edge_begin><edge_end>human(e-mail, last name, first name)
Article()<edge_begin><edge_end>classification()
Contact Person()<edge_begin><edge_end>human(e-mail, last name, first name)
bidding of reviewer()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
bidding of reviewer()<edge_begin><edge_end>human(e-mail, last name, first name)
URL()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>Thing()
conference setup()<edge_begin><edge_end>human(e-mail, last name, first name)
conference setup()<edge_begin><edge_end>Topic()
conference setup()<edge_begin><edge_end>date()
conference setup()<edge_begin><edge_end>URL()
human(e-mail, last name, first name)<edge_begin><edge_end>Article()
human(e-mail, last name, first name)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
human(e-mail, last name, first name)<edge_begin><edge_end>institute()
human(e-mail, last name, first name)<edge_begin><edge_end>Topic()
human(e-mail, last name, first name)<edge_begin><edge_end>String()
managing of conference process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Program Committee Chair()<edge_begin><edge_end>human(e-mail, last name, first name)
reviewing proces()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
end date of camera-ready submission()<edge_begin><edge_end>camera-ready submission date()
abstract submission date()<edge_begin><edge_end>date()
group email()<edge_begin><edge_end>Article()
Senior Reviewer URL()<edge_begin><edge_end>URL()
notification()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
notification()<edge_begin><edge_end>Article()
notification()<edge_begin><edge_end>human(e-mail, last name, first name)
notification email()<edge_begin><edge_end>Article()
Chair URL()<edge_begin><edge_end>URL()
abstract of paper()<edge_begin><edge_end>Article()
submission process()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
submission process()<edge_begin><edge_end>human(e-mail, last name, first name)
lower tier reviewing process()<edge_begin><edge_end>reviewing proces()
start date of conference()<edge_begin><edge_end>date of conference()
date of conference()<edge_begin><edge_end>date()
Senior Program Committee member()<edge_begin><edge_end>Program Committee member()
Senior Program Committee member()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
end date of abstract submission()<edge_begin><edge_end>abstract submission date()
Regular Program Committee member()<edge_begin><edge_end>Program Committee member()
start date of full paper submission()<edge_begin><edge_end>full paper submission date()
full paper submission date()<edge_begin><edge_end>date()
start date of abstract submission()<edge_begin><edge_end>abstract submission date()
end date of conference()<edge_begin><edge_end>date of conference()
review form()<edge_begin><edge_end>Article()
review form()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Automatic Paper Assignment()<edge_begin><edge_end>paper assignment()
Automatic Paper Assignment()<edge_begin><edge_end>Program Committee member()
summary of reviews()<edge_begin><edge_end>Article()
summary of reviews()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
upper tier reviewing process()<edge_begin><edge_end>reviewing proces()
upper tier reviewing process()<edge_begin><edge_end>human(e-mail, last name, first name)
end date of full paper submission()<edge_begin><edge_end>full paper submission date()
acceptance notification email()<edge_begin><edge_end>notification email()
rejection notification email()<edge_begin><edge_end>notification email()
Contact Person URL()<edge_begin><edge_end>URL()
Regular Reviewer URL()<edge_begin><edge_end>URL()
Trip()<edge_begin><edge_end>Social event()
Banquet()<edge_begin><edge_end>Social event()
Reception()<edge_begin><edge_end>Social Event()
Social event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Thing()
Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Author()
Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>Topic()
Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)<edge_begin><edge_end>String()
Company()<edge_begin><edge_end>Organization()
University()<edge_begin><edge_end>Organization()
University()<edge_begin><edge_end>Academic Institution()
Scholar()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Scholar()<edge_begin><edge_end>University()
Short paper()<edge_begin><edge_end>Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)
Reviewing results event()<edge_begin><edge_end>Administrative event()
Administrative event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Administrative event()<edge_begin><edge_end>Administrative event()
Reviewing event()<edge_begin><edge_end>Administrative event()
Registration of participants event()<edge_begin><edge_end>Administrative event()
Submission event()<edge_begin><edge_end>Administrative event()
Camera Ready event()<edge_begin><edge_end>Administrative event()
Working event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Working event()<edge_begin><edge_end>Topic()
Working event()<edge_begin><edge_end>Administrative event()
Participant(early Registration)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Participant(early Registration)<edge_begin><edge_end>Boolean()
Member PC()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Member PC()<edge_begin><edge_end>Topic()
Member PC()<edge_begin><edge_end>Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)
Chair PC()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Student()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Science Worker()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Assistant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Volunteer()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Regular()<edge_begin><edge_end>Participant(early Registration)
pc meeting()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Review()<edge_begin><edge_end>Article()
Review()<edge_begin><edge_end>Conference document()
Review()<edge_begin><edge_end>Thing()
Review()<edge_begin><edge_end>Document()
Review()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Review()<edge_begin><edge_end>Possible Reviewer()
Review()<edge_begin><edge_end>Evaluation()
Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Review()<edge_begin><edge_end>Reviewed contribution()
Review()<edge_begin><edge_end>classification()
Review()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
participant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
participant()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
program()<edge_begin><edge_end>Chair()
program()<edge_begin><edge_end>Session(room)
Slide Set()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Document()
Programme()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Meal Menu()<edge_begin><edge_end>Document()
Meal Menu()<edge_begin><edge_end>Meal Event()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Place()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>Programme()
Conference Event(has End Date Time, has Start Date Time)<edge_begin><edge_end>date Time()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Academic Event()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>String()
Call(has Submission Instructions, has Submission Deadline)<edge_begin><edge_end>date Time()
Organization()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Organization()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>String()
Sponsorship(has Cost Currency, has Cost Amount)<edge_begin><edge_end>Integer()
Contact Information(has City, has Street, has Postal Code, has Phone)<edge_begin><edge_end>String()
Week Reject Rating()<edge_begin><edge_end>Review Rating()
Accept Rating()<edge_begin><edge_end>Review Rating()
Accpet If Room Rating()<edge_begin><edge_end>Review Rating()
Reject Rating()<edge_begin><edge_end>Review Rating()
Meal Event()<edge_begin><edge_end>Non Academic Event()
Meal Event()<edge_begin><edge_end>Meal Menu()
Non Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Break Event()<edge_begin><edge_end>Non Academic Event()
Parallel And Distributed Computing Topic()<edge_begin><edge_end>Topic()
Wireless Communications Topic()<edge_begin><edge_end>Topic()
Operating Topicsystems()<edge_begin><edge_end>Topic()
Computer Networks Topic()<edge_begin><edge_end>Topic()
Satellite And Space Communications Topic()<edge_begin><edge_end>Topic()
CAD Topic()<edge_begin><edge_end>Topic()
Multimedia Topic()<edge_begin><edge_end>Topic()
Communications Topic()<edge_begin><edge_end>Topic()
Powerline Transmission Topic()<edge_begin><edge_end>Topic()
Antennas Topic()<edge_begin><edge_end>Topic()
Performance Topic()<edge_begin><edge_end>Topic()
Signal Processing Topic()<edge_begin><edge_end>Topic()
Microelectronics Topic()<edge_begin><edge_end>Topic()
Test Only Topic()<edge_begin><edge_end>Topic()
Radio Communications Topic()<edge_begin><edge_end>Topic()
Computer Architecture Topic()<edge_begin><edge_end>Topic()
Medicine Topic()<edge_begin><edge_end>Topic()
Security Topic()<edge_begin><edge_end>Topic()
Mobile Computing Topic()<edge_begin><edge_end>Topic()
Cryptography Topic()<edge_begin><edge_end>Topic()
Communication Theory Topic()<edge_begin><edge_end>Topic()
Dining Place()<edge_begin><edge_end>Place()
Academia Organization()<edge_begin><edge_end>Organization()
Industry Organization()<edge_begin><edge_end>Organization()
NGO()<edge_begin><edge_end>Organization()
Government Organization()<edge_begin><edge_end>Organization()
Computer Networks Enterprise Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Switching Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Sensor Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Security Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Optical Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Measurements Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Management Topic()<edge_begin><edge_end>Computer Networks Topic()
Computer Networks Aapplications Topic()<edge_begin><edge_end>Computer Networks Topic()
Active Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Active Paper()<edge_begin><edge_end>Review Rating()
Pending Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Withdrawn Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Rejected Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Published Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Attendee()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Coffee Break()<edge_begin><edge_end>Break Event()
Free Time Break()<edge_begin><edge_end>Break Event()
Meal Break()<edge_begin><edge_end>Break Event()
Closing Talk()<edge_begin><edge_end>Talk Event()
Welcome Talk()<edge_begin><edge_end>Talk Event()
Talk Event()<edge_begin><edge_end>Academic Event()
Session Chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
TPC Member()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Two Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Call For Papers()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Textual Review Question()<edge_begin><edge_end>Review Question()
Numerical Review Question()<edge_begin><edge_end>Review Question()
Organizational Meeting()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Academic Event()
Paper Presentation()<edge_begin><edge_end>Accepted Paper()
Academic Event()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Academic Event()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Publication History()<edge_begin><edge_end>Personal History()
Excursion()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Non Academic Event()
Call For Reviews()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Personal Review History()<edge_begin><edge_end>Personal History()
Personal Review History()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Conference Venue Place()<edge_begin><edge_end>Place()
Call For Manuscripts()<edge_begin><edge_end>Call(has Submission Instructions, has Submission Deadline)
Single Level Conference()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Meeting Room Place()<edge_begin><edge_end>Place()
Accommodation Place()<edge_begin><edge_end>Place()
Rated Papers()<edge_begin><edge_end>Active Paper()
Travel Grant()<edge_begin><edge_end>Sponsorship(has Cost Currency, has Cost Amount)
Conference Dinner()<edge_begin><edge_end>Meal Event()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Thing()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Tracks()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Approval Email()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event Setup()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Administrator()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>String()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>date Time()
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Event(starts on, ends on, has startdate, has enddate)<edge_begin><edge_end>Location()
Evaluated Paper()<edge_begin><edge_end>Assigned Paper()
Evaluated Paper()<edge_begin><edge_end>Review()
Camera Ready Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Positive Review()<edge_begin><edge_end>Review()
Workshop Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Industrial Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Conference Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Industrial Session()<edge_begin><edge_end>Conference Session()
Conference Session()<edge_begin><edge_end>Session(room)
Regular Session()<edge_begin><edge_end>Session(room)
Poster Session()<edge_begin><edge_end>Session(room)
Demo Session()<edge_begin><edge_end>Session(room)
Session(room)<edge_begin><edge_end>Scientific Event()
Session(room)<edge_begin><edge_end>Lecture(has Acronym)
Session(room)<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Session(room)<edge_begin><edge_end>Thing()
Session(room)<edge_begin><edge_end>Accepted Paper()
Session(room)<edge_begin><edge_end>String()
Session(room)<edge_begin><edge_end>Slot(ends At, begins At)
Session(room)<edge_begin><edge_end>Chair()
Paper Author()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference Trip()<edge_begin><edge_end>Social Event()
Social Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Tutorial Abstract()<edge_begin><edge_end>Abstract()
Conference Participant()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Assigned Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Assigned Paper()<edge_begin><edge_end>Possible Reviewer()
Negative Review()<edge_begin><edge_end>Review()
Neutral Review()<edge_begin><edge_end>Review()
Organising Agency()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Organisation()
Academic Institution()<edge_begin><edge_end>Academic Institution()
Organisation()<edge_begin><edge_end>Thing()
Proceedings Publisher()<edge_begin><edge_end>Organisation()
Poster Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Regular Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Demo Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Research Institute()<edge_begin><edge_end>Academic Institution()
Scientific Event()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Invited Talk Abstract()<edge_begin><edge_end>Abstract()
Agency Staff Member()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Workshop Session()<edge_begin><edge_end>Session(room)
Invited Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Individual Presentation()
Contributed Talk()<edge_begin><edge_end>Document()
Demo Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>Conference Participant()
Tutorial Chair()<edge_begin><edge_end>PC Member()
PC Chair()<edge_begin><edge_end>Conference Participant()
PC Chair()<edge_begin><edge_end>PC Member()
PC Member()<edge_begin><edge_end>Possible Reviewer()
OC Member()<edge_begin><edge_end>Conference Participant()
Proceedings()<edge_begin><edge_end>Multi-author Volume()
Proceedings()<edge_begin><edge_end>Output Document()
Proceedings()<edge_begin><edge_end>Thing()
Programme Brochure()<edge_begin><edge_end>Document()
Flyer()<edge_begin><edge_end>Document()
Web Site()<edge_begin><edge_end>Document()
Multi-author Volume()<edge_begin><edge_end>Document()
Individual Presentation()<edge_begin><edge_end>Scientific Event()
Individual Presentation()<edge_begin><edge_end>Document()
OC Chair()<edge_begin><edge_end>OC Member()
Conference Banquet()<edge_begin><edge_end>Social Event()
Workshop Chair()<edge_begin><edge_end>Conference Participant()
Workshop Chair()<edge_begin><edge_end>PC Member()
Conference Proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Proceedings()
Conference Proceedings(has an ISBN, has a volume)<edge_begin><edge_end>String()
Conference Proceedings(has an ISBN, has a volume)<edge_begin><edge_end>Publisher()
Session Chair()<edge_begin><edge_end>PC Member()
Session Chair()<edge_begin><edge_end>Conference Participant()
Early-Registered Participant()<edge_begin><edge_end>Conference Participant()
Late-Registered Participant()<edge_begin><edge_end>Conference Participant()
Possible Reviewer()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Possible Reviewer()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Invited Speaker()<edge_begin><edge_end>Presenter()
Presenter()<edge_begin><edge_end>Conference Participant()
Presenter()<edge_begin><edge_end>Author()
SC Member()<edge_begin><edge_end>PC Member()
Presenter house()<edge_begin><edge_end>Building()
Building()<edge_begin><edge_end>Place()
Presenter state()<edge_begin><edge_end>State()
Delegate()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Presenter city()<edge_begin><edge_end>City()
Hotel registration form()<edge_begin><edge_end>Form()
Deadline hotel reservation()<edge_begin><edge_end>Deadline()
Form()<edge_begin><edge_end>Document()
Car()<edge_begin><edge_end>Transport vehicle()
Transport vehicle()<edge_begin><edge_end>Item()
Mailing list()<edge_begin><edge_end>Document()
Renting()<edge_begin><edge_end>Activity before conference()
Activity before conference()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Dinner banquet()<edge_begin><edge_end>Social program()
One day presenter()<edge_begin><edge_end>Delegate()
Social program()<edge_begin><edge_end>Conference activity()
Power Point presentation()<edge_begin><edge_end>Presentation()
Conference restaurant()<edge_begin><edge_end>Building()
Conference city()<edge_begin><edge_end>City()
Conference state()<edge_begin><edge_end>State()
Submissions deadline()<edge_begin><edge_end>Deadline()
Deadline()<edge_begin><edge_end>Time()
Deadline()<edge_begin><edge_end>date()
Simulating()<edge_begin><edge_end>Research()
Research()<edge_begin><edge_end>Activity before conference()
Technic activity()<edge_begin><edge_end>Conference activity()
Conference activity()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Technical commitee()<edge_begin><edge_end>Delegate()
Place()<edge_begin><edge_end>Thing()
Place()<edge_begin><edge_end>Conference Event(has End Date Time, has Start Date Time)
Place()<edge_begin><edge_end>Item()
Author cd proceedings included()<edge_begin><edge_end>Author()
Cd proceening()<edge_begin><edge_end>Publication()
Trip day()<edge_begin><edge_end>Time()
Record of attendance()<edge_begin><edge_end>Document()
Listener()<edge_begin><edge_end>Delegate()
Session room()<edge_begin><edge_end>Place()
Brief introduction for Session chair()<edge_begin><edge_end>Document()
Session chair()<edge_begin><edge_end>Delegate()
Invitation letter()<edge_begin><edge_end>Document()
Registration form()<edge_begin><edge_end>Form()
Viza()<edge_begin><edge_end>Document()
Conference days()<edge_begin><edge_end>Time()
Conference building()<edge_begin><edge_end>Building()
Registration fee()<edge_begin><edge_end>Fee()
Departure()<edge_begin><edge_end>Activity after conference()
Activity after conference()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Conference airport()<edge_begin><edge_end>Building()
Worker lecturer()<edge_begin><edge_end>Lecturer()
Lecturer()<edge_begin><edge_end>Author()
Transparency()<edge_begin><edge_end>Document()
City()<edge_begin><edge_end>Thing()
Card()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Item()<edge_begin><edge_end>Thing()
Item()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Item()<edge_begin><edge_end>Item()
Item()<edge_begin><edge_end>Time()
Author attendee book registration fee()<edge_begin><edge_end>Registration fee()
Book proceeding()<edge_begin><edge_end>Publication()
Video cassette player()<edge_begin><edge_end>Audiovisual equipment()
Audiovisual equipment()<edge_begin><edge_end>Item()
Video presentation()<edge_begin><edge_end>Presentation()
Hotel room()<edge_begin><edge_end>Place()
Hotel presenter()<edge_begin><edge_end>Delegate()
Conference hotel()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Item()
Money()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Money()<edge_begin><edge_end>Building()
Money()<edge_begin><edge_end>Thing()
Money()<edge_begin><edge_end>Money()
Introduction()<edge_begin><edge_end>Conference activity()
Welcome address()<edge_begin><edge_end>Conference activity()
Value added tax()<edge_begin><edge_end>Tax()
Tax()<edge_begin><edge_end>Money()
Refusing manuscript()<edge_begin><edge_end>Activity before conference()
Final manuscript()<edge_begin><edge_end>Submission()
Accepting manuscript()<edge_begin><edge_end>Activity before conference()
Submission()<edge_begin><edge_end>Document()
Sponsor city()<edge_begin><edge_end>City()
Sponsor()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Introduction of speaker()<edge_begin><edge_end>Introduction()
Conference hall()<edge_begin><edge_end>Place()
Plenary lecture()<edge_begin><edge_end>Lecture(has Acronym)
Plenary lecture speaker()<edge_begin><edge_end>Author()
LCD projector()<edge_begin><edge_end>Audiovisual equipment()
Deadline for notification of acceptance()<edge_begin><edge_end>Deadline()
Tutorial speaker()<edge_begin><edge_end>Author()
Registation deadline()<edge_begin><edge_end>Deadline()
Single hotel room()<edge_begin><edge_end>Hotel room()
Non speaker()<edge_begin><edge_end>Delegate()
Author information form()<edge_begin><edge_end>Form()
Nonmember registration fee()<edge_begin><edge_end>Registration fee()
IASTED non member()<edge_begin><edge_end>Delegate()
Hotel fee()<edge_begin><edge_end>Fee()
Fee()<edge_begin><edge_end>Money()
Publication()<edge_begin><edge_end>Item()
Taxi()<edge_begin><edge_end>Transport vehicle()
Sponsor state()<edge_begin><edge_end>State()
Modelling()<edge_begin><edge_end>Research()
Worker non speaker()<edge_begin><edge_end>Non speaker()
Nonauthor registration fee()<edge_begin><edge_end>Registration fee()
Payment document()<edge_begin><edge_end>Document()
Camera ready manuscript deadline()<edge_begin><edge_end>Deadline()
One conference day()<edge_begin><edge_end>Conference days()
Fee for extra trip()<edge_begin><edge_end>Fee()
Full day tour()<edge_begin><edge_end>Activity after conference()
Conference Hiker()<edge_begin><edge_end>Delegate()
Computer()<edge_begin><edge_end>Audiovisual equipment()
IASTED member()<edge_begin><edge_end>Delegate()
Memeber registration fee()<edge_begin><edge_end>Registration fee()
Author book proceedings included()<edge_begin><edge_end>Author()
Sponsor company house()<edge_begin><edge_end>Building()
Sponzorship()<edge_begin><edge_end>Money()
Student lecturer()<edge_begin><edge_end>Lecturer()
Trip city()<edge_begin><edge_end>City()
Cheque()<edge_begin><edge_end>Payment document()
Shuttle bus()<edge_begin><edge_end>Transport vehicle()
Student non speaker()<edge_begin><edge_end>Non speaker()
Student registration fee()<edge_begin><edge_end>Registration fee()
Author attendee cd registration fee()<edge_begin><edge_end>Registration fee()
Tip()<edge_begin><edge_end>Money()
Credit card()<edge_begin><edge_end>Card()
Van()<edge_begin><edge_end>Transport vehicle()
Main office()<edge_begin><edge_end>Place()
Presenter university()<edge_begin><edge_end>Building()
Departure tax()<edge_begin><edge_end>Tax()
Receiving manuscript()<edge_begin><edge_end>Activity before conference()
Double hotel room()<edge_begin><edge_end>Hotel room()
Initial manuscipt()<edge_begin><edge_end>Submission()
Coffee break()<edge_begin><edge_end>Conference activity()
Bank transfer()<edge_begin><edge_end>Payment document()
Overhead projector()<edge_begin><edge_end>Audiovisual equipment()
Speaker lecture()<edge_begin><edge_end>Session(room)
Coctail reception()<edge_begin><edge_end>Conference activity()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Thing()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Topic()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Integer()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Time()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>date Time()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Article()
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>human(e-mail, last name, first name)
Activity(expected Attendance, is dated on)<edge_begin><edge_end>intensity()
Organizing Committee()<edge_begin><edge_end>Thing()
Organizing Committee()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Committee Member()<edge_begin><edge_end>Organizer()
Committee Member()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Co Chair()<edge_begin><edge_end>Organizing Committee()
Organizer()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Organizer()<edge_begin><edge_end>Thing()
Publications Chair()<edge_begin><edge_end>Organizing Committee()
Outside Referee()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Lecture(has Acronym)<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Lecture(has Acronym)<edge_begin><edge_end>Conference activity()
Lecture(has Acronym)<edge_begin><edge_end>String()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Thing()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>Author()
Activity Submission Form(submission Deadline)<edge_begin><edge_end>date Time()
Workshop Tutorial Chair()<edge_begin><edge_end>Organizing Committee()
Double Blind Review()<edge_begin><edge_end>Thing()
Double Blind Review()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Tutorial Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Registration Chair()<edge_begin><edge_end>Organizing Committee()
Student Advocate()<edge_begin><edge_end>Organizing Committee()
Finance Chair()<edge_begin><edge_end>Organizing Committee()
Qualitatvie Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Traditional Lecture()<edge_begin><edge_end>Lecture(has Acronym)
Paper Submission Chair()<edge_begin><edge_end>Organizing Committee()
Publicity Web Chair()<edge_begin><edge_end>Organizing Committee()
Steering Committee()<edge_begin><edge_end>Organizing Committee()
General Co Chair()<edge_begin><edge_end>Organizing Committee()
Worksop Proposal()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Contact Author()<edge_begin><edge_end>Author()
Contact Author()<edge_begin><edge_end>Paper Abstract()
Conference Program()<edge_begin><edge_end>Thing()
Conference Program()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Conference Program()<edge_begin><edge_end>Slot(ends At, begins At)
Paper Status()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Slot(ends At, begins At)<edge_begin><edge_end>Thing()
Slot(ends At, begins At)<edge_begin><edge_end>date()
Slot(ends At, begins At)<edge_begin><edge_end>time()
Slot(ends At, begins At)<edge_begin><edge_end>Conference Program()
Slot(ends At, begins At)<edge_begin><edge_end>Session(room)
Research Topic()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Thing()
Output Document()<edge_begin><edge_end>Chair()
Program Committee()<edge_begin><edge_end>Thing()
Program Committee()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Criterion(has Weight)<edge_begin><edge_end>Thing()
Criterion(has Weight)<edge_begin><edge_end>double()
Accepted Paper()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Accepted Paper()<edge_begin><edge_end>Paper Presentation()
Accepted Paper()<edge_begin><edge_end>Session(room)
Chair()<edge_begin><edge_end>Program Committee Member(max Papers, has Password)
Chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Chair()<edge_begin><edge_end>Committee member()
Chair()<edge_begin><edge_end>Committee()
Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Chair()<edge_begin><edge_end>program()
Chair()<edge_begin><edge_end>Output Document()
Chair()<edge_begin><edge_end>Thing()
Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Chair()<edge_begin><edge_end>Session(room)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Fee()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>String()
Conference Attendant(has Adress, paid, has Phone)<edge_begin><edge_end>Boolean()
Evaluation()<edge_begin><edge_end>Document()
Evaluation()<edge_begin><edge_end>Review()
Paper Abstract()<edge_begin><edge_end>Document()
Paper Abstract()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Paper Abstract()<edge_begin><edge_end>Contact Author()
Review Question()<edge_begin><edge_end>Question()
Paper Question()<edge_begin><edge_end>Question()
CD-ROM()<edge_begin><edge_end>Output Document()
Index Of Authors()<edge_begin><edge_end>Output Document()
External Reviewers List()<edge_begin><edge_end>Output Document()
Program()<edge_begin><edge_end>Output Document()
PC Members List()<edge_begin><edge_end>Output Document()
List Of Abstracts()<edge_begin><edge_end>Output Document()
Booklet Of Abstracts()<edge_begin><edge_end>Output Document()
RFC()<edge_begin><edge_end>Topics()
Topics()<edge_begin><edge_end>Value Partition()
Classic Papers()<edge_begin><edge_end>Topics()
Networking()<edge_begin><edge_end>Topics()
Humour()<edge_begin><edge_end>Topics()
Programming()<edge_begin><edge_end>Topics()
Computer Science()<edge_begin><edge_end>Topics()
Format()<edge_begin><edge_end>Value Partition()
Adobe PDF()<edge_begin><edge_end>Format()
MS Word()<edge_begin><edge_end>Format()
Corel Word Perfect()<edge_begin><edge_end>Format()
HTML()<edge_begin><edge_end>Format()
Post Script()<edge_begin><edge_end>Format()
RTF()<edge_begin><edge_end>Format()
Text()<edge_begin><edge_end>Format()
High()<edge_begin><edge_end>Reviewer Famliliarity()
Reviewer Famliliarity()<edge_begin><edge_end>Review Values()
Low()<edge_begin><edge_end>Reviewer Famliliarity()
Moderate()<edge_begin><edge_end>Reviewer Famliliarity()
Marginal Tend to Reject()<edge_begin><edge_end>Reccommendation()
Reccommendation()<edge_begin><edge_end>Review Values()
Marginal Tend to Accept()<edge_begin><edge_end>Reccommendation()
Portable Reject()<edge_begin><edge_end>Reccommendation()
Must Accept()<edge_begin><edge_end>Reccommendation()
Clear Reject()<edge_begin><edge_end>Reccommendation()
Clear Accept()<edge_begin><edge_end>Reccommendation()
Program chair()<edge_begin><edge_end>Member(Web address)
Program chair()<edge_begin><edge_end>Conference Program()
Conference Program()<edge_begin><edge_end>Domain Topic()
Conference Program()<edge_begin><edge_end>Program chair()
Conference Program()<edge_begin><edge_end>Planed Paper()
Program Committee()<edge_begin><edge_end>Committees()
Member(Web address)<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Member(Web address)<edge_begin><edge_end>Participant(early Registration)
Member(Web address)<edge_begin><edge_end>String()
Planed Paper()<edge_begin><edge_end>Reviewed Paper()
Planed Paper()<edge_begin><edge_end>Conference Program()
Valuable Confirmation of Present Knowledge()<edge_begin><edge_end>Overall Value()
Other()<edge_begin><edge_end>Overall Value()
Not Much()<edge_begin><edge_end>Overall Value()
New Information()<edge_begin><edge_end>Overall Value()
New Perspective Issue Problem Solving()<edge_begin><edge_end>Overall Value()
Clarity to Present Understanding()<edge_begin><edge_end>Overall Value()
Overall Value()<edge_begin><edge_end>Review Values()
Tends Towards Theoretical()<edge_begin><edge_end>Paper Categorization()
Paper Categorization()<edge_begin><edge_end>Review Values()
Tends Towards Practical()<edge_begin><edge_end>Paper Categorization()
Balanced Theory and Practice()<edge_begin><edge_end>Paper Categorization()
Highly Theoretical()<edge_begin><edge_end>Paper Categorization()
Highly Practical()<edge_begin><edge_end>Paper Categorization()
Reviewed Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Paper File()
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>Contact Author(Alternate Email)
Submitted Paper(Paper Id, Comments To Chair)<edge_begin><edge_end>String()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Domain Topic()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Long bool()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Paper Categorization()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Overall Value()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reccommendation()
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Paper Review(Comments for Author, Comments for Program Committee)<edge_begin><edge_end>String()
Long bool()<edge_begin><edge_end>Value Partition()
Review Values()<edge_begin><edge_end>Value Partition()
Review Committee()<edge_begin><edge_end>Committees()
Committees()<edge_begin><edge_end>Domain Topic()
Paper File()<edge_begin><edge_end>Domain Topic()
Paper File()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Paper File()<edge_begin><edge_end>Format()
Advocate()<edge_begin><edge_end>Member(Web address)
Advocate()<edge_begin><edge_end>Advocated Paper()
Advocated Paper()<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Advocated Paper()<edge_begin><edge_end>Advocate()
Contact Author(Alternate Email)<edge_begin><edge_end>Author()
Contact Author(Alternate Email)<edge_begin><edge_end>Submitted Paper(Paper Id, Comments To Chair)
Contact Author(Alternate Email)<edge_begin><edge_end>String()
Result of Advocate()<edge_begin><edge_end>Value Partition()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>Domain Topic()
People(Surname, Name, Country, E-mail, Organisation)<edge_begin><edge_end>String()
Source Archive()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Camera Ready Copy()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Slides()<edge_begin><edge_end>Contribution File(has Contribution File Status)
Contribution File(has Contribution File Status)<edge_begin><edge_end>Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)
Program Comitee()<edge_begin><edge_end>Thing()
Program Comitee()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Conflict Of Interest()<edge_begin><edge_end>Thing()
Location()<edge_begin><edge_end>Event(starts on, ends on, has startdate, has enddate)
Conflict Rules()<edge_begin><edge_end>Thing()
Topic()<edge_begin><edge_end>Thing()
Topic()<edge_begin><edge_end>Review preference(has a degree)
Topic()<edge_begin><edge_end>Conference part()
Topic()<edge_begin><edge_end>Working event()
Topic()<edge_begin><edge_end>Activity(expected Attendance, is dated on)
Program Comitee Meeting()<edge_begin><edge_end>Thing()
Setup Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Camera Ready Copy Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Assignment Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Blocked Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Abstract And Paper Submission Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Invitation Of Reviewers Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Review Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Closed Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Bidding Phase()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Speaker()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Speaker()<edge_begin><edge_end>Delegate()
Program Comitee Chair()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Program Comitee Chair()<edge_begin><edge_end>Conference(has Name, end Date, paper Due On, registration Due On, manuscript Due On, start Date, annual Order, has Acronym, reviews Per Paper, logo URL, accepts Hardcopy Submissions, site URL)
Program Comitee Chair()<edge_begin><edge_end>Program Comitee()
Program Comitee Chair()<edge_begin><edge_end>Phase Of Conference Preparation(has Phase Status)
Program Comitee Chair()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Program Comitee Chair()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Author()<edge_begin><edge_end>People(Surname, Name, Country, E-mail, Organisation)
Author()<edge_begin><edge_end>Speaker()
Author()<edge_begin><edge_end>Person(has Mail, works For Company, has First Name, has Biography, has Last Name, has an email, has the first name, has gender, has the last name, has Home Page, has Surname, has Fax, has First Name, has Phone, has Email, has Affiliation, has First Name, has Last Name, has Email, has Name, email)
Author()<edge_begin><edge_end>Conference Member()
Author()<edge_begin><edge_end>User()
Author()<edge_begin><edge_end>Paper(full paper size, has Title, has ID, Abstract, Title, Students, Keywords, is Paper Type Of, has Bid, paper ID, title)
Author()<edge_begin><edge_end>Contribution(has Contribution Status, remark, abstract, contact Email, has Keyword, has Title)
Author()<edge_begin><edge_end>Article()
Author()<edge_begin><edge_end>Thing()
Author()<edge_begin><edge_end>Activity Submission Form(submission Deadline)
Confirmed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Pending Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Pending Proposed Conflict()<edge_begin><edge_end>Reviewer(User Name, Comments to Chair, Other Areas)
Hidden Conflict()<edge_begin><edge_end>Conflict Of Interest()
Deleted Conflict()<edge_begin><edge_end>Conflict Of Interest()
Proposed Conflict()<edge_begin><edge_end>Conflict Of Interest()
Proposed Conflict()<edge_begin><edge_end>Thing()
Self Conflict()<edge_begin><edge_end>Conflict Of Interest()
Main Author()<edge_begin><edge_end>Author()
Bidding And Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
Bidding Without Paper Submission Phase()<edge_begin><edge_end>Bidding Phase()
E-mail PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
PC Meeting()<edge_begin><edge_end>Program Comitee Meeting()
Valued Element(value)<edge_begin><edge_end>String()
CDATA()<edge_begin><edge_end>Valued Element(value)
PCDATA()<edge_begin><edge_end>Valued Element(value)
NMTOKEN()<edge_begin><edge_end>Valued Element(value)
IDREF()<edge_begin><edge_end>Valued Element(value)
IDREFS()<edge_begin><edge_end>IDREF()
ID()<edge_begin><edge_end>Valued Element(value)
Content Type()<edge_begin><edge_end>CDATA()
Content Types()<edge_begin><edge_end>Content Type()
Charset()<edge_begin><edge_end>CDATA()
Charsets()<edge_begin><edge_end>Charset()
Language Code()<edge_begin><edge_end>NMTOKEN()
Character()<edge_begin><edge_end>CDATA()
Number()<edge_begin><edge_end>CDATA()
Link Types()<edge_begin><edge_end>CDATA()
Media Desc()<edge_begin><edge_end>CDATA()
URI()<edge_begin><edge_end>CDATA()
Uri List()<edge_begin><edge_end>URI()
Datetime()<edge_begin><edge_end>CDATA()
Script Expression()<edge_begin><edge_end>CDATA()
Style Sheet()<edge_begin><edge_end>CDATA()
Text()<edge_begin><edge_end>CDATA()
Length()<edge_begin><edge_end>CDATA()
Multi Length()<edge_begin><edge_end>CDATA()
Pixels()<edge_begin><edge_end>CDATA()
Coords()<edge_begin><edge_end>Length()
Core Attrs()<edge_begin><edge_end>ID()
Core Attrs()<edge_begin><edge_end>CDATA()
Core Attrs()<edge_begin><edge_end>Style Sheet()
Core Attrs()<edge_begin><edge_end>Text()
I18n(dir)<edge_begin><edge_end>Language Code()
Events()<edge_begin><edge_end>Script Expression()
Attrs()<edge_begin><edge_end>Core Attrs()
Attrs()<edge_begin><edge_end>I18n(dir)
Attrs()<edge_begin><edge_end>Events()
Focus()<edge_begin><edge_end>Character()
Focus()<edge_begin><edge_end>Number()
Focus()<edge_begin><edge_end>Script Expression()
Specialpre()<edge_begin><edge_end>Special()
Specialpre()<edge_begin><edge_end>Pre Content()
Special()<edge_begin><edge_end>inline()
Special()<edge_begin><edge_end>Button Content()
Fontstyle()<edge_begin><edge_end>inline()
Fontstyle()<edge_begin><edge_end>A Content()
Fontstyle()<edge_begin><edge_end>Pre Content()
Fontstyle()<edge_begin><edge_end>Button Content()
Phrase()<edge_begin><edge_end>inline()
Phrase()<edge_begin><edge_end>A Content()
Phrase()<edge_begin><edge_end>Pre Content()
Phrase()<edge_begin><edge_end>Button Content()
Inlineforms()<edge_begin><edge_end>inline()
Inlineforms()<edge_begin><edge_end>A Content()
Inlineforms()<edge_begin><edge_end>Pre Content()
Miscinline()<edge_begin><edge_end>Misc()
Miscinline()<edge_begin><edge_end>Inline()
Miscinline()<edge_begin><edge_end>A Content()
Miscinline()<edge_begin><edge_end>Pre Content()
Misc()<edge_begin><edge_end>Block()
Misc()<edge_begin><edge_end>Flow()
Misc()<edge_begin><edge_end>Form Content()
Misc()<edge_begin><edge_end>Button Content()
Misc()<edge_begin><edge_end>Object Element()
Misc()<edge_begin><edge_end>Map Element Content()
Misc()<edge_begin><edge_end>Fieldset Element()
inline()<edge_begin><edge_end>Inline()
Inline()<edge_begin><edge_end>Flow()
Inline()<edge_begin><edge_end>Object Element()
Inline()<edge_begin><edge_end>Fieldset Element()
Inline()<edge_begin><edge_end>PCDATA()
Heading()<edge_begin><edge_end>block()
Heading()<edge_begin><edge_end>Button Content()
Lists()<edge_begin><edge_end>block()
Lists()<edge_begin><edge_end>Button Content()
Blocktext()<edge_begin><edge_end>block()
Blocktext()<edge_begin><edge_end>Button Content()
block()<edge_begin><edge_end>Block()
block()<edge_begin><edge_end>Flow()
block()<edge_begin><edge_end>Form Content()
block()<edge_begin><edge_end>Object Element()
block()<edge_begin><edge_end>Map Element Content()
block()<edge_begin><edge_end>Fieldset Element()
Flow()<edge_begin><edge_end>PCDATA()
A Content()<edge_begin><edge_end>PCDATA()
Pre Content()<edge_begin><edge_end>PCDATA()
Button Content()<edge_begin><edge_end>PCDATA()
Html()<edge_begin><edge_end>I18n(dir)
Html()<edge_begin><edge_end>ID()
Html()<edge_begin><edge_end>URI()
Html()<edge_begin><edge_end>Head()
Html()<edge_begin><edge_end>Body()
Head()<edge_begin><edge_end>I18n(dir)
Head()<edge_begin><edge_end>ID()
Head()<edge_begin><edge_end>URI()
Head()<edge_begin><edge_end>Head Misc()
Head()<edge_begin><edge_end>Head Element()
Head()<edge_begin><edge_end>Html()
Title Head Element()<edge_begin><edge_end>Head Element()
Title Head Element()<edge_begin><edge_end>Title()
Title Head Element()<edge_begin><edge_end>Head Misc()
Title Head Element()<edge_begin><edge_end>Base Title Head Element()
Base Title Head Element()<edge_begin><edge_end>Base()
Base Title Head Element()<edge_begin><edge_end>Head Misc()
Base Head Element()<edge_begin><edge_end>Head Element()
Base Head Element()<edge_begin><edge_end>Base()
Base Head Element()<edge_begin><edge_end>Head Misc()
Base Head Element()<edge_begin><edge_end>Title Base Head Element()
Title Base Head Element()<edge_begin><edge_end>Title()
Title Base Head Element()<edge_begin><edge_end>Head Misc()
Title()<edge_begin><edge_end>PCDATA()
Title()<edge_begin><edge_end>I18n(dir)
Title()<edge_begin><edge_end>ID()
Base()<edge_begin><edge_end>EMPTY()
Base()<edge_begin><edge_end>URI()
Base()<edge_begin><edge_end>ID()
Meta()<edge_begin><edge_end>EMPTY()
Meta()<edge_begin><edge_end>Head Misc()
Meta()<edge_begin><edge_end>I18n(dir)
Meta()<edge_begin><edge_end>ID()
Meta()<edge_begin><edge_end>CDATA()
Link()<edge_begin><edge_end>EMPTY()
Link()<edge_begin><edge_end>Attrs()
Link()<edge_begin><edge_end>Head Misc()
Link()<edge_begin><edge_end>Charset()
Link()<edge_begin><edge_end>URI()
Link()<edge_begin><edge_end>Language Code()
Link()<edge_begin><edge_end>Content Type()
Link()<edge_begin><edge_end>Link Types()
Link()<edge_begin><edge_end>Media Desc()
Style(xml:space)<edge_begin><edge_end>PCDATA()
Style(xml:space)<edge_begin><edge_end>Head Misc()
Style(xml:space)<edge_begin><edge_end>I18n(dir)
Style(xml:space)<edge_begin><edge_end>ID()
Style(xml:space)<edge_begin><edge_end>Content Type()
Style(xml:space)<edge_begin><edge_end>Media Desc()
Style(xml:space)<edge_begin><edge_end>Text()
Style(xml:space)<edge_begin><edge_end>String()
Script(defer, xml:space)<edge_begin><edge_end>PCDATA()
Script(defer, xml:space)<edge_begin><edge_end>Miscinline()
Script(defer, xml:space)<edge_begin><edge_end>Head Misc()
Script(defer, xml:space)<edge_begin><edge_end>ID()
Script(defer, xml:space)<edge_begin><edge_end>Charset()
Script(defer, xml:space)<edge_begin><edge_end>Content Type()
Script(defer, xml:space)<edge_begin><edge_end>URI()
Script(defer, xml:space)<edge_begin><edge_end>String()
Noscript()<edge_begin><edge_end>Attrs()
Noscript()<edge_begin><edge_end>Misc()
Noscript()<edge_begin><edge_end>Block()
Body()<edge_begin><edge_end>Attrs()
Body()<edge_begin><edge_end>Block()
Body()<edge_begin><edge_end>Script Expression()
Body()<edge_begin><edge_end>Html()
Div()<edge_begin><edge_end>Attrs()
Div()<edge_begin><edge_end>block()
Div()<edge_begin><edge_end>Button Content()
Div()<edge_begin><edge_end>Flow()
P()<edge_begin><edge_end>Attrs()
P()<edge_begin><edge_end>block()
P()<edge_begin><edge_end>Button Content()
P()<edge_begin><edge_end>Inline()
H1()<edge_begin><edge_end>Attrs()
H1()<edge_begin><edge_end>Heading()
H1()<edge_begin><edge_end>Inline()
H2()<edge_begin><edge_end>Attrs()
H2()<edge_begin><edge_end>Heading()
H2()<edge_begin><edge_end>Inline()
H3()<edge_begin><edge_end>Attrs()
H3()<edge_begin><edge_end>Heading()
H3()<edge_begin><edge_end>Inline()
H4()<edge_begin><edge_end>Attrs()
H4()<edge_begin><edge_end>Heading()
H4()<edge_begin><edge_end>Inline()
H5()<edge_begin><edge_end>Attrs()
H5()<edge_begin><edge_end>Heading()
H5()<edge_begin><edge_end>Inline()
H6()<edge_begin><edge_end>Attrs()
H6()<edge_begin><edge_end>Heading()
H6()<edge_begin><edge_end>Inline()
Ul()<edge_begin><edge_end>Attrs()
Ul()<edge_begin><edge_end>Lists()
Ul()<edge_begin><edge_end>Li()
Ol()<edge_begin><edge_end>Attrs()
Ol()<edge_begin><edge_end>Lists()
Ol()<edge_begin><edge_end>Li()
Li()<edge_begin><edge_end>Attrs()
Li()<edge_begin><edge_end>Flow()
Dl()<edge_begin><edge_end>Attrs()
Dl()<edge_begin><edge_end>Lists()
Dl()<edge_begin><edge_end>Dl Element()
Dl Element()<edge_begin><edge_end>Attrs()
Dt()<edge_begin><edge_end>Dl Element()
Dt()<edge_begin><edge_end>Inline()
Dd()<edge_begin><edge_end>Dl Element()
Dd()<edge_begin><edge_end>Flow()
Address()<edge_begin><edge_end>Attrs()
Address()<edge_begin><edge_end>Blocktext()
Address()<edge_begin><edge_end>Inline()
Hr()<edge_begin><edge_end>EMPTY()
Hr()<edge_begin><edge_end>Attrs()
Hr()<edge_begin><edge_end>Blocktext()
Pre(xml:space)<edge_begin><edge_end>Attrs()
Pre(xml:space)<edge_begin><edge_end>Blocktext()
Pre(xml:space)<edge_begin><edge_end>Pre Content()
Pre(xml:space)<edge_begin><edge_end>String()
Blockquote()<edge_begin><edge_end>Attrs()
Blockquote()<edge_begin><edge_end>Blocktext()
Blockquote()<edge_begin><edge_end>Block()
Blockquote()<edge_begin><edge_end>URI()
Ins()<edge_begin><edge_end>Attrs()
Ins()<edge_begin><edge_end>Miscinline()
Ins()<edge_begin><edge_end>Flow()
Ins()<edge_begin><edge_end>URI()
Ins()<edge_begin><edge_end>Datetime()
Del()<edge_begin><edge_end>Attrs()
Del()<edge_begin><edge_end>Miscinline()
Del()<edge_begin><edge_end>Flow()
Del()<edge_begin><edge_end>URI()
Del()<edge_begin><edge_end>Datetime()
A(shape)<edge_begin><edge_end>Attrs()
A(shape)<edge_begin><edge_end>Focus()
A(shape)<edge_begin><edge_end>inline()
A(shape)<edge_begin><edge_end>Pre Content()
A(shape)<edge_begin><edge_end>A Content()
A(shape)<edge_begin><edge_end>Charset()
A(shape)<edge_begin><edge_end>Content Type()
A(shape)<edge_begin><edge_end>NMTOKEN()
A(shape)<edge_begin><edge_end>URI()
A(shape)<edge_begin><edge_end>Language Code()
A(shape)<edge_begin><edge_end>Link Types()
A(shape)<edge_begin><edge_end>Coords()
Span()<edge_begin><edge_end>Attrs()
Span()<edge_begin><edge_end>Specialpre()
Span()<edge_begin><edge_end>Inline()
Bdo(dir)<edge_begin><edge_end>Core Attrs()
Bdo(dir)<edge_begin><edge_end>Events()
Bdo(dir)<edge_begin><edge_end>Specialpre()
Bdo(dir)<edge_begin><edge_end>Inline()
Bdo(dir)<edge_begin><edge_end>Language Code()
Br()<edge_begin><edge_end>EMPTY()
Br()<edge_begin><edge_end>Core Attrs()
Br()<edge_begin><edge_end>Specialpre()
Em()<edge_begin><edge_end>Attrs()
Em()<edge_begin><edge_end>Phrase()
Em()<edge_begin><edge_end>Inline()
Strong()<edge_begin><edge_end>Attrs()
Strong()<edge_begin><edge_end>Phrase()
Strong()<edge_begin><edge_end>Inline()
Dfn()<edge_begin><edge_end>Attrs()
Dfn()<edge_begin><edge_end>Phrase()
Dfn()<edge_begin><edge_end>Inline()
Code()<edge_begin><edge_end>Attrs()
Code()<edge_begin><edge_end>Phrase()
Code()<edge_begin><edge_end>Inline()
Samp()<edge_begin><edge_end>Attrs()
Samp()<edge_begin><edge_end>Phrase()
Samp()<edge_begin><edge_end>Inline()
Kbd()<edge_begin><edge_end>Attrs()
Kbd()<edge_begin><edge_end>Phrase()
Kbd()<edge_begin><edge_end>Inline()
Var()<edge_begin><edge_end>Attrs()
Var()<edge_begin><edge_end>Phrase()
Var()<edge_begin><edge_end>Inline()
Cite()<edge_begin><edge_end>Attrs()
Cite()<edge_begin><edge_end>Phrase()
Cite()<edge_begin><edge_end>Inline()
Abbr()<edge_begin><edge_end>Attrs()
Abbr()<edge_begin><edge_end>Phrase()
Abbr()<edge_begin><edge_end>Inline()
Acronym()<edge_begin><edge_end>Attrs()
Acronym()<edge_begin><edge_end>Phrase()
Acronym()<edge_begin><edge_end>Inline()
Q()<edge_begin><edge_end>Attrs()
Q()<edge_begin><edge_end>Phrase()
Q()<edge_begin><edge_end>Inline()
Q()<edge_begin><edge_end>URI()
Sub()<edge_begin><edge_end>Attrs()
Sub()<edge_begin><edge_end>Phrase()
Sub()<edge_begin><edge_end>Inline()
Sup()<edge_begin><edge_end>Attrs()
Sup()<edge_begin><edge_end>Phrase()
Sup()<edge_begin><edge_end>Inline()
Tt()<edge_begin><edge_end>Attrs()
Tt()<edge_begin><edge_end>Fontstyle()
Tt()<edge_begin><edge_end>Inline()
I()<edge_begin><edge_end>Attrs()
I()<edge_begin><edge_end>Fontstyle()
I()<edge_begin><edge_end>Inline()
B()<edge_begin><edge_end>Attrs()
B()<edge_begin><edge_end>Fontstyle()
B()<edge_begin><edge_end>Inline()
Big()<edge_begin><edge_end>Attrs()
Big()<edge_begin><edge_end>Fontstyle()
Big()<edge_begin><edge_end>Inline()
Small()<edge_begin><edge_end>Attrs()
Small()<edge_begin><edge_end>Fontstyle()
Small()<edge_begin><edge_end>Inline()
Object Element()<edge_begin><edge_end>PCDATA()
Object(declare)<edge_begin><edge_end>Attrs()
Object(declare)<edge_begin><edge_end>Special()
Object(declare)<edge_begin><edge_end>Head Misc()
Object(declare)<edge_begin><edge_end>Object Element()
Object(declare)<edge_begin><edge_end>Boolean()
Object(declare)<edge_begin><edge_end>URI()
Object(declare)<edge_begin><edge_end>Content Type()
Object(declare)<edge_begin><edge_end>Uri List()
Object(declare)<edge_begin><edge_end>Text()
Object(declare)<edge_begin><edge_end>Length()
Object(declare)<edge_begin><edge_end>NMTOKEN()
Object(declare)<edge_begin><edge_end>Number()
Param(valuetype)<edge_begin><edge_end>EMPTY()
Param(valuetype)<edge_begin><edge_end>Object Element()
Param(valuetype)<edge_begin><edge_end>ID()
Param(valuetype)<edge_begin><edge_end>CDATA()
Param(valuetype)<edge_begin><edge_end>Content Type()
Img(ismap)<edge_begin><edge_end>EMPTY()
Img(ismap)<edge_begin><edge_end>Attrs()
Img(ismap)<edge_begin><edge_end>Special()
Img(ismap)<edge_begin><edge_end>URI()
Img(ismap)<edge_begin><edge_end>Text()
Img(ismap)<edge_begin><edge_end>Length()
Img(ismap)<edge_begin><edge_end>Boolean()
Map Content()<edge_begin><edge_end>Map Element()
Map()<edge_begin><edge_end>I18n(dir)
Map()<edge_begin><edge_end>Events()
Map()<edge_begin><edge_end>Specialpre()
Map()<edge_begin><edge_end>Map Content()
Map()<edge_begin><edge_end>ID()
Map()<edge_begin><edge_end>CDATA()
Map()<edge_begin><edge_end>Style Sheet()
Map()<edge_begin><edge_end>Text()
Map()<edge_begin><edge_end>NMTOKEN()
Area(shape, nohref)<edge_begin><edge_end>EMPTY()
Area(shape, nohref)<edge_begin><edge_end>Attrs()
Area(shape, nohref)<edge_begin><edge_end>Focus()
Area(shape, nohref)<edge_begin><edge_end>Map Element()
Area(shape, nohref)<edge_begin><edge_end>Coords()
Area(shape, nohref)<edge_begin><edge_end>URI()
Area(shape, nohref)<edge_begin><edge_end>Boolean()
Area(shape, nohref)<edge_begin><edge_end>Text()
Form(method)<edge_begin><edge_end>Attrs()
Form(method)<edge_begin><edge_end>Block()
Form(method)<edge_begin><edge_end>Object Element()
Form(method)<edge_begin><edge_end>Map Element Content()
Form(method)<edge_begin><edge_end>Fieldset Element()
Form(method)<edge_begin><edge_end>Form Content()
Form(method)<edge_begin><edge_end>URI()
Form(method)<edge_begin><edge_end>Content Type()
Form(method)<edge_begin><edge_end>Script Expression()
Form(method)<edge_begin><edge_end>Content Types()
Form(method)<edge_begin><edge_end>Charsets()
Label()<edge_begin><edge_end>Attrs()
Label()<edge_begin><edge_end>Inlineforms()
Label()<edge_begin><edge_end>Inline()
Label()<edge_begin><edge_end>IDREF()
Label()<edge_begin><edge_end>Character()
Label()<edge_begin><edge_end>Script Expression()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>EMPTY()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Attrs()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Focus()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Inlineforms()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>CDATA()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Boolean()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Number()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>URI()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Script Expression()
Input(type, checked, disabled, readonly)<edge_begin><edge_end>Content Types()
Select(multiple, disabled)<edge_begin><edge_end>Attrs()
Select(multiple, disabled)<edge_begin><edge_end>Inlineforms()
Select(multiple, disabled)<edge_begin><edge_end>Select Element()
Select(multiple, disabled)<edge_begin><edge_end>CDATA()
Select(multiple, disabled)<edge_begin><edge_end>Number()
Select(multiple, disabled)<edge_begin><edge_end>Boolean()
Select(multiple, disabled)<edge_begin><edge_end>Script Expression()
Optgroup(disabled)<edge_begin><edge_end>Select Element()
Optgroup(disabled)<edge_begin><edge_end>Attrs()
Optgroup(disabled)<edge_begin><edge_end>Option(selected, disabled)
Optgroup(disabled)<edge_begin><edge_end>Boolean()
Optgroup(disabled)<edge_begin><edge_end>Text()
Option(selected, disabled)<edge_begin><edge_end>Select Element()
Option(selected, disabled)<edge_begin><edge_end>PCDATA()
Option(selected, disabled)<edge_begin><edge_end>Attrs()
Option(selected, disabled)<edge_begin><edge_end>Boolean()
Option(selected, disabled)<edge_begin><edge_end>Text()
Option(selected, disabled)<edge_begin><edge_end>CDATA()
Textarea(disabled, readonly)<edge_begin><edge_end>PCDATA()
Textarea(disabled, readonly)<edge_begin><edge_end>Attrs()
Textarea(disabled, readonly)<edge_begin><edge_end>Focus()
Textarea(disabled, readonly)<edge_begin><edge_end>Inlineforms()
Textarea(disabled, readonly)<edge_begin><edge_end>CDATA()
Textarea(disabled, readonly)<edge_begin><edge_end>Number()
Textarea(disabled, readonly)<edge_begin><edge_end>Boolean()
Textarea(disabled, readonly)<edge_begin><edge_end>Script Expression()
Fieldset Element()<edge_begin><edge_end>PCDATA()
Fieldset()<edge_begin><edge_end>Attrs()
Fieldset()<edge_begin><edge_end>block()
Fieldset()<edge_begin><edge_end>Fieldset Element()
Legend()<edge_begin><edge_end>Attrs()
Legend()<edge_begin><edge_end>Fieldset Element()
Legend()<edge_begin><edge_end>Inline()
Legend()<edge_begin><edge_end>Character()
Button(type, disabled)<edge_begin><edge_end>Attrs()
Button(type, disabled)<edge_begin><edge_end>Focus()
Button(type, disabled)<edge_begin><edge_end>Inlineforms()
Button(type, disabled)<edge_begin><edge_end>Button Content()
Button(type, disabled)<edge_begin><edge_end>CDATA()
Button(type, disabled)<edge_begin><edge_end>Boolean()
Cellhalign(align)<edge_begin><edge_end>Character()
Cellhalign(align)<edge_begin><edge_end>Length()
Table(frame, rules)<edge_begin><edge_end>Attrs()
Table(frame, rules)<edge_begin><edge_end>block()
Table(frame, rules)<edge_begin><edge_end>Button Content()
Table(frame, rules)<edge_begin><edge_end>Caption()
Table(frame, rules)<edge_begin><edge_end>Col Element()
Table(frame, rules)<edge_begin><edge_end>Thead()
Table(frame, rules)<edge_begin><edge_end>Tfoot()
Table(frame, rules)<edge_begin><edge_end>Table Element()
Table(frame, rules)<edge_begin><edge_end>Text()
Table(frame, rules)<edge_begin><edge_end>Length()
Table(frame, rules)<edge_begin><edge_end>Pixels()
Col Element()<edge_begin><edge_end>Col()
Col Element()<edge_begin><edge_end>Colgroup()
Table Element()<edge_begin><edge_end>Tbody()
Table Element()<edge_begin><edge_end>Tr()
Caption()<edge_begin><edge_end>Attrs()
Caption()<edge_begin><edge_end>Inline()
Thead()<edge_begin><edge_end>Attrs()
Thead()<edge_begin><edge_end>Cellhalign(align)
Thead()<edge_begin><edge_end>Cellvalign(valign)
Thead()<edge_begin><edge_end>Tr()
Tfoot()<edge_begin><edge_end>Attrs()
Tfoot()<edge_begin><edge_end>Cellhalign(align)
Tfoot()<edge_begin><edge_end>Cellvalign(valign)
Tfoot()<edge_begin><edge_end>Tr()
Tbody()<edge_begin><edge_end>Attrs()
Tbody()<edge_begin><edge_end>Cellhalign(align)
Tbody()<edge_begin><edge_end>Cellvalign(valign)
Tbody()<edge_begin><edge_end>Tr()
Colgroup()<edge_begin><edge_end>Attrs()
Colgroup()<edge_begin><edge_end>Cellhalign(align)
Colgroup()<edge_begin><edge_end>Cellvalign(valign)
Colgroup()<edge_begin><edge_end>Col()
Colgroup()<edge_begin><edge_end>Number()
Colgroup()<edge_begin><edge_end>Multi Length()
Col()<edge_begin><edge_end>EMPTY()
Col()<edge_begin><edge_end>Attrs()
Col()<edge_begin><edge_end>Cellhalign(align)
Col()<edge_begin><edge_end>Cellvalign(valign)
Col()<edge_begin><edge_end>Number()
Col()<edge_begin><edge_end>Multi Length()
Tr()<edge_begin><edge_end>Attrs()
Tr()<edge_begin><edge_end>Cellhalign(align)
Tr()<edge_begin><edge_end>Cellvalign(valign)
Tr()<edge_begin><edge_end>Tr Element()
Th(scope)<edge_begin><edge_end>Tr Element()
Th(scope)<edge_begin><edge_end>Attrs()
Th(scope)<edge_begin><edge_end>Cellvalign(valign)
Th(scope)<edge_begin><edge_end>Cellhalign(align)
Th(scope)<edge_begin><edge_end>Flow()
Th(scope)<edge_begin><edge_end>Text()
Th(scope)<edge_begin><edge_end>CDATA()
Th(scope)<edge_begin><edge_end>IDREFS()
Th(scope)<edge_begin><edge_end>Number()
Td(scope)<edge_begin><edge_end>Tr Element()
Td(scope)<edge_begin><edge_end>Attrs()
Td(scope)<edge_begin><edge_end>Cellvalign(valign)
Td(scope)<edge_begin><edge_end>Cellhalign(align)
Td(scope)<edge_begin><edge_end>Flow()
Td(scope)<edge_begin><edge_end>Text()
Td(scope)<edge_begin><edge_end>CDATA()
Td(scope)<edge_begin><edge_end>IDREFS()
Td(scope)<edge_begin><edge_end>Number()
Article(journal, volume, number, pages, note)<edge_begin><edge_end>Entries()
Article(journal, volume, number, pages, note)<edge_begin><edge_end>Authored Entry()
Article(journal, volume, number, pages, note)<edge_begin><edge_end>Dated Entry(year)
Article(journal, volume, number, pages, note)<edge_begin><edge_end>Month Entry(month)
Bibtex()<edge_begin><edge_end>Entries()
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Entries()
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Authored Entry()
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Dated Entry(year)
Book(publisher, volume, series, address, edition)<edge_begin><edge_end>Month Entry(month)
Authored Entry()<edge_begin><edge_end>Entries()
Author(name, surname)<edge_begin><edge_end>Authored Entry()
Dated Entry(year)<edge_begin><edge_end>Entries()
Month Entry(month)<edge_begin><edge_end>Entries()
Date Time Type(year, month, day, hour, minute, second)<edge_begin><edge_end>Integer()
Value Type()<edge_begin><edge_end>Data()
String Value(value)<edge_begin><edge_end>Value Type()
String Value(value)<edge_begin><edge_end>String()
Number Value(value)<edge_begin><edge_end>Value Type()
Number Value(value)<edge_begin><edge_end>Double()
Date Time Type Value()<edge_begin><edge_end>Value Type()
Date Time Type Value()<edge_begin><edge_end>Date Time Type(year, month, day, hour, minute, second)
Boolean Value(value)<edge_begin><edge_end>Value Type()
Boolean Value(value)<edge_begin><edge_end>Boolean()
Error Value()<edge_begin><edge_end>Value Type()
Workbook()<edge_begin><edge_end>Worksheet(name)
Worksheet(name)<edge_begin><edge_end>Workbook()
Worksheet(name)<edge_begin><edge_end>Table()
Worksheet(name)<edge_begin><edge_end>String()
Table()<edge_begin><edge_end>Worksheet(name)
Table()<edge_begin><edge_end>Column(auto Fit Width, width)
Table()<edge_begin><edge_end>Row(auto Fit Height, height)
Table Element(index)<edge_begin><edge_end>Integer()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Table Element(index)
Col Or Row Element(hidden, span)<edge_begin><edge_end>Boolean()
Col Or Row Element(hidden, span)<edge_begin><edge_end>Integer()
Column(auto Fit Width, width)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Column(auto Fit Width, width)<edge_begin><edge_end>Table()
Column(auto Fit Width, width)<edge_begin><edge_end>Boolean()
Column(auto Fit Width, width)<edge_begin><edge_end>Double()
Row(auto Fit Height, height)<edge_begin><edge_end>Col Or Row Element(hidden, span)
Row(auto Fit Height, height)<edge_begin><edge_end>Table()
Row(auto Fit Height, height)<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Row(auto Fit Height, height)<edge_begin><edge_end>Boolean()
Row(auto Fit Height, height)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Table Element(index)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Row(auto Fit Height, height)
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>String()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Double()
Cell(array Range, formula, h Ref, merge Across, merge Down)<edge_begin><edge_end>Data()
Data()<edge_begin><edge_end>Cell(array Range, formula, h Ref, merge Across, merge Down)
Data()<edge_begin><edge_end>Value Type()
Binding Parser()<edge_begin><edge_end>Statement Parser()
Binding Parse Result()<edge_begin><edge_end>Binding Statement()
Binding Parse Result()<edge_begin><edge_end>Binding Parse Error()
Definition Parser()<edge_begin><edge_end>Statement Parser()
Definition Parse Result()<edge_begin><edge_end>Definition Statement()
Definition Parse Result()<edge_begin><edge_end>Definition Parse Error()
Definition Writer()<edge_begin><edge_end>Statement Writer()
Name Helper()<edge_begin><edge_end>SQL Object Name Helper()
Query Writer()<edge_begin><edge_end>Statement Writer()
Query Parser()<edge_begin><edge_end>Statement Parser()
Statement Writer()<edge_begin><edge_end>Name Helper()
Call Statement(parms)<edge_begin><edge_end>Definition Statement()
Commit Statement(hold)<edge_begin><edge_end>Definition Statement()
Connect Statement(pwd, reset, to, user)<edge_begin><edge_end>Definition Statement()
Create Alias Statement()<edge_begin><edge_end>Definition Statement()
Create Index Statement(unique)<edge_begin><edge_end>Definition Statement()
Create Table Statement()<edge_begin><edge_end>Definition Statement()
Create View Statement(fields, query)<edge_begin><edge_end>Definition Statement()
Disconnect Statement(target)<edge_begin><edge_end>Definition Statement()
Drop Statement(range, target)<edge_begin><edge_end>Definition Statement()
Lock Table Statement(allow Read, share Mode)<edge_begin><edge_end>Definition Statement()
Release Statement(server Name)<edge_begin><edge_end>Definition Statement()
Rename Statement(new Name, system, target)<edge_begin><edge_end>Definition Statement()
Rollback Statement(hold)<edge_begin><edge_end>Definition Statement()
Set Connection Statement(database Name)<edge_begin><edge_end>Definition Statement()
Extended Query Select()<edge_begin><edge_end>Extended Query Expression Body(optimize Records Number)
Allocate Descriptor Statement(descriptor Name, descriptor Scope, with Max)<edge_begin><edge_end>Binding Statement()
Close Statement(cursor)<edge_begin><edge_end>Binding Statement()
Condition Info Clause(condition)<edge_begin><edge_end>Option(name, value)
Deallocate Descriptor Statement(descriptor Name, descriptor Scope)<edge_begin><edge_end>Binding Statement()
Declare Cursor Statement(cursor Name, cursor Type, for Query, for Statement Name, hold)<edge_begin><edge_end>Binding Statement()
Describe Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Describe Statement(statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)
Execute Immediate Statement(variable)<edge_begin><edge_end>Binding Statement()
Execute Statement(statement Name)<edge_begin><edge_end>Binding Statement()
Fetch Statement(cursor Name, position, relative Position)<edge_begin><edge_end>Binding Statement()
Fetch Statement(cursor Name, position, relative Position)<edge_begin><edge_end>Multiple Row Fetch Clause(into, rows Number, using Descriptor, descriptor)
Fetch Statement(cursor Name, position, relative Position)<edge_begin><edge_end>Single Row Fetch Clause(into, using Descriptor)
Get Descriptor Statement(descriptor Name, descriptor Scope, value)<edge_begin><edge_end>Binding Statement()
Get Descriptor Statement(descriptor Name, descriptor Scope, value)<edge_begin><edge_end>Option(name, value)
Get Diagnostics Statement()<edge_begin><edge_end>Binding Statement()
Get Diagnostics Statement()<edge_begin><edge_end>Condition Info Clause(condition)
Set Descriptor Statement(descriptor Name, value)<edge_begin><edge_end>Binding Statement()
Set Descriptor Statement(descriptor Name, value)<edge_begin><edge_end>Option(name, value)
Set Transaction Statement(isolation Level, rw Operation)<edge_begin><edge_end>Binding Statement()
Set Option Statement()<edge_begin><edge_end>Binding Statement()
Set Option Statement()<edge_begin><edge_end>Option(name, value)
Open Statement(cursor, using, using Type)<edge_begin><edge_end>Binding Statement()
Prepare Statement(from, statement Name)<edge_begin><edge_end>Binding Statement()
Prepare Statement(from, statement Name)<edge_begin><edge_end>Into Clause(descriptor Name, using)